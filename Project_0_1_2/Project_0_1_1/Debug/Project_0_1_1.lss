
Project_0_1_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000017ca  0000185e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000132  0080011c  0080011c  0000187a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002914  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001167  00000000  00000000  00004d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  00005ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bc  00000000  00000000  00006444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bc4  00000000  00000000  00006a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000085c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_20>
      54:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ea ec       	ldi	r30, 0xCA	; 202
      90:	f7 e1       	ldi	r31, 0x17	; 23
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ac 31       	cpi	r26, 0x1C	; 28
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	ac e1       	ldi	r26, 0x1C	; 28
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ae 34       	cpi	r26, 0x4E	; 78
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 b7 07 	call	0xf6e	; 0xf6e <main>
      b2:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
      ba:	af 92       	push	r10
      bc:	bf 92       	push	r11
      be:	df 92       	push	r13
      c0:	ef 92       	push	r14
      c2:	ff 92       	push	r15
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	66 23       	and	r22, r22
      ce:	c9 f1       	breq	.+114    	; 0x142 <mpu6050_readBytes+0x88>
      d0:	c5 2f       	mov	r28, r21
      d2:	d4 2f       	mov	r29, r20
      d4:	d6 2e       	mov	r13, r22
      d6:	18 2f       	mov	r17, r24
      d8:	80 ed       	ldi	r24, 0xD0	; 208
      da:	0e 94 16 08 	call	0x102c	; 0x102c <i2c_start>
      de:	81 2f       	mov	r24, r17
      e0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <i2c_write>
      e4:	61 e0       	ldi	r22, 0x01	; 1
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
      f0:	81 ed       	ldi	r24, 0xD1	; 209
      f2:	0e 94 16 08 	call	0x102c	; 0x102c <i2c_start>
      f6:	0d 2f       	mov	r16, r29
      f8:	1c 2f       	mov	r17, r28
      fa:	ee 24       	eor	r14, r14
      fc:	ea 94       	dec	r14
      fe:	ed 0c       	add	r14, r13
     100:	f1 2c       	mov	r15, r1
     102:	8f ef       	ldi	r24, 0xFF	; 255
     104:	e8 1a       	sub	r14, r24
     106:	f8 0a       	sbc	r15, r24
     108:	c0 e0       	ldi	r28, 0x00	; 0
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	ad 2c       	mov	r10, r13
     10e:	b1 2c       	mov	r11, r1
     110:	e1 e0       	ldi	r30, 0x01	; 1
     112:	ae 1a       	sub	r10, r30
     114:	b1 08       	sbc	r11, r1
     116:	ca 15       	cp	r28, r10
     118:	db 05       	cpc	r29, r11
     11a:	29 f4       	brne	.+10     	; 0x126 <mpu6050_readBytes+0x6c>
     11c:	0e 94 a7 08 	call	0x114e	; 0x114e <i2c_readNak>
     120:	f8 01       	movw	r30, r16
     122:	80 83       	st	Z, r24
     124:	04 c0       	rjmp	.+8      	; 0x12e <mpu6050_readBytes+0x74>
     126:	0e 94 8d 08 	call	0x111a	; 0x111a <i2c_readAck>
     12a:	f8 01       	movw	r30, r16
     12c:	80 83       	st	Z, r24
     12e:	21 96       	adiw	r28, 0x01	; 1
     130:	0f 5f       	subi	r16, 0xFF	; 255
     132:	1f 4f       	sbci	r17, 0xFF	; 255
     134:	ce 15       	cp	r28, r14
     136:	df 05       	cpc	r29, r15
     138:	71 f7       	brne	.-36     	; 0x116 <mpu6050_readBytes+0x5c>
     13a:	cd 2d       	mov	r28, r13
     13c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <i2c_stop>
     140:	01 c0       	rjmp	.+2      	; 0x144 <mpu6050_readBytes+0x8a>
     142:	c0 e0       	ldi	r28, 0x00	; 0
     144:	8c 2f       	mov	r24, r28
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	ff 90       	pop	r15
     150:	ef 90       	pop	r14
     152:	df 90       	pop	r13
     154:	bf 90       	pop	r11
     156:	af 90       	pop	r10
     158:	08 95       	ret

0000015a <mpu6050_readByte>:
     15a:	ab 01       	movw	r20, r22
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	0e 94 5d 00 	call	0xba	; 0xba <mpu6050_readBytes>
     162:	08 95       	ret

00000164 <mpu6050_writeBytes>:
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	66 23       	and	r22, r22
     172:	d1 f0       	breq	.+52     	; 0x1a8 <mpu6050_writeBytes+0x44>
     174:	7a 01       	movw	r14, r20
     176:	16 2f       	mov	r17, r22
     178:	c8 2f       	mov	r28, r24
     17a:	80 ed       	ldi	r24, 0xD0	; 208
     17c:	0e 94 16 08 	call	0x102c	; 0x102c <i2c_start>
     180:	8c 2f       	mov	r24, r28
     182:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <i2c_write>
     186:	e7 01       	movw	r28, r14
     188:	6f ef       	ldi	r22, 0xFF	; 255
     18a:	61 0f       	add	r22, r17
     18c:	06 2f       	mov	r16, r22
     18e:	10 e0       	ldi	r17, 0x00	; 0
     190:	0f 5f       	subi	r16, 0xFF	; 255
     192:	1f 4f       	sbci	r17, 0xFF	; 255
     194:	0e 0d       	add	r16, r14
     196:	1f 1d       	adc	r17, r15
     198:	89 91       	ld	r24, Y+
     19a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <i2c_write>
     19e:	c0 17       	cp	r28, r16
     1a0:	d1 07       	cpc	r29, r17
     1a2:	d1 f7       	brne	.-12     	; 0x198 <mpu6050_writeBytes+0x34>
     1a4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <i2c_stop>
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	08 95       	ret

000001b6 <mpu6050_writeByte>:
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	1f 92       	push	r1
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	69 83       	std	Y+1, r22	; 0x01
     1c2:	ae 01       	movw	r20, r28
     1c4:	4f 5f       	subi	r20, 0xFF	; 255
     1c6:	5f 4f       	sbci	r21, 0xFF	; 255
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	0e 94 b2 00 	call	0x164	; 0x164 <mpu6050_writeBytes>
     1ce:	0f 90       	pop	r0
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <mpu6050_writeBits>:
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	1f 92       	push	r1
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	44 23       	and	r20, r20
     1ea:	89 f1       	breq	.+98     	; 0x24e <mpu6050_writeBits+0x78>
     1ec:	f2 2e       	mov	r15, r18
     1ee:	14 2f       	mov	r17, r20
     1f0:	06 2f       	mov	r16, r22
     1f2:	e8 2e       	mov	r14, r24
     1f4:	19 82       	std	Y+1, r1	; 0x01
     1f6:	be 01       	movw	r22, r28
     1f8:	6f 5f       	subi	r22, 0xFF	; 255
     1fa:	7f 4f       	sbci	r23, 0xFF	; 255
     1fc:	0e 94 ad 00 	call	0x15a	; 0x15a <mpu6050_readByte>
     200:	88 23       	and	r24, r24
     202:	29 f1       	breq	.+74     	; 0x24e <mpu6050_writeBits+0x78>
     204:	40 2f       	mov	r20, r16
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	41 1b       	sub	r20, r17
     20a:	51 09       	sbc	r21, r1
     20c:	4f 5f       	subi	r20, 0xFF	; 255
     20e:	5f 4f       	sbci	r21, 0xFF	; 255
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <mpu6050_writeBits+0x44>
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	1a 95       	dec	r17
     21c:	e2 f7       	brpl	.-8      	; 0x216 <mpu6050_writeBits+0x40>
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	04 2e       	mov	r0, r20
     222:	02 c0       	rjmp	.+4      	; 0x228 <mpu6050_writeBits+0x52>
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	0a 94       	dec	r0
     22a:	e2 f7       	brpl	.-8      	; 0x224 <mpu6050_writeBits+0x4e>
     22c:	2f 2d       	mov	r18, r15
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	02 c0       	rjmp	.+4      	; 0x236 <mpu6050_writeBits+0x60>
     232:	22 0f       	add	r18, r18
     234:	33 1f       	adc	r19, r19
     236:	4a 95       	dec	r20
     238:	e2 f7       	brpl	.-8      	; 0x232 <mpu6050_writeBits+0x5c>
     23a:	68 2f       	mov	r22, r24
     23c:	60 95       	com	r22
     23e:	99 81       	ldd	r25, Y+1	; 0x01
     240:	69 23       	and	r22, r25
     242:	82 23       	and	r24, r18
     244:	68 2b       	or	r22, r24
     246:	69 83       	std	Y+1, r22	; 0x01
     248:	8e 2d       	mov	r24, r14
     24a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mpu6050_writeByte>
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	08 95       	ret

0000025e <mpu6050_writeBit>:
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	18 2f       	mov	r17, r24
     270:	06 2f       	mov	r16, r22
     272:	f4 2e       	mov	r15, r20
     274:	be 01       	movw	r22, r28
     276:	6f 5f       	subi	r22, 0xFF	; 255
     278:	7f 4f       	sbci	r23, 0xFF	; 255
     27a:	0e 94 ad 00 	call	0x15a	; 0x15a <mpu6050_readByte>
     27e:	ff 20       	and	r15, r15
     280:	59 f0       	breq	.+22     	; 0x298 <mpu6050_writeBit+0x3a>
     282:	21 e0       	ldi	r18, 0x01	; 1
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	b9 01       	movw	r22, r18
     288:	02 c0       	rjmp	.+4      	; 0x28e <mpu6050_writeBit+0x30>
     28a:	66 0f       	add	r22, r22
     28c:	77 1f       	adc	r23, r23
     28e:	0a 95       	dec	r16
     290:	e2 f7       	brpl	.-8      	; 0x28a <mpu6050_writeBit+0x2c>
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	68 2b       	or	r22, r24
     296:	0b c0       	rjmp	.+22     	; 0x2ae <mpu6050_writeBit+0x50>
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	b9 01       	movw	r22, r18
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <mpu6050_writeBit+0x46>
     2a0:	66 0f       	add	r22, r22
     2a2:	77 1f       	adc	r23, r23
     2a4:	0a 95       	dec	r16
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <mpu6050_writeBit+0x42>
     2a8:	60 95       	com	r22
     2aa:	99 81       	ldd	r25, Y+1	; 0x01
     2ac:	69 23       	and	r22, r25
     2ae:	69 83       	std	Y+1, r22	; 0x01
     2b0:	81 2f       	mov	r24, r17
     2b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mpu6050_writeByte>
     2b6:	0f 90       	pop	r0
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	08 95       	ret

000002c4 <mpu6050_setSleepDisabled>:
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	66 e0       	ldi	r22, 0x06	; 6
     2c8:	8b e6       	ldi	r24, 0x6B	; 107
     2ca:	0e 94 2f 01 	call	0x25e	; 0x25e <mpu6050_writeBit>
     2ce:	08 95       	ret

000002d0 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     2d0:	0e 94 10 08 	call	0x1020	; 0x1020 <i2c_init>
	custom_delay(1);
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	#endif

	//allow mpu6050 chip clocks to start up
	custom_delay(100);
     2e0:	64 e6       	ldi	r22, 0x64	; 100
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>

	//set sleep disabled
	mpu6050_setSleepDisabled();
     2ec:	0e 94 62 01 	call	0x2c4	; 0x2c4 <mpu6050_setSleepDisabled>
	//wake up delay needed sleep disabled
	custom_delay(10);
     2f0:	6a e0       	ldi	r22, 0x0A	; 10
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	43 e0       	ldi	r20, 0x03	; 3
     300:	62 e0       	ldi	r22, 0x02	; 2
     302:	8b e6       	ldi	r24, 0x6B	; 107
     304:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     308:	23 e0       	ldi	r18, 0x03	; 3
     30a:	43 e0       	ldi	r20, 0x03	; 3
     30c:	62 e0       	ldi	r22, 0x02	; 2
     30e:	8a e1       	ldi	r24, 0x1A	; 26
     310:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     314:	64 e0       	ldi	r22, 0x04	; 4
     316:	89 e1       	ldi	r24, 0x19	; 25
     318:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     31c:	23 e0       	ldi	r18, 0x03	; 3
     31e:	42 e0       	ldi	r20, 0x02	; 2
     320:	64 e0       	ldi	r22, 0x04	; 4
     322:	8b e1       	ldi	r24, 0x1B	; 27
     324:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	42 e0       	ldi	r20, 0x02	; 2
     32c:	64 e0       	ldi	r22, 0x04	; 4
     32e:	8c e1       	ldi	r24, 0x1C	; 28
     330:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mpu6050_writeBits>
     334:	08 95       	ret

00000336 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(info* info_ptr, int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     336:	6f 92       	push	r6
     338:	7f 92       	push	r7
     33a:	8f 92       	push	r8
     33c:	9f 92       	push	r9
     33e:	af 92       	push	r10
     340:	bf 92       	push	r11
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	ec 01       	movw	r28, r24
     354:	4b 01       	movw	r8, r22
     356:	5a 01       	movw	r10, r20
     358:	39 01       	movw	r6, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     35a:	42 e2       	ldi	r20, 0x22	; 34
     35c:	51 e0       	ldi	r21, 0x01	; 1
     35e:	6e e0       	ldi	r22, 0x0E	; 14
     360:	8b e3       	ldi	r24, 0x3B	; 59
     362:	0e 94 5d 00 	call	0xba	; 0xba <mpu6050_readBytes>
	uint32_t currentTime = get_tcnt0_ticks();
     366:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_tcnt0_ticks>

	info_ptr->sample = currentTime - info_ptr->prevSample;
     36a:	28 81       	ld	r18, Y
     36c:	39 81       	ldd	r19, Y+1	; 0x01
     36e:	ab 01       	movw	r20, r22
     370:	42 1b       	sub	r20, r18
     372:	53 0b       	sbc	r21, r19
     374:	5b 83       	std	Y+3, r21	; 0x03
     376:	4a 83       	std	Y+2, r20	; 0x02
	info_ptr->prevSample = currentTime;
     378:	79 83       	std	Y+1, r23	; 0x01
     37a:	68 83       	st	Y, r22
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     37c:	e2 e2       	ldi	r30, 0x22	; 34
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	20 81       	ld	r18, Z
     382:	81 81       	ldd	r24, Z+1	; 0x01
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	92 2b       	or	r25, r18
     388:	d4 01       	movw	r26, r8
     38a:	8d 93       	st	X+, r24
     38c:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     38e:	22 81       	ldd	r18, Z+2	; 0x02
     390:	83 81       	ldd	r24, Z+3	; 0x03
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	92 2b       	or	r25, r18
     396:	d5 01       	movw	r26, r10
     398:	8d 93       	st	X+, r24
     39a:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     39c:	24 81       	ldd	r18, Z+4	; 0x04
     39e:	85 81       	ldd	r24, Z+5	; 0x05
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	92 2b       	or	r25, r18
     3a4:	d3 01       	movw	r26, r6
     3a6:	8d 93       	st	X+, r24
     3a8:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     3aa:	20 85       	ldd	r18, Z+8	; 0x08
     3ac:	81 85       	ldd	r24, Z+9	; 0x09
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	92 2b       	or	r25, r18
     3b2:	d8 01       	movw	r26, r16
     3b4:	8d 93       	st	X+, r24
     3b6:	9c 93       	st	X, r25
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     3b8:	22 85       	ldd	r18, Z+10	; 0x0a
     3ba:	83 85       	ldd	r24, Z+11	; 0x0b
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	92 2b       	or	r25, r18
     3c0:	d7 01       	movw	r26, r14
     3c2:	8d 93       	st	X+, r24
     3c4:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     3c6:	24 85       	ldd	r18, Z+12	; 0x0c
     3c8:	85 85       	ldd	r24, Z+13	; 0x0d
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	92 2b       	or	r25, r18
     3ce:	f6 01       	movw	r30, r12
     3d0:	91 83       	std	Z+1, r25	; 0x01
     3d2:	80 83       	st	Z, r24

}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	bf 90       	pop	r11
     3e6:	af 90       	pop	r10
     3e8:	9f 90       	pop	r9
     3ea:	8f 90       	pop	r8
     3ec:	7f 90       	pop	r7
     3ee:	6f 90       	pop	r6
     3f0:	08 95       	ret

000003f2 <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     3f2:	cf 93       	push	r28
     3f4:	c8 2f       	mov	r28, r24
     3f6:	8a 30       	cpi	r24, 0x0A	; 10
     3f8:	19 f4       	brne	.+6      	; 0x400 <__FUSE_REGION_LENGTH__>
     3fa:	8d e0       	ldi	r24, 0x0D	; 13
     3fc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <uart_put_char>
     400:	2f b7       	in	r18, 0x3f	; 63
     402:	20 78       	andi	r18, 0x80	; 128
     404:	02 c0       	rjmp	.+4      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     406:	22 23       	and	r18, r18
     408:	29 f1       	breq	.+74     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
     40a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <bytes_in_out_buffer>
     40e:	9f 3f       	cpi	r25, 0xFF	; 255
     410:	d1 f3       	breq	.-12     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     412:	f8 94       	cli
     414:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <out_insert_pos>
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	8e 0f       	add	r24, r30
     41c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <out_insert_pos>
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	ee 5c       	subi	r30, 0xCE	; 206
     424:	fe 4f       	sbci	r31, 0xFE	; 254
     426:	c0 83       	st	Z, r28
     428:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
     42c:	8f 5f       	subi	r24, 0xFF	; 255
     42e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <bytes_in_out_buffer>
     432:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <out_insert_pos>
     436:	8f 3f       	cpi	r24, 0xFF	; 255
     438:	11 f4       	brne	.+4      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     43a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <out_insert_pos>
     43e:	e1 ec       	ldi	r30, 0xC1	; 193
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	80 62       	ori	r24, 0x20	; 32
     446:	80 83       	st	Z, r24
     448:	22 23       	and	r18, r18
     44a:	39 f0       	breq	.+14     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
     44c:	78 94       	sei
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	05 c0       	rjmp	.+10     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <uart_get_char>:
     462:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <bytes_in_input_buffer>
     466:	88 23       	and	r24, r24
     468:	e1 f3       	breq	.-8      	; 0x462 <uart_get_char>
     46a:	2f b7       	in	r18, 0x3f	; 63
     46c:	20 78       	andi	r18, 0x80	; 128
     46e:	f8 94       	cli
     470:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <input_insert_pos>
     474:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <bytes_in_input_buffer>
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	83 1b       	sub	r24, r19
     47c:	91 09       	sbc	r25, r1
     47e:	5a f4       	brpl	.+22     	; 0x496 <uart_get_char+0x34>
     480:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <input_insert_pos>
     484:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <bytes_in_input_buffer>
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	e8 1b       	sub	r30, r24
     48c:	f1 09       	sbc	r31, r1
     48e:	ee 5b       	subi	r30, 0xBE	; 190
     490:	fd 4f       	sbci	r31, 0xFD	; 253
     492:	80 81       	ld	r24, Z
     494:	0a c0       	rjmp	.+20     	; 0x4aa <uart_get_char+0x48>
     496:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <input_insert_pos>
     49a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <bytes_in_input_buffer>
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	e8 1b       	sub	r30, r24
     4a2:	f1 09       	sbc	r31, r1
     4a4:	ee 5c       	subi	r30, 0xCE	; 206
     4a6:	fd 4f       	sbci	r31, 0xFD	; 253
     4a8:	80 81       	ld	r24, Z
     4aa:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <bytes_in_input_buffer>
     4ae:	91 50       	subi	r25, 0x01	; 1
     4b0:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <bytes_in_input_buffer>
     4b4:	22 23       	and	r18, r18
     4b6:	09 f0       	breq	.+2      	; 0x4ba <uart_get_char+0x58>
     4b8:	78 94       	sei
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	08 95       	ret

000004be <init_serial_stdio>:
     4be:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <out_insert_pos>
     4c2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <bytes_in_out_buffer>
     4c6:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <input_insert_pos>
     4ca:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <bytes_in_input_buffer>
     4ce:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <input_overrun>
     4d2:	40 93 1c 01 	sts	0x011C, r20	; 0x80011c <__data_end>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	aa 1f       	adc	r26, r26
     4e0:	bb 1f       	adc	r27, r27
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	aa 1f       	adc	r26, r26
     4e8:	bb 1f       	adc	r27, r27
     4ea:	9c 01       	movw	r18, r24
     4ec:	ad 01       	movw	r20, r26
     4ee:	22 0f       	add	r18, r18
     4f0:	33 1f       	adc	r19, r19
     4f2:	44 1f       	adc	r20, r20
     4f4:	55 1f       	adc	r21, r21
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	72 e1       	ldi	r23, 0x12	; 18
     4fa:	8a e7       	ldi	r24, 0x7A	; 122
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__divmodsi4>
     502:	ba 01       	movw	r22, r20
     504:	a9 01       	movw	r20, r18
     506:	4f 5f       	subi	r20, 0xFF	; 255
     508:	5f 4f       	sbci	r21, 0xFF	; 255
     50a:	6f 4f       	sbci	r22, 0xFF	; 255
     50c:	7f 4f       	sbci	r23, 0xFF	; 255
     50e:	db 01       	movw	r26, r22
     510:	ca 01       	movw	r24, r20
     512:	1a f4       	brpl	.+6      	; 0x51a <init_serial_stdio+0x5c>
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	a1 1d       	adc	r26, r1
     518:	b1 1d       	adc	r27, r1
     51a:	b5 95       	asr	r27
     51c:	a7 95       	ror	r26
     51e:	97 95       	ror	r25
     520:	87 95       	ror	r24
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     528:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     52c:	e1 ec       	ldi	r30, 0xC1	; 193
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	88 e1       	ldi	r24, 0x18	; 24
     532:	80 83       	st	Z, r24
     534:	80 81       	ld	r24, Z
     536:	80 68       	ori	r24, 0x80	; 128
     538:	80 83       	st	Z, r24
     53a:	e8 e4       	ldi	r30, 0x48	; 72
     53c:	f2 e0       	ldi	r31, 0x02	; 2
     53e:	8a e0       	ldi	r24, 0x0A	; 10
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	93 83       	std	Z+3, r25	; 0x03
     544:	82 83       	std	Z+2, r24	; 0x02
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	80 83       	st	Z, r24
     54a:	08 95       	ret

0000054c <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	2f 93       	push	r18
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	ef 93       	push	r30
     55e:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     560:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
     564:	88 23       	and	r24, r24
     566:	29 f1       	breq	.+74     	; 0x5b2 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     568:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <out_insert_pos>
     56c:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <bytes_in_out_buffer>
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	82 1b       	sub	r24, r18
     574:	91 09       	sbc	r25, r1
     576:	5a f4       	brpl	.+22     	; 0x58e <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     578:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <out_insert_pos>
     57c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	e8 1b       	sub	r30, r24
     584:	f1 09       	sbc	r31, r1
     586:	ef 5c       	subi	r30, 0xCF	; 207
     588:	fd 4f       	sbci	r31, 0xFD	; 253
     58a:	90 81       	ld	r25, Z
     58c:	0a c0       	rjmp	.+20     	; 0x5a2 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     58e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <out_insert_pos>
     592:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	e8 1b       	sub	r30, r24
     59a:	f1 09       	sbc	r31, r1
     59c:	ee 5c       	subi	r30, 0xCE	; 206
     59e:	fe 4f       	sbci	r31, 0xFE	; 254
     5a0:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     5a2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
     5a6:	81 50       	subi	r24, 0x01	; 1
     5a8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     5ac:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     5b2:	e1 ec       	ldi	r30, 0xC1	; 193
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	8f 7d       	andi	r24, 0xDF	; 223
     5ba:	80 83       	st	Z, r24
	}
}
     5bc:	ff 91       	pop	r31
     5be:	ef 91       	pop	r30
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	2f 91       	pop	r18
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	2f 93       	push	r18
     5dc:	3f 93       	push	r19
     5de:	4f 93       	push	r20
     5e0:	5f 93       	push	r21
     5e2:	6f 93       	push	r22
     5e4:	7f 93       	push	r23
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	af 93       	push	r26
     5ec:	bf 93       	push	r27
     5ee:	cf 93       	push	r28
     5f0:	ef 93       	push	r30
     5f2:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     5f4:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     5f8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     5fc:	88 23       	and	r24, r24
     5fe:	49 f0       	breq	.+18     	; 0x612 <__vector_20+0x42>
     600:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
     604:	8f 3f       	cpi	r24, 0xFF	; 255
     606:	29 f0       	breq	.+10     	; 0x612 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	8c 2f       	mov	r24, r28
     60e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     612:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <bytes_in_input_buffer>
     616:	80 31       	cpi	r24, 0x10	; 16
     618:	20 f0       	brcs	.+8      	; 0x622 <__vector_20+0x52>
		input_overrun = 1;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <input_overrun>
     620:	18 c0       	rjmp	.+48     	; 0x652 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     622:	cd 30       	cpi	r28, 0x0D	; 13
     624:	09 f4       	brne	.+2      	; 0x628 <__vector_20+0x58>
			c = '\n';
     626:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     628:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <input_insert_pos>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	8e 0f       	add	r24, r30
     630:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <input_insert_pos>
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	ee 5c       	subi	r30, 0xCE	; 206
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     63c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <bytes_in_input_buffer>
     640:	8f 5f       	subi	r24, 0xFF	; 255
     642:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     646:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <input_insert_pos>
     64a:	80 31       	cpi	r24, 0x10	; 16
     64c:	11 f4       	brne	.+4      	; 0x652 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     64e:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <input_insert_pos>
		}
	}
}
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	cf 91       	pop	r28
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <makeInfo>:
	}
}

info* makeInfo(void){
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     676:	84 e3       	ldi	r24, 0x34	; 52
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 2a 09 	call	0x1254	; 0x1254 <malloc>
	return info_ptr;
}
     67e:	08 95       	ret

00000680 <custom_delay>:

	//mpu6050_init();
	
}

void custom_delay(uint32_t ticks){
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt0 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt0_ticks();
     68c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_tcnt0_ticks>
	while((current_time + ticks) > get_tcnt0_ticks()){
     690:	c6 0e       	add	r12, r22
     692:	d7 1e       	adc	r13, r23
     694:	e8 1e       	adc	r14, r24
     696:	f9 1e       	adc	r15, r25
     698:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_tcnt0_ticks>
     69c:	6c 15       	cp	r22, r12
     69e:	7d 05       	cpc	r23, r13
     6a0:	8e 05       	cpc	r24, r14
     6a2:	9f 05       	cpc	r25, r15
     6a4:	c8 f3       	brcs	.-14     	; 0x698 <custom_delay+0x18>
		//wait
		//PORTA |= 0b00000001;
	}
}
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	08 95       	ret

000006b0 <mpu_get_data>:
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}

void mpu_get_data(info* info_ptr){
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	c0 5e       	subi	r28, 0xE0	; 224
     6ca:	d1 09       	sbc	r29, r1
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	5c 01       	movw	r10, r24
//
	int16_t ax = 0;
     6d8:	1a 82       	std	Y+2, r1	; 0x02
     6da:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     6dc:	1c 82       	std	Y+4, r1	; 0x04
     6de:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     6e0:	1e 82       	std	Y+6, r1	; 0x06
     6e2:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     6e4:	18 86       	std	Y+8, r1	; 0x08
     6e6:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     6e8:	1a 86       	std	Y+10, r1	; 0x0a
     6ea:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     6ec:	1c 86       	std	Y+12, r1	; 0x0c
     6ee:	1b 86       	std	Y+11, r1	; 0x0b
	int16_t ax1 = 0;
     6f0:	1e 86       	std	Y+14, r1	; 0x0e
     6f2:	1d 86       	std	Y+13, r1	; 0x0d
	int16_t ay1 = 0;
     6f4:	18 8a       	std	Y+16, r1	; 0x10
     6f6:	1f 86       	std	Y+15, r1	; 0x0f
	int16_t az1 = 0;
     6f8:	1a 8a       	std	Y+18, r1	; 0x12
     6fa:	19 8a       	std	Y+17, r1	; 0x11
	int16_t gx1 = 0;
     6fc:	1c 8a       	std	Y+20, r1	; 0x14
     6fe:	1b 8a       	std	Y+19, r1	; 0x13
	int16_t gy1 = 0;
     700:	1e 8a       	std	Y+22, r1	; 0x16
     702:	1d 8a       	std	Y+21, r1	; 0x15
	int16_t gz1 = 0;
     704:	18 8e       	std	Y+24, r1	; 0x18
     706:	1f 8a       	std	Y+23, r1	; 0x17
	//double ayg1 = 0;
	//double azg1 = 0;
	//double gxds1 = 0;
	//double gyds1 = 0;
	//double gzds1 = 0;
	mpu6050_getRawData(info_ptr, &ax, &ay, &az, &gx, &gy, &gz);
     708:	ce 01       	movw	r24, r28
     70a:	0b 96       	adiw	r24, 0x0b	; 11
     70c:	6c 01       	movw	r12, r24
     70e:	fe 01       	movw	r30, r28
     710:	39 96       	adiw	r30, 0x09	; 9
     712:	7f 01       	movw	r14, r30
     714:	8e 01       	movw	r16, r28
     716:	09 5f       	subi	r16, 0xF9	; 249
     718:	1f 4f       	sbci	r17, 0xFF	; 255
     71a:	9e 01       	movw	r18, r28
     71c:	2b 5f       	subi	r18, 0xFB	; 251
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	ae 01       	movw	r20, r28
     722:	4d 5f       	subi	r20, 0xFD	; 253
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	be 01       	movw	r22, r28
     728:	6f 5f       	subi	r22, 0xFF	; 255
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	c5 01       	movw	r24, r10
     72e:	0e 94 9b 01 	call	0x336	; 0x336 <mpu6050_getRawData>
	custom_delay(10);
     732:	6a e0       	ldi	r22, 0x0A	; 10
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	mpu6050_getRawData(info_ptr, &ax1, &ay1, &az1, &gx1, &gy1, &gz1);
     73e:	ce 01       	movw	r24, r28
     740:	47 96       	adiw	r24, 0x17	; 23
     742:	6c 01       	movw	r12, r24
     744:	fe 01       	movw	r30, r28
     746:	75 96       	adiw	r30, 0x15	; 21
     748:	7f 01       	movw	r14, r30
     74a:	04 5f       	subi	r16, 0xF4	; 244
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	9e 01       	movw	r18, r28
     750:	2f 5e       	subi	r18, 0xEF	; 239
     752:	3f 4f       	sbci	r19, 0xFF	; 255
     754:	ae 01       	movw	r20, r28
     756:	41 5f       	subi	r20, 0xF1	; 241
     758:	5f 4f       	sbci	r21, 0xFF	; 255
     75a:	be 01       	movw	r22, r28
     75c:	63 5f       	subi	r22, 0xF3	; 243
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	c5 01       	movw	r24, r10
     762:	0e 94 9b 01 	call	0x336	; 0x336 <mpu6050_getRawData>
	char itmp[200];
	int16_t reading = (ax1-ax)*info_ptr->sample*info_ptr->sample/1000;
     766:	f5 01       	movw	r30, r10
     768:	22 81       	ldd	r18, Z+2	; 0x02
     76a:	33 81       	ldd	r19, Z+3	; 0x03
     76c:	8d 85       	ldd	r24, Y+13	; 0x0d
     76e:	9e 85       	ldd	r25, Y+14	; 0x0e
     770:	49 81       	ldd	r20, Y+1	; 0x01
     772:	5a 81       	ldd	r21, Y+2	; 0x02
     774:	84 1b       	sub	r24, r20
     776:	95 0b       	sbc	r25, r21
     778:	82 9f       	mul	r24, r18
     77a:	a0 01       	movw	r20, r0
     77c:	83 9f       	mul	r24, r19
     77e:	50 0d       	add	r21, r0
     780:	92 9f       	mul	r25, r18
     782:	50 0d       	add	r21, r0
     784:	11 24       	eor	r1, r1
     786:	24 9f       	mul	r18, r20
     788:	c0 01       	movw	r24, r0
     78a:	25 9f       	mul	r18, r21
     78c:	90 0d       	add	r25, r0
     78e:	34 9f       	mul	r19, r20
     790:	90 0d       	add	r25, r0
     792:	11 24       	eor	r1, r1
     794:	0f 2e       	mov	r0, r31
     796:	f8 ee       	ldi	r31, 0xE8	; 232
     798:	ef 2e       	mov	r14, r31
     79a:	f3 e0       	ldi	r31, 0x03	; 3
     79c:	ff 2e       	mov	r15, r31
     79e:	f0 2d       	mov	r31, r0
     7a0:	b7 01       	movw	r22, r14
     7a2:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divmodhi4>

	ltoa(reading, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     7a6:	07 2e       	mov	r0, r23
     7a8:	00 0c       	add	r0, r0
     7aa:	88 0b       	sbc	r24, r24
     7ac:	99 0b       	sbc	r25, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     7ae:	2a e0       	ldi	r18, 0x0A	; 10
     7b0:	ae 01       	movw	r20, r28
     7b2:	47 5e       	subi	r20, 0xE7	; 231
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     7ba:	08 e4       	ldi	r16, 0x48	; 72
     7bc:	12 e0       	ldi	r17, 0x02	; 2
     7be:	f8 01       	movw	r30, r16
     7c0:	62 81       	ldd	r22, Z+2	; 0x02
     7c2:	73 81       	ldd	r23, Z+3	; 0x03
     7c4:	80 e2       	ldi	r24, 0x20	; 32
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     7cc:	f8 01       	movw	r30, r16
     7ce:	62 81       	ldd	r22, Z+2	; 0x02
     7d0:	73 81       	ldd	r23, Z+3	; 0x03
     7d2:	ce 01       	movw	r24, r28
     7d4:	49 96       	adiw	r24, 0x19	; 25
     7d6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     7da:	f8 01       	movw	r30, r16
     7dc:	62 81       	ldd	r22, Z+2	; 0x02
     7de:	73 81       	ldd	r23, Z+3	; 0x03
     7e0:	80 e2       	ldi	r24, 0x20	; 32
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	reading = (ay1-ay)*info_ptr->sample*info_ptr->sample/1000;
     7e8:	f5 01       	movw	r30, r10
     7ea:	22 81       	ldd	r18, Z+2	; 0x02
     7ec:	33 81       	ldd	r19, Z+3	; 0x03
     7ee:	8f 85       	ldd	r24, Y+15	; 0x0f
     7f0:	98 89       	ldd	r25, Y+16	; 0x10
     7f2:	4b 81       	ldd	r20, Y+3	; 0x03
     7f4:	5c 81       	ldd	r21, Y+4	; 0x04
     7f6:	84 1b       	sub	r24, r20
     7f8:	95 0b       	sbc	r25, r21
     7fa:	82 9f       	mul	r24, r18
     7fc:	a0 01       	movw	r20, r0
     7fe:	83 9f       	mul	r24, r19
     800:	50 0d       	add	r21, r0
     802:	92 9f       	mul	r25, r18
     804:	50 0d       	add	r21, r0
     806:	11 24       	eor	r1, r1
     808:	24 9f       	mul	r18, r20
     80a:	c0 01       	movw	r24, r0
     80c:	25 9f       	mul	r18, r21
     80e:	90 0d       	add	r25, r0
     810:	34 9f       	mul	r19, r20
     812:	90 0d       	add	r25, r0
     814:	11 24       	eor	r1, r1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divmodhi4>

	ltoa(reading, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     81c:	07 2e       	mov	r0, r23
     81e:	00 0c       	add	r0, r0
     820:	88 0b       	sbc	r24, r24
     822:	99 0b       	sbc	r25, r25
     824:	2a e0       	ldi	r18, 0x0A	; 10
     826:	ae 01       	movw	r20, r28
     828:	47 5e       	subi	r20, 0xE7	; 231
     82a:	5f 4f       	sbci	r21, 0xFF	; 255
     82c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     830:	f8 01       	movw	r30, r16
     832:	62 81       	ldd	r22, Z+2	; 0x02
     834:	73 81       	ldd	r23, Z+3	; 0x03
     836:	80 e2       	ldi	r24, 0x20	; 32
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     83e:	f8 01       	movw	r30, r16
     840:	62 81       	ldd	r22, Z+2	; 0x02
     842:	73 81       	ldd	r23, Z+3	; 0x03
     844:	ce 01       	movw	r24, r28
     846:	49 96       	adiw	r24, 0x19	; 25
     848:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     84c:	f8 01       	movw	r30, r16
     84e:	62 81       	ldd	r22, Z+2	; 0x02
     850:	73 81       	ldd	r23, Z+3	; 0x03
     852:	80 e2       	ldi	r24, 0x20	; 32
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	reading = (az1-az)*info_ptr->sample*info_ptr->sample/1000;
     85a:	f5 01       	movw	r30, r10
     85c:	22 81       	ldd	r18, Z+2	; 0x02
     85e:	33 81       	ldd	r19, Z+3	; 0x03
     860:	89 89       	ldd	r24, Y+17	; 0x11
     862:	9a 89       	ldd	r25, Y+18	; 0x12
     864:	4d 81       	ldd	r20, Y+5	; 0x05
     866:	5e 81       	ldd	r21, Y+6	; 0x06
     868:	84 1b       	sub	r24, r20
     86a:	95 0b       	sbc	r25, r21
     86c:	82 9f       	mul	r24, r18
     86e:	a0 01       	movw	r20, r0
     870:	83 9f       	mul	r24, r19
     872:	50 0d       	add	r21, r0
     874:	92 9f       	mul	r25, r18
     876:	50 0d       	add	r21, r0
     878:	11 24       	eor	r1, r1
     87a:	24 9f       	mul	r18, r20
     87c:	c0 01       	movw	r24, r0
     87e:	25 9f       	mul	r18, r21
     880:	90 0d       	add	r25, r0
     882:	34 9f       	mul	r19, r20
     884:	90 0d       	add	r25, r0
     886:	11 24       	eor	r1, r1
     888:	b7 01       	movw	r22, r14
     88a:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divmodhi4>

	ltoa(reading, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     88e:	07 2e       	mov	r0, r23
     890:	00 0c       	add	r0, r0
     892:	88 0b       	sbc	r24, r24
     894:	99 0b       	sbc	r25, r25
     896:	2a e0       	ldi	r18, 0x0A	; 10
     898:	ae 01       	movw	r20, r28
     89a:	47 5e       	subi	r20, 0xE7	; 231
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     8a2:	f8 01       	movw	r30, r16
     8a4:	62 81       	ldd	r22, Z+2	; 0x02
     8a6:	73 81       	ldd	r23, Z+3	; 0x03
     8a8:	80 e2       	ldi	r24, 0x20	; 32
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     8b0:	f8 01       	movw	r30, r16
     8b2:	62 81       	ldd	r22, Z+2	; 0x02
     8b4:	73 81       	ldd	r23, Z+3	; 0x03
     8b6:	ce 01       	movw	r24, r28
     8b8:	49 96       	adiw	r24, 0x19	; 25
     8ba:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     8be:	f8 01       	movw	r30, r16
     8c0:	62 81       	ldd	r22, Z+2	; 0x02
     8c2:	73 81       	ldd	r23, Z+3	; 0x03
     8c4:	80 e2       	ldi	r24, 0x20	; 32
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	reading = (gx1-gx)*info_ptr->sample/100;
     8cc:	2b 89       	ldd	r18, Y+19	; 0x13
     8ce:	3c 89       	ldd	r19, Y+20	; 0x14
     8d0:	8f 81       	ldd	r24, Y+7	; 0x07
     8d2:	98 85       	ldd	r25, Y+8	; 0x08
     8d4:	28 1b       	sub	r18, r24
     8d6:	39 0b       	sbc	r19, r25
     8d8:	f5 01       	movw	r30, r10
     8da:	42 81       	ldd	r20, Z+2	; 0x02
     8dc:	53 81       	ldd	r21, Z+3	; 0x03
     8de:	24 9f       	mul	r18, r20
     8e0:	c0 01       	movw	r24, r0
     8e2:	25 9f       	mul	r18, r21
     8e4:	90 0d       	add	r25, r0
     8e6:	34 9f       	mul	r19, r20
     8e8:	90 0d       	add	r25, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	0f 2e       	mov	r0, r31
     8ee:	f4 e6       	ldi	r31, 0x64	; 100
     8f0:	ef 2e       	mov	r14, r31
     8f2:	f1 2c       	mov	r15, r1
     8f4:	f0 2d       	mov	r31, r0
     8f6:	b7 01       	movw	r22, r14
     8f8:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divmodhi4>

	ltoa(reading, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     8fc:	07 2e       	mov	r0, r23
     8fe:	00 0c       	add	r0, r0
     900:	88 0b       	sbc	r24, r24
     902:	99 0b       	sbc	r25, r25
     904:	2a e0       	ldi	r18, 0x0A	; 10
     906:	ae 01       	movw	r20, r28
     908:	47 5e       	subi	r20, 0xE7	; 231
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     910:	f8 01       	movw	r30, r16
     912:	62 81       	ldd	r22, Z+2	; 0x02
     914:	73 81       	ldd	r23, Z+3	; 0x03
     916:	80 e2       	ldi	r24, 0x20	; 32
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     91e:	f8 01       	movw	r30, r16
     920:	62 81       	ldd	r22, Z+2	; 0x02
     922:	73 81       	ldd	r23, Z+3	; 0x03
     924:	ce 01       	movw	r24, r28
     926:	49 96       	adiw	r24, 0x19	; 25
     928:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     92c:	f8 01       	movw	r30, r16
     92e:	62 81       	ldd	r22, Z+2	; 0x02
     930:	73 81       	ldd	r23, Z+3	; 0x03
     932:	80 e2       	ldi	r24, 0x20	; 32
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	reading = (gy1-gy)*info_ptr->sample/100;
     93a:	2d 89       	ldd	r18, Y+21	; 0x15
     93c:	3e 89       	ldd	r19, Y+22	; 0x16
     93e:	89 85       	ldd	r24, Y+9	; 0x09
     940:	9a 85       	ldd	r25, Y+10	; 0x0a
     942:	28 1b       	sub	r18, r24
     944:	39 0b       	sbc	r19, r25
     946:	f5 01       	movw	r30, r10
     948:	42 81       	ldd	r20, Z+2	; 0x02
     94a:	53 81       	ldd	r21, Z+3	; 0x03
     94c:	24 9f       	mul	r18, r20
     94e:	c0 01       	movw	r24, r0
     950:	25 9f       	mul	r18, r21
     952:	90 0d       	add	r25, r0
     954:	34 9f       	mul	r19, r20
     956:	90 0d       	add	r25, r0
     958:	11 24       	eor	r1, r1
     95a:	b7 01       	movw	r22, r14
     95c:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divmodhi4>

	ltoa(reading, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     960:	07 2e       	mov	r0, r23
     962:	00 0c       	add	r0, r0
     964:	88 0b       	sbc	r24, r24
     966:	99 0b       	sbc	r25, r25
     968:	2a e0       	ldi	r18, 0x0A	; 10
     96a:	ae 01       	movw	r20, r28
     96c:	47 5e       	subi	r20, 0xE7	; 231
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     974:	f8 01       	movw	r30, r16
     976:	62 81       	ldd	r22, Z+2	; 0x02
     978:	73 81       	ldd	r23, Z+3	; 0x03
     97a:	80 e2       	ldi	r24, 0x20	; 32
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     982:	f8 01       	movw	r30, r16
     984:	62 81       	ldd	r22, Z+2	; 0x02
     986:	73 81       	ldd	r23, Z+3	; 0x03
     988:	ce 01       	movw	r24, r28
     98a:	49 96       	adiw	r24, 0x19	; 25
     98c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     990:	f8 01       	movw	r30, r16
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	80 e2       	ldi	r24, 0x20	; 32
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	reading = (gz1-gz)*info_ptr->sample/100;
     99e:	2f 89       	ldd	r18, Y+23	; 0x17
     9a0:	38 8d       	ldd	r19, Y+24	; 0x18
     9a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     9a6:	28 1b       	sub	r18, r24
     9a8:	39 0b       	sbc	r19, r25
     9aa:	f5 01       	movw	r30, r10
     9ac:	42 81       	ldd	r20, Z+2	; 0x02
     9ae:	53 81       	ldd	r21, Z+3	; 0x03
     9b0:	24 9f       	mul	r18, r20
     9b2:	c0 01       	movw	r24, r0
     9b4:	25 9f       	mul	r18, r21
     9b6:	90 0d       	add	r25, r0
     9b8:	34 9f       	mul	r19, r20
     9ba:	90 0d       	add	r25, r0
     9bc:	11 24       	eor	r1, r1
     9be:	b7 01       	movw	r22, r14
     9c0:	0e 94 c1 08 	call	0x1182	; 0x1182 <__divmodhi4>

	ltoa(reading, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     9c4:	07 2e       	mov	r0, r23
     9c6:	00 0c       	add	r0, r0
     9c8:	88 0b       	sbc	r24, r24
     9ca:	99 0b       	sbc	r25, r25
     9cc:	2a e0       	ldi	r18, 0x0A	; 10
     9ce:	ae 01       	movw	r20, r28
     9d0:	47 5e       	subi	r20, 0xE7	; 231
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     9d8:	f8 01       	movw	r30, r16
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	80 e2       	ldi	r24, 0x20	; 32
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     9e6:	f8 01       	movw	r30, r16
     9e8:	62 81       	ldd	r22, Z+2	; 0x02
     9ea:	73 81       	ldd	r23, Z+3	; 0x03
     9ec:	ce 01       	movw	r24, r28
     9ee:	49 96       	adiw	r24, 0x19	; 25
     9f0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     9f4:	f8 01       	movw	r30, r16
     9f6:	62 81       	ldd	r22, Z+2	; 0x02
     9f8:	73 81       	ldd	r23, Z+3	; 0x03
     9fa:	80 e2       	ldi	r24, 0x20	; 32
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	//ltoa((ay1-ay)*info_ptr->sample/1000, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
	//ltoa((az1-az)*info_ptr->sample/1000, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
	//ltoa((gx1-gx)*info_ptr->sample/1000, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
	//ltoa((gy1-gy)*info_ptr->sample/1000, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
	//ltoa((gz1-gz)*info_ptr->sample/1000, itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
	fputs("\r\n", stdout);
     a02:	f8 01       	movw	r30, r16
     a04:	22 81       	ldd	r18, Z+2	; 0x02
     a06:	33 81       	ldd	r19, Z+3	; 0x03
     a08:	42 e0       	ldi	r20, 0x02	; 2
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	88 e1       	ldi	r24, 0x18	; 24
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 46 0b 	call	0x168c	; 0x168c <fwrite>
	ltoa((ax), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     a18:	69 81       	ldd	r22, Y+1	; 0x01
     a1a:	7a 81       	ldd	r23, Y+2	; 0x02
     a1c:	07 2e       	mov	r0, r23
     a1e:	00 0c       	add	r0, r0
     a20:	88 0b       	sbc	r24, r24
     a22:	99 0b       	sbc	r25, r25
     a24:	2a e0       	ldi	r18, 0x0A	; 10
     a26:	ae 01       	movw	r20, r28
     a28:	47 5e       	subi	r20, 0xE7	; 231
     a2a:	5f 4f       	sbci	r21, 0xFF	; 255
     a2c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     a30:	f8 01       	movw	r30, r16
     a32:	62 81       	ldd	r22, Z+2	; 0x02
     a34:	73 81       	ldd	r23, Z+3	; 0x03
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     a3e:	f8 01       	movw	r30, r16
     a40:	62 81       	ldd	r22, Z+2	; 0x02
     a42:	73 81       	ldd	r23, Z+3	; 0x03
     a44:	ce 01       	movw	r24, r28
     a46:	49 96       	adiw	r24, 0x19	; 25
     a48:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     a4c:	f8 01       	movw	r30, r16
     a4e:	62 81       	ldd	r22, Z+2	; 0x02
     a50:	73 81       	ldd	r23, Z+3	; 0x03
     a52:	80 e2       	ldi	r24, 0x20	; 32
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((ay), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     a5a:	6b 81       	ldd	r22, Y+3	; 0x03
     a5c:	7c 81       	ldd	r23, Y+4	; 0x04
     a5e:	07 2e       	mov	r0, r23
     a60:	00 0c       	add	r0, r0
     a62:	88 0b       	sbc	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	2a e0       	ldi	r18, 0x0A	; 10
     a68:	ae 01       	movw	r20, r28
     a6a:	47 5e       	subi	r20, 0xE7	; 231
     a6c:	5f 4f       	sbci	r21, 0xFF	; 255
     a6e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     a72:	f8 01       	movw	r30, r16
     a74:	62 81       	ldd	r22, Z+2	; 0x02
     a76:	73 81       	ldd	r23, Z+3	; 0x03
     a78:	80 e2       	ldi	r24, 0x20	; 32
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     a80:	f8 01       	movw	r30, r16
     a82:	62 81       	ldd	r22, Z+2	; 0x02
     a84:	73 81       	ldd	r23, Z+3	; 0x03
     a86:	ce 01       	movw	r24, r28
     a88:	49 96       	adiw	r24, 0x19	; 25
     a8a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     a8e:	f8 01       	movw	r30, r16
     a90:	62 81       	ldd	r22, Z+2	; 0x02
     a92:	73 81       	ldd	r23, Z+3	; 0x03
     a94:	80 e2       	ldi	r24, 0x20	; 32
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((az), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     a9c:	6d 81       	ldd	r22, Y+5	; 0x05
     a9e:	7e 81       	ldd	r23, Y+6	; 0x06
     aa0:	07 2e       	mov	r0, r23
     aa2:	00 0c       	add	r0, r0
     aa4:	88 0b       	sbc	r24, r24
     aa6:	99 0b       	sbc	r25, r25
     aa8:	2a e0       	ldi	r18, 0x0A	; 10
     aaa:	ae 01       	movw	r20, r28
     aac:	47 5e       	subi	r20, 0xE7	; 231
     aae:	5f 4f       	sbci	r21, 0xFF	; 255
     ab0:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     ab4:	f8 01       	movw	r30, r16
     ab6:	62 81       	ldd	r22, Z+2	; 0x02
     ab8:	73 81       	ldd	r23, Z+3	; 0x03
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     ac2:	f8 01       	movw	r30, r16
     ac4:	62 81       	ldd	r22, Z+2	; 0x02
     ac6:	73 81       	ldd	r23, Z+3	; 0x03
     ac8:	ce 01       	movw	r24, r28
     aca:	49 96       	adiw	r24, 0x19	; 25
     acc:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     ad0:	f8 01       	movw	r30, r16
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	80 e2       	ldi	r24, 0x20	; 32
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((gx), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     ade:	6f 81       	ldd	r22, Y+7	; 0x07
     ae0:	78 85       	ldd	r23, Y+8	; 0x08
     ae2:	07 2e       	mov	r0, r23
     ae4:	00 0c       	add	r0, r0
     ae6:	88 0b       	sbc	r24, r24
     ae8:	99 0b       	sbc	r25, r25
     aea:	2a e0       	ldi	r18, 0x0A	; 10
     aec:	ae 01       	movw	r20, r28
     aee:	47 5e       	subi	r20, 0xE7	; 231
     af0:	5f 4f       	sbci	r21, 0xFF	; 255
     af2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     af6:	f8 01       	movw	r30, r16
     af8:	62 81       	ldd	r22, Z+2	; 0x02
     afa:	73 81       	ldd	r23, Z+3	; 0x03
     afc:	80 e2       	ldi	r24, 0x20	; 32
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     b04:	f8 01       	movw	r30, r16
     b06:	62 81       	ldd	r22, Z+2	; 0x02
     b08:	73 81       	ldd	r23, Z+3	; 0x03
     b0a:	ce 01       	movw	r24, r28
     b0c:	49 96       	adiw	r24, 0x19	; 25
     b0e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     b12:	f8 01       	movw	r30, r16
     b14:	62 81       	ldd	r22, Z+2	; 0x02
     b16:	73 81       	ldd	r23, Z+3	; 0x03
     b18:	80 e2       	ldi	r24, 0x20	; 32
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((gy), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     b20:	69 85       	ldd	r22, Y+9	; 0x09
     b22:	7a 85       	ldd	r23, Y+10	; 0x0a
     b24:	07 2e       	mov	r0, r23
     b26:	00 0c       	add	r0, r0
     b28:	88 0b       	sbc	r24, r24
     b2a:	99 0b       	sbc	r25, r25
     b2c:	2a e0       	ldi	r18, 0x0A	; 10
     b2e:	ae 01       	movw	r20, r28
     b30:	47 5e       	subi	r20, 0xE7	; 231
     b32:	5f 4f       	sbci	r21, 0xFF	; 255
     b34:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     b38:	f8 01       	movw	r30, r16
     b3a:	62 81       	ldd	r22, Z+2	; 0x02
     b3c:	73 81       	ldd	r23, Z+3	; 0x03
     b3e:	80 e2       	ldi	r24, 0x20	; 32
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     b46:	f8 01       	movw	r30, r16
     b48:	62 81       	ldd	r22, Z+2	; 0x02
     b4a:	73 81       	ldd	r23, Z+3	; 0x03
     b4c:	ce 01       	movw	r24, r28
     b4e:	49 96       	adiw	r24, 0x19	; 25
     b50:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     b54:	f8 01       	movw	r30, r16
     b56:	62 81       	ldd	r22, Z+2	; 0x02
     b58:	73 81       	ldd	r23, Z+3	; 0x03
     b5a:	80 e2       	ldi	r24, 0x20	; 32
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((gz), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     b62:	6b 85       	ldd	r22, Y+11	; 0x0b
     b64:	7c 85       	ldd	r23, Y+12	; 0x0c
     b66:	07 2e       	mov	r0, r23
     b68:	00 0c       	add	r0, r0
     b6a:	88 0b       	sbc	r24, r24
     b6c:	99 0b       	sbc	r25, r25
     b6e:	2a e0       	ldi	r18, 0x0A	; 10
     b70:	ae 01       	movw	r20, r28
     b72:	47 5e       	subi	r20, 0xE7	; 231
     b74:	5f 4f       	sbci	r21, 0xFF	; 255
     b76:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     b7a:	f8 01       	movw	r30, r16
     b7c:	62 81       	ldd	r22, Z+2	; 0x02
     b7e:	73 81       	ldd	r23, Z+3	; 0x03
     b80:	80 e2       	ldi	r24, 0x20	; 32
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     b88:	f8 01       	movw	r30, r16
     b8a:	62 81       	ldd	r22, Z+2	; 0x02
     b8c:	73 81       	ldd	r23, Z+3	; 0x03
     b8e:	ce 01       	movw	r24, r28
     b90:	49 96       	adiw	r24, 0x19	; 25
     b92:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     b96:	f8 01       	movw	r30, r16
     b98:	62 81       	ldd	r22, Z+2	; 0x02
     b9a:	73 81       	ldd	r23, Z+3	; 0x03
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	fputs("\r\n", stdout);
     ba4:	f8 01       	movw	r30, r16
     ba6:	22 81       	ldd	r18, Z+2	; 0x02
     ba8:	33 81       	ldd	r19, Z+3	; 0x03
     baa:	42 e0       	ldi	r20, 0x02	; 2
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 46 0b 	call	0x168c	; 0x168c <fwrite>
	ltoa((ax1), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     bba:	6d 85       	ldd	r22, Y+13	; 0x0d
     bbc:	7e 85       	ldd	r23, Y+14	; 0x0e
     bbe:	07 2e       	mov	r0, r23
     bc0:	00 0c       	add	r0, r0
     bc2:	88 0b       	sbc	r24, r24
     bc4:	99 0b       	sbc	r25, r25
     bc6:	2a e0       	ldi	r18, 0x0A	; 10
     bc8:	ae 01       	movw	r20, r28
     bca:	47 5e       	subi	r20, 0xE7	; 231
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     bd2:	f8 01       	movw	r30, r16
     bd4:	62 81       	ldd	r22, Z+2	; 0x02
     bd6:	73 81       	ldd	r23, Z+3	; 0x03
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     be0:	f8 01       	movw	r30, r16
     be2:	62 81       	ldd	r22, Z+2	; 0x02
     be4:	73 81       	ldd	r23, Z+3	; 0x03
     be6:	ce 01       	movw	r24, r28
     be8:	49 96       	adiw	r24, 0x19	; 25
     bea:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     bee:	f8 01       	movw	r30, r16
     bf0:	62 81       	ldd	r22, Z+2	; 0x02
     bf2:	73 81       	ldd	r23, Z+3	; 0x03
     bf4:	80 e2       	ldi	r24, 0x20	; 32
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((ay1), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     bfc:	6f 85       	ldd	r22, Y+15	; 0x0f
     bfe:	78 89       	ldd	r23, Y+16	; 0x10
     c00:	07 2e       	mov	r0, r23
     c02:	00 0c       	add	r0, r0
     c04:	88 0b       	sbc	r24, r24
     c06:	99 0b       	sbc	r25, r25
     c08:	2a e0       	ldi	r18, 0x0A	; 10
     c0a:	ae 01       	movw	r20, r28
     c0c:	47 5e       	subi	r20, 0xE7	; 231
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
     c10:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     c14:	f8 01       	movw	r30, r16
     c16:	62 81       	ldd	r22, Z+2	; 0x02
     c18:	73 81       	ldd	r23, Z+3	; 0x03
     c1a:	80 e2       	ldi	r24, 0x20	; 32
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     c22:	f8 01       	movw	r30, r16
     c24:	62 81       	ldd	r22, Z+2	; 0x02
     c26:	73 81       	ldd	r23, Z+3	; 0x03
     c28:	ce 01       	movw	r24, r28
     c2a:	49 96       	adiw	r24, 0x19	; 25
     c2c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     c30:	f8 01       	movw	r30, r16
     c32:	62 81       	ldd	r22, Z+2	; 0x02
     c34:	73 81       	ldd	r23, Z+3	; 0x03
     c36:	80 e2       	ldi	r24, 0x20	; 32
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((az1), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     c3e:	69 89       	ldd	r22, Y+17	; 0x11
     c40:	7a 89       	ldd	r23, Y+18	; 0x12
     c42:	07 2e       	mov	r0, r23
     c44:	00 0c       	add	r0, r0
     c46:	88 0b       	sbc	r24, r24
     c48:	99 0b       	sbc	r25, r25
     c4a:	2a e0       	ldi	r18, 0x0A	; 10
     c4c:	ae 01       	movw	r20, r28
     c4e:	47 5e       	subi	r20, 0xE7	; 231
     c50:	5f 4f       	sbci	r21, 0xFF	; 255
     c52:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     c56:	f8 01       	movw	r30, r16
     c58:	62 81       	ldd	r22, Z+2	; 0x02
     c5a:	73 81       	ldd	r23, Z+3	; 0x03
     c5c:	80 e2       	ldi	r24, 0x20	; 32
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     c64:	f8 01       	movw	r30, r16
     c66:	62 81       	ldd	r22, Z+2	; 0x02
     c68:	73 81       	ldd	r23, Z+3	; 0x03
     c6a:	ce 01       	movw	r24, r28
     c6c:	49 96       	adiw	r24, 0x19	; 25
     c6e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     c72:	f8 01       	movw	r30, r16
     c74:	62 81       	ldd	r22, Z+2	; 0x02
     c76:	73 81       	ldd	r23, Z+3	; 0x03
     c78:	80 e2       	ldi	r24, 0x20	; 32
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((gx1), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     c80:	6b 89       	ldd	r22, Y+19	; 0x13
     c82:	7c 89       	ldd	r23, Y+20	; 0x14
     c84:	07 2e       	mov	r0, r23
     c86:	00 0c       	add	r0, r0
     c88:	88 0b       	sbc	r24, r24
     c8a:	99 0b       	sbc	r25, r25
     c8c:	2a e0       	ldi	r18, 0x0A	; 10
     c8e:	ae 01       	movw	r20, r28
     c90:	47 5e       	subi	r20, 0xE7	; 231
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     c98:	f8 01       	movw	r30, r16
     c9a:	62 81       	ldd	r22, Z+2	; 0x02
     c9c:	73 81       	ldd	r23, Z+3	; 0x03
     c9e:	80 e2       	ldi	r24, 0x20	; 32
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     ca6:	f8 01       	movw	r30, r16
     ca8:	62 81       	ldd	r22, Z+2	; 0x02
     caa:	73 81       	ldd	r23, Z+3	; 0x03
     cac:	ce 01       	movw	r24, r28
     cae:	49 96       	adiw	r24, 0x19	; 25
     cb0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     cb4:	f8 01       	movw	r30, r16
     cb6:	62 81       	ldd	r22, Z+2	; 0x02
     cb8:	73 81       	ldd	r23, Z+3	; 0x03
     cba:	80 e2       	ldi	r24, 0x20	; 32
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((gy1), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     cc2:	6d 89       	ldd	r22, Y+21	; 0x15
     cc4:	7e 89       	ldd	r23, Y+22	; 0x16
     cc6:	07 2e       	mov	r0, r23
     cc8:	00 0c       	add	r0, r0
     cca:	88 0b       	sbc	r24, r24
     ccc:	99 0b       	sbc	r25, r25
     cce:	2a e0       	ldi	r18, 0x0A	; 10
     cd0:	ae 01       	movw	r20, r28
     cd2:	47 5e       	subi	r20, 0xE7	; 231
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     cda:	f8 01       	movw	r30, r16
     cdc:	62 81       	ldd	r22, Z+2	; 0x02
     cde:	73 81       	ldd	r23, Z+3	; 0x03
     ce0:	80 e2       	ldi	r24, 0x20	; 32
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     ce8:	f8 01       	movw	r30, r16
     cea:	62 81       	ldd	r22, Z+2	; 0x02
     cec:	73 81       	ldd	r23, Z+3	; 0x03
     cee:	ce 01       	movw	r24, r28
     cf0:	49 96       	adiw	r24, 0x19	; 25
     cf2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     cf6:	f8 01       	movw	r30, r16
     cf8:	62 81       	ldd	r22, Z+2	; 0x02
     cfa:	73 81       	ldd	r23, Z+3	; 0x03
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa((gz1), itmp, 10); fputc(' ', stdout); fputs(itmp,stdout); fputc(' ', stdout);
     d04:	6f 89       	ldd	r22, Y+23	; 0x17
     d06:	78 8d       	ldd	r23, Y+24	; 0x18
     d08:	07 2e       	mov	r0, r23
     d0a:	00 0c       	add	r0, r0
     d0c:	88 0b       	sbc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	2a e0       	ldi	r18, 0x0A	; 10
     d12:	ae 01       	movw	r20, r28
     d14:	47 5e       	subi	r20, 0xE7	; 231
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
     d1c:	f8 01       	movw	r30, r16
     d1e:	62 81       	ldd	r22, Z+2	; 0x02
     d20:	73 81       	ldd	r23, Z+3	; 0x03
     d22:	80 e2       	ldi	r24, 0x20	; 32
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
     d2a:	f8 01       	movw	r30, r16
     d2c:	62 81       	ldd	r22, Z+2	; 0x02
     d2e:	73 81       	ldd	r23, Z+3	; 0x03
     d30:	ce 01       	movw	r24, r28
     d32:	49 96       	adiw	r24, 0x19	; 25
     d34:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
     d38:	f8 01       	movw	r30, r16
     d3a:	62 81       	ldd	r22, Z+2	; 0x02
     d3c:	73 81       	ldd	r23, Z+3	; 0x03
     d3e:	80 e2       	ldi	r24, 0x20	; 32
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	ltoa(info_ptr->sample, itmp, 10);
     d46:	f5 01       	movw	r30, r10
     d48:	62 81       	ldd	r22, Z+2	; 0x02
     d4a:	73 81       	ldd	r23, Z+3	; 0x03
     d4c:	07 2e       	mov	r0, r23
     d4e:	00 0c       	add	r0, r0
     d50:	88 0b       	sbc	r24, r24
     d52:	99 0b       	sbc	r25, r25
     d54:	2a e0       	ldi	r18, 0x0A	; 10
     d56:	ae 01       	movw	r20, r28
     d58:	47 5e       	subi	r20, 0xE7	; 231
     d5a:	5f 4f       	sbci	r21, 0xFF	; 255
     d5c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
	fputs(itmp, stdout);
     d60:	f8 01       	movw	r30, r16
     d62:	62 81       	ldd	r22, Z+2	; 0x02
     d64:	73 81       	ldd	r23, Z+3	; 0x03
     d66:	ce 01       	movw	r24, r28
     d68:	49 96       	adiw	r24, 0x19	; 25
     d6a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
	fputs("\r\n", stdout);
     d6e:	f8 01       	movw	r30, r16
     d70:	22 81       	ldd	r18, Z+2	; 0x02
     d72:	33 81       	ldd	r19, Z+3	; 0x03
     d74:	42 e0       	ldi	r20, 0x02	; 2
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	88 e1       	ldi	r24, 0x18	; 24
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0e 94 46 0b 	call	0x168c	; 0x168c <fwrite>
	fputs("\r\n", stdout);
     d84:	f8 01       	movw	r30, r16
     d86:	22 81       	ldd	r18, Z+2	; 0x02
     d88:	33 81       	ldd	r19, Z+3	; 0x03
     d8a:	42 e0       	ldi	r20, 0x02	; 2
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	88 e1       	ldi	r24, 0x18	; 24
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0e 94 46 0b 	call	0x168c	; 0x168c <fwrite>
	//dtostrf((azg-azg1)*info_ptr->sample, 3, 5, itmp); fputs(itmp,stdout); fputc(' ', stdout);
	//dtostrf((gxds-gxds1)*info_ptr->sample, 3, 5, itmp); fputs(itmp,stdout); fputc(' ', stdout);
	//dtostrf((gyds-gyds1)*info_ptr->sample, 3, 5, itmp); fputs(itmp,stdout); fputc(' ', stdout);
	//dtostrf((gzds-gyds1)*info_ptr->sample, 3, 5, itmp); fputs(itmp,stdout); fputc(' ', stdout);
	
	fputs("\r\n", stdout);
     d9a:	f8 01       	movw	r30, r16
     d9c:	22 81       	ldd	r18, Z+2	; 0x02
     d9e:	33 81       	ldd	r19, Z+3	; 0x03
     da0:	42 e0       	ldi	r20, 0x02	; 2
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	88 e1       	ldi	r24, 0x18	; 24
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	0e 94 46 0b 	call	0x168c	; 0x168c <fwrite>
	ltoa(info_ptr->sample, itmp, 10);
     db0:	f5 01       	movw	r30, r10
     db2:	62 81       	ldd	r22, Z+2	; 0x02
     db4:	73 81       	ldd	r23, Z+3	; 0x03
     db6:	07 2e       	mov	r0, r23
     db8:	00 0c       	add	r0, r0
     dba:	88 0b       	sbc	r24, r24
     dbc:	99 0b       	sbc	r25, r25
     dbe:	2a e0       	ldi	r18, 0x0A	; 10
     dc0:	ae 01       	movw	r20, r28
     dc2:	47 5e       	subi	r20, 0xE7	; 231
     dc4:	5f 4f       	sbci	r21, 0xFF	; 255
     dc6:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ltoa_ncheck>
	fputs(itmp, stdout);
     dca:	f8 01       	movw	r30, r16
     dcc:	62 81       	ldd	r22, Z+2	; 0x02
     dce:	73 81       	ldd	r23, Z+3	; 0x03
     dd0:	ce 01       	movw	r24, r28
     dd2:	49 96       	adiw	r24, 0x19	; 25
     dd4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fputs>
	fputs("\r\n", stdout);
     dd8:	f8 01       	movw	r30, r16
     dda:	22 81       	ldd	r18, Z+2	; 0x02
     ddc:	33 81       	ldd	r19, Z+3	; 0x03
     dde:	42 e0       	ldi	r20, 0x02	; 2
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	88 e1       	ldi	r24, 0x18	; 24
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 46 0b 	call	0x168c	; 0x168c <fwrite>
	fputs("\r\n", stdout);
     dee:	f8 01       	movw	r30, r16
     df0:	22 81       	ldd	r18, Z+2	; 0x02
     df2:	33 81       	ldd	r19, Z+3	; 0x03
     df4:	42 e0       	ldi	r20, 0x02	; 2
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	88 e1       	ldi	r24, 0x18	; 24
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 46 0b 	call	0x168c	; 0x168c <fwrite>

	custom_delay(200);
     e04:	68 ec       	ldi	r22, 0xC8	; 200
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>


}
     e10:	c0 52       	subi	r28, 0x20	; 32
     e12:	df 4f       	sbci	r29, 0xFF	; 255
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	bf 90       	pop	r11
     e30:	af 90       	pop	r10
     e32:	08 95       	ret

00000e34 <initialise>:

void initialise(info* info_ptr){
     e34:	ec 01       	movw	r28, r24

	DDRA = 0xFF;
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	81 b9       	out	0x01, r24	; 1

	DDRD = (0<<PORTD7)|(1<<PORTD6);
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	8a b9       	out	0x0a, r24	; 10

	DDRD |= (0<<PIND0);
     e3e:	8a b1       	in	r24, 0x0a	; 10
     e40:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<PORTD1);
     e42:	51 9a       	sbi	0x0a, 1	; 10

	//pwm_initialiser();
	init_tcnt0();
     e44:	0e 94 bb 07 	call	0xf76	; 0xf76 <init_tcnt0>
	init_serial_stdio(9600,0);
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	60 e8       	ldi	r22, 0x80	; 128
     e4c:	75 e2       	ldi	r23, 0x25	; 37
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 5f 02 	call	0x4be	; 0x4be <init_serial_stdio>
	//USART0_init(BAUDREG);
	//set Global Interrupt Enable flag
	
	srand(get_tcnt0_ticks());
     e56:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_tcnt0_ticks>
     e5a:	cb 01       	movw	r24, r22
     e5c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <srand>
	sei();
     e60:	78 94       	sei
	

	info_ptr->ax = 0;
     e62:	19 8a       	std	Y+17, r1	; 0x11
     e64:	18 8a       	std	Y+16, r1	; 0x10
	info_ptr->ay = 0;
     e66:	1b 8a       	std	Y+19, r1	; 0x13
     e68:	1a 8a       	std	Y+18, r1	; 0x12
	info_ptr->az = 0;
     e6a:	1d 8a       	std	Y+21, r1	; 0x15
     e6c:	1c 8a       	std	Y+20, r1	; 0x14
	info_ptr->gx = 0;
     e6e:	1f 8a       	std	Y+23, r1	; 0x17
     e70:	1e 8a       	std	Y+22, r1	; 0x16
	info_ptr->gy = 0;
     e72:	19 8e       	std	Y+25, r1	; 0x19
     e74:	18 8e       	std	Y+24, r1	; 0x18
	info_ptr->gz = 0;
     e76:	1b 8e       	std	Y+27, r1	; 0x1b
     e78:	1a 8e       	std	Y+26, r1	; 0x1a
	info_ptr->axg = 0;
     e7a:	1c 8e       	std	Y+28, r1	; 0x1c
     e7c:	1d 8e       	std	Y+29, r1	; 0x1d
     e7e:	1e 8e       	std	Y+30, r1	; 0x1e
     e80:	1f 8e       	std	Y+31, r1	; 0x1f
	info_ptr->ayg = 0;
     e82:	18 a2       	std	Y+32, r1	; 0x20
     e84:	19 a2       	std	Y+33, r1	; 0x21
     e86:	1a a2       	std	Y+34, r1	; 0x22
     e88:	1b a2       	std	Y+35, r1	; 0x23
	info_ptr->azg = 0;
     e8a:	1c a2       	std	Y+36, r1	; 0x24
     e8c:	1d a2       	std	Y+37, r1	; 0x25
     e8e:	1e a2       	std	Y+38, r1	; 0x26
     e90:	1f a2       	std	Y+39, r1	; 0x27
	info_ptr->gxds = 0;
     e92:	18 a6       	std	Y+40, r1	; 0x28
     e94:	19 a6       	std	Y+41, r1	; 0x29
     e96:	1a a6       	std	Y+42, r1	; 0x2a
     e98:	1b a6       	std	Y+43, r1	; 0x2b
	info_ptr->gyds = 0;
     e9a:	1c a6       	std	Y+44, r1	; 0x2c
     e9c:	1d a6       	std	Y+45, r1	; 0x2d
     e9e:	1e a6       	std	Y+46, r1	; 0x2e
     ea0:	1f a6       	std	Y+47, r1	; 0x2f
	info_ptr->gzds = 0;
     ea2:	18 aa       	std	Y+48, r1	; 0x30
     ea4:	19 aa       	std	Y+49, r1	; 0x31
     ea6:	1a aa       	std	Y+50, r1	; 0x32
     ea8:	1b aa       	std	Y+51, r1	; 0x33
	info_ptr->sample = get_tcnt0_ticks();
     eaa:	0e 94 d5 07 	call	0xfaa	; 0xfaa <get_tcnt0_ticks>
     eae:	7b 83       	std	Y+3, r23	; 0x03
     eb0:	6a 83       	std	Y+2, r22	; 0x02
	info_ptr->prevSample = 0;
     eb2:	19 82       	std	Y+1, r1	; 0x01
     eb4:	18 82       	st	Y, r1
	custom_delay(250);
     eb6:	6a ef       	ldi	r22, 0xFA	; 250
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00000001;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	82 b9       	out	0x02, r24	; 2
	//output_char('X');
	custom_delay(250);
     ec6:	6a ef       	ldi	r22, 0xFA	; 250
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00000010;
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	82 b9       	out	0x02, r24	; 2
	//output_char('Y');
	custom_delay(250);
     ed6:	6a ef       	ldi	r22, 0xFA	; 250
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00000011;
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	82 b9       	out	0x02, r24	; 2
	//output_char('Z');
	custom_delay(250);
     ee6:	6a ef       	ldi	r22, 0xFA	; 250
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00000110;
     ef2:	86 e0       	ldi	r24, 0x06	; 6
     ef4:	82 b9       	out	0x02, r24	; 2
	//output_char('E');
	custom_delay(250);
     ef6:	6a ef       	ldi	r22, 0xFA	; 250
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00000111;
     f02:	87 e0       	ldi	r24, 0x07	; 7
     f04:	82 b9       	out	0x02, r24	; 2
	//output_char('F');
	custom_delay(1000);
     f06:	68 ee       	ldi	r22, 0xE8	; 232
     f08:	73 e0       	ldi	r23, 0x03	; 3
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00001010;
     f12:	8a e0       	ldi	r24, 0x0A	; 10
     f14:	82 b9       	out	0x02, r24	; 2
	//output_char('G');
	custom_delay(1000);
     f16:	68 ee       	ldi	r22, 0xE8	; 232
     f18:	73 e0       	ldi	r23, 0x03	; 3
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00001000;
     f22:	88 e0       	ldi	r24, 0x08	; 8
     f24:	82 b9       	out	0x02, r24	; 2
	//output_char('H');
	custom_delay(1000);
     f26:	68 ee       	ldi	r22, 0xE8	; 232
     f28:	73 e0       	ldi	r23, 0x03	; 3
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00001110;
     f32:	8e e0       	ldi	r24, 0x0E	; 14
     f34:	82 b9       	out	0x02, r24	; 2
	//output_char('I');
	custom_delay(1000);
     f36:	68 ee       	ldi	r22, 0xE8	; 232
     f38:	73 e0       	ldi	r23, 0x03	; 3
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	char t = 'j';
	fputc(t, stdout);
     f42:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <__iob+0x2>
     f46:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <__iob+0x3>
     f4a:	8a e6       	ldi	r24, 0x6A	; 106
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <fputc>
	mpu6050_init();
     f52:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mpu6050_init>
	custom_delay(10);
     f56:	6a e0       	ldi	r22, 0x0A	; 10
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 40 03 	call	0x680	; 0x680 <custom_delay>
	PORTA = 0b00001011;
     f62:	8b e0       	ldi	r24, 0x0B	; 11
     f64:	82 b9       	out	0x02, r24	; 2

	while(1){

		mpu_get_data(info_ptr);
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 58 03 	call	0x6b0	; 0x6b0 <mpu_get_data>



	}
     f6c:	fc cf       	rjmp	.-8      	; 0xf66 <initialise+0x132>

00000f6e <main>:

/* functional code	*/
int main(void)
{
	//initialise();
	info* info_ptr = makeInfo();
     f6e:	0e 94 3b 03 	call	0x676	; 0x676 <makeInfo>
	initialise(info_ptr);
     f72:	0e 94 1a 07 	call	0xe34	; 0xe34 <initialise>

00000f76 <init_tcnt0>:
	 uint8_t return_value = Button_on;
	 if(interrupts_on){
		 sei();
	 }
	 return return_value;
 }
     f76:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Button_on>
     f7a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <tcnt0_ticks>
     f7e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <tcnt0_ticks+0x1>
     f82:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <tcnt0_ticks+0x2>
     f86:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tcnt0_ticks+0x3>
     f8a:	16 bc       	out	0x26, r1	; 38
     f8c:	8c e7       	ldi	r24, 0x7C	; 124
     f8e:	87 bd       	out	0x27, r24	; 39
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	84 bd       	out	0x24, r24	; 36
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	85 bd       	out	0x25, r24	; 37
     f98:	ee e6       	ldi	r30, 0x6E	; 110
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	82 60       	ori	r24, 0x02	; 2
     fa0:	80 83       	st	Z, r24
     fa2:	85 b3       	in	r24, 0x15	; 21
     fa4:	82 70       	andi	r24, 0x02	; 2
     fa6:	85 bb       	out	0x15, r24	; 21
     fa8:	08 95       	ret

00000faa <get_tcnt0_ticks>:
     faa:	2f b7       	in	r18, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <tcnt0_ticks>
     fb2:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <tcnt0_ticks+0x1>
     fb6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <tcnt0_ticks+0x2>
     fba:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <tcnt0_ticks+0x3>
     fbe:	22 23       	and	r18, r18
     fc0:	0c f4       	brge	.+2      	; 0xfc4 <get_tcnt0_ticks+0x1a>
     fc2:	78 94       	sei
     fc4:	08 95       	ret

00000fc6 <__vector_16>:



 ISR(TIMER0_COMPA_vect) {
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 tcnt0_ticks++;
     fd8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <tcnt0_ticks>
     fdc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <tcnt0_ticks+0x1>
     fe0:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <tcnt0_ticks+0x2>
     fe4:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <tcnt0_ticks+0x3>
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	a1 1d       	adc	r26, r1
     fec:	b1 1d       	adc	r27, r1
     fee:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <tcnt0_ticks>
     ff2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <tcnt0_ticks+0x1>
     ff6:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <tcnt0_ticks+0x2>
     ffa:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <tcnt0_ticks+0x3>
	 uint8_t temp = PIND & (1<<PORTD7);
	 if (temp != 0x00){
     ffe:	4f 9b       	sbis	0x09, 7	; 9
    1000:	04 c0       	rjmp	.+8      	; 0x100a <__vector_16+0x44>
		 Button_on = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Button_on>
    1008:	02 c0       	rjmp	.+4      	; 0x100e <__vector_16+0x48>
		 } else {
		 Button_on = 0;
    100a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Button_on>
	 }
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1020:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1024:	80 e2       	ldi	r24, 0x20	; 32
    1026:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    102a:	08 95       	ret

0000102c <i2c_start>:
    102c:	94 ea       	ldi	r25, 0xA4	; 164
    102e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1032:	4f ef       	ldi	r20, 0xFF	; 255
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	ec eb       	ldi	r30, 0xBC	; 188
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	90 81       	ld	r25, Z
    1040:	99 23       	and	r25, r25
    1042:	34 f0       	brlt	.+12     	; 0x1050 <i2c_start+0x24>
    1044:	41 50       	subi	r20, 0x01	; 1
    1046:	51 09       	sbc	r21, r1
    1048:	61 09       	sbc	r22, r1
    104a:	71 09       	sbc	r23, r1
    104c:	c0 f7       	brcc	.-16     	; 0x103e <i2c_start+0x12>
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <i2c_start+0x2c>
    1050:	45 2b       	or	r20, r21
    1052:	46 2b       	or	r20, r22
    1054:	47 2b       	or	r20, r23
    1056:	41 f1       	breq	.+80     	; 0x10a8 <i2c_start+0x7c>
    1058:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    105c:	98 7f       	andi	r25, 0xF8	; 248
    105e:	98 30       	cpi	r25, 0x08	; 8
    1060:	11 f0       	breq	.+4      	; 0x1066 <i2c_start+0x3a>
    1062:	90 31       	cpi	r25, 0x10	; 16
    1064:	19 f5       	brne	.+70     	; 0x10ac <i2c_start+0x80>
    1066:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    106a:	84 e8       	ldi	r24, 0x84	; 132
    106c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	a0 e0       	ldi	r26, 0x00	; 0
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ec eb       	ldi	r30, 0xBC	; 188
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	20 81       	ld	r18, Z
    107e:	22 23       	and	r18, r18
    1080:	2c f0       	brlt	.+10     	; 0x108c <i2c_start+0x60>
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	a1 09       	sbc	r26, r1
    1086:	b1 09       	sbc	r27, r1
    1088:	c8 f7       	brcc	.-14     	; 0x107c <i2c_start+0x50>
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <i2c_start+0x68>
    108c:	89 2b       	or	r24, r25
    108e:	8a 2b       	or	r24, r26
    1090:	8b 2b       	or	r24, r27
    1092:	71 f0       	breq	.+28     	; 0x10b0 <i2c_start+0x84>
    1094:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1098:	98 7f       	andi	r25, 0xF8	; 248
    109a:	98 31       	cpi	r25, 0x18	; 24
    109c:	59 f0       	breq	.+22     	; 0x10b4 <i2c_start+0x88>
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 34       	cpi	r25, 0x40	; 64
    10a2:	49 f4       	brne	.+18     	; 0x10b6 <i2c_start+0x8a>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	08 95       	ret
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	08 95       	ret
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	08 95       	ret
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	08 95       	ret
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	08 95       	ret

000010b8 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    10b8:	84 e9       	ldi	r24, 0x94	; 148
    10ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	ec eb       	ldi	r30, 0xBC	; 188
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	20 81       	ld	r18, Z
    10c8:	24 ff       	sbrs	r18, 4
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <i2c_stop+0x1e>
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	81 15       	cp	r24, r1
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	92 07       	cpc	r25, r18
    10d4:	c1 f7       	brne	.-16     	; 0x10c6 <i2c_stop+0xe>
    10d6:	08 95       	ret

000010d8 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    10d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    10dc:	84 e8       	ldi	r24, 0x84	; 132
    10de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    10ea:	ec eb       	ldi	r30, 0xBC	; 188
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	20 81       	ld	r18, Z
    10f0:	22 23       	and	r18, r18
    10f2:	2c f0       	brlt	.+10     	; 0x10fe <i2c_write+0x26>
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	a1 09       	sbc	r26, r1
    10f8:	b1 09       	sbc	r27, r1
    10fa:	c8 f7       	brcc	.-14     	; 0x10ee <i2c_write+0x16>
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <i2c_write+0x2e>
	if(i2c_timer == 0)
    10fe:	89 2b       	or	r24, r25
    1100:	8a 2b       	or	r24, r26
    1102:	8b 2b       	or	r24, r27
    1104:	41 f0       	breq	.+16     	; 0x1116 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1106:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    110a:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	98 32       	cpi	r25, 0x28	; 40
    1110:	19 f4       	brne	.+6      	; 0x1118 <i2c_write+0x40>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1118:	08 95       	ret

0000111a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    111a:	84 ec       	ldi	r24, 0xC4	; 196
    111c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1128:	ec eb       	ldi	r30, 0xBC	; 188
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	20 81       	ld	r18, Z
    112e:	22 23       	and	r18, r18
    1130:	2c f0       	brlt	.+10     	; 0x113c <i2c_readAck+0x22>
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	a1 09       	sbc	r26, r1
    1136:	b1 09       	sbc	r27, r1
    1138:	c8 f7       	brcc	.-14     	; 0x112c <i2c_readAck+0x12>
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
    113c:	89 2b       	or	r24, r25
    113e:	8a 2b       	or	r24, r26
    1140:	8b 2b       	or	r24, r27
    1142:	19 f0       	breq	.+6      	; 0x114a <i2c_readAck+0x30>
		return 0;

    return TWDR;
    1144:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1148:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    114a:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
    114c:	08 95       	ret

0000114e <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    114e:	84 e8       	ldi	r24, 0x84	; 132
    1150:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a0 e0       	ldi	r26, 0x00	; 0
    115a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    115c:	ec eb       	ldi	r30, 0xBC	; 188
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	20 81       	ld	r18, Z
    1162:	22 23       	and	r18, r18
    1164:	2c f0       	brlt	.+10     	; 0x1170 <i2c_readNak+0x22>
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	a1 09       	sbc	r26, r1
    116a:	b1 09       	sbc	r27, r1
    116c:	c8 f7       	brcc	.-14     	; 0x1160 <i2c_readNak+0x12>
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
    1170:	89 2b       	or	r24, r25
    1172:	8a 2b       	or	r24, r26
    1174:	8b 2b       	or	r24, r27
    1176:	19 f0       	breq	.+6      	; 0x117e <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
    1178:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    117c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
    117e:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
    1180:	08 95       	ret

00001182 <__divmodhi4>:
    1182:	97 fb       	bst	r25, 7
    1184:	07 2e       	mov	r0, r23
    1186:	16 f4       	brtc	.+4      	; 0x118c <__divmodhi4+0xa>
    1188:	00 94       	com	r0
    118a:	07 d0       	rcall	.+14     	; 0x119a <__divmodhi4_neg1>
    118c:	77 fd       	sbrc	r23, 7
    118e:	09 d0       	rcall	.+18     	; 0x11a2 <__divmodhi4_neg2>
    1190:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__udivmodhi4>
    1194:	07 fc       	sbrc	r0, 7
    1196:	05 d0       	rcall	.+10     	; 0x11a2 <__divmodhi4_neg2>
    1198:	3e f4       	brtc	.+14     	; 0x11a8 <__divmodhi4_exit>

0000119a <__divmodhi4_neg1>:
    119a:	90 95       	com	r25
    119c:	81 95       	neg	r24
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	08 95       	ret

000011a2 <__divmodhi4_neg2>:
    11a2:	70 95       	com	r23
    11a4:	61 95       	neg	r22
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255

000011a8 <__divmodhi4_exit>:
    11a8:	08 95       	ret

000011aa <__divmodsi4>:
    11aa:	05 2e       	mov	r0, r21
    11ac:	97 fb       	bst	r25, 7
    11ae:	1e f4       	brtc	.+6      	; 0x11b6 <__divmodsi4+0xc>
    11b0:	00 94       	com	r0
    11b2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__negsi2>
    11b6:	57 fd       	sbrc	r21, 7
    11b8:	07 d0       	rcall	.+14     	; 0x11c8 <__divmodsi4_neg2>
    11ba:	0e 94 08 09 	call	0x1210	; 0x1210 <__udivmodsi4>
    11be:	07 fc       	sbrc	r0, 7
    11c0:	03 d0       	rcall	.+6      	; 0x11c8 <__divmodsi4_neg2>
    11c2:	4e f4       	brtc	.+18     	; 0x11d6 <__divmodsi4_exit>
    11c4:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__negsi2>

000011c8 <__divmodsi4_neg2>:
    11c8:	50 95       	com	r21
    11ca:	40 95       	com	r20
    11cc:	30 95       	com	r19
    11ce:	21 95       	neg	r18
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	4f 4f       	sbci	r20, 0xFF	; 255
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255

000011d6 <__divmodsi4_exit>:
    11d6:	08 95       	ret

000011d8 <__negsi2>:
    11d8:	90 95       	com	r25
    11da:	80 95       	com	r24
    11dc:	70 95       	com	r23
    11de:	61 95       	neg	r22
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	8f 4f       	sbci	r24, 0xFF	; 255
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	08 95       	ret

000011e8 <__udivmodhi4>:
    11e8:	aa 1b       	sub	r26, r26
    11ea:	bb 1b       	sub	r27, r27
    11ec:	51 e1       	ldi	r21, 0x11	; 17
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <__udivmodhi4_ep>

000011f0 <__udivmodhi4_loop>:
    11f0:	aa 1f       	adc	r26, r26
    11f2:	bb 1f       	adc	r27, r27
    11f4:	a6 17       	cp	r26, r22
    11f6:	b7 07       	cpc	r27, r23
    11f8:	10 f0       	brcs	.+4      	; 0x11fe <__udivmodhi4_ep>
    11fa:	a6 1b       	sub	r26, r22
    11fc:	b7 0b       	sbc	r27, r23

000011fe <__udivmodhi4_ep>:
    11fe:	88 1f       	adc	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	5a 95       	dec	r21
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__udivmodhi4_loop>
    1206:	80 95       	com	r24
    1208:	90 95       	com	r25
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	08 95       	ret

00001210 <__udivmodsi4>:
    1210:	a1 e2       	ldi	r26, 0x21	; 33
    1212:	1a 2e       	mov	r1, r26
    1214:	aa 1b       	sub	r26, r26
    1216:	bb 1b       	sub	r27, r27
    1218:	fd 01       	movw	r30, r26
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <__udivmodsi4_ep>

0000121c <__udivmodsi4_loop>:
    121c:	aa 1f       	adc	r26, r26
    121e:	bb 1f       	adc	r27, r27
    1220:	ee 1f       	adc	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	a2 17       	cp	r26, r18
    1226:	b3 07       	cpc	r27, r19
    1228:	e4 07       	cpc	r30, r20
    122a:	f5 07       	cpc	r31, r21
    122c:	20 f0       	brcs	.+8      	; 0x1236 <__udivmodsi4_ep>
    122e:	a2 1b       	sub	r26, r18
    1230:	b3 0b       	sbc	r27, r19
    1232:	e4 0b       	sbc	r30, r20
    1234:	f5 0b       	sbc	r31, r21

00001236 <__udivmodsi4_ep>:
    1236:	66 1f       	adc	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	1a 94       	dec	r1
    1240:	69 f7       	brne	.-38     	; 0x121c <__udivmodsi4_loop>
    1242:	60 95       	com	r22
    1244:	70 95       	com	r23
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	9b 01       	movw	r18, r22
    124c:	ac 01       	movw	r20, r24
    124e:	bd 01       	movw	r22, r26
    1250:	cf 01       	movw	r24, r30
    1252:	08 95       	ret

00001254 <malloc>:
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	91 05       	cpc	r25, r1
    125c:	10 f4       	brcc	.+4      	; 0x1262 <malloc+0xe>
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <__flp>
    1266:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <__flp+0x1>
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	c0 e0       	ldi	r28, 0x00	; 0
    1270:	d0 e0       	ldi	r29, 0x00	; 0
    1272:	30 97       	sbiw	r30, 0x00	; 0
    1274:	11 f1       	breq	.+68     	; 0x12ba <malloc+0x66>
    1276:	40 81       	ld	r20, Z
    1278:	51 81       	ldd	r21, Z+1	; 0x01
    127a:	48 17       	cp	r20, r24
    127c:	59 07       	cpc	r21, r25
    127e:	c0 f0       	brcs	.+48     	; 0x12b0 <malloc+0x5c>
    1280:	48 17       	cp	r20, r24
    1282:	59 07       	cpc	r21, r25
    1284:	61 f4       	brne	.+24     	; 0x129e <malloc+0x4a>
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 97       	sbiw	r28, 0x00	; 0
    128c:	19 f0       	breq	.+6      	; 0x1294 <malloc+0x40>
    128e:	9b 83       	std	Y+3, r25	; 0x03
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	2b c0       	rjmp	.+86     	; 0x12ea <malloc+0x96>
    1294:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <__flp+0x1>
    1298:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__flp>
    129c:	26 c0       	rjmp	.+76     	; 0x12ea <malloc+0x96>
    129e:	21 15       	cp	r18, r1
    12a0:	31 05       	cpc	r19, r1
    12a2:	19 f0       	breq	.+6      	; 0x12aa <malloc+0x56>
    12a4:	42 17       	cp	r20, r18
    12a6:	53 07       	cpc	r21, r19
    12a8:	18 f4       	brcc	.+6      	; 0x12b0 <malloc+0x5c>
    12aa:	9a 01       	movw	r18, r20
    12ac:	be 01       	movw	r22, r28
    12ae:	df 01       	movw	r26, r30
    12b0:	ef 01       	movw	r28, r30
    12b2:	02 80       	ldd	r0, Z+2	; 0x02
    12b4:	f3 81       	ldd	r31, Z+3	; 0x03
    12b6:	e0 2d       	mov	r30, r0
    12b8:	dc cf       	rjmp	.-72     	; 0x1272 <malloc+0x1e>
    12ba:	21 15       	cp	r18, r1
    12bc:	31 05       	cpc	r19, r1
    12be:	09 f1       	breq	.+66     	; 0x1302 <malloc+0xae>
    12c0:	28 1b       	sub	r18, r24
    12c2:	39 0b       	sbc	r19, r25
    12c4:	24 30       	cpi	r18, 0x04	; 4
    12c6:	31 05       	cpc	r19, r1
    12c8:	90 f4       	brcc	.+36     	; 0x12ee <malloc+0x9a>
    12ca:	12 96       	adiw	r26, 0x02	; 2
    12cc:	8d 91       	ld	r24, X+
    12ce:	9c 91       	ld	r25, X
    12d0:	13 97       	sbiw	r26, 0x03	; 3
    12d2:	61 15       	cp	r22, r1
    12d4:	71 05       	cpc	r23, r1
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <malloc+0x8c>
    12d8:	fb 01       	movw	r30, r22
    12da:	93 83       	std	Z+3, r25	; 0x03
    12dc:	82 83       	std	Z+2, r24	; 0x02
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <malloc+0x94>
    12e0:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <__flp+0x1>
    12e4:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__flp>
    12e8:	fd 01       	movw	r30, r26
    12ea:	32 96       	adiw	r30, 0x02	; 2
    12ec:	44 c0       	rjmp	.+136    	; 0x1376 <malloc+0x122>
    12ee:	fd 01       	movw	r30, r26
    12f0:	e2 0f       	add	r30, r18
    12f2:	f3 1f       	adc	r31, r19
    12f4:	81 93       	st	Z+, r24
    12f6:	91 93       	st	Z+, r25
    12f8:	22 50       	subi	r18, 0x02	; 2
    12fa:	31 09       	sbc	r19, r1
    12fc:	2d 93       	st	X+, r18
    12fe:	3c 93       	st	X, r19
    1300:	3a c0       	rjmp	.+116    	; 0x1376 <malloc+0x122>
    1302:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <__brkval>
    1306:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <__brkval+0x1>
    130a:	23 2b       	or	r18, r19
    130c:	41 f4       	brne	.+16     	; 0x131e <malloc+0xca>
    130e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1312:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1316:	30 93 45 02 	sts	0x0245, r19	; 0x800245 <__brkval+0x1>
    131a:	20 93 44 02 	sts	0x0244, r18	; 0x800244 <__brkval>
    131e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1322:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1326:	21 15       	cp	r18, r1
    1328:	31 05       	cpc	r19, r1
    132a:	41 f4       	brne	.+16     	; 0x133c <malloc+0xe8>
    132c:	2d b7       	in	r18, 0x3d	; 61
    132e:	3e b7       	in	r19, 0x3e	; 62
    1330:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1334:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1338:	24 1b       	sub	r18, r20
    133a:	35 0b       	sbc	r19, r21
    133c:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <__brkval>
    1340:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <__brkval+0x1>
    1344:	e2 17       	cp	r30, r18
    1346:	f3 07       	cpc	r31, r19
    1348:	a0 f4       	brcc	.+40     	; 0x1372 <malloc+0x11e>
    134a:	2e 1b       	sub	r18, r30
    134c:	3f 0b       	sbc	r19, r31
    134e:	28 17       	cp	r18, r24
    1350:	39 07       	cpc	r19, r25
    1352:	78 f0       	brcs	.+30     	; 0x1372 <malloc+0x11e>
    1354:	ac 01       	movw	r20, r24
    1356:	4e 5f       	subi	r20, 0xFE	; 254
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	24 17       	cp	r18, r20
    135c:	35 07       	cpc	r19, r21
    135e:	48 f0       	brcs	.+18     	; 0x1372 <malloc+0x11e>
    1360:	4e 0f       	add	r20, r30
    1362:	5f 1f       	adc	r21, r31
    1364:	50 93 45 02 	sts	0x0245, r21	; 0x800245 <__brkval+0x1>
    1368:	40 93 44 02 	sts	0x0244, r20	; 0x800244 <__brkval>
    136c:	81 93       	st	Z+, r24
    136e:	91 93       	st	Z+, r25
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <malloc+0x122>
    1372:	e0 e0       	ldi	r30, 0x00	; 0
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	cf 01       	movw	r24, r30
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <free>:
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	09 f4       	brne	.+2      	; 0x138c <free+0xe>
    138a:	8c c0       	rjmp	.+280    	; 0x14a4 <free+0x126>
    138c:	fc 01       	movw	r30, r24
    138e:	32 97       	sbiw	r30, 0x02	; 2
    1390:	13 82       	std	Z+3, r1	; 0x03
    1392:	12 82       	std	Z+2, r1	; 0x02
    1394:	00 91 46 02 	lds	r16, 0x0246	; 0x800246 <__flp>
    1398:	10 91 47 02 	lds	r17, 0x0247	; 0x800247 <__flp+0x1>
    139c:	01 15       	cp	r16, r1
    139e:	11 05       	cpc	r17, r1
    13a0:	81 f4       	brne	.+32     	; 0x13c2 <free+0x44>
    13a2:	20 81       	ld	r18, Z
    13a4:	31 81       	ldd	r19, Z+1	; 0x01
    13a6:	82 0f       	add	r24, r18
    13a8:	93 1f       	adc	r25, r19
    13aa:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <__brkval>
    13ae:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <__brkval+0x1>
    13b2:	28 17       	cp	r18, r24
    13b4:	39 07       	cpc	r19, r25
    13b6:	79 f5       	brne	.+94     	; 0x1416 <free+0x98>
    13b8:	f0 93 45 02 	sts	0x0245, r31	; 0x800245 <__brkval+0x1>
    13bc:	e0 93 44 02 	sts	0x0244, r30	; 0x800244 <__brkval>
    13c0:	71 c0       	rjmp	.+226    	; 0x14a4 <free+0x126>
    13c2:	d8 01       	movw	r26, r16
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	ae 17       	cp	r26, r30
    13ca:	bf 07       	cpc	r27, r31
    13cc:	50 f4       	brcc	.+20     	; 0x13e2 <free+0x64>
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	2d 91       	ld	r18, X+
    13d2:	3c 91       	ld	r19, X
    13d4:	13 97       	sbiw	r26, 0x03	; 3
    13d6:	ad 01       	movw	r20, r26
    13d8:	21 15       	cp	r18, r1
    13da:	31 05       	cpc	r19, r1
    13dc:	09 f1       	breq	.+66     	; 0x1420 <free+0xa2>
    13de:	d9 01       	movw	r26, r18
    13e0:	f3 cf       	rjmp	.-26     	; 0x13c8 <free+0x4a>
    13e2:	9d 01       	movw	r18, r26
    13e4:	da 01       	movw	r26, r20
    13e6:	33 83       	std	Z+3, r19	; 0x03
    13e8:	22 83       	std	Z+2, r18	; 0x02
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	86 0f       	add	r24, r22
    13f0:	97 1f       	adc	r25, r23
    13f2:	82 17       	cp	r24, r18
    13f4:	93 07       	cpc	r25, r19
    13f6:	69 f4       	brne	.+26     	; 0x1412 <free+0x94>
    13f8:	ec 01       	movw	r28, r24
    13fa:	28 81       	ld	r18, Y
    13fc:	39 81       	ldd	r19, Y+1	; 0x01
    13fe:	26 0f       	add	r18, r22
    1400:	37 1f       	adc	r19, r23
    1402:	2e 5f       	subi	r18, 0xFE	; 254
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	31 83       	std	Z+1, r19	; 0x01
    1408:	20 83       	st	Z, r18
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	93 83       	std	Z+3, r25	; 0x03
    1410:	82 83       	std	Z+2, r24	; 0x02
    1412:	45 2b       	or	r20, r21
    1414:	29 f4       	brne	.+10     	; 0x1420 <free+0xa2>
    1416:	f0 93 47 02 	sts	0x0247, r31	; 0x800247 <__flp+0x1>
    141a:	e0 93 46 02 	sts	0x0246, r30	; 0x800246 <__flp>
    141e:	42 c0       	rjmp	.+132    	; 0x14a4 <free+0x126>
    1420:	13 96       	adiw	r26, 0x03	; 3
    1422:	fc 93       	st	X, r31
    1424:	ee 93       	st	-X, r30
    1426:	12 97       	sbiw	r26, 0x02	; 2
    1428:	ed 01       	movw	r28, r26
    142a:	49 91       	ld	r20, Y+
    142c:	59 91       	ld	r21, Y+
    142e:	9e 01       	movw	r18, r28
    1430:	24 0f       	add	r18, r20
    1432:	35 1f       	adc	r19, r21
    1434:	e2 17       	cp	r30, r18
    1436:	f3 07       	cpc	r31, r19
    1438:	71 f4       	brne	.+28     	; 0x1456 <free+0xd8>
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	84 0f       	add	r24, r20
    1440:	95 1f       	adc	r25, r21
    1442:	02 96       	adiw	r24, 0x02	; 2
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	9c 93       	st	X, r25
    1448:	8e 93       	st	-X, r24
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	13 96       	adiw	r26, 0x03	; 3
    1450:	9c 93       	st	X, r25
    1452:	8e 93       	st	-X, r24
    1454:	12 97       	sbiw	r26, 0x02	; 2
    1456:	e0 e0       	ldi	r30, 0x00	; 0
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	d8 01       	movw	r26, r16
    145c:	12 96       	adiw	r26, 0x02	; 2
    145e:	8d 91       	ld	r24, X+
    1460:	9c 91       	ld	r25, X
    1462:	13 97       	sbiw	r26, 0x03	; 3
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	19 f0       	breq	.+6      	; 0x146e <free+0xf0>
    1468:	f8 01       	movw	r30, r16
    146a:	8c 01       	movw	r16, r24
    146c:	f6 cf       	rjmp	.-20     	; 0x145a <free+0xdc>
    146e:	8d 91       	ld	r24, X+
    1470:	9c 91       	ld	r25, X
    1472:	98 01       	movw	r18, r16
    1474:	2e 5f       	subi	r18, 0xFE	; 254
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <__brkval>
    1480:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <__brkval+0x1>
    1484:	28 17       	cp	r18, r24
    1486:	39 07       	cpc	r19, r25
    1488:	69 f4       	brne	.+26     	; 0x14a4 <free+0x126>
    148a:	30 97       	sbiw	r30, 0x00	; 0
    148c:	29 f4       	brne	.+10     	; 0x1498 <free+0x11a>
    148e:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <__flp+0x1>
    1492:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <__flp>
    1496:	02 c0       	rjmp	.+4      	; 0x149c <free+0x11e>
    1498:	13 82       	std	Z+3, r1	; 0x03
    149a:	12 82       	std	Z+2, r1	; 0x02
    149c:	10 93 45 02 	sts	0x0245, r17	; 0x800245 <__brkval+0x1>
    14a0:	00 93 44 02 	sts	0x0244, r16	; 0x800244 <__brkval>
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <do_rand>:
    14ae:	8f 92       	push	r8
    14b0:	9f 92       	push	r9
    14b2:	af 92       	push	r10
    14b4:	bf 92       	push	r11
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
    14c4:	68 81       	ld	r22, Y
    14c6:	79 81       	ldd	r23, Y+1	; 0x01
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	9b 81       	ldd	r25, Y+3	; 0x03
    14cc:	61 15       	cp	r22, r1
    14ce:	71 05       	cpc	r23, r1
    14d0:	81 05       	cpc	r24, r1
    14d2:	91 05       	cpc	r25, r1
    14d4:	21 f4       	brne	.+8      	; 0x14de <do_rand+0x30>
    14d6:	64 e2       	ldi	r22, 0x24	; 36
    14d8:	79 ed       	ldi	r23, 0xD9	; 217
    14da:	8b e5       	ldi	r24, 0x5B	; 91
    14dc:	97 e0       	ldi	r25, 0x07	; 7
    14de:	2d e1       	ldi	r18, 0x1D	; 29
    14e0:	33 ef       	ldi	r19, 0xF3	; 243
    14e2:	41 e0       	ldi	r20, 0x01	; 1
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__divmodsi4>
    14ea:	49 01       	movw	r8, r18
    14ec:	5a 01       	movw	r10, r20
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	a7 ea       	ldi	r26, 0xA7	; 167
    14f4:	b1 e4       	ldi	r27, 0x41	; 65
    14f6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__muluhisi3>
    14fa:	6b 01       	movw	r12, r22
    14fc:	7c 01       	movw	r14, r24
    14fe:	ac ee       	ldi	r26, 0xEC	; 236
    1500:	b4 ef       	ldi	r27, 0xF4	; 244
    1502:	a5 01       	movw	r20, r10
    1504:	94 01       	movw	r18, r8
    1506:	0e 94 98 0b 	call	0x1730	; 0x1730 <__mulohisi3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	8c 0d       	add	r24, r12
    1510:	9d 1d       	adc	r25, r13
    1512:	ae 1d       	adc	r26, r14
    1514:	bf 1d       	adc	r27, r15
    1516:	b7 ff       	sbrs	r27, 7
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <do_rand+0x72>
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	a1 09       	sbc	r26, r1
    151e:	b0 48       	sbci	r27, 0x80	; 128
    1520:	88 83       	st	Y, r24
    1522:	99 83       	std	Y+1, r25	; 0x01
    1524:	aa 83       	std	Y+2, r26	; 0x02
    1526:	bb 83       	std	Y+3, r27	; 0x03
    1528:	9f 77       	andi	r25, 0x7F	; 127
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	bf 90       	pop	r11
    1538:	af 90       	pop	r10
    153a:	9f 90       	pop	r9
    153c:	8f 90       	pop	r8
    153e:	08 95       	ret

00001540 <rand_r>:
    1540:	0e 94 57 0a 	call	0x14ae	; 0x14ae <do_rand>
    1544:	08 95       	ret

00001546 <rand>:
    1546:	86 e0       	ldi	r24, 0x06	; 6
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <do_rand>
    154e:	08 95       	ret

00001550 <srand>:
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1558:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    155c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1560:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1564:	08 95       	ret

00001566 <__ltoa_ncheck>:
    1566:	bb 27       	eor	r27, r27
    1568:	2a 30       	cpi	r18, 0x0A	; 10
    156a:	51 f4       	brne	.+20     	; 0x1580 <__ltoa_ncheck+0x1a>
    156c:	99 23       	and	r25, r25
    156e:	42 f4       	brpl	.+16     	; 0x1580 <__ltoa_ncheck+0x1a>
    1570:	bd e2       	ldi	r27, 0x2D	; 45
    1572:	90 95       	com	r25
    1574:	80 95       	com	r24
    1576:	70 95       	com	r23
    1578:	61 95       	neg	r22
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__ultoa_common>

00001584 <__ultoa_ncheck>:
    1584:	bb 27       	eor	r27, r27

00001586 <__ultoa_common>:
    1586:	fa 01       	movw	r30, r20
    1588:	a6 2f       	mov	r26, r22
    158a:	62 17       	cp	r22, r18
    158c:	71 05       	cpc	r23, r1
    158e:	81 05       	cpc	r24, r1
    1590:	91 05       	cpc	r25, r1
    1592:	33 0b       	sbc	r19, r19
    1594:	30 fb       	bst	r19, 0
    1596:	66 f0       	brts	.+24     	; 0x15b0 <__ultoa_common+0x2a>
    1598:	aa 27       	eor	r26, r26
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	88 1f       	adc	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	aa 1f       	adc	r26, r26
    15a4:	a2 17       	cp	r26, r18
    15a6:	10 f0       	brcs	.+4      	; 0x15ac <__ultoa_common+0x26>
    15a8:	a2 1b       	sub	r26, r18
    15aa:	63 95       	inc	r22
    15ac:	38 50       	subi	r19, 0x08	; 8
    15ae:	a9 f7       	brne	.-22     	; 0x159a <__ultoa_common+0x14>
    15b0:	a0 5d       	subi	r26, 0xD0	; 208
    15b2:	aa 33       	cpi	r26, 0x3A	; 58
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <__ultoa_common+0x32>
    15b6:	a9 5d       	subi	r26, 0xD9	; 217
    15b8:	a1 93       	st	Z+, r26
    15ba:	36 f7       	brtc	.-52     	; 0x1588 <__ultoa_common+0x2>
    15bc:	b1 11       	cpse	r27, r1
    15be:	b1 93       	st	Z+, r27
    15c0:	10 82       	st	Z, r1
    15c2:	ca 01       	movw	r24, r20
    15c4:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <strrev>

000015c8 <fputc>:
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	fb 01       	movw	r30, r22
    15d2:	23 81       	ldd	r18, Z+3	; 0x03
    15d4:	21 fd       	sbrc	r18, 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <fputc+0x16>
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	9f ef       	ldi	r25, 0xFF	; 255
    15dc:	28 c0       	rjmp	.+80     	; 0x162e <fputc+0x66>
    15de:	22 ff       	sbrs	r18, 2
    15e0:	16 c0       	rjmp	.+44     	; 0x160e <fputc+0x46>
    15e2:	46 81       	ldd	r20, Z+6	; 0x06
    15e4:	57 81       	ldd	r21, Z+7	; 0x07
    15e6:	24 81       	ldd	r18, Z+4	; 0x04
    15e8:	35 81       	ldd	r19, Z+5	; 0x05
    15ea:	42 17       	cp	r20, r18
    15ec:	53 07       	cpc	r21, r19
    15ee:	44 f4       	brge	.+16     	; 0x1600 <fputc+0x38>
    15f0:	a0 81       	ld	r26, Z
    15f2:	b1 81       	ldd	r27, Z+1	; 0x01
    15f4:	9d 01       	movw	r18, r26
    15f6:	2f 5f       	subi	r18, 0xFF	; 255
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	31 83       	std	Z+1, r19	; 0x01
    15fc:	20 83       	st	Z, r18
    15fe:	8c 93       	st	X, r24
    1600:	26 81       	ldd	r18, Z+6	; 0x06
    1602:	37 81       	ldd	r19, Z+7	; 0x07
    1604:	2f 5f       	subi	r18, 0xFF	; 255
    1606:	3f 4f       	sbci	r19, 0xFF	; 255
    1608:	37 83       	std	Z+7, r19	; 0x07
    160a:	26 83       	std	Z+6, r18	; 0x06
    160c:	10 c0       	rjmp	.+32     	; 0x162e <fputc+0x66>
    160e:	eb 01       	movw	r28, r22
    1610:	09 2f       	mov	r16, r25
    1612:	18 2f       	mov	r17, r24
    1614:	00 84       	ldd	r0, Z+8	; 0x08
    1616:	f1 85       	ldd	r31, Z+9	; 0x09
    1618:	e0 2d       	mov	r30, r0
    161a:	09 95       	icall
    161c:	89 2b       	or	r24, r25
    161e:	e1 f6       	brne	.-72     	; 0x15d8 <fputc+0x10>
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	9f 81       	ldd	r25, Y+7	; 0x07
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	9f 83       	std	Y+7, r25	; 0x07
    1628:	8e 83       	std	Y+6, r24	; 0x06
    162a:	81 2f       	mov	r24, r17
    162c:	90 2f       	mov	r25, r16
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <fputs>:
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	db 01       	movw	r26, r22
    1646:	13 96       	adiw	r26, 0x03	; 3
    1648:	2c 91       	ld	r18, X
    164a:	21 ff       	sbrs	r18, 1
    164c:	18 c0       	rjmp	.+48     	; 0x167e <fputs+0x46>
    164e:	8b 01       	movw	r16, r22
    1650:	7c 01       	movw	r14, r24
    1652:	d0 e0       	ldi	r29, 0x00	; 0
    1654:	c0 e0       	ldi	r28, 0x00	; 0
    1656:	f7 01       	movw	r30, r14
    1658:	81 91       	ld	r24, Z+
    165a:	7f 01       	movw	r14, r30
    165c:	88 23       	and	r24, r24
    165e:	61 f0       	breq	.+24     	; 0x1678 <fputs+0x40>
    1660:	d8 01       	movw	r26, r16
    1662:	18 96       	adiw	r26, 0x08	; 8
    1664:	ed 91       	ld	r30, X+
    1666:	fc 91       	ld	r31, X
    1668:	19 97       	sbiw	r26, 0x09	; 9
    166a:	b8 01       	movw	r22, r16
    166c:	09 95       	icall
    166e:	89 2b       	or	r24, r25
    1670:	91 f3       	breq	.-28     	; 0x1656 <fputs+0x1e>
    1672:	df ef       	ldi	r29, 0xFF	; 255
    1674:	cf ef       	ldi	r28, 0xFF	; 255
    1676:	ef cf       	rjmp	.-34     	; 0x1656 <fputs+0x1e>
    1678:	8d 2f       	mov	r24, r29
    167a:	9c 2f       	mov	r25, r28
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <fputs+0x4a>
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	9f ef       	ldi	r25, 0xFF	; 255
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	e6 e0       	ldi	r30, 0x06	; 6
    1688:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__epilogue_restores__+0x18>

0000168c <fwrite>:
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	ec e4       	ldi	r30, 0x4C	; 76
    1692:	fb e0       	ldi	r31, 0x0B	; 11
    1694:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__prologue_saves__+0xc>
    1698:	5b 01       	movw	r10, r22
    169a:	4a 01       	movw	r8, r20
    169c:	79 01       	movw	r14, r18
    169e:	d9 01       	movw	r26, r18
    16a0:	13 96       	adiw	r26, 0x03	; 3
    16a2:	2c 91       	ld	r18, X
    16a4:	21 ff       	sbrs	r18, 1
    16a6:	1d c0       	rjmp	.+58     	; 0x16e2 <fwrite+0x56>
    16a8:	c0 e0       	ldi	r28, 0x00	; 0
    16aa:	d0 e0       	ldi	r29, 0x00	; 0
    16ac:	c8 15       	cp	r28, r8
    16ae:	d9 05       	cpc	r29, r9
    16b0:	d9 f0       	breq	.+54     	; 0x16e8 <fwrite+0x5c>
    16b2:	8c 01       	movw	r16, r24
    16b4:	6c 01       	movw	r12, r24
    16b6:	ca 0c       	add	r12, r10
    16b8:	db 1c       	adc	r13, r11
    16ba:	c8 01       	movw	r24, r16
    16bc:	0c 15       	cp	r16, r12
    16be:	1d 05       	cpc	r17, r13
    16c0:	71 f0       	breq	.+28     	; 0x16de <fwrite+0x52>
    16c2:	0f 5f       	subi	r16, 0xFF	; 255
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	d7 01       	movw	r26, r14
    16c8:	18 96       	adiw	r26, 0x08	; 8
    16ca:	ed 91       	ld	r30, X+
    16cc:	fc 91       	ld	r31, X
    16ce:	19 97       	sbiw	r26, 0x09	; 9
    16d0:	b7 01       	movw	r22, r14
    16d2:	dc 01       	movw	r26, r24
    16d4:	8c 91       	ld	r24, X
    16d6:	09 95       	icall
    16d8:	89 2b       	or	r24, r25
    16da:	79 f3       	breq	.-34     	; 0x16ba <fwrite+0x2e>
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <fwrite+0x5c>
    16de:	21 96       	adiw	r28, 0x01	; 1
    16e0:	e5 cf       	rjmp	.-54     	; 0x16ac <fwrite+0x20>
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <fwrite+0x5e>
    16e8:	ce 01       	movw	r24, r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	ec e0       	ldi	r30, 0x0C	; 12
    16f0:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__epilogue_restores__+0xc>

000016f4 <strrev>:
    16f4:	dc 01       	movw	r26, r24
    16f6:	fc 01       	movw	r30, r24
    16f8:	67 2f       	mov	r22, r23
    16fa:	71 91       	ld	r23, Z+
    16fc:	77 23       	and	r23, r23
    16fe:	e1 f7       	brne	.-8      	; 0x16f8 <strrev+0x4>
    1700:	32 97       	sbiw	r30, 0x02	; 2
    1702:	04 c0       	rjmp	.+8      	; 0x170c <strrev+0x18>
    1704:	7c 91       	ld	r23, X
    1706:	6d 93       	st	X+, r22
    1708:	70 83       	st	Z, r23
    170a:	62 91       	ld	r22, -Z
    170c:	ae 17       	cp	r26, r30
    170e:	bf 07       	cpc	r27, r31
    1710:	c8 f3       	brcs	.-14     	; 0x1704 <strrev+0x10>
    1712:	08 95       	ret

00001714 <__muluhisi3>:
    1714:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__umulhisi3>
    1718:	a5 9f       	mul	r26, r21
    171a:	90 0d       	add	r25, r0
    171c:	b4 9f       	mul	r27, r20
    171e:	90 0d       	add	r25, r0
    1720:	a4 9f       	mul	r26, r20
    1722:	80 0d       	add	r24, r0
    1724:	91 1d       	adc	r25, r1
    1726:	11 24       	eor	r1, r1
    1728:	08 95       	ret

0000172a <__mulshisi3>:
    172a:	b7 ff       	sbrs	r27, 7
    172c:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__muluhisi3>

00001730 <__mulohisi3>:
    1730:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__muluhisi3>
    1734:	82 1b       	sub	r24, r18
    1736:	93 0b       	sbc	r25, r19
    1738:	08 95       	ret

0000173a <__prologue_saves__>:
    173a:	2f 92       	push	r2
    173c:	3f 92       	push	r3
    173e:	4f 92       	push	r4
    1740:	5f 92       	push	r5
    1742:	6f 92       	push	r6
    1744:	7f 92       	push	r7
    1746:	8f 92       	push	r8
    1748:	9f 92       	push	r9
    174a:	af 92       	push	r10
    174c:	bf 92       	push	r11
    174e:	cf 92       	push	r12
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	ca 1b       	sub	r28, r26
    1764:	db 0b       	sbc	r29, r27
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	09 94       	ijmp

00001772 <__epilogue_restores__>:
    1772:	2a 88       	ldd	r2, Y+18	; 0x12
    1774:	39 88       	ldd	r3, Y+17	; 0x11
    1776:	48 88       	ldd	r4, Y+16	; 0x10
    1778:	5f 84       	ldd	r5, Y+15	; 0x0f
    177a:	6e 84       	ldd	r6, Y+14	; 0x0e
    177c:	7d 84       	ldd	r7, Y+13	; 0x0d
    177e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1780:	9b 84       	ldd	r9, Y+11	; 0x0b
    1782:	aa 84       	ldd	r10, Y+10	; 0x0a
    1784:	b9 84       	ldd	r11, Y+9	; 0x09
    1786:	c8 84       	ldd	r12, Y+8	; 0x08
    1788:	df 80       	ldd	r13, Y+7	; 0x07
    178a:	ee 80       	ldd	r14, Y+6	; 0x06
    178c:	fd 80       	ldd	r15, Y+5	; 0x05
    178e:	0c 81       	ldd	r16, Y+4	; 0x04
    1790:	1b 81       	ldd	r17, Y+3	; 0x03
    1792:	aa 81       	ldd	r26, Y+2	; 0x02
    1794:	b9 81       	ldd	r27, Y+1	; 0x01
    1796:	ce 0f       	add	r28, r30
    1798:	d1 1d       	adc	r29, r1
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	ed 01       	movw	r28, r26
    17a6:	08 95       	ret

000017a8 <__umulhisi3>:
    17a8:	a2 9f       	mul	r26, r18
    17aa:	b0 01       	movw	r22, r0
    17ac:	b3 9f       	mul	r27, r19
    17ae:	c0 01       	movw	r24, r0
    17b0:	a3 9f       	mul	r26, r19
    17b2:	70 0d       	add	r23, r0
    17b4:	81 1d       	adc	r24, r1
    17b6:	11 24       	eor	r1, r1
    17b8:	91 1d       	adc	r25, r1
    17ba:	b2 9f       	mul	r27, r18
    17bc:	70 0d       	add	r23, r0
    17be:	81 1d       	adc	r24, r1
    17c0:	11 24       	eor	r1, r1
    17c2:	91 1d       	adc	r25, r1
    17c4:	08 95       	ret

000017c6 <_exit>:
    17c6:	f8 94       	cli

000017c8 <__stop_program>:
    17c8:	ff cf       	rjmp	.-2      	; 0x17c8 <__stop_program>
