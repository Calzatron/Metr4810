
Project_0_2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  00800100  00800100  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067b  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f4  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060c  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  0000130c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031b  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fc  00000000  00000000  00001817  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_10>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_16>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_17>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea ee       	ldi	r30, 0xEA	; 234
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 31       	cpi	r26, 0x1A	; 26
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:

*/


int main(void)
{
  ae:	ff cf       	rjmp	.-2      	; 0xae <main>

000000b0 <__vector_10>:
	return return_value;
}



ISR (TIMER0_COMPA_vect){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
	
	tcnt0_ticks++;
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  ca:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
  ce:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	a1 1d       	adc	r26, r1
  d6:	b1 1d       	adc	r27, r1
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
  dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
  e0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
  e4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>

  e8:	bf 91       	pop	r27
  ea:	af 91       	pop	r26
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_17>:
}




 ISR (USART0_DRE_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31

/* Check if we have data in our buffer */
	if(bytes_in_output_buffer > 0) {
 10e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <bytes_in_output_buffer>
 112:	88 23       	and	r24, r24
 114:	51 f1       	breq	.+84     	; 0x16a <__vector_17+0x70>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		//char c;
		if(output_insert_pos - bytes_in_output_buffer < 0) {
 116:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <output_insert_pos>
 11a:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <bytes_in_output_buffer>
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	82 1b       	sub	r24, r18
 122:	91 09       	sbc	r25, r1
 124:	6a f4       	brpl	.+26     	; 0x140 <__vector_17+0x46>
			/* Need to wrap around */
			transmitByte = output_buffer[output_insert_pos - bytes_in_output_buffer
 126:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <output_insert_pos>
 12a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <bytes_in_output_buffer>
				+ OUTPUT_BUFFER_SIZE];
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e8 1b       	sub	r30, r24
 132:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		//char c;
		if(output_insert_pos - bytes_in_output_buffer < 0) {
			/* Need to wrap around */
			transmitByte = output_buffer[output_insert_pos - bytes_in_output_buffer
 134:	e9 5f       	subi	r30, 0xF9	; 249
 136:	fd 4f       	sbci	r31, 0xFD	; 253
 138:	80 81       	ld	r24, Z
 13a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <transmitByte>
 13e:	0c c0       	rjmp	.+24     	; 0x158 <__vector_17+0x5e>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			transmitByte = output_buffer[output_insert_pos - bytes_in_output_buffer];
 140:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <output_insert_pos>
 144:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <bytes_in_output_buffer>
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e8 1b       	sub	r30, r24
 14c:	f1 09       	sbc	r31, r1
 14e:	e8 5f       	subi	r30, 0xF8	; 248
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	80 81       	ld	r24, Z
 154:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <transmitByte>
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_output_buffer--;
 158:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <bytes_in_output_buffer>
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <bytes_in_output_buffer>
		
		/* Output the character via the UART */
		UDR0 = transmitByte;
 162:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <transmitByte>
 166:	80 bd       	out	0x20, r24	; 32
 168:	03 c0       	rjmp	.+6      	; 0x170 <__vector_17+0x76>
	} else {
		// disable UART as transmission complete
		UCSR0B &= ~(1<<UDRIE0);
 16a:	85 b5       	in	r24, 0x25	; 37
 16c:	8f 7d       	andi	r24, 0xDF	; 223
 16e:	85 bd       	out	0x25, r24	; 37
	}

 }
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_16>:
 
 
 
 ISR (USART0_RX_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	// code to execute when the USART receives a byte here

	receivedByte = UDR0;
 194:	80 b5       	in	r24, 0x20	; 32
 196:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <receivedByte>
	input_buffer[input_insert_pos++] = receivedByte;
 19a:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <input_insert_pos>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	8e 0f       	add	r24, r30
 1a2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <input_insert_pos>
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <receivedByte>
 1ac:	e9 5f       	subi	r30, 0xF9	; 249
 1ae:	fd 4f       	sbci	r31, 0xFD	; 253
 1b0:	80 83       	st	Z, r24

	if(input_insert_pos >= INPUT_BUFFER_SIZE - 1){
 1b2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <input_insert_pos>
 1b6:	8f 30       	cpi	r24, 0x0F	; 15
 1b8:	10 f0       	brcs	.+4      	; 0x1be <__vector_16+0x3a>
		input_insert_pos = 0;
 1ba:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <input_insert_pos>
	}

	bytes_in_input_buffer++;
 1be:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <bytes_in_input_buffer>
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <bytes_in_input_buffer>
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 1c8:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <bytes_in_input_buffer>
 1cc:	80 31       	cpi	r24, 0x10	; 16
 1ce:	18 f0       	brcs	.+6      	; 0x1d6 <__vector_16+0x52>
		input_overrun = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <input_overrun>
	}

 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
