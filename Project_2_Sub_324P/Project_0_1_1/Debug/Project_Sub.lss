
Project_Sub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000dba  00000e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  00800118  00800118  00000e66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001086  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f3  00000000  00000000  000020ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e0e  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  000035d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ca  00000000  00000000  0000391c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af9  00000000  00000000  00003de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000048df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_20>
  54:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea eb       	ldi	r30, 0xBA	; 186
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 31       	cpi	r26, 0x18	; 24
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a8 e1       	ldi	r26, 0x18	; 24
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 34       	cpi	r26, 0x43	; 67
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  b2:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
  ba:	2f b7       	in	r18, 0x3f	; 63
  bc:	20 78       	andi	r18, 0x80	; 128
  be:	02 c0       	rjmp	.+4      	; 0xc4 <uart_put_char+0xa>
  c0:	22 23       	and	r18, r18
  c2:	29 f1       	breq	.+74     	; 0x10e <uart_put_char+0x54>
  c4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <bytes_in_out_buffer>
  c8:	9f 3f       	cpi	r25, 0xFF	; 255
  ca:	d1 f3       	breq	.-12     	; 0xc0 <uart_put_char+0x6>
  cc:	f8 94       	cli
  ce:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <out_insert_pos>
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	9e 0f       	add	r25, r30
  d6:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <out_insert_pos>
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	e0 5e       	subi	r30, 0xE0	; 224
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	80 83       	st	Z, r24
  e2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <bytes_in_out_buffer>
  ec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <out_insert_pos>
  f0:	8f 3f       	cpi	r24, 0xFF	; 255
  f2:	11 f4       	brne	.+4      	; 0xf8 <uart_put_char+0x3e>
  f4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <out_insert_pos>
  f8:	e1 ec       	ldi	r30, 0xC1	; 193
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
 102:	22 23       	and	r18, r18
 104:	39 f0       	breq	.+14     	; 0x114 <uart_put_char+0x5a>
 106:	78 94       	sei
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret

0000011a <uart_get_char>:
 11a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 11e:	88 23       	and	r24, r24
 120:	e1 f3       	breq	.-8      	; 0x11a <uart_get_char>
 122:	2f b7       	in	r18, 0x3f	; 63
 124:	20 78       	andi	r18, 0x80	; 128
 126:	f8 94       	cli
 128:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <input_insert_pos>
 12c:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <bytes_in_input_buffer>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	83 1b       	sub	r24, r19
 134:	91 09       	sbc	r25, r1
 136:	5a f4       	brpl	.+22     	; 0x14e <uart_get_char+0x34>
 138:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <input_insert_pos>
 13c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	e8 1b       	sub	r30, r24
 144:	f1 09       	sbc	r31, r1
 146:	e0 5d       	subi	r30, 0xD0	; 208
 148:	fd 4f       	sbci	r31, 0xFD	; 253
 14a:	80 81       	ld	r24, Z
 14c:	0a c0       	rjmp	.+20     	; 0x162 <uart_get_char+0x48>
 14e:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <input_insert_pos>
 152:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e8 1b       	sub	r30, r24
 15a:	f1 09       	sbc	r31, r1
 15c:	e0 5e       	subi	r30, 0xE0	; 224
 15e:	fd 4f       	sbci	r31, 0xFD	; 253
 160:	80 81       	ld	r24, Z
 162:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <bytes_in_input_buffer>
 166:	91 50       	subi	r25, 0x01	; 1
 168:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <bytes_in_input_buffer>
 16c:	22 23       	and	r18, r18
 16e:	09 f0       	breq	.+2      	; 0x172 <uart_get_char+0x58>
 170:	78 94       	sei
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret

00000176 <init_serial_stdio>:
 176:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <out_insert_pos>
 17a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <bytes_in_out_buffer>
 17e:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <input_insert_pos>
 182:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <bytes_in_input_buffer>
 186:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <input_overrun>
 18a:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__data_end>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	aa 1f       	adc	r26, r26
 198:	bb 1f       	adc	r27, r27
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	aa 1f       	adc	r26, r26
 1a0:	bb 1f       	adc	r27, r27
 1a2:	9c 01       	movw	r18, r24
 1a4:	ad 01       	movw	r20, r26
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	44 1f       	adc	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	72 e1       	ldi	r23, 0x12	; 18
 1b2:	8a e7       	ldi	r24, 0x7A	; 122
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__divmodsi4>
 1ba:	ba 01       	movw	r22, r20
 1bc:	a9 01       	movw	r20, r18
 1be:	4f 5f       	subi	r20, 0xFF	; 255
 1c0:	5f 4f       	sbci	r21, 0xFF	; 255
 1c2:	6f 4f       	sbci	r22, 0xFF	; 255
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
 1c6:	db 01       	movw	r26, r22
 1c8:	ca 01       	movw	r24, r20
 1ca:	1a f4       	brpl	.+6      	; 0x1d2 <init_serial_stdio+0x5c>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	a1 1d       	adc	r26, r1
 1d0:	b1 1d       	adc	r27, r1
 1d2:	b5 95       	asr	r27
 1d4:	a7 95       	ror	r26
 1d6:	97 95       	ror	r25
 1d8:	87 95       	ror	r24
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1e4:	e1 ec       	ldi	r30, 0xC1	; 193
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	88 e1       	ldi	r24, 0x18	; 24
 1ea:	80 83       	st	Z, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	80 83       	st	Z, r24
 1f2:	ed e3       	ldi	r30, 0x3D	; 61
 1f4:	f2 e0       	ldi	r31, 0x02	; 2
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	93 83       	std	Z+3, r25	; 0x03
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	91 83       	std	Z+1, r25	; 0x01
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
 218:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 21c:	88 23       	and	r24, r24
 21e:	29 f1       	breq	.+74     	; 0x26a <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
 220:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <out_insert_pos>
 224:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <bytes_in_out_buffer>
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	82 1b       	sub	r24, r18
 22c:	91 09       	sbc	r25, r1
 22e:	5a f4       	brpl	.+22     	; 0x246 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
 230:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <out_insert_pos>
 234:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e8 1b       	sub	r30, r24
 23c:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
 23e:	e1 5e       	subi	r30, 0xE1	; 225
 240:	fd 4f       	sbci	r31, 0xFD	; 253
 242:	90 81       	ld	r25, Z
 244:	0a c0       	rjmp	.+20     	; 0x25a <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 246:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <out_insert_pos>
 24a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	e8 1b       	sub	r30, r24
 252:	f1 09       	sbc	r31, r1
 254:	e0 5e       	subi	r30, 0xE0	; 224
 256:	fe 4f       	sbci	r31, 0xFE	; 254
 258:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
 25a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
 264:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 268:	05 c0       	rjmp	.+10     	; 0x274 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
 26a:	e1 ec       	ldi	r30, 0xC1	; 193
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	8f 7d       	andi	r24, 0xDF	; 223
 272:	80 83       	st	Z, r24
	}
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	cf 93       	push	r28
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
 2ac:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 2b0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2b4:	88 23       	and	r24, r24
 2b6:	49 f0       	breq	.+18     	; 0x2ca <__vector_20+0x42>
 2b8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 2bc:	8f 3f       	cpi	r24, 0xFF	; 255
 2be:	29 f0       	breq	.+10     	; 0x2ca <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	8c 2f       	mov	r24, r28
 2c6:	0e 94 5d 00 	call	0xba	; 0xba <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 2ca:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 2ce:	80 31       	cpi	r24, 0x10	; 16
 2d0:	20 f0       	brcs	.+8      	; 0x2da <__vector_20+0x52>
		input_overrun = 1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <input_overrun>
 2d8:	18 c0       	rjmp	.+48     	; 0x30a <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
 2da:	cd 30       	cpi	r28, 0x0D	; 13
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <__vector_20+0x58>
			c = '\n';
 2de:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
 2e0:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <input_insert_pos>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	8e 0f       	add	r24, r30
 2e8:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <input_insert_pos>
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	e0 5e       	subi	r30, 0xE0	; 224
 2f0:	fd 4f       	sbci	r31, 0xFD	; 253
 2f2:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
 2f4:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
 2fe:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <input_insert_pos>
 302:	80 31       	cpi	r24, 0x10	; 16
 304:	11 f4       	brne	.+4      	; 0x30a <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
 306:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <input_insert_pos>
		}
	}
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	cf 91       	pop	r28
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <init_tcnt0>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT0 = 0;
 32e:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
 330:	17 bc       	out	0x27, r1	; 39
	//OCR0B = 124;
	

	TCCR0A |= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | _BV(WGM00) | _BV(WGM01);
 332:	84 b5       	in	r24, 0x24	; 36
 334:	83 68       	ori	r24, 0x83	; 131
 336:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS10);
 338:	85 b5       	in	r24, 0x25	; 37
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	85 bd       	out	0x25, r24	; 37
 33e:	08 95       	ret

00000340 <init_tcnt2>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
 340:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 124;
 344:	8c e7       	ldi	r24, 0x7C	; 124
 346:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 124;
 34a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	

	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
 34e:	e0 eb       	ldi	r30, 0xB0	; 176
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	83 6a       	ori	r24, 0xA3	; 163
 356:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
 358:	e1 eb       	ldi	r30, 0xB1	; 177
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <makeInfo>:
	}
}

info* makeInfo(void) {
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
 364:	8a e0       	ldi	r24, 0x0A	; 10
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 3c 05 	call	0xa78	; 0xa78 <malloc>
	return info_ptr;
}
 36c:	08 95       	ret

0000036e <initialise>:
	
}



void initialise(info* info_ptr){
 36e:	ec 01       	movw	r28, r24

	DDRA = (1<<PORTA0)|(1<<PORTA1);
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	81 b9       	out	0x01, r24	; 1
	DDRB = (1<<PORTB3);			/*	PWM camera	*/
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5)|(1<<PORTC6)|(1<<PORTC7);
 378:	8c ef       	ldi	r24, 0xFC	; 252
 37a:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
 37c:	8e ef       	ldi	r24, 0xFE	; 254
 37e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
 380:	50 98       	cbi	0x0a, 0	; 10
	init_serial_stdio(9600,0);											//////////////////////////////////////////////////////////////////////////////////////////
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	60 e8       	ldi	r22, 0x80	; 128
 386:	75 e2       	ldi	r23, 0x25	; 37
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 bb 00 	call	0x176	; 0x176 <init_serial_stdio>

	init_tcnt0();				/*	Camera PWM	*/
 390:	0e 94 97 01 	call	0x32e	; 0x32e <init_tcnt0>
	init_tcnt1();				/*	Timer		*/
 394:	0e 94 a5 04 	call	0x94a	; 0x94a <init_tcnt1>
	init_tcnt2();				/*	Motor PWM	*/
 398:	0e 94 a0 01 	call	0x340	; 0x340 <init_tcnt2>
	init_step();
 39c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <init_step>
	srand(get_tcnt1_ticks());
 3a0:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 3a4:	cb 01       	movw	r24, r22
 3a6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <srand>
	sei();
 3aa:	78 94       	sei
	
	/****************************************************************************************************************************************************************/
	info_ptr->stepSpeed = 90;
 3ac:	8a e5       	ldi	r24, 0x5A	; 90
 3ae:	89 83       	std	Y+1, r24	; 0x01
	info_ptr->maxStep = 5000;
 3b0:	88 e8       	ldi	r24, 0x88	; 136
 3b2:	93 e1       	ldi	r25, 0x13	; 19
 3b4:	9b 83       	std	Y+3, r25	; 0x03
 3b6:	8a 83       	std	Y+2, r24	; 0x02
	
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper
 3b8:	8b b1       	in	r24, 0x0b	; 11
 3ba:	80 63       	ori	r24, 0x30	; 48
 3bc:	8b b9       	out	0x0b, r24	; 11
		//PORTC &= ~(1<<PORTC2);
		//PORTC &= ~(1<<PORTC3);
		//PORTC &= ~(1<<PORTC4);
		//PORTC &= ~(1<<PORTC5);
		//custom_delay(500);
		step(info_ptr);
 3be:	ce 01       	movw	r24, r28
 3c0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <step>
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <initialise+0x50>

000003c6 <main>:


/* functional code	*/
int main(void) {
	
	info* info_ptr = makeInfo();
 3c6:	0e 94 b2 01 	call	0x364	; 0x364 <makeInfo>
	initialise(info_ptr);
 3ca:	0e 94 b7 01 	call	0x36e	; 0x36e <initialise>

000003ce <init_step>:
	
}

void release_step(void){
	
	PORTC &= ~((1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED));
 3ce:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <steps+0x1>
 3d2:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <steps>
 3d6:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <phase>
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <BLU>
 3e0:	85 e0       	ldi	r24, 0x05	; 5
 3e2:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <GRE>
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <YEL>
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RED>
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	8c 63       	ori	r24, 0x3C	; 60
 3f6:	87 b9       	out	0x07, r24	; 7
 3f8:	08 95       	ret

000003fa <increment_step>:
	}
 }

 void increment_step(void){
	/* the motor has turned one step, increase the count */
	++steps;
 3fa:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <steps>
 3fe:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <steps+0x1>
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <steps+0x1>
 408:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <steps>
 40c:	08 95       	ret

0000040e <decrement_step>:
 }

 void decrement_step(void){
	/* the motor has turned back one step, decrease the count */
	--steps;
 40e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <steps>
 412:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <steps+0x1>
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <steps+0x1>
 41c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <steps>
 420:	08 95       	ret

00000422 <step_clockwise>:
 }

 void step_clockwise(uint8_t time_on){
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */

	 uint32_t current_time;
	 
	 if(phase == 0){
 430:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <phase>
 434:	81 11       	cpse	r24, r1
 436:	42 c0       	rjmp	.+132    	; 0x4bc <step_clockwise+0x9a>
		 current_time = get_tcnt1_ticks();
 438:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
 43c:	6b 01       	movw	r12, r22
 43e:	7c 01       	movw	r14, r24
 440:	cc 0e       	add	r12, r28
 442:	d1 1c       	adc	r13, r1
 444:	e1 1c       	adc	r14, r1
 446:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
 448:	c1 e0       	ldi	r28, 0x01	; 1
 44a:	d0 e0       	ldi	r29, 0x00	; 0

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 44c:	2a c0       	rjmp	.+84     	; 0x4a2 <step_clockwise+0x80>
			 PORTC |= (1<<GRE)|(1<<YEL);
 44e:	98 b1       	in	r25, 0x08	; 8
 450:	ae 01       	movw	r20, r28
 452:	00 90 36 02 	lds	r0, 0x0236	; 0x800236 <GRE>
 456:	02 c0       	rjmp	.+4      	; 0x45c <step_clockwise+0x3a>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <step_clockwise+0x36>
 460:	9e 01       	movw	r18, r28
 462:	00 90 35 02 	lds	r0, 0x0235	; 0x800235 <YEL>
 466:	02 c0       	rjmp	.+4      	; 0x46c <step_clockwise+0x4a>
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <step_clockwise+0x46>
 470:	84 2f       	mov	r24, r20
 472:	82 2b       	or	r24, r18
 474:	89 2b       	or	r24, r25
 476:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
 478:	28 b1       	in	r18, 0x08	; 8
 47a:	ae 01       	movw	r20, r28
 47c:	00 90 37 02 	lds	r0, 0x0237	; 0x800237 <BLU>
 480:	02 c0       	rjmp	.+4      	; 0x486 <step_clockwise+0x64>
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <step_clockwise+0x60>
 48a:	ce 01       	movw	r24, r28
 48c:	00 90 38 02 	lds	r0, 0x0238	; 0x800238 <RED>
 490:	02 c0       	rjmp	.+4      	; 0x496 <step_clockwise+0x74>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <step_clockwise+0x70>
 49a:	84 2b       	or	r24, r20
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	88 b9       	out	0x08, r24	; 8

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 4a2:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 4a6:	6c 15       	cp	r22, r12
 4a8:	7d 05       	cpc	r23, r13
 4aa:	8e 05       	cpc	r24, r14
 4ac:	9f 05       	cpc	r25, r15
 4ae:	78 f2       	brcs	.-98     	; 0x44e <step_clockwise+0x2c>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 ++phase;
 4b0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <phase>
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <phase>
 4ba:	ca c0       	rjmp	.+404    	; 0x650 <step_clockwise+0x22e>
	 }
	 else if(phase == 1){
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	09 f0       	breq	.+2      	; 0x4c2 <step_clockwise+0xa0>
 4c0:	42 c0       	rjmp	.+132    	; 0x546 <step_clockwise+0x124>
		 current_time = get_tcnt1_ticks();
 4c2:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
 4c6:	6b 01       	movw	r12, r22
 4c8:	7c 01       	movw	r14, r24
 4ca:	cc 0e       	add	r12, r28
 4cc:	d1 1c       	adc	r13, r1
 4ce:	e1 1c       	adc	r14, r1
 4d0:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
 4d2:	c1 e0       	ldi	r28, 0x01	; 1
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 4d6:	2a c0       	rjmp	.+84     	; 0x52c <step_clockwise+0x10a>
			 PORTC |= (1<<GRE)|(1<<RED);
 4d8:	98 b1       	in	r25, 0x08	; 8
 4da:	ae 01       	movw	r20, r28
 4dc:	00 90 36 02 	lds	r0, 0x0236	; 0x800236 <GRE>
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <step_clockwise+0xc4>
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <step_clockwise+0xc0>
 4ea:	9e 01       	movw	r18, r28
 4ec:	00 90 38 02 	lds	r0, 0x0238	; 0x800238 <RED>
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <step_clockwise+0xd4>
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <step_clockwise+0xd0>
 4fa:	84 2f       	mov	r24, r20
 4fc:	82 2b       	or	r24, r18
 4fe:	89 2b       	or	r24, r25
 500:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
 502:	28 b1       	in	r18, 0x08	; 8
 504:	ae 01       	movw	r20, r28
 506:	00 90 37 02 	lds	r0, 0x0237	; 0x800237 <BLU>
 50a:	02 c0       	rjmp	.+4      	; 0x510 <step_clockwise+0xee>
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <step_clockwise+0xea>
 514:	ce 01       	movw	r24, r28
 516:	00 90 35 02 	lds	r0, 0x0235	; 0x800235 <YEL>
 51a:	02 c0       	rjmp	.+4      	; 0x520 <step_clockwise+0xfe>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <step_clockwise+0xfa>
 524:	84 2b       	or	r24, r20
 526:	80 95       	com	r24
 528:	82 23       	and	r24, r18
 52a:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 52c:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 530:	6c 15       	cp	r22, r12
 532:	7d 05       	cpc	r23, r13
 534:	8e 05       	cpc	r24, r14
 536:	9f 05       	cpc	r25, r15
 538:	78 f2       	brcs	.-98     	; 0x4d8 <step_clockwise+0xb6>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
 53a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <phase>
 53e:	8f 5f       	subi	r24, 0xFF	; 255
 540:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <phase>
 544:	85 c0       	rjmp	.+266    	; 0x650 <step_clockwise+0x22e>
	 }
	 else if(phase == 2){
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	09 f0       	breq	.+2      	; 0x54c <step_clockwise+0x12a>
 54a:	42 c0       	rjmp	.+132    	; 0x5d0 <step_clockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
 54c:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
 550:	6b 01       	movw	r12, r22
 552:	7c 01       	movw	r14, r24
 554:	cc 0e       	add	r12, r28
 556:	d1 1c       	adc	r13, r1
 558:	e1 1c       	adc	r14, r1
 55a:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
 55c:	c1 e0       	ldi	r28, 0x01	; 1
 55e:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 560:	2a c0       	rjmp	.+84     	; 0x5b6 <step_clockwise+0x194>
			 PORTC |= (1<<BLU)|(1<<RED);
 562:	98 b1       	in	r25, 0x08	; 8
 564:	ae 01       	movw	r20, r28
 566:	00 90 37 02 	lds	r0, 0x0237	; 0x800237 <BLU>
 56a:	02 c0       	rjmp	.+4      	; 0x570 <step_clockwise+0x14e>
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <step_clockwise+0x14a>
 574:	9e 01       	movw	r18, r28
 576:	00 90 38 02 	lds	r0, 0x0238	; 0x800238 <RED>
 57a:	02 c0       	rjmp	.+4      	; 0x580 <step_clockwise+0x15e>
 57c:	22 0f       	add	r18, r18
 57e:	33 1f       	adc	r19, r19
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <step_clockwise+0x15a>
 584:	84 2f       	mov	r24, r20
 586:	82 2b       	or	r24, r18
 588:	89 2b       	or	r24, r25
 58a:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
 58c:	28 b1       	in	r18, 0x08	; 8
 58e:	ae 01       	movw	r20, r28
 590:	00 90 36 02 	lds	r0, 0x0236	; 0x800236 <GRE>
 594:	02 c0       	rjmp	.+4      	; 0x59a <step_clockwise+0x178>
 596:	44 0f       	add	r20, r20
 598:	55 1f       	adc	r21, r21
 59a:	0a 94       	dec	r0
 59c:	e2 f7       	brpl	.-8      	; 0x596 <step_clockwise+0x174>
 59e:	ce 01       	movw	r24, r28
 5a0:	00 90 35 02 	lds	r0, 0x0235	; 0x800235 <YEL>
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <step_clockwise+0x188>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <step_clockwise+0x184>
 5ae:	84 2b       	or	r24, r20
 5b0:	80 95       	com	r24
 5b2:	82 23       	and	r24, r18
 5b4:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 5b6:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 5ba:	6c 15       	cp	r22, r12
 5bc:	7d 05       	cpc	r23, r13
 5be:	8e 05       	cpc	r24, r14
 5c0:	9f 05       	cpc	r25, r15
 5c2:	78 f2       	brcs	.-98     	; 0x562 <step_clockwise+0x140>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
 5c4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <phase>
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <phase>
 5ce:	40 c0       	rjmp	.+128    	; 0x650 <step_clockwise+0x22e>
	 }
	 else if(phase == 3){
 5d0:	83 30       	cpi	r24, 0x03	; 3
 5d2:	f1 f5       	brne	.+124    	; 0x650 <step_clockwise+0x22e>
		 current_time = get_tcnt1_ticks();
 5d4:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
 5d8:	6b 01       	movw	r12, r22
 5da:	7c 01       	movw	r14, r24
 5dc:	cc 0e       	add	r12, r28
 5de:	d1 1c       	adc	r13, r1
 5e0:	e1 1c       	adc	r14, r1
 5e2:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
 5e4:	c1 e0       	ldi	r28, 0x01	; 1
 5e6:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 5e8:	2a c0       	rjmp	.+84     	; 0x63e <step_clockwise+0x21c>
			 PORTC |= (1<<BLU)|(1<<YEL);
 5ea:	98 b1       	in	r25, 0x08	; 8
 5ec:	ae 01       	movw	r20, r28
 5ee:	00 90 37 02 	lds	r0, 0x0237	; 0x800237 <BLU>
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <step_clockwise+0x1d6>
 5f4:	44 0f       	add	r20, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	0a 94       	dec	r0
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <step_clockwise+0x1d2>
 5fc:	9e 01       	movw	r18, r28
 5fe:	00 90 35 02 	lds	r0, 0x0235	; 0x800235 <YEL>
 602:	02 c0       	rjmp	.+4      	; 0x608 <step_clockwise+0x1e6>
 604:	22 0f       	add	r18, r18
 606:	33 1f       	adc	r19, r19
 608:	0a 94       	dec	r0
 60a:	e2 f7       	brpl	.-8      	; 0x604 <step_clockwise+0x1e2>
 60c:	84 2f       	mov	r24, r20
 60e:	82 2b       	or	r24, r18
 610:	89 2b       	or	r24, r25
 612:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
 614:	28 b1       	in	r18, 0x08	; 8
 616:	ae 01       	movw	r20, r28
 618:	00 90 36 02 	lds	r0, 0x0236	; 0x800236 <GRE>
 61c:	02 c0       	rjmp	.+4      	; 0x622 <step_clockwise+0x200>
 61e:	44 0f       	add	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	0a 94       	dec	r0
 624:	e2 f7       	brpl	.-8      	; 0x61e <step_clockwise+0x1fc>
 626:	ce 01       	movw	r24, r28
 628:	00 90 38 02 	lds	r0, 0x0238	; 0x800238 <RED>
 62c:	02 c0       	rjmp	.+4      	; 0x632 <step_clockwise+0x210>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	0a 94       	dec	r0
 634:	e2 f7       	brpl	.-8      	; 0x62e <step_clockwise+0x20c>
 636:	84 2b       	or	r24, r20
 638:	80 95       	com	r24
 63a:	82 23       	and	r24, r18
 63c:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 63e:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 642:	6c 15       	cp	r22, r12
 644:	7d 05       	cpc	r23, r13
 646:	8e 05       	cpc	r24, r14
 648:	9f 05       	cpc	r25, r15
 64a:	78 f2       	brcs	.-98     	; 0x5ea <step_clockwise+0x1c8>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 phase = 0;
 64c:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <phase>
	 }
	 increment_step();
 650:	0e 94 fd 01 	call	0x3fa	; 0x3fa <increment_step>
 }
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	ff 90       	pop	r15
 65a:	ef 90       	pop	r14
 65c:	df 90       	pop	r13
 65e:	cf 90       	pop	r12
 660:	08 95       	ret

00000662 <step_anticlockwise>:


 void step_anticlockwise(uint8_t time_on){
 662:	cf 92       	push	r12
 664:	df 92       	push	r13
 666:	ef 92       	push	r14
 668:	ff 92       	push	r15
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */
	
	 uint32_t current_time;

	 if(phase == 0){
 670:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <phase>
 674:	81 11       	cpse	r24, r1
 676:	42 c0       	rjmp	.+132    	; 0x6fc <step_anticlockwise+0x9a>
		 current_time = get_tcnt1_ticks();
 678:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
 67c:	6b 01       	movw	r12, r22
 67e:	7c 01       	movw	r14, r24
 680:	cc 0e       	add	r12, r28
 682:	d1 1c       	adc	r13, r1
 684:	e1 1c       	adc	r14, r1
 686:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
 688:	c1 e0       	ldi	r28, 0x01	; 1
 68a:	d0 e0       	ldi	r29, 0x00	; 0
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 68c:	2a c0       	rjmp	.+84     	; 0x6e2 <step_anticlockwise+0x80>
			 PORTC |= (1<<BLU)|(1<<YEL);
 68e:	98 b1       	in	r25, 0x08	; 8
 690:	ae 01       	movw	r20, r28
 692:	00 90 37 02 	lds	r0, 0x0237	; 0x800237 <BLU>
 696:	02 c0       	rjmp	.+4      	; 0x69c <step_anticlockwise+0x3a>
 698:	44 0f       	add	r20, r20
 69a:	55 1f       	adc	r21, r21
 69c:	0a 94       	dec	r0
 69e:	e2 f7       	brpl	.-8      	; 0x698 <step_anticlockwise+0x36>
 6a0:	9e 01       	movw	r18, r28
 6a2:	00 90 35 02 	lds	r0, 0x0235	; 0x800235 <YEL>
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <step_anticlockwise+0x4a>
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
 6ac:	0a 94       	dec	r0
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <step_anticlockwise+0x46>
 6b0:	84 2f       	mov	r24, r20
 6b2:	82 2b       	or	r24, r18
 6b4:	89 2b       	or	r24, r25
 6b6:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
 6b8:	28 b1       	in	r18, 0x08	; 8
 6ba:	ae 01       	movw	r20, r28
 6bc:	00 90 36 02 	lds	r0, 0x0236	; 0x800236 <GRE>
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <step_anticlockwise+0x64>
 6c2:	44 0f       	add	r20, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	0a 94       	dec	r0
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <step_anticlockwise+0x60>
 6ca:	ce 01       	movw	r24, r28
 6cc:	00 90 38 02 	lds	r0, 0x0238	; 0x800238 <RED>
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <step_anticlockwise+0x74>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	0a 94       	dec	r0
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <step_anticlockwise+0x70>
 6da:	84 2b       	or	r24, r20
 6dc:	80 95       	com	r24
 6de:	82 23       	and	r24, r18
 6e0:	88 b9       	out	0x08, r24	; 8
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 6e2:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 6e6:	6c 15       	cp	r22, r12
 6e8:	7d 05       	cpc	r23, r13
 6ea:	8e 05       	cpc	r24, r14
 6ec:	9f 05       	cpc	r25, r15
 6ee:	78 f2       	brcs	.-98     	; 0x68e <step_anticlockwise+0x2c>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 ++phase;
 6f0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <phase>
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <phase>
 6fa:	ca c0       	rjmp	.+404    	; 0x890 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 1){
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	09 f0       	breq	.+2      	; 0x702 <step_anticlockwise+0xa0>
 700:	42 c0       	rjmp	.+132    	; 0x786 <step_anticlockwise+0x124>
		 current_time = get_tcnt1_ticks();
 702:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
 706:	6b 01       	movw	r12, r22
 708:	7c 01       	movw	r14, r24
 70a:	cc 0e       	add	r12, r28
 70c:	d1 1c       	adc	r13, r1
 70e:	e1 1c       	adc	r14, r1
 710:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
 712:	c1 e0       	ldi	r28, 0x01	; 1
 714:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 716:	2a c0       	rjmp	.+84     	; 0x76c <step_anticlockwise+0x10a>
			 PORTC |= (1<<BLU)|(1<<RED);
 718:	98 b1       	in	r25, 0x08	; 8
 71a:	ae 01       	movw	r20, r28
 71c:	00 90 37 02 	lds	r0, 0x0237	; 0x800237 <BLU>
 720:	02 c0       	rjmp	.+4      	; 0x726 <step_anticlockwise+0xc4>
 722:	44 0f       	add	r20, r20
 724:	55 1f       	adc	r21, r21
 726:	0a 94       	dec	r0
 728:	e2 f7       	brpl	.-8      	; 0x722 <step_anticlockwise+0xc0>
 72a:	9e 01       	movw	r18, r28
 72c:	00 90 38 02 	lds	r0, 0x0238	; 0x800238 <RED>
 730:	02 c0       	rjmp	.+4      	; 0x736 <step_anticlockwise+0xd4>
 732:	22 0f       	add	r18, r18
 734:	33 1f       	adc	r19, r19
 736:	0a 94       	dec	r0
 738:	e2 f7       	brpl	.-8      	; 0x732 <step_anticlockwise+0xd0>
 73a:	84 2f       	mov	r24, r20
 73c:	82 2b       	or	r24, r18
 73e:	89 2b       	or	r24, r25
 740:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
 742:	28 b1       	in	r18, 0x08	; 8
 744:	ae 01       	movw	r20, r28
 746:	00 90 36 02 	lds	r0, 0x0236	; 0x800236 <GRE>
 74a:	02 c0       	rjmp	.+4      	; 0x750 <step_anticlockwise+0xee>
 74c:	44 0f       	add	r20, r20
 74e:	55 1f       	adc	r21, r21
 750:	0a 94       	dec	r0
 752:	e2 f7       	brpl	.-8      	; 0x74c <step_anticlockwise+0xea>
 754:	ce 01       	movw	r24, r28
 756:	00 90 35 02 	lds	r0, 0x0235	; 0x800235 <YEL>
 75a:	02 c0       	rjmp	.+4      	; 0x760 <step_anticlockwise+0xfe>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	0a 94       	dec	r0
 762:	e2 f7       	brpl	.-8      	; 0x75c <step_anticlockwise+0xfa>
 764:	84 2b       	or	r24, r20
 766:	80 95       	com	r24
 768:	82 23       	and	r24, r18
 76a:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 76c:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 770:	6c 15       	cp	r22, r12
 772:	7d 05       	cpc	r23, r13
 774:	8e 05       	cpc	r24, r14
 776:	9f 05       	cpc	r25, r15
 778:	78 f2       	brcs	.-98     	; 0x718 <step_anticlockwise+0xb6>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
 77a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <phase>
 77e:	8f 5f       	subi	r24, 0xFF	; 255
 780:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <phase>
 784:	85 c0       	rjmp	.+266    	; 0x890 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 2){
 786:	82 30       	cpi	r24, 0x02	; 2
 788:	09 f0       	breq	.+2      	; 0x78c <step_anticlockwise+0x12a>
 78a:	42 c0       	rjmp	.+132    	; 0x810 <step_anticlockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
 78c:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
 790:	6b 01       	movw	r12, r22
 792:	7c 01       	movw	r14, r24
 794:	cc 0e       	add	r12, r28
 796:	d1 1c       	adc	r13, r1
 798:	e1 1c       	adc	r14, r1
 79a:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
 79c:	c1 e0       	ldi	r28, 0x01	; 1
 79e:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 7a0:	2a c0       	rjmp	.+84     	; 0x7f6 <step_anticlockwise+0x194>
			 PORTC |= (1<<GRE)|(1<<RED);
 7a2:	98 b1       	in	r25, 0x08	; 8
 7a4:	ae 01       	movw	r20, r28
 7a6:	00 90 36 02 	lds	r0, 0x0236	; 0x800236 <GRE>
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <step_anticlockwise+0x14e>
 7ac:	44 0f       	add	r20, r20
 7ae:	55 1f       	adc	r21, r21
 7b0:	0a 94       	dec	r0
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <step_anticlockwise+0x14a>
 7b4:	9e 01       	movw	r18, r28
 7b6:	00 90 38 02 	lds	r0, 0x0238	; 0x800238 <RED>
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <step_anticlockwise+0x15e>
 7bc:	22 0f       	add	r18, r18
 7be:	33 1f       	adc	r19, r19
 7c0:	0a 94       	dec	r0
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <step_anticlockwise+0x15a>
 7c4:	84 2f       	mov	r24, r20
 7c6:	82 2b       	or	r24, r18
 7c8:	89 2b       	or	r24, r25
 7ca:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
 7cc:	28 b1       	in	r18, 0x08	; 8
 7ce:	ae 01       	movw	r20, r28
 7d0:	00 90 37 02 	lds	r0, 0x0237	; 0x800237 <BLU>
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <step_anticlockwise+0x178>
 7d6:	44 0f       	add	r20, r20
 7d8:	55 1f       	adc	r21, r21
 7da:	0a 94       	dec	r0
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <step_anticlockwise+0x174>
 7de:	ce 01       	movw	r24, r28
 7e0:	00 90 35 02 	lds	r0, 0x0235	; 0x800235 <YEL>
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <step_anticlockwise+0x188>
 7e6:	88 0f       	add	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	0a 94       	dec	r0
 7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <step_anticlockwise+0x184>
 7ee:	84 2b       	or	r24, r20
 7f0:	80 95       	com	r24
 7f2:	82 23       	and	r24, r18
 7f4:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 7f6:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 7fa:	6c 15       	cp	r22, r12
 7fc:	7d 05       	cpc	r23, r13
 7fe:	8e 05       	cpc	r24, r14
 800:	9f 05       	cpc	r25, r15
 802:	78 f2       	brcs	.-98     	; 0x7a2 <step_anticlockwise+0x140>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
 804:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <phase>
 808:	8f 5f       	subi	r24, 0xFF	; 255
 80a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <phase>
 80e:	40 c0       	rjmp	.+128    	; 0x890 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 3){
 810:	83 30       	cpi	r24, 0x03	; 3
 812:	f1 f5       	brne	.+124    	; 0x890 <step_anticlockwise+0x22e>
		 current_time = get_tcnt1_ticks();
 814:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
 818:	6b 01       	movw	r12, r22
 81a:	7c 01       	movw	r14, r24
 81c:	cc 0e       	add	r12, r28
 81e:	d1 1c       	adc	r13, r1
 820:	e1 1c       	adc	r14, r1
 822:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
 824:	c1 e0       	ldi	r28, 0x01	; 1
 826:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 828:	2a c0       	rjmp	.+84     	; 0x87e <step_anticlockwise+0x21c>
			 PORTC |= (1<<GRE)|(1<<YEL);
 82a:	98 b1       	in	r25, 0x08	; 8
 82c:	ae 01       	movw	r20, r28
 82e:	00 90 36 02 	lds	r0, 0x0236	; 0x800236 <GRE>
 832:	02 c0       	rjmp	.+4      	; 0x838 <step_anticlockwise+0x1d6>
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	0a 94       	dec	r0
 83a:	e2 f7       	brpl	.-8      	; 0x834 <step_anticlockwise+0x1d2>
 83c:	9e 01       	movw	r18, r28
 83e:	00 90 35 02 	lds	r0, 0x0235	; 0x800235 <YEL>
 842:	02 c0       	rjmp	.+4      	; 0x848 <step_anticlockwise+0x1e6>
 844:	22 0f       	add	r18, r18
 846:	33 1f       	adc	r19, r19
 848:	0a 94       	dec	r0
 84a:	e2 f7       	brpl	.-8      	; 0x844 <step_anticlockwise+0x1e2>
 84c:	84 2f       	mov	r24, r20
 84e:	82 2b       	or	r24, r18
 850:	89 2b       	or	r24, r25
 852:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
 854:	28 b1       	in	r18, 0x08	; 8
 856:	ae 01       	movw	r20, r28
 858:	00 90 37 02 	lds	r0, 0x0237	; 0x800237 <BLU>
 85c:	02 c0       	rjmp	.+4      	; 0x862 <step_anticlockwise+0x200>
 85e:	44 0f       	add	r20, r20
 860:	55 1f       	adc	r21, r21
 862:	0a 94       	dec	r0
 864:	e2 f7       	brpl	.-8      	; 0x85e <step_anticlockwise+0x1fc>
 866:	ce 01       	movw	r24, r28
 868:	00 90 38 02 	lds	r0, 0x0238	; 0x800238 <RED>
 86c:	02 c0       	rjmp	.+4      	; 0x872 <step_anticlockwise+0x210>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	0a 94       	dec	r0
 874:	e2 f7       	brpl	.-8      	; 0x86e <step_anticlockwise+0x20c>
 876:	84 2b       	or	r24, r20
 878:	80 95       	com	r24
 87a:	82 23       	and	r24, r18
 87c:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
 87e:	0e 94 c8 04 	call	0x990	; 0x990 <get_tcnt1_ticks>
 882:	6c 15       	cp	r22, r12
 884:	7d 05       	cpc	r23, r13
 886:	8e 05       	cpc	r24, r14
 888:	9f 05       	cpc	r25, r15
 88a:	78 f2       	brcs	.-98     	; 0x82a <step_anticlockwise+0x1c8>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 phase = 0;
 88c:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <phase>
	 }
	 decrement_step();
 890:	0e 94 07 02 	call	0x40e	; 0x40e <decrement_step>
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	ff 90       	pop	r15
 89a:	ef 90       	pop	r14
 89c:	df 90       	pop	r13
 89e:	cf 90       	pop	r12
 8a0:	08 95       	ret

000008a2 <step>:
	//if ((steps > info_ptr->maxStep) || (steps < 0)){
		///*	dont move	*/
		//return;
	//}
	
	int8_t speed = info_ptr->stepSpeed;
 8a2:	fc 01       	movw	r30, r24
 8a4:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t time_on;
	if (speed >= 0){
 8a6:	88 23       	and	r24, r24
 8a8:	44 f1       	brlt	.+80     	; 0x8fa <step+0x58>
			if (speed < 10){
 8aa:	8a 30       	cpi	r24, 0x0A	; 10
 8ac:	94 f0       	brlt	.+36     	; 0x8d2 <step+0x30>
				time_on = 100;
			} else if (speed < 20) {
 8ae:	84 31       	cpi	r24, 0x14	; 20
 8b0:	94 f0       	brlt	.+36     	; 0x8d6 <step+0x34>
				time_on = 90;
			} else if (speed < 30) {
 8b2:	8e 31       	cpi	r24, 0x1E	; 30
 8b4:	94 f0       	brlt	.+36     	; 0x8da <step+0x38>
				time_on = 80;
			} else if (speed < 40) {
 8b6:	88 32       	cpi	r24, 0x28	; 40
 8b8:	94 f0       	brlt	.+36     	; 0x8de <step+0x3c>
				time_on = 70;
			} else if (speed < 50){
 8ba:	82 33       	cpi	r24, 0x32	; 50
 8bc:	94 f0       	brlt	.+36     	; 0x8e2 <step+0x40>
				time_on = 60;
			} else if (speed < 60) {
 8be:	8c 33       	cpi	r24, 0x3C	; 60
 8c0:	94 f0       	brlt	.+36     	; 0x8e6 <step+0x44>
				time_on = 50;
			} else if (speed < 70){
 8c2:	86 34       	cpi	r24, 0x46	; 70
 8c4:	94 f0       	brlt	.+36     	; 0x8ea <step+0x48>
				time_on = 40;
			} else if (speed < 80) {
 8c6:	80 35       	cpi	r24, 0x50	; 80
 8c8:	94 f0       	brlt	.+36     	; 0x8ee <step+0x4c>
				time_on = 30;
			} else if (speed < 90){
 8ca:	8a 35       	cpi	r24, 0x5A	; 90
 8cc:	94 f0       	brlt	.+36     	; 0x8f2 <step+0x50>
				time_on = 20;
			} else {
				time_on = 10;
 8ce:	8a e0       	ldi	r24, 0x0A	; 10
 8d0:	11 c0       	rjmp	.+34     	; 0x8f4 <step+0x52>
	
	int8_t speed = info_ptr->stepSpeed;
	uint8_t time_on;
	if (speed >= 0){
			if (speed < 10){
				time_on = 100;
 8d2:	84 e6       	ldi	r24, 0x64	; 100
 8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <step+0x52>
			} else if (speed < 20) {
				time_on = 90;
 8d6:	8a e5       	ldi	r24, 0x5A	; 90
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <step+0x52>
			} else if (speed < 30) {
				time_on = 80;
 8da:	80 e5       	ldi	r24, 0x50	; 80
 8dc:	0b c0       	rjmp	.+22     	; 0x8f4 <step+0x52>
			} else if (speed < 40) {
				time_on = 70;
 8de:	86 e4       	ldi	r24, 0x46	; 70
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <step+0x52>
			} else if (speed < 50){
				time_on = 60;
 8e2:	8c e3       	ldi	r24, 0x3C	; 60
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <step+0x52>
			} else if (speed < 60) {
				time_on = 50;
 8e6:	82 e3       	ldi	r24, 0x32	; 50
 8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <step+0x52>
			} else if (speed < 70){
				time_on = 40;
 8ea:	88 e2       	ldi	r24, 0x28	; 40
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <step+0x52>
			} else if (speed < 80) {
				time_on = 30;
 8ee:	8e e1       	ldi	r24, 0x1E	; 30
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <step+0x52>
			} else if (speed < 90){
				time_on = 20;
 8f2:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 10;
			}
			step_clockwise(time_on);
 8f4:	0e 94 11 02 	call	0x422	; 0x422 <step_clockwise>
 8f8:	08 95       	ret
	} else {
			if (speed > -10){
 8fa:	87 3f       	cpi	r24, 0xF7	; 247
 8fc:	94 f4       	brge	.+36     	; 0x922 <__stack+0x23>
				time_on = 100;
			} else if (speed > -20) {
 8fe:	8d 3e       	cpi	r24, 0xED	; 237
 900:	94 f4       	brge	.+36     	; 0x926 <__stack+0x27>
				time_on = 90;
			} else if (speed > -30) {
 902:	83 3e       	cpi	r24, 0xE3	; 227
 904:	94 f4       	brge	.+36     	; 0x92a <__stack+0x2b>
				time_on = 80;
			} else if (speed > -40) {
 906:	89 3d       	cpi	r24, 0xD9	; 217
 908:	94 f4       	brge	.+36     	; 0x92e <__stack+0x2f>
				time_on = 70;
			} else if (speed > -50){
 90a:	8f 3c       	cpi	r24, 0xCF	; 207
 90c:	94 f4       	brge	.+36     	; 0x932 <__stack+0x33>
				time_on = 60;
			} else if (speed > -60) {
 90e:	85 3c       	cpi	r24, 0xC5	; 197
 910:	94 f4       	brge	.+36     	; 0x936 <__stack+0x37>
				time_on = 50;
			} else if (speed > -70){
 912:	8b 3b       	cpi	r24, 0xBB	; 187
 914:	94 f4       	brge	.+36     	; 0x93a <__stack+0x3b>
				time_on = 40;
			} else if (speed > -80) {
 916:	81 3b       	cpi	r24, 0xB1	; 177
 918:	94 f4       	brge	.+36     	; 0x93e <__stack+0x3f>
				time_on = 30;
			} else if (speed > -90){
 91a:	87 3a       	cpi	r24, 0xA7	; 167
 91c:	94 f4       	brge	.+36     	; 0x942 <__stack+0x43>
				time_on = 20;
			} else {
				time_on = 10;
 91e:	8a e0       	ldi	r24, 0x0A	; 10
 920:	11 c0       	rjmp	.+34     	; 0x944 <__stack+0x45>
				time_on = 10;
			}
			step_clockwise(time_on);
	} else {
			if (speed > -10){
				time_on = 100;
 922:	84 e6       	ldi	r24, 0x64	; 100
 924:	0f c0       	rjmp	.+30     	; 0x944 <__stack+0x45>
			} else if (speed > -20) {
				time_on = 90;
 926:	8a e5       	ldi	r24, 0x5A	; 90
 928:	0d c0       	rjmp	.+26     	; 0x944 <__stack+0x45>
			} else if (speed > -30) {
				time_on = 80;
 92a:	80 e5       	ldi	r24, 0x50	; 80
 92c:	0b c0       	rjmp	.+22     	; 0x944 <__stack+0x45>
			} else if (speed > -40) {
				time_on = 70;
 92e:	86 e4       	ldi	r24, 0x46	; 70
 930:	09 c0       	rjmp	.+18     	; 0x944 <__stack+0x45>
			} else if (speed > -50){
				time_on = 60;
 932:	8c e3       	ldi	r24, 0x3C	; 60
 934:	07 c0       	rjmp	.+14     	; 0x944 <__stack+0x45>
			} else if (speed > -60) {
				time_on = 50;
 936:	82 e3       	ldi	r24, 0x32	; 50
 938:	05 c0       	rjmp	.+10     	; 0x944 <__stack+0x45>
			} else if (speed > -70){
				time_on = 40;
 93a:	88 e2       	ldi	r24, 0x28	; 40
 93c:	03 c0       	rjmp	.+6      	; 0x944 <__stack+0x45>
			} else if (speed > -80) {
				time_on = 30;
 93e:	8e e1       	ldi	r24, 0x1E	; 30
 940:	01 c0       	rjmp	.+2      	; 0x944 <__stack+0x45>
			} else if (speed > -90){
				time_on = 20;
 942:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 10;
			}
			step_anticlockwise(time_on);
 944:	0e 94 31 03 	call	0x662	; 0x662 <step_anticlockwise>
 948:	08 95       	ret

0000094a <init_tcnt1>:

 void init_tcnt1(void){
	 /* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	 
	 //set button to be not pushed
	 Button_on = 0;
 94a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Button_on>
	 
	 // set global counter
	 tcnt1_ticks = 0L;
 94e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <tcnt1_ticks>
 952:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <tcnt1_ticks+0x1>
 956:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <tcnt1_ticks+0x2>
 95a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <tcnt1_ticks+0x3>
	 
	 // set timer / counter
	 TCNT1 = 0;
 95e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 962:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	 
	 // set output compare resgister; value to execute ISR
	 OCR1A = 124; // between 1 and 255
 966:	8c e7       	ldi	r24, 0x7C	; 124
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 96e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	 
	 // timer/counter control register A - set to clear when TCNT0 matches OCR0A
	 TCCR1A = (1<<WGM11);
 972:	82 e0       	ldi	r24, 0x02	; 2
 974:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	 
	 // set the timer to update at a fraction of a clock cycle
	 TCCR1B = (1<<CS11)|(1<<CS10);	// set to f(clk) / 64
 978:	83 e0       	ldi	r24, 0x03	; 3
 97a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 
	 // timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK1 |= (1<<OCIE1A);
 97e:	ef e6       	ldi	r30, 0x6F	; 111
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	82 60       	ori	r24, 0x02	; 2
 986:	80 83       	st	Z, r24
	 
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR1 &= (1<<OCF1A);
 988:	86 b3       	in	r24, 0x16	; 22
 98a:	82 70       	andi	r24, 0x02	; 2
 98c:	86 bb       	out	0x16, r24	; 22
 98e:	08 95       	ret

00000990 <get_tcnt1_ticks>:


 uint32_t get_tcnt1_ticks(void) {
	 /* internal reference clock, times how long the system has been on for	*/

	 uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
 990:	2f b7       	in	r18, 0x3f	; 63
	 cli();
 992:	f8 94       	cli
	 uint32_t return_value = tcnt1_ticks;
 994:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <tcnt1_ticks>
 998:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <tcnt1_ticks+0x1>
 99c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <tcnt1_ticks+0x2>
 9a0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <tcnt1_ticks+0x3>
	 if(interrupts_on) {
 9a4:	22 23       	and	r18, r18
 9a6:	0c f4       	brge	.+2      	; 0x9aa <get_tcnt1_ticks+0x1a>
		 sei();
 9a8:	78 94       	sei
	 }
	 return return_value;
 }
 9aa:	08 95       	ret

000009ac <__vector_13>:



 ISR(TIMER1_COMPA_vect) {
 9ac:	1f 92       	push	r1
 9ae:	0f 92       	push	r0
 9b0:	0f b6       	in	r0, 0x3f	; 63
 9b2:	0f 92       	push	r0
 9b4:	11 24       	eor	r1, r1
 9b6:	8f 93       	push	r24
 9b8:	9f 93       	push	r25
 9ba:	af 93       	push	r26
 9bc:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 
	 tcnt1_ticks++;
 9be:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <tcnt1_ticks>
 9c2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <tcnt1_ticks+0x1>
 9c6:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <tcnt1_ticks+0x2>
 9ca:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <tcnt1_ticks+0x3>
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	a1 1d       	adc	r26, r1
 9d2:	b1 1d       	adc	r27, r1
 9d4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <tcnt1_ticks>
 9d8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <tcnt1_ticks+0x1>
 9dc:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <tcnt1_ticks+0x2>
 9e0:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <tcnt1_ticks+0x3>

 9e4:	bf 91       	pop	r27
 9e6:	af 91       	pop	r26
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	0f 90       	pop	r0
 9ee:	0f be       	out	0x3f, r0	; 63
 9f0:	0f 90       	pop	r0
 9f2:	1f 90       	pop	r1
 9f4:	18 95       	reti

000009f6 <__divmodsi4>:
 9f6:	05 2e       	mov	r0, r21
 9f8:	97 fb       	bst	r25, 7
 9fa:	1e f4       	brtc	.+6      	; 0xa02 <__divmodsi4+0xc>
 9fc:	00 94       	com	r0
 9fe:	0e 94 12 05 	call	0xa24	; 0xa24 <__negsi2>
 a02:	57 fd       	sbrc	r21, 7
 a04:	07 d0       	rcall	.+14     	; 0xa14 <__divmodsi4_neg2>
 a06:	0e 94 1a 05 	call	0xa34	; 0xa34 <__udivmodsi4>
 a0a:	07 fc       	sbrc	r0, 7
 a0c:	03 d0       	rcall	.+6      	; 0xa14 <__divmodsi4_neg2>
 a0e:	4e f4       	brtc	.+18     	; 0xa22 <__divmodsi4_exit>
 a10:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__negsi2>

00000a14 <__divmodsi4_neg2>:
 a14:	50 95       	com	r21
 a16:	40 95       	com	r20
 a18:	30 95       	com	r19
 a1a:	21 95       	neg	r18
 a1c:	3f 4f       	sbci	r19, 0xFF	; 255
 a1e:	4f 4f       	sbci	r20, 0xFF	; 255
 a20:	5f 4f       	sbci	r21, 0xFF	; 255

00000a22 <__divmodsi4_exit>:
 a22:	08 95       	ret

00000a24 <__negsi2>:
 a24:	90 95       	com	r25
 a26:	80 95       	com	r24
 a28:	70 95       	com	r23
 a2a:	61 95       	neg	r22
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	08 95       	ret

00000a34 <__udivmodsi4>:
 a34:	a1 e2       	ldi	r26, 0x21	; 33
 a36:	1a 2e       	mov	r1, r26
 a38:	aa 1b       	sub	r26, r26
 a3a:	bb 1b       	sub	r27, r27
 a3c:	fd 01       	movw	r30, r26
 a3e:	0d c0       	rjmp	.+26     	; 0xa5a <__udivmodsi4_ep>

00000a40 <__udivmodsi4_loop>:
 a40:	aa 1f       	adc	r26, r26
 a42:	bb 1f       	adc	r27, r27
 a44:	ee 1f       	adc	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	a2 17       	cp	r26, r18
 a4a:	b3 07       	cpc	r27, r19
 a4c:	e4 07       	cpc	r30, r20
 a4e:	f5 07       	cpc	r31, r21
 a50:	20 f0       	brcs	.+8      	; 0xa5a <__udivmodsi4_ep>
 a52:	a2 1b       	sub	r26, r18
 a54:	b3 0b       	sbc	r27, r19
 a56:	e4 0b       	sbc	r30, r20
 a58:	f5 0b       	sbc	r31, r21

00000a5a <__udivmodsi4_ep>:
 a5a:	66 1f       	adc	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	1a 94       	dec	r1
 a64:	69 f7       	brne	.-38     	; 0xa40 <__udivmodsi4_loop>
 a66:	60 95       	com	r22
 a68:	70 95       	com	r23
 a6a:	80 95       	com	r24
 a6c:	90 95       	com	r25
 a6e:	9b 01       	movw	r18, r22
 a70:	ac 01       	movw	r20, r24
 a72:	bd 01       	movw	r22, r26
 a74:	cf 01       	movw	r24, r30
 a76:	08 95       	ret

00000a78 <malloc>:
 a78:	0f 93       	push	r16
 a7a:	1f 93       	push	r17
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
 a80:	82 30       	cpi	r24, 0x02	; 2
 a82:	91 05       	cpc	r25, r1
 a84:	10 f4       	brcc	.+4      	; 0xa8a <malloc+0x12>
 a86:	82 e0       	ldi	r24, 0x02	; 2
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <__flp>
 a8e:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <__flp+0x1>
 a92:	20 e0       	ldi	r18, 0x00	; 0
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	a0 e0       	ldi	r26, 0x00	; 0
 a98:	b0 e0       	ldi	r27, 0x00	; 0
 a9a:	30 97       	sbiw	r30, 0x00	; 0
 a9c:	19 f1       	breq	.+70     	; 0xae4 <malloc+0x6c>
 a9e:	40 81       	ld	r20, Z
 aa0:	51 81       	ldd	r21, Z+1	; 0x01
 aa2:	02 81       	ldd	r16, Z+2	; 0x02
 aa4:	13 81       	ldd	r17, Z+3	; 0x03
 aa6:	48 17       	cp	r20, r24
 aa8:	59 07       	cpc	r21, r25
 aaa:	c8 f0       	brcs	.+50     	; 0xade <malloc+0x66>
 aac:	84 17       	cp	r24, r20
 aae:	95 07       	cpc	r25, r21
 ab0:	69 f4       	brne	.+26     	; 0xacc <malloc+0x54>
 ab2:	10 97       	sbiw	r26, 0x00	; 0
 ab4:	31 f0       	breq	.+12     	; 0xac2 <malloc+0x4a>
 ab6:	12 96       	adiw	r26, 0x02	; 2
 ab8:	0c 93       	st	X, r16
 aba:	12 97       	sbiw	r26, 0x02	; 2
 abc:	13 96       	adiw	r26, 0x03	; 3
 abe:	1c 93       	st	X, r17
 ac0:	27 c0       	rjmp	.+78     	; 0xb10 <malloc+0x98>
 ac2:	00 93 3b 02 	sts	0x023B, r16	; 0x80023b <__flp>
 ac6:	10 93 3c 02 	sts	0x023C, r17	; 0x80023c <__flp+0x1>
 aca:	22 c0       	rjmp	.+68     	; 0xb10 <malloc+0x98>
 acc:	21 15       	cp	r18, r1
 ace:	31 05       	cpc	r19, r1
 ad0:	19 f0       	breq	.+6      	; 0xad8 <malloc+0x60>
 ad2:	42 17       	cp	r20, r18
 ad4:	53 07       	cpc	r21, r19
 ad6:	18 f4       	brcc	.+6      	; 0xade <malloc+0x66>
 ad8:	9a 01       	movw	r18, r20
 ada:	bd 01       	movw	r22, r26
 adc:	ef 01       	movw	r28, r30
 ade:	df 01       	movw	r26, r30
 ae0:	f8 01       	movw	r30, r16
 ae2:	db cf       	rjmp	.-74     	; 0xa9a <malloc+0x22>
 ae4:	21 15       	cp	r18, r1
 ae6:	31 05       	cpc	r19, r1
 ae8:	f9 f0       	breq	.+62     	; 0xb28 <malloc+0xb0>
 aea:	28 1b       	sub	r18, r24
 aec:	39 0b       	sbc	r19, r25
 aee:	24 30       	cpi	r18, 0x04	; 4
 af0:	31 05       	cpc	r19, r1
 af2:	80 f4       	brcc	.+32     	; 0xb14 <malloc+0x9c>
 af4:	8a 81       	ldd	r24, Y+2	; 0x02
 af6:	9b 81       	ldd	r25, Y+3	; 0x03
 af8:	61 15       	cp	r22, r1
 afa:	71 05       	cpc	r23, r1
 afc:	21 f0       	breq	.+8      	; 0xb06 <malloc+0x8e>
 afe:	fb 01       	movw	r30, r22
 b00:	93 83       	std	Z+3, r25	; 0x03
 b02:	82 83       	std	Z+2, r24	; 0x02
 b04:	04 c0       	rjmp	.+8      	; 0xb0e <malloc+0x96>
 b06:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <__flp+0x1>
 b0a:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <__flp>
 b0e:	fe 01       	movw	r30, r28
 b10:	32 96       	adiw	r30, 0x02	; 2
 b12:	44 c0       	rjmp	.+136    	; 0xb9c <malloc+0x124>
 b14:	fe 01       	movw	r30, r28
 b16:	e2 0f       	add	r30, r18
 b18:	f3 1f       	adc	r31, r19
 b1a:	81 93       	st	Z+, r24
 b1c:	91 93       	st	Z+, r25
 b1e:	22 50       	subi	r18, 0x02	; 2
 b20:	31 09       	sbc	r19, r1
 b22:	39 83       	std	Y+1, r19	; 0x01
 b24:	28 83       	st	Y, r18
 b26:	3a c0       	rjmp	.+116    	; 0xb9c <malloc+0x124>
 b28:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <__brkval>
 b2c:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <__brkval+0x1>
 b30:	23 2b       	or	r18, r19
 b32:	41 f4       	brne	.+16     	; 0xb44 <malloc+0xcc>
 b34:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 b38:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 b3c:	30 93 3a 02 	sts	0x023A, r19	; 0x80023a <__brkval+0x1>
 b40:	20 93 39 02 	sts	0x0239, r18	; 0x800239 <__brkval>
 b44:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b48:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 b4c:	21 15       	cp	r18, r1
 b4e:	31 05       	cpc	r19, r1
 b50:	41 f4       	brne	.+16     	; 0xb62 <malloc+0xea>
 b52:	2d b7       	in	r18, 0x3d	; 61
 b54:	3e b7       	in	r19, 0x3e	; 62
 b56:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b5a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b5e:	24 1b       	sub	r18, r20
 b60:	35 0b       	sbc	r19, r21
 b62:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <__brkval>
 b66:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <__brkval+0x1>
 b6a:	e2 17       	cp	r30, r18
 b6c:	f3 07       	cpc	r31, r19
 b6e:	a0 f4       	brcc	.+40     	; 0xb98 <malloc+0x120>
 b70:	2e 1b       	sub	r18, r30
 b72:	3f 0b       	sbc	r19, r31
 b74:	28 17       	cp	r18, r24
 b76:	39 07       	cpc	r19, r25
 b78:	78 f0       	brcs	.+30     	; 0xb98 <malloc+0x120>
 b7a:	ac 01       	movw	r20, r24
 b7c:	4e 5f       	subi	r20, 0xFE	; 254
 b7e:	5f 4f       	sbci	r21, 0xFF	; 255
 b80:	24 17       	cp	r18, r20
 b82:	35 07       	cpc	r19, r21
 b84:	48 f0       	brcs	.+18     	; 0xb98 <malloc+0x120>
 b86:	4e 0f       	add	r20, r30
 b88:	5f 1f       	adc	r21, r31
 b8a:	50 93 3a 02 	sts	0x023A, r21	; 0x80023a <__brkval+0x1>
 b8e:	40 93 39 02 	sts	0x0239, r20	; 0x800239 <__brkval>
 b92:	81 93       	st	Z+, r24
 b94:	91 93       	st	Z+, r25
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <malloc+0x124>
 b98:	e0 e0       	ldi	r30, 0x00	; 0
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	cf 01       	movw	r24, r30
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	1f 91       	pop	r17
 ba4:	0f 91       	pop	r16
 ba6:	08 95       	ret

00000ba8 <free>:
 ba8:	cf 93       	push	r28
 baa:	df 93       	push	r29
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	09 f4       	brne	.+2      	; 0xbb2 <free+0xa>
 bb0:	81 c0       	rjmp	.+258    	; 0xcb4 <free+0x10c>
 bb2:	fc 01       	movw	r30, r24
 bb4:	32 97       	sbiw	r30, 0x02	; 2
 bb6:	13 82       	std	Z+3, r1	; 0x03
 bb8:	12 82       	std	Z+2, r1	; 0x02
 bba:	a0 91 3b 02 	lds	r26, 0x023B	; 0x80023b <__flp>
 bbe:	b0 91 3c 02 	lds	r27, 0x023C	; 0x80023c <__flp+0x1>
 bc2:	10 97       	sbiw	r26, 0x00	; 0
 bc4:	81 f4       	brne	.+32     	; 0xbe6 <free+0x3e>
 bc6:	20 81       	ld	r18, Z
 bc8:	31 81       	ldd	r19, Z+1	; 0x01
 bca:	82 0f       	add	r24, r18
 bcc:	93 1f       	adc	r25, r19
 bce:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <__brkval>
 bd2:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <__brkval+0x1>
 bd6:	28 17       	cp	r18, r24
 bd8:	39 07       	cpc	r19, r25
 bda:	51 f5       	brne	.+84     	; 0xc30 <free+0x88>
 bdc:	f0 93 3a 02 	sts	0x023A, r31	; 0x80023a <__brkval+0x1>
 be0:	e0 93 39 02 	sts	0x0239, r30	; 0x800239 <__brkval>
 be4:	67 c0       	rjmp	.+206    	; 0xcb4 <free+0x10c>
 be6:	ed 01       	movw	r28, r26
 be8:	20 e0       	ldi	r18, 0x00	; 0
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	ce 17       	cp	r28, r30
 bee:	df 07       	cpc	r29, r31
 bf0:	40 f4       	brcc	.+16     	; 0xc02 <free+0x5a>
 bf2:	4a 81       	ldd	r20, Y+2	; 0x02
 bf4:	5b 81       	ldd	r21, Y+3	; 0x03
 bf6:	9e 01       	movw	r18, r28
 bf8:	41 15       	cp	r20, r1
 bfa:	51 05       	cpc	r21, r1
 bfc:	f1 f0       	breq	.+60     	; 0xc3a <free+0x92>
 bfe:	ea 01       	movw	r28, r20
 c00:	f5 cf       	rjmp	.-22     	; 0xbec <free+0x44>
 c02:	d3 83       	std	Z+3, r29	; 0x03
 c04:	c2 83       	std	Z+2, r28	; 0x02
 c06:	40 81       	ld	r20, Z
 c08:	51 81       	ldd	r21, Z+1	; 0x01
 c0a:	84 0f       	add	r24, r20
 c0c:	95 1f       	adc	r25, r21
 c0e:	c8 17       	cp	r28, r24
 c10:	d9 07       	cpc	r29, r25
 c12:	59 f4       	brne	.+22     	; 0xc2a <free+0x82>
 c14:	88 81       	ld	r24, Y
 c16:	99 81       	ldd	r25, Y+1	; 0x01
 c18:	84 0f       	add	r24, r20
 c1a:	95 1f       	adc	r25, r21
 c1c:	02 96       	adiw	r24, 0x02	; 2
 c1e:	91 83       	std	Z+1, r25	; 0x01
 c20:	80 83       	st	Z, r24
 c22:	8a 81       	ldd	r24, Y+2	; 0x02
 c24:	9b 81       	ldd	r25, Y+3	; 0x03
 c26:	93 83       	std	Z+3, r25	; 0x03
 c28:	82 83       	std	Z+2, r24	; 0x02
 c2a:	21 15       	cp	r18, r1
 c2c:	31 05       	cpc	r19, r1
 c2e:	29 f4       	brne	.+10     	; 0xc3a <free+0x92>
 c30:	f0 93 3c 02 	sts	0x023C, r31	; 0x80023c <__flp+0x1>
 c34:	e0 93 3b 02 	sts	0x023B, r30	; 0x80023b <__flp>
 c38:	3d c0       	rjmp	.+122    	; 0xcb4 <free+0x10c>
 c3a:	e9 01       	movw	r28, r18
 c3c:	fb 83       	std	Y+3, r31	; 0x03
 c3e:	ea 83       	std	Y+2, r30	; 0x02
 c40:	49 91       	ld	r20, Y+
 c42:	59 91       	ld	r21, Y+
 c44:	c4 0f       	add	r28, r20
 c46:	d5 1f       	adc	r29, r21
 c48:	ec 17       	cp	r30, r28
 c4a:	fd 07       	cpc	r31, r29
 c4c:	61 f4       	brne	.+24     	; 0xc66 <free+0xbe>
 c4e:	80 81       	ld	r24, Z
 c50:	91 81       	ldd	r25, Z+1	; 0x01
 c52:	84 0f       	add	r24, r20
 c54:	95 1f       	adc	r25, r21
 c56:	02 96       	adiw	r24, 0x02	; 2
 c58:	e9 01       	movw	r28, r18
 c5a:	99 83       	std	Y+1, r25	; 0x01
 c5c:	88 83       	st	Y, r24
 c5e:	82 81       	ldd	r24, Z+2	; 0x02
 c60:	93 81       	ldd	r25, Z+3	; 0x03
 c62:	9b 83       	std	Y+3, r25	; 0x03
 c64:	8a 83       	std	Y+2, r24	; 0x02
 c66:	e0 e0       	ldi	r30, 0x00	; 0
 c68:	f0 e0       	ldi	r31, 0x00	; 0
 c6a:	12 96       	adiw	r26, 0x02	; 2
 c6c:	8d 91       	ld	r24, X+
 c6e:	9c 91       	ld	r25, X
 c70:	13 97       	sbiw	r26, 0x03	; 3
 c72:	00 97       	sbiw	r24, 0x00	; 0
 c74:	19 f0       	breq	.+6      	; 0xc7c <free+0xd4>
 c76:	fd 01       	movw	r30, r26
 c78:	dc 01       	movw	r26, r24
 c7a:	f7 cf       	rjmp	.-18     	; 0xc6a <free+0xc2>
 c7c:	8d 91       	ld	r24, X+
 c7e:	9c 91       	ld	r25, X
 c80:	11 97       	sbiw	r26, 0x01	; 1
 c82:	9d 01       	movw	r18, r26
 c84:	2e 5f       	subi	r18, 0xFE	; 254
 c86:	3f 4f       	sbci	r19, 0xFF	; 255
 c88:	82 0f       	add	r24, r18
 c8a:	93 1f       	adc	r25, r19
 c8c:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <__brkval>
 c90:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <__brkval+0x1>
 c94:	28 17       	cp	r18, r24
 c96:	39 07       	cpc	r19, r25
 c98:	69 f4       	brne	.+26     	; 0xcb4 <free+0x10c>
 c9a:	30 97       	sbiw	r30, 0x00	; 0
 c9c:	29 f4       	brne	.+10     	; 0xca8 <free+0x100>
 c9e:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__flp+0x1>
 ca2:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <__flp>
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <free+0x104>
 ca8:	13 82       	std	Z+3, r1	; 0x03
 caa:	12 82       	std	Z+2, r1	; 0x02
 cac:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <__brkval+0x1>
 cb0:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <__brkval>
 cb4:	df 91       	pop	r29
 cb6:	cf 91       	pop	r28
 cb8:	08 95       	ret

00000cba <do_rand>:
 cba:	8f 92       	push	r8
 cbc:	9f 92       	push	r9
 cbe:	af 92       	push	r10
 cc0:	bf 92       	push	r11
 cc2:	cf 92       	push	r12
 cc4:	df 92       	push	r13
 cc6:	ef 92       	push	r14
 cc8:	ff 92       	push	r15
 cca:	cf 93       	push	r28
 ccc:	df 93       	push	r29
 cce:	ec 01       	movw	r28, r24
 cd0:	68 81       	ld	r22, Y
 cd2:	79 81       	ldd	r23, Y+1	; 0x01
 cd4:	8a 81       	ldd	r24, Y+2	; 0x02
 cd6:	9b 81       	ldd	r25, Y+3	; 0x03
 cd8:	61 15       	cp	r22, r1
 cda:	71 05       	cpc	r23, r1
 cdc:	81 05       	cpc	r24, r1
 cde:	91 05       	cpc	r25, r1
 ce0:	21 f4       	brne	.+8      	; 0xcea <do_rand+0x30>
 ce2:	64 e2       	ldi	r22, 0x24	; 36
 ce4:	79 ed       	ldi	r23, 0xD9	; 217
 ce6:	8b e5       	ldi	r24, 0x5B	; 91
 ce8:	97 e0       	ldi	r25, 0x07	; 7
 cea:	2d e1       	ldi	r18, 0x1D	; 29
 cec:	33 ef       	ldi	r19, 0xF3	; 243
 cee:	41 e0       	ldi	r20, 0x01	; 1
 cf0:	50 e0       	ldi	r21, 0x00	; 0
 cf2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__divmodsi4>
 cf6:	49 01       	movw	r8, r18
 cf8:	5a 01       	movw	r10, r20
 cfa:	9b 01       	movw	r18, r22
 cfc:	ac 01       	movw	r20, r24
 cfe:	a7 ea       	ldi	r26, 0xA7	; 167
 d00:	b1 e4       	ldi	r27, 0x41	; 65
 d02:	0e 94 b9 06 	call	0xd72	; 0xd72 <__muluhisi3>
 d06:	6b 01       	movw	r12, r22
 d08:	7c 01       	movw	r14, r24
 d0a:	ac ee       	ldi	r26, 0xEC	; 236
 d0c:	b4 ef       	ldi	r27, 0xF4	; 244
 d0e:	a5 01       	movw	r20, r10
 d10:	94 01       	movw	r18, r8
 d12:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulohisi3>
 d16:	dc 01       	movw	r26, r24
 d18:	cb 01       	movw	r24, r22
 d1a:	8c 0d       	add	r24, r12
 d1c:	9d 1d       	adc	r25, r13
 d1e:	ae 1d       	adc	r26, r14
 d20:	bf 1d       	adc	r27, r15
 d22:	b7 ff       	sbrs	r27, 7
 d24:	03 c0       	rjmp	.+6      	; 0xd2c <do_rand+0x72>
 d26:	01 97       	sbiw	r24, 0x01	; 1
 d28:	a1 09       	sbc	r26, r1
 d2a:	b0 48       	sbci	r27, 0x80	; 128
 d2c:	88 83       	st	Y, r24
 d2e:	99 83       	std	Y+1, r25	; 0x01
 d30:	aa 83       	std	Y+2, r26	; 0x02
 d32:	bb 83       	std	Y+3, r27	; 0x03
 d34:	9f 77       	andi	r25, 0x7F	; 127
 d36:	df 91       	pop	r29
 d38:	cf 91       	pop	r28
 d3a:	ff 90       	pop	r15
 d3c:	ef 90       	pop	r14
 d3e:	df 90       	pop	r13
 d40:	cf 90       	pop	r12
 d42:	bf 90       	pop	r11
 d44:	af 90       	pop	r10
 d46:	9f 90       	pop	r9
 d48:	8f 90       	pop	r8
 d4a:	08 95       	ret

00000d4c <rand_r>:
 d4c:	0e 94 5d 06 	call	0xcba	; 0xcba <do_rand>
 d50:	08 95       	ret

00000d52 <rand>:
 d52:	86 e0       	ldi	r24, 0x06	; 6
 d54:	91 e0       	ldi	r25, 0x01	; 1
 d56:	0e 94 5d 06 	call	0xcba	; 0xcba <do_rand>
 d5a:	08 95       	ret

00000d5c <srand>:
 d5c:	a0 e0       	ldi	r26, 0x00	; 0
 d5e:	b0 e0       	ldi	r27, 0x00	; 0
 d60:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
 d64:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
 d68:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
 d6c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
 d70:	08 95       	ret

00000d72 <__muluhisi3>:
 d72:	0e 94 cc 06 	call	0xd98	; 0xd98 <__umulhisi3>
 d76:	a5 9f       	mul	r26, r21
 d78:	90 0d       	add	r25, r0
 d7a:	b4 9f       	mul	r27, r20
 d7c:	90 0d       	add	r25, r0
 d7e:	a4 9f       	mul	r26, r20
 d80:	80 0d       	add	r24, r0
 d82:	91 1d       	adc	r25, r1
 d84:	11 24       	eor	r1, r1
 d86:	08 95       	ret

00000d88 <__mulshisi3>:
 d88:	b7 ff       	sbrs	r27, 7
 d8a:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__muluhisi3>

00000d8e <__mulohisi3>:
 d8e:	0e 94 b9 06 	call	0xd72	; 0xd72 <__muluhisi3>
 d92:	82 1b       	sub	r24, r18
 d94:	93 0b       	sbc	r25, r19
 d96:	08 95       	ret

00000d98 <__umulhisi3>:
 d98:	a2 9f       	mul	r26, r18
 d9a:	b0 01       	movw	r22, r0
 d9c:	b3 9f       	mul	r27, r19
 d9e:	c0 01       	movw	r24, r0
 da0:	a3 9f       	mul	r26, r19
 da2:	70 0d       	add	r23, r0
 da4:	81 1d       	adc	r24, r1
 da6:	11 24       	eor	r1, r1
 da8:	91 1d       	adc	r25, r1
 daa:	b2 9f       	mul	r27, r18
 dac:	70 0d       	add	r23, r0
 dae:	81 1d       	adc	r24, r1
 db0:	11 24       	eor	r1, r1
 db2:	91 1d       	adc	r25, r1
 db4:	08 95       	ret

00000db6 <_exit>:
 db6:	f8 94       	cli

00000db8 <__stop_program>:
 db8:	ff cf       	rjmp	.-2      	; 0xdb8 <__stop_program>
