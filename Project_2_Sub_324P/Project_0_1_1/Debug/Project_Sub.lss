
Project_Sub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00001c90  00001d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  00800192  00800192  00001db6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012df  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  000032a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001004  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00004984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  00004cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ccd  00000000  00000000  000051ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005e9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_13>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      50:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_20>
      54:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_21>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      6c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      70:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      74:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      78:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      7c:	a8 03       	fmulsu	r18, r16
      7e:	cd 03       	fmulsu	r20, r21
      80:	cd 03       	fmulsu	r20, r21
      82:	cd 03       	fmulsu	r20, r21
      84:	cd 03       	fmulsu	r20, r21
      86:	cd 03       	fmulsu	r20, r21
      88:	cd 03       	fmulsu	r20, r21
      8a:	cd 03       	fmulsu	r20, r21
      8c:	cd 03       	fmulsu	r20, r21
      8e:	cd 03       	fmulsu	r20, r21
      90:	cd 03       	fmulsu	r20, r21
      92:	ef 03       	fmulsu	r22, r23
      94:	cd 03       	fmulsu	r20, r21
      96:	c8 02       	muls	r28, r24
      98:	cd 03       	fmulsu	r20, r21
      9a:	cd 03       	fmulsu	r20, r21
      9c:	2a 03       	fmul	r18, r18
      9e:	2f 03       	fmul	r18, r23
      a0:	35 03       	mulsu	r19, r21
      a2:	3b 03       	fmul	r19, r19
      a4:	41 03       	mulsu	r20, r17
      a6:	47 03       	mulsu	r20, r23
      a8:	cd 03       	fmulsu	r20, r21
      aa:	cd 03       	fmulsu	r20, r21
      ac:	cd 03       	fmulsu	r20, r21
      ae:	cd 03       	fmulsu	r20, r21
      b0:	cd 03       	fmulsu	r20, r21
      b2:	cd 03       	fmulsu	r20, r21
      b4:	cd 03       	fmulsu	r20, r21
      b6:	bf 02       	muls	r27, r31
      b8:	cd 03       	fmulsu	r20, r21
      ba:	ef 03       	fmulsu	r22, r23
      bc:	cd 03       	fmulsu	r20, r21
      be:	cd 03       	fmulsu	r20, r21
      c0:	cd 03       	fmulsu	r20, r21
      c2:	cd 03       	fmulsu	r20, r21
      c4:	cd 03       	fmulsu	r20, r21
      c6:	cd 03       	fmulsu	r20, r21
      c8:	cd 03       	fmulsu	r20, r21
      ca:	cd 03       	fmulsu	r20, r21
      cc:	cd 03       	fmulsu	r20, r21
      ce:	cd 03       	fmulsu	r20, r21
      d0:	cd 03       	fmulsu	r20, r21
      d2:	cd 03       	fmulsu	r20, r21
      d4:	be 03       	fmulsu	r19, r22
      d6:	cd 03       	fmulsu	r20, r21
      d8:	cd 03       	fmulsu	r20, r21
      da:	cd 03       	fmulsu	r20, r21
      dc:	cd 03       	fmulsu	r20, r21
      de:	cd 03       	fmulsu	r20, r21
      e0:	cd 03       	fmulsu	r20, r21
      e2:	cd 03       	fmulsu	r20, r21
      e4:	cd 03       	fmulsu	r20, r21
      e6:	cd 03       	fmulsu	r20, r21
      e8:	cd 03       	fmulsu	r20, r21
      ea:	cd 03       	fmulsu	r20, r21
      ec:	cd 03       	fmulsu	r20, r21
      ee:	cd 03       	fmulsu	r20, r21
      f0:	cd 03       	fmulsu	r20, r21
      f2:	4d 03       	fmul	r20, r21
      f4:	cd 03       	fmulsu	r20, r21
      f6:	7b 03       	fmul	r23, r19
      f8:	cd 03       	fmulsu	r20, r21
      fa:	cd 03       	fmulsu	r20, r21
      fc:	25 03       	mulsu	r18, r21
      fe:	a6 02       	muls	r26, r22
     100:	cd 03       	fmulsu	r20, r21
     102:	cd 03       	fmulsu	r20, r21
     104:	b0 02       	muls	r27, r16
     106:	d1 02       	muls	r29, r17
     108:	cd 03       	fmulsu	r20, r21
     10a:	b3 03       	fmuls	r19, r19
     10c:	af 03       	fmulsu	r18, r23
     10e:	cd 03       	fmulsu	r20, r21
     110:	cd 03       	fmulsu	r20, r21
     112:	cd 03       	fmulsu	r20, r21
     114:	b7 03       	fmuls	r19, r23
     116:	cd 03       	fmulsu	r20, r21
     118:	cd 03       	fmulsu	r20, r21
     11a:	c0 03       	fmuls	r20, r16
     11c:	cd 03       	fmulsu	r20, r21
     11e:	fb 02       	muls	r31, r27
     120:	ba 02       	muls	r27, r26
     122:	ab 02       	muls	r26, r27
     124:	cd 03       	fmulsu	r20, r21
     126:	cd 03       	fmulsu	r20, r21
     128:	cd 03       	fmulsu	r20, r21
     12a:	b5 02       	muls	r27, r21

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d8 e0       	ldi	r29, 0x08	; 8
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e0 e9       	ldi	r30, 0x90	; 144
     140:	fc e1       	ldi	r31, 0x1C	; 28
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	a2 39       	cpi	r26, 0x92	; 146
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	22 e0       	ldi	r18, 0x02	; 2
     150:	a2 e9       	ldi	r26, 0x92	; 146
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	ad 3b       	cpi	r26, 0xBD	; 189
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	0e 94 05 04 	call	0x80a	; 0x80a <main>
     162:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <_exit>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     16a:	2f b7       	in	r18, 0x3f	; 63
     16c:	20 78       	andi	r18, 0x80	; 128
     16e:	02 c0       	rjmp	.+4      	; 0x174 <uart_put_char+0xa>
     170:	22 23       	and	r18, r18
     172:	29 f1       	breq	.+74     	; 0x1be <uart_put_char+0x54>
     174:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <bytes_in_out_buffer>
     178:	9f 3f       	cpi	r25, 0xFF	; 255
     17a:	d1 f3       	breq	.-12     	; 0x170 <uart_put_char+0x6>
     17c:	f8 94       	cli
     17e:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <out_insert_pos>
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	9e 0f       	add	r25, r30
     186:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <out_insert_pos>
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	e6 56       	subi	r30, 0x66	; 102
     18e:	fe 4f       	sbci	r31, 0xFE	; 254
     190:	80 83       	st	Z, r24
     192:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bytes_in_out_buffer>
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <bytes_in_out_buffer>
     19c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <out_insert_pos>
     1a0:	8f 3f       	cpi	r24, 0xFF	; 255
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <uart_put_char+0x3e>
     1a4:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <out_insert_pos>
     1a8:	e1 ec       	ldi	r30, 0xC1	; 193
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	80 62       	ori	r24, 0x20	; 32
     1b0:	80 83       	st	Z, r24
     1b2:	22 23       	and	r18, r18
     1b4:	39 f0       	breq	.+14     	; 0x1c4 <uart_put_char+0x5a>
     1b6:	78 94       	sei
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	08 95       	ret
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	08 95       	ret
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	08 95       	ret

000001ca <uart_get_char>:
     1ca:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <bytes_in_input_buffer>
     1ce:	88 23       	and	r24, r24
     1d0:	e1 f3       	breq	.-8      	; 0x1ca <uart_get_char>
     1d2:	2f b7       	in	r18, 0x3f	; 63
     1d4:	20 78       	andi	r18, 0x80	; 128
     1d6:	f8 94       	cli
     1d8:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <input_insert_pos>
     1dc:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <bytes_in_input_buffer>
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	83 1b       	sub	r24, r19
     1e4:	91 09       	sbc	r25, r1
     1e6:	5a f4       	brpl	.+22     	; 0x1fe <uart_get_char+0x34>
     1e8:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <input_insert_pos>
     1ec:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <bytes_in_input_buffer>
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	e8 1b       	sub	r30, r24
     1f4:	f1 09       	sbc	r31, r1
     1f6:	e6 55       	subi	r30, 0x56	; 86
     1f8:	fd 4f       	sbci	r31, 0xFD	; 253
     1fa:	80 81       	ld	r24, Z
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <uart_get_char+0x48>
     1fe:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <input_insert_pos>
     202:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <bytes_in_input_buffer>
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	e8 1b       	sub	r30, r24
     20a:	f1 09       	sbc	r31, r1
     20c:	e6 56       	subi	r30, 0x66	; 102
     20e:	fd 4f       	sbci	r31, 0xFD	; 253
     210:	80 81       	ld	r24, Z
     212:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <bytes_in_input_buffer>
     216:	91 50       	subi	r25, 0x01	; 1
     218:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <bytes_in_input_buffer>
     21c:	22 23       	and	r18, r18
     21e:	09 f0       	breq	.+2      	; 0x222 <uart_get_char+0x58>
     220:	78 94       	sei
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	08 95       	ret

00000226 <init_serial_stdio>:
     226:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <out_insert_pos>
     22a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <bytes_in_out_buffer>
     22e:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <input_insert_pos>
     232:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <bytes_in_input_buffer>
     236:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <input_overrun>
     23a:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <__data_end>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	aa 1f       	adc	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	aa 1f       	adc	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	9c 01       	movw	r18, r24
     254:	ad 01       	movw	r20, r26
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	44 1f       	adc	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	72 e1       	ldi	r23, 0x12	; 18
     262:	8a e7       	ldi	r24, 0x7A	; 122
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 c6 08 	call	0x118c	; 0x118c <__divmodsi4>
     26a:	ba 01       	movw	r22, r20
     26c:	a9 01       	movw	r20, r18
     26e:	4f 5f       	subi	r20, 0xFF	; 255
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	6f 4f       	sbci	r22, 0xFF	; 255
     274:	7f 4f       	sbci	r23, 0xFF	; 255
     276:	db 01       	movw	r26, r22
     278:	ca 01       	movw	r24, r20
     27a:	1a f4       	brpl	.+6      	; 0x282 <init_serial_stdio+0x5c>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	b5 95       	asr	r27
     284:	a7 95       	ror	r26
     286:	97 95       	ror	r25
     288:	87 95       	ror	r24
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     290:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     294:	e1 ec       	ldi	r30, 0xC1	; 193
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	88 e1       	ldi	r24, 0x18	; 24
     29a:	80 83       	st	Z, r24
     29c:	80 81       	ld	r24, Z
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	80 83       	st	Z, r24
     2a2:	e7 eb       	ldi	r30, 0xB7	; 183
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	93 83       	std	Z+3, r25	; 0x03
     2ac:	82 83       	std	Z+2, r24	; 0x02
     2ae:	91 83       	std	Z+1, r25	; 0x01
     2b0:	80 83       	st	Z, r24
     2b2:	08 95       	ret

000002b4 <serial_input_available>:
     2b4:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <bytes_in_input_buffer>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	91 11       	cpse	r25, r1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <serial_input_available+0xc>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     2d6:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bytes_in_out_buffer>
     2da:	88 23       	and	r24, r24
     2dc:	29 f1       	breq	.+74     	; 0x328 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     2de:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <out_insert_pos>
     2e2:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <bytes_in_out_buffer>
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	82 1b       	sub	r24, r18
     2ea:	91 09       	sbc	r25, r1
     2ec:	5a f4       	brpl	.+22     	; 0x304 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2ee:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <out_insert_pos>
     2f2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e8 1b       	sub	r30, r24
     2fa:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2fc:	e7 56       	subi	r30, 0x67	; 103
     2fe:	fd 4f       	sbci	r31, 0xFD	; 253
     300:	90 81       	ld	r25, Z
     302:	0a c0       	rjmp	.+20     	; 0x318 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     304:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <out_insert_pos>
     308:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bytes_in_out_buffer>
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	e8 1b       	sub	r30, r24
     310:	f1 09       	sbc	r31, r1
     312:	e6 56       	subi	r30, 0x66	; 102
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     318:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bytes_in_out_buffer>
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     322:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     326:	05 c0       	rjmp	.+10     	; 0x332 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     328:	e1 ec       	ldi	r30, 0xC1	; 193
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7d       	andi	r24, 0xDF	; 223
     330:	80 83       	st	Z, r24
	}
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	2f 91       	pop	r18
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	cf 93       	push	r28
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     36a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     36e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     372:	88 23       	and	r24, r24
     374:	49 f0       	breq	.+18     	; 0x388 <__vector_20+0x42>
     376:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bytes_in_out_buffer>
     37a:	8f 3f       	cpi	r24, 0xFF	; 255
     37c:	29 f0       	breq	.+10     	; 0x388 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8c 2f       	mov	r24, r28
     384:	0e 94 b5 00 	call	0x16a	; 0x16a <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     388:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <bytes_in_input_buffer>
     38c:	80 31       	cpi	r24, 0x10	; 16
     38e:	20 f0       	brcs	.+8      	; 0x398 <__vector_20+0x52>
		input_overrun = 1;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <input_overrun>
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     398:	cd 30       	cpi	r28, 0x0D	; 13
     39a:	09 f4       	brne	.+2      	; 0x39e <__vector_20+0x58>
			c = '\n';
     39c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     39e:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <input_insert_pos>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	8e 0f       	add	r24, r30
     3a6:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <input_insert_pos>
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	e6 56       	subi	r30, 0x66	; 102
     3ae:	fd 4f       	sbci	r31, 0xFD	; 253
     3b0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     3b2:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <bytes_in_input_buffer>
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     3bc:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <input_insert_pos>
     3c0:	80 31       	cpi	r24, 0x10	; 16
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     3c4:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <input_insert_pos>
		}
	}
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	cf 91       	pop	r28
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	7f 91       	pop	r23
     3d8:	6f 91       	pop	r22
     3da:	5f 91       	pop	r21
     3dc:	4f 91       	pop	r20
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <init_tcnt0>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT0 = 0;
     3ec:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
     3ee:	17 bc       	out	0x27, r1	; 39
	//OCR0B = 124;
	

	TCCR0A |= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | _BV(WGM00) | _BV(WGM01);
     3f0:	84 b5       	in	r24, 0x24	; 36
     3f2:	83 68       	ori	r24, 0x83	; 131
     3f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS10);
     3f6:	85 b5       	in	r24, 0x25	; 37
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	85 bd       	out	0x25, r24	; 37
     3fc:	08 95       	ret

000003fe <init_tcnt2>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
     3fe:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 124;
     402:	8c e7       	ldi	r24, 0x7C	; 124
     404:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 124;
     408:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	

	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
     40c:	e0 eb       	ldi	r30, 0xB0	; 176
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	83 6a       	ori	r24, 0xA3	; 163
     414:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
     416:	e1 eb       	ldi	r30, 0xB1	; 177
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 83       	st	Z, r24
     420:	08 95       	ret

00000422 <makeInfo>:
	}
}

info* makeInfo(void) {
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 21 09 	call	0x1242	; 0x1242 <malloc>
	return info_ptr;
}
     42a:	08 95       	ret

0000042c <initialise>:
	
}



void initialise(info* info_ptr){
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24

	DDRA = (1<<PORTA0)|(1<<PORTA1);
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	81 b9       	out	0x01, r24	; 1
	DDRB = (1<<PORTB3);			/*	PWM camera	*/
     43a:	88 e0       	ldi	r24, 0x08	; 8
     43c:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5)|(1<<PORTC6)|(1<<PORTC7);
     43e:	8c ef       	ldi	r24, 0xFC	; 252
     440:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
     442:	8e ef       	ldi	r24, 0xFE	; 254
     444:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
     446:	50 98       	cbi	0x0a, 0	; 10
	init_serial_stdio(9600,0);											//////////////////////////////////////////////////////////////////////////////////////////
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	60 e8       	ldi	r22, 0x80	; 128
     44c:	75 e2       	ldi	r23, 0x25	; 37
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 13 01 	call	0x226	; 0x226 <init_serial_stdio>

	init_tcnt0();				/*	Camera PWM	*/
     456:	0e 94 f6 01 	call	0x3ec	; 0x3ec <init_tcnt0>
	init_tcnt1();				/*	Timer		*/
     45a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <init_tcnt1>
	init_tcnt2();				/*	Motor PWM	*/
     45e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <init_tcnt2>
	init_step();
     462:	0e 94 47 05 	call	0xa8e	; 0xa8e <init_step>
	srand(get_tcnt1_ticks());
     466:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     46a:	cb 01       	movw	r24, r22
     46c:	0e 94 93 0a 	call	0x1526	; 0x1526 <srand>
	sei();
     470:	78 94       	sei
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     472:	c7 eb       	ldi	r28, 0xB7	; 183
     474:	d2 e0       	ldi	r29, 0x02	; 2
	//}
		
	/****************************************************************************************************************************************************************/
		
	uint8_t check = 1;
	while (check){
     476:	20 c0       	rjmp	.+64     	; 0x4b8 <initialise+0x8c>
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     478:	88 81       	ld	r24, Y
     47a:	99 81       	ldd	r25, Y+1	; 0x01
     47c:	0e 94 9e 0a 	call	0x153c	; 0x153c <fgetc>
			if (start == 'o'){
     480:	8f 36       	cpi	r24, 0x6F	; 111
     482:	d1 f4       	brne	.+52     	; 0x4b8 <initialise+0x8c>
				fputs("Start\n", stdout);
     484:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <__iob+0x2>
     488:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <__iob+0x3>
     48c:	46 e0       	ldi	r20, 0x06	; 6
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 42 0b 	call	0x1684	; 0x1684 <fwrite>
				
		}
			
	}

	info_ptr->start = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	f8 01       	movw	r30, r16
     4a0:	87 83       	std	Z+7, r24	; 0x07
	info_ptr->stepAct = '\0';
     4a2:	14 82       	std	Z+4, r1	; 0x04
	info_ptr->maxStep = 150;
     4a4:	86 e9       	ldi	r24, 0x96	; 150
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	93 83       	std	Z+3, r25	; 0x03
     4aa:	82 83       	std	Z+2, r24	; 0x02
	info_ptr->camera = 0;
     4ac:	16 82       	std	Z+6, r1	; 0x06
	info_ptr->pwmSpeed = 0;
     4ae:	10 82       	st	Z, r1
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper
     4b0:	8b b1       	in	r24, 0x0b	; 11
     4b2:	80 63       	ori	r24, 0x30	; 48
     4b4:	8b b9       	out	0x0b, r24	; 11

}
     4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <initialise+0x96>
	/****************************************************************************************************************************************************************/
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
     4b8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     4bc:	88 23       	and	r24, r24
     4be:	e1 f3       	breq	.-8      	; 0x4b8 <initialise+0x8c>
     4c0:	db cf       	rjmp	.-74     	; 0x478 <initialise+0x4c>
	info_ptr->maxStep = 150;
	info_ptr->camera = 0;
	info_ptr->pwmSpeed = 0;
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper

}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	08 95       	ret

000004cc <custom_delay>:




void custom_delay(uint32_t ticks){
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	6b 01       	movw	r12, r22
     4d6:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt1 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt1_ticks();
     4d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
	while((current_time + ticks) > get_tcnt1_ticks()){
     4dc:	c6 0e       	add	r12, r22
     4de:	d7 1e       	adc	r13, r23
     4e0:	e8 1e       	adc	r14, r24
     4e2:	f9 1e       	adc	r15, r25
     4e4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     4e8:	6c 15       	cp	r22, r12
     4ea:	7d 05       	cpc	r23, r13
     4ec:	8e 05       	cpc	r24, r14
     4ee:	9f 05       	cpc	r25, r15
     4f0:	c8 f3       	brcs	.-14     	; 0x4e4 <custom_delay+0x18>
		;
	}
}
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <input>:
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}


void input(info* info_ptr){
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	64 97       	sbiw	r28, 0x14	; 20
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	7c 01       	movw	r14, r24
	
	if(!serial_input_available()){
     51e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     522:	88 23       	and	r24, r24
     524:	09 f4       	brne	.+2      	; 0x528 <input+0x2c>
     526:	62 c1       	rjmp	.+708    	; 0x7ec <input+0x2f0>
		return;
		
	}

	char c = fgetc(stdin);
     528:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <__iob>
     52c:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <__iob+0x1>
     530:	0e 94 9e 0a 	call	0x153c	; 0x153c <fgetc>
     534:	8c 01       	movw	r16, r24
     536:	11 27       	eor	r17, r17
	int16_t speed;
	char buffer[20];
	
	switch(c){
     538:	f8 01       	movw	r30, r16
     53a:	b0 97       	sbiw	r30, 0x20	; 32
     53c:	e8 35       	cpi	r30, 0x58	; 88
     53e:	f1 05       	cpc	r31, r1
     540:	08 f0       	brcs	.+2      	; 0x544 <input+0x48>
     542:	2b c1       	rjmp	.+598    	; 0x79a <input+0x29e>
     544:	e2 5c       	subi	r30, 0xC2	; 194
     546:	ff 4f       	sbci	r31, 0xFF	; 255
     548:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__tablejump2__>
		
		case 'a' :
			// turn left
			PORTD &= ~(1<<PORTD2);
     54c:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     54e:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     550:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     552:	47 98       	cbi	0x08, 7	; 8
			break;
     554:	44 c1       	rjmp	.+648    	; 0x7de <input+0x2e2>
		case 's' :
			// backwards
			PORTD &= ~(1<<PORTD2);
     556:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     558:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     55a:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     55c:	47 9a       	sbi	0x08, 7	; 8
			break;
     55e:	3f c1       	rjmp	.+638    	; 0x7de <input+0x2e2>
		case 'd' :
			// turn right
			PORTD |= (1<<PORTD2);
     560:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     562:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     564:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     566:	47 9a       	sbi	0x08, 7	; 8
			break;
     568:	3a c1       	rjmp	.+628    	; 0x7de <input+0x2e2>
		case 'w' :
			// forward
			PORTD |= (1<<PORTD2);
     56a:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     56c:	5b 98       	cbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     56e:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     570:	47 98       	cbi	0x08, 7	; 8
			break;
     572:	35 c1       	rjmp	.+618    	; 0x7de <input+0x2e2>
		case 'r' :
			// release claw
			release_step();
     574:	0e 94 8a 05 	call	0xb14	; 0xb14 <release_step>
			info_ptr->stepAct = '\0';
     578:	f7 01       	movw	r30, r14
     57a:	14 82       	std	Z+4, r1	; 0x04
			break;
     57c:	30 c1       	rjmp	.+608    	; 0x7de <input+0x2e2>
			// rely to winch to lift up
			//fputc('+', stdout);
			break;
		case '=' :
			// someone panic'd; winch to lift up
			fputc('+', stdout);
     57e:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <__iob+0x2>
     582:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <__iob+0x3>
     586:	8b e2       	ldi	r24, 0x2B	; 43
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
			break;
     58e:	27 c1       	rjmp	.+590    	; 0x7de <input+0x2e2>
		case '-' :
			// lower
			fputc('_', stdout);
     590:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <__iob+0x2>
     594:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <__iob+0x3>
     598:	8f e5       	ldi	r24, 0x5F	; 95
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
			break;
     5a0:	1e c1       	rjmp	.+572    	; 0x7de <input+0x2e2>
		case 'e' :
			// activate claw
			if (info_ptr->stepSpeed < 0){
     5a2:	f7 01       	movw	r30, r14
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
     5a6:	88 23       	and	r24, r24
     5a8:	14 f4       	brge	.+4      	; 0x5ae <input+0xb2>
				info_ptr->stepSpeed = -info_ptr->stepSpeed;
     5aa:	81 95       	neg	r24
     5ac:	81 83       	std	Z+1, r24	; 0x01
			}

			sprintf(buffer, "activate %d\n", info_ptr->stepSpeed);
     5ae:	f7 01       	movw	r30, r14
     5b0:	81 81       	ldd	r24, Z+1	; 0x01
     5b2:	28 2f       	mov	r18, r24
     5b4:	08 2e       	mov	r0, r24
     5b6:	00 0c       	add	r0, r0
     5b8:	33 0b       	sbc	r19, r19
     5ba:	3f 93       	push	r19
     5bc:	8f 93       	push	r24
     5be:	8f e1       	ldi	r24, 0x1F	; 31
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	ce 01       	movw	r24, r28
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	6c 01       	movw	r12, r24
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sprintf>
			fputs(buffer, stdout);
     5d4:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <__iob+0x2>
     5d8:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <__iob+0x3>
     5dc:	c6 01       	movw	r24, r12
     5de:	0e 94 18 0b 	call	0x1630	; 0x1630 <fputs>
			info_ptr->stepAct = 'A';
     5e2:	81 e4       	ldi	r24, 0x41	; 65
     5e4:	f7 01       	movw	r30, r14
     5e6:	84 83       	std	Z+4, r24	; 0x04
			break;
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	f4 c0       	rjmp	.+488    	; 0x7de <input+0x2e2>
		case 'q' :
			// retract claw
			if (info_ptr->stepSpeed > 0){
     5f6:	f7 01       	movw	r30, r14
     5f8:	81 81       	ldd	r24, Z+1	; 0x01
     5fa:	18 16       	cp	r1, r24
     5fc:	14 f4       	brge	.+4      	; 0x602 <input+0x106>
					info_ptr->stepSpeed = -info_ptr->stepSpeed;
     5fe:	81 95       	neg	r24
     600:	81 83       	std	Z+1, r24	; 0x01
			}
			/************sends negative to activate winch *******/
			sprintf(buffer, "retract %d\n", info_ptr->stepSpeed);
     602:	f7 01       	movw	r30, r14
     604:	81 81       	ldd	r24, Z+1	; 0x01
     606:	28 2f       	mov	r18, r24
     608:	08 2e       	mov	r0, r24
     60a:	00 0c       	add	r0, r0
     60c:	33 0b       	sbc	r19, r19
     60e:	3f 93       	push	r19
     610:	8f 93       	push	r24
     612:	8c e2       	ldi	r24, 0x2C	; 44
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	6c 01       	movw	r12, r24
     620:	9f 93       	push	r25
     622:	8f 93       	push	r24
     624:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sprintf>
			fputs(buffer, stdout);
     628:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <__iob+0x2>
     62c:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <__iob+0x3>
     630:	c6 01       	movw	r24, r12
     632:	0e 94 18 0b 	call	0x1630	; 0x1630 <fputs>
			info_ptr->stepAct = 'R';
     636:	82 e5       	ldi	r24, 0x52	; 82
     638:	f7 01       	movw	r30, r14
     63a:	84 83       	std	Z+4, r24	; 0x04
			break;
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	ca c0       	rjmp	.+404    	; 0x7de <input+0x2e2>
		case '`' :
			info_ptr->pwmSpeed = 0;
     64a:	f7 01       	movw	r30, r14
     64c:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 87       	std	Z+8, r24	; 0x08
			break;
     652:	c5 c0       	rjmp	.+394    	; 0x7de <input+0x2e2>
		case '0' :
			info_ptr->pwmSpeed = 0;
     654:	f7 01       	movw	r30, r14
     656:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 87       	std	Z+8, r24	; 0x08
			break;
     65c:	c0 c0       	rjmp	.+384    	; 0x7de <input+0x2e2>
		case '1' :
			info_ptr->pwmSpeed = 20;
     65e:	84 e1       	ldi	r24, 0x14	; 20
     660:	f7 01       	movw	r30, r14
     662:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 87       	std	Z+8, r24	; 0x08
			break;
     668:	ba c0       	rjmp	.+372    	; 0x7de <input+0x2e2>
		case '2' :
			info_ptr->pwmSpeed = 40;
     66a:	88 e2       	ldi	r24, 0x28	; 40
     66c:	f7 01       	movw	r30, r14
     66e:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 87       	std	Z+8, r24	; 0x08
			break;
     674:	b4 c0       	rjmp	.+360    	; 0x7de <input+0x2e2>
		case '3' :
			info_ptr->pwmSpeed = 60;
     676:	8c e3       	ldi	r24, 0x3C	; 60
     678:	f7 01       	movw	r30, r14
     67a:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 87       	std	Z+8, r24	; 0x08
			break;
     680:	ae c0       	rjmp	.+348    	; 0x7de <input+0x2e2>
		case '4' :
			info_ptr->pwmSpeed = 80;
     682:	80 e5       	ldi	r24, 0x50	; 80
     684:	f7 01       	movw	r30, r14
     686:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 87       	std	Z+8, r24	; 0x08
			break;
     68c:	a8 c0       	rjmp	.+336    	; 0x7de <input+0x2e2>
		case '5' :
			info_ptr->pwmSpeed = 100;
     68e:	84 e6       	ldi	r24, 0x64	; 100
     690:	f7 01       	movw	r30, r14
     692:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 87       	std	Z+8, r24	; 0x08
			break;
     698:	a2 c0       	rjmp	.+324    	; 0x7de <input+0x2e2>
		case '[' :
			speed = info_ptr->stepSpeed - 10;
     69a:	f7 01       	movw	r30, r14
     69c:	21 81       	ldd	r18, Z+1	; 0x01
			if (speed > -110){
     69e:	82 2f       	mov	r24, r18
     6a0:	02 2e       	mov	r0, r18
     6a2:	00 0c       	add	r0, r0
     6a4:	99 0b       	sbc	r25, r25
     6a6:	0a 97       	sbiw	r24, 0x0a	; 10
     6a8:	83 39       	cpi	r24, 0x93	; 147
     6aa:	9f 4f       	sbci	r25, 0xFF	; 255
     6ac:	1c f0       	brlt	.+6      	; 0x6b4 <input+0x1b8>
				info_ptr->stepSpeed -= 10;
     6ae:	2a 50       	subi	r18, 0x0A	; 10
     6b0:	f7 01       	movw	r30, r14
     6b2:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     6b4:	f7 01       	movw	r30, r14
     6b6:	81 81       	ldd	r24, Z+1	; 0x01
     6b8:	28 2f       	mov	r18, r24
     6ba:	08 2e       	mov	r0, r24
     6bc:	00 0c       	add	r0, r0
     6be:	33 0b       	sbc	r19, r19
     6c0:	3f 93       	push	r19
     6c2:	8f 93       	push	r24
     6c4:	88 e3       	ldi	r24, 0x38	; 56
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	7c 01       	movw	r14, r24
     6d2:	9f 93       	push	r25
     6d4:	8f 93       	push	r24
     6d6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sprintf>
			fputs(buffer, stdout);
     6da:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <__iob+0x2>
     6de:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <__iob+0x3>
     6e2:	c7 01       	movw	r24, r14
     6e4:	0e 94 18 0b 	call	0x1630	; 0x1630 <fputs>
			break;
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	74 c0       	rjmp	.+232    	; 0x7de <input+0x2e2>
		case ']' :
			speed = info_ptr->stepSpeed - 10;
     6f6:	f7 01       	movw	r30, r14
     6f8:	21 81       	ldd	r18, Z+1	; 0x01
			if (speed < 110){
     6fa:	82 2f       	mov	r24, r18
     6fc:	02 2e       	mov	r0, r18
     6fe:	00 0c       	add	r0, r0
     700:	99 0b       	sbc	r25, r25
     702:	0a 97       	sbiw	r24, 0x0a	; 10
     704:	8e 36       	cpi	r24, 0x6E	; 110
     706:	91 05       	cpc	r25, r1
     708:	14 f4       	brge	.+4      	; 0x70e <input+0x212>
				info_ptr->stepSpeed += 10;
     70a:	26 5f       	subi	r18, 0xF6	; 246
     70c:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     70e:	f7 01       	movw	r30, r14
     710:	81 81       	ldd	r24, Z+1	; 0x01
     712:	28 2f       	mov	r18, r24
     714:	08 2e       	mov	r0, r24
     716:	00 0c       	add	r0, r0
     718:	33 0b       	sbc	r19, r19
     71a:	3f 93       	push	r19
     71c:	8f 93       	push	r24
     71e:	88 e3       	ldi	r24, 0x38	; 56
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	7c 01       	movw	r14, r24
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sprintf>
			fputs(buffer, stdout);
     734:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <__iob+0x2>
     738:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <__iob+0x3>
     73c:	c7 01       	movw	r24, r14
     73e:	0e 94 18 0b 	call	0x1630	; 0x1630 <fputs>
			break;
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	47 c0       	rjmp	.+142    	; 0x7de <input+0x2e2>
		case ' ' :
			info_ptr->pwmSpeed = 0;
     750:	f7 01       	movw	r30, r14
     752:	10 82       	st	Z, r1
			info_ptr->stopCommand = 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	85 83       	std	Z+5, r24	; 0x05
			info_ptr->motorAct = 0;
     758:	10 86       	std	Z+8, r1	; 0x08
			info_ptr->stepAct = '\0';
     75a:	14 82       	std	Z+4, r1	; 0x04
			//fputc(' ', stdout);
			break;
     75c:	40 c0       	rjmp	.+128    	; 0x7de <input+0x2e2>
		case 'h' :
			info_ptr->camera = 10;
     75e:	8a e0       	ldi	r24, 0x0A	; 10
     760:	f7 01       	movw	r30, r14
     762:	86 83       	std	Z+6, r24	; 0x06
			break;
     764:	3c c0       	rjmp	.+120    	; 0x7de <input+0x2e2>
		case 'g' :
			info_ptr->camera = -10;
     766:	86 ef       	ldi	r24, 0xF6	; 246
     768:	f7 01       	movw	r30, r14
     76a:	86 83       	std	Z+6, r24	; 0x06
			break;
     76c:	38 c0       	rjmp	.+112    	; 0x7de <input+0x2e2>
		case 'l' :
			if (PORTA && (1<<PORTA1)){
     76e:	82 b1       	in	r24, 0x02	; 2
     770:	88 23       	and	r24, r24
     772:	11 f0       	breq	.+4      	; 0x778 <input+0x27c>
				PORTA &= ~(1<<PORTA1);
     774:	11 98       	cbi	0x02, 1	; 2
     776:	33 c0       	rjmp	.+102    	; 0x7de <input+0x2e2>
				} else {
				PORTA |= (1<<PORTA1);
     778:	11 9a       	sbi	0x02, 1	; 2
     77a:	31 c0       	rjmp	.+98     	; 0x7de <input+0x2e2>
			}
			break;
		case 'L' :
			PORTA |= (1<<PORTA1);
     77c:	11 9a       	sbi	0x02, 1	; 2
     77e:	2f c0       	rjmp	.+94     	; 0x7de <input+0x2e2>
			//fputc('?', stdout);
			//info_ptr->stopCommand = 1;
			break;
		case 'o':
			// restart
			fputs("started\n", stdout);
     780:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <__iob+0x2>
     784:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <__iob+0x3>
     788:	48 e0       	ldi	r20, 0x08	; 8
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	87 e4       	ldi	r24, 0x47	; 71
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 42 0b 	call	0x1684	; 0x1684 <fwrite>
			break;
     798:	22 c0       	rjmp	.+68     	; 0x7de <input+0x2e2>
		default:
			fputs("stupid.\n", stdout);
     79a:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <__iob+0x2>
     79e:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <__iob+0x3>
     7a2:	48 e0       	ldi	r20, 0x08	; 8
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e5       	ldi	r24, 0x50	; 80
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 42 0b 	call	0x1684	; 0x1684 <fwrite>
			++info_ptr->stupidCount;
     7b2:	f7 01       	movw	r30, r14
     7b4:	81 85       	ldd	r24, Z+9	; 0x09
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	81 87       	std	Z+9, r24	; 0x09
			if (info_ptr->stupidCount >= 10){
     7ba:	8a 30       	cpi	r24, 0x0A	; 10
     7bc:	80 f0       	brcs	.+32     	; 0x7de <input+0x2e2>
					fputc('H', stdout);
     7be:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <__iob+0x2>
     7c2:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <__iob+0x3>
     7c6:	88 e4       	ldi	r24, 0x48	; 72
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
					custom_delay(1000);
     7ce:	68 ee       	ldi	r22, 0xE8	; 232
     7d0:	73 e0       	ldi	r23, 0x03	; 3
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 66 02 	call	0x4cc	; 0x4cc <custom_delay>
					info_ptr->stupidCount = 0;
     7da:	f7 01       	movw	r30, r14
     7dc:	11 86       	std	Z+9, r1	; 0x09
			}
			break;
	}
	/* echo character to next micro */
	fputc(c, stdout);
     7de:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <__iob+0x2>
     7e2:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <__iob+0x3>
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
	
}
     7ec:	64 96       	adiw	r28, 0x14	; 20
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	08 95       	ret

0000080a <main>:
void initialise(info* info_ptr);
void input(info* info_ptr);


/* functional code	*/
int main(void) {
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	e2 97       	sbiw	r28, 0x32	; 50
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
	
	info* info_ptr = makeInfo();
     81e:	0e 94 11 02 	call	0x422	; 0x422 <makeInfo>
     822:	8c 01       	movw	r16, r24
	initialise(info_ptr);
     824:	0e 94 16 02 	call	0x42c	; 0x42c <initialise>
	DDRA |= (1<<PORTA0);
     828:	08 9a       	sbi	0x01, 0	; 1
	PORTA |= (1<<PORTA0);
     82a:	10 9a       	sbi	0x02, 0	; 2
	while(1) {
		if(serial_input_available()){
			input(info_ptr);
		}
		if (info_ptr->motorAct){
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     82c:	33 24       	eor	r3, r3
     82e:	3a 94       	dec	r3
     830:	0f 2e       	mov	r0, r31
     832:	f4 e6       	ldi	r31, 0x64	; 100
     834:	af 2e       	mov	r10, r31
     836:	b1 2c       	mov	r11, r1
     838:	f0 2d       	mov	r31, r0
     83a:	0f 2e       	mov	r0, r31
     83c:	f3 eb       	ldi	r31, 0xB3	; 179
     83e:	8f 2e       	mov	r8, r31
     840:	91 2c       	mov	r9, r1
     842:	f0 2d       	mov	r31, r0
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     844:	0f 2e       	mov	r0, r31
     846:	f4 eb       	ldi	r31, 0xB4	; 180
     848:	6f 2e       	mov	r6, r31
     84a:	71 2c       	mov	r7, r1
     84c:	f0 2d       	mov	r31, r0
			info_ptr->stopCommand = 0;
			info_ptr->stupidCount = 0;
		} else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     84e:	2e 01       	movw	r4, r28
     850:	2f e1       	ldi	r18, 0x1F	; 31
     852:	42 0e       	add	r4, r18
     854:	51 1c       	adc	r5, r1
			fputs(buffer, stdout);
     856:	0f 2e       	mov	r0, r31
     858:	f7 eb       	ldi	r31, 0xB7	; 183
     85a:	cf 2e       	mov	r12, r31
     85c:	f2 e0       	ldi	r31, 0x02	; 2
     85e:	df 2e       	mov	r13, r31
     860:	f0 2d       	mov	r31, r0
	initialise(info_ptr);
	DDRA |= (1<<PORTA0);
	PORTA |= (1<<PORTA0);
	
	while(1) {
		if(serial_input_available()){
     862:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     866:	88 23       	and	r24, r24
     868:	19 f0       	breq	.+6      	; 0x870 <main+0x66>
			input(info_ptr);
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <input>
		}
		if (info_ptr->motorAct){
     870:	f8 01       	movw	r30, r16
     872:	80 85       	ldd	r24, Z+8	; 0x08
     874:	88 23       	and	r24, r24
     876:	b1 f0       	breq	.+44     	; 0x8a4 <main+0x9a>
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     878:	80 81       	ld	r24, Z
     87a:	38 9e       	mul	r3, r24
     87c:	c0 01       	movw	r24, r0
     87e:	11 24       	eor	r1, r1
     880:	b5 01       	movw	r22, r10
     882:	0e 94 b2 08 	call	0x1164	; 0x1164 <__divmodhi4>
     886:	f4 01       	movw	r30, r8
     888:	60 83       	st	Z, r22
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     88a:	f8 01       	movw	r30, r16
     88c:	80 81       	ld	r24, Z
     88e:	38 9e       	mul	r3, r24
     890:	c0 01       	movw	r24, r0
     892:	11 24       	eor	r1, r1
     894:	b5 01       	movw	r22, r10
     896:	0e 94 b2 08 	call	0x1164	; 0x1164 <__divmodhi4>
     89a:	f3 01       	movw	r30, r6
     89c:	60 83       	st	Z, r22
			info_ptr->motorAct = 0;
     89e:	f8 01       	movw	r30, r16
     8a0:	10 86       	std	Z+8, r1	; 0x08
			info_ptr->stupidCount = 0;
     8a2:	11 86       	std	Z+9, r1	; 0x09
		}
		if (info_ptr->stopCommand){
     8a4:	f8 01       	movw	r30, r16
     8a6:	85 81       	ldd	r24, Z+5	; 0x05
     8a8:	88 23       	and	r24, r24
     8aa:	91 f0       	breq	.+36     	; 0x8d0 <main+0xc6>
			/* stop everything */
			PORTD &= ~(1<<PORTD2);
     8ac:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     8ae:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     8b0:	46 98       	cbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     8b2:	47 98       	cbi	0x08, 7	; 8
			if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     8b4:	84 81       	ldd	r24, Z+4	; 0x04
     8b6:	81 34       	cpi	r24, 0x41	; 65
     8b8:	11 f0       	breq	.+4      	; 0x8be <main+0xb4>
     8ba:	82 35       	cpi	r24, 0x52	; 82
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <main+0xbc>
				hold_step();
     8be:	0e 94 62 05 	call	0xac4	; 0xac4 <hold_step>
				info_ptr->stepAct = '\0';
     8c2:	f8 01       	movw	r30, r16
     8c4:	14 82       	std	Z+4, r1	; 0x04
			}
			info_ptr->camera = 0;
     8c6:	f8 01       	movw	r30, r16
     8c8:	16 82       	std	Z+6, r1	; 0x06
			info_ptr->stopCommand = 0;
     8ca:	15 82       	std	Z+5, r1	; 0x05
			info_ptr->stupidCount = 0;
     8cc:	11 86       	std	Z+9, r1	; 0x09
     8ce:	c9 cf       	rjmp	.-110    	; 0x862 <main+0x58>
		} else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     8d0:	f8 01       	movw	r30, r16
     8d2:	84 81       	ldd	r24, Z+4	; 0x04
     8d4:	81 34       	cpi	r24, 0x41	; 65
     8d6:	19 f0       	breq	.+6      	; 0x8de <main+0xd4>
     8d8:	82 35       	cpi	r24, 0x52	; 82
     8da:	09 f0       	breq	.+2      	; 0x8de <main+0xd4>
     8dc:	c6 c0       	rjmp	.+396    	; 0xa6a <__stack+0x16b>
			int16_t current = current_step();
     8de:	0e 94 5d 05 	call	0xaba	; 0xaba <current_step>
     8e2:	7c 01       	movw	r14, r24
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     8e4:	f8 01       	movw	r30, r16
     8e6:	84 81       	ldd	r24, Z+4	; 0x04
     8e8:	1f 92       	push	r1
     8ea:	8f 93       	push	r24
     8ec:	81 81       	ldd	r24, Z+1	; 0x01
     8ee:	28 2f       	mov	r18, r24
     8f0:	08 2e       	mov	r0, r24
     8f2:	00 0c       	add	r0, r0
     8f4:	33 0b       	sbc	r19, r19
     8f6:	3f 93       	push	r19
     8f8:	8f 93       	push	r24
     8fa:	ff 92       	push	r15
     8fc:	ef 92       	push	r14
     8fe:	89 e5       	ldi	r24, 0x59	; 89
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	9f 93       	push	r25
     904:	8f 93       	push	r24
     906:	5f 92       	push	r5
     908:	4f 92       	push	r4
     90a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sprintf>
			fputs(buffer, stdout);
     90e:	f6 01       	movw	r30, r12
     910:	62 81       	ldd	r22, Z+2	; 0x02
     912:	73 81       	ldd	r23, Z+3	; 0x03
     914:	c2 01       	movw	r24, r4
     916:	0e 94 18 0b 	call	0x1630	; 0x1630 <fputs>
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
     924:	f8 01       	movw	r30, r16
     926:	81 81       	ldd	r24, Z+1	; 0x01
     928:	88 23       	and	r24, r24
     92a:	dc f4       	brge	.+54     	; 0x962 <__stack+0x63>
     92c:	84 81       	ldd	r24, Z+4	; 0x04
     92e:	82 35       	cpi	r24, 0x52	; 82
     930:	c1 f4       	brne	.+48     	; 0x962 <__stack+0x63>
     932:	82 81       	ldd	r24, Z+2	; 0x02
     934:	93 81       	ldd	r25, Z+3	; 0x03
     936:	e8 16       	cp	r14, r24
     938:	f9 06       	cpc	r15, r25
     93a:	a8 f1       	brcs	.+106    	; 0x9a6 <__stack+0xa7>
					step(info_ptr);
     93c:	c8 01       	movw	r24, r16
     93e:	0e 94 08 08 	call	0x1010	; 0x1010 <step>
					current = current_step();
     942:	0e 94 5d 05 	call	0xaba	; 0xaba <current_step>
     946:	7c 01       	movw	r14, r24
		} else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     948:	f8 01       	movw	r30, r16
     94a:	81 81       	ldd	r24, Z+1	; 0x01
     94c:	88 23       	and	r24, r24
     94e:	4c f4       	brge	.+18     	; 0x962 <__stack+0x63>
     950:	84 81       	ldd	r24, Z+4	; 0x04
     952:	82 35       	cpi	r24, 0x52	; 82
     954:	31 f4       	brne	.+12     	; 0x962 <__stack+0x63>
     956:	82 81       	ldd	r24, Z+2	; 0x02
     958:	93 81       	ldd	r25, Z+3	; 0x03
     95a:	e8 16       	cp	r14, r24
     95c:	f9 06       	cpc	r15, r25
     95e:	70 f7       	brcc	.-36     	; 0x93c <__stack+0x3d>
     960:	22 c0       	rjmp	.+68     	; 0x9a6 <__stack+0xa7>
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     962:	f8 01       	movw	r30, r16
     964:	81 81       	ldd	r24, Z+1	; 0x01
     966:	18 16       	cp	r1, r24
     968:	c4 f4       	brge	.+48     	; 0x99a <__stack+0x9b>
     96a:	84 81       	ldd	r24, Z+4	; 0x04
     96c:	81 34       	cpi	r24, 0x41	; 65
     96e:	a9 f4       	brne	.+42     	; 0x99a <__stack+0x9b>
     970:	1e 14       	cp	r1, r14
     972:	1f 04       	cpc	r1, r15
     974:	0c f4       	brge	.+2      	; 0x978 <__stack+0x79>
     976:	83 c0       	rjmp	.+262    	; 0xa7e <__stack+0x17f>
				step(info_ptr);
     978:	c8 01       	movw	r24, r16
     97a:	0e 94 08 08 	call	0x1010	; 0x1010 <step>
				current = current_step();
     97e:	0e 94 5d 05 	call	0xaba	; 0xaba <current_step>
     982:	7c 01       	movw	r14, r24
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     984:	f8 01       	movw	r30, r16
     986:	81 81       	ldd	r24, Z+1	; 0x01
     988:	18 16       	cp	r1, r24
     98a:	3c f4       	brge	.+14     	; 0x99a <__stack+0x9b>
     98c:	84 81       	ldd	r24, Z+4	; 0x04
     98e:	81 34       	cpi	r24, 0x41	; 65
     990:	21 f4       	brne	.+8      	; 0x99a <__stack+0x9b>
     992:	1e 14       	cp	r1, r14
     994:	1f 04       	cpc	r1, r15
     996:	84 f7       	brge	.-32     	; 0x978 <__stack+0x79>
     998:	72 c0       	rjmp	.+228    	; 0xa7e <__stack+0x17f>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     99a:	f8 01       	movw	r30, r16
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	93 81       	ldd	r25, Z+3	; 0x03
     9a0:	e8 16       	cp	r14, r24
     9a2:	f9 06       	cpc	r15, r25
     9a4:	50 f5       	brcc	.+84     	; 0x9fa <__stack+0xfb>
     9a6:	ff 20       	and	r15, r15
     9a8:	44 f1       	brlt	.+80     	; 0x9fa <__stack+0xfb>
					if (serial_input_available()){
     9aa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     9ae:	88 23       	and	r24, r24
     9b0:	b9 f0       	breq	.+46     	; 0x9e0 <__stack+0xe1>
						char in = fgetc(stdin);
     9b2:	f6 01       	movw	r30, r12
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	0e 94 9e 0a 	call	0x153c	; 0x153c <fgetc>
						if (in == ' '){
     9bc:	80 32       	cpi	r24, 0x20	; 32
     9be:	81 f4       	brne	.+32     	; 0x9e0 <__stack+0xe1>
							info_ptr->stepAct = '\0';
     9c0:	f8 01       	movw	r30, r16
     9c2:	14 82       	std	Z+4, r1	; 0x04
							hold_step();
     9c4:	0e 94 62 05 	call	0xac4	; 0xac4 <hold_step>
							fputs("canceled\n", stdout);
     9c8:	f6 01       	movw	r30, r12
     9ca:	22 81       	ldd	r18, Z+2	; 0x02
     9cc:	33 81       	ldd	r19, Z+3	; 0x03
     9ce:	49 e0       	ldi	r20, 0x09	; 9
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	89 e6       	ldi	r24, 0x69	; 105
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 42 0b 	call	0x1684	; 0x1684 <fwrite>
							break;
     9de:	0d c0       	rjmp	.+26     	; 0x9fa <__stack+0xfb>
						}
					}
					step(info_ptr);
     9e0:	c8 01       	movw	r24, r16
     9e2:	0e 94 08 08 	call	0x1010	; 0x1010 <step>
					current = current_step();				
     9e6:	0e 94 5d 05 	call	0xaba	; 0xaba <current_step>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     9ea:	f8 01       	movw	r30, r16
     9ec:	22 81       	ldd	r18, Z+2	; 0x02
     9ee:	33 81       	ldd	r19, Z+3	; 0x03
     9f0:	82 17       	cp	r24, r18
     9f2:	93 07       	cpc	r25, r19
     9f4:	10 f4       	brcc	.+4      	; 0x9fa <__stack+0xfb>
     9f6:	99 23       	and	r25, r25
     9f8:	c4 f6       	brge	.-80     	; 0x9aa <__stack+0xab>
					step(info_ptr);
					current = current_step();				
				}
			/*************************************************************/
			//}
			current = current_step();
     9fa:	0e 94 5d 05 	call	0xaba	; 0xaba <current_step>
			char buffer1[30];
			sprintf(buffer1, "step POS: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     9fe:	f8 01       	movw	r30, r16
     a00:	24 81       	ldd	r18, Z+4	; 0x04
     a02:	1f 92       	push	r1
     a04:	2f 93       	push	r18
     a06:	21 81       	ldd	r18, Z+1	; 0x01
     a08:	42 2f       	mov	r20, r18
     a0a:	02 2e       	mov	r0, r18
     a0c:	00 0c       	add	r0, r0
     a0e:	55 0b       	sbc	r21, r21
     a10:	5f 93       	push	r21
     a12:	2f 93       	push	r18
     a14:	9f 93       	push	r25
     a16:	8f 93       	push	r24
     a18:	83 e7       	ldi	r24, 0x73	; 115
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	8c 0f       	add	r24, r28
     a26:	9d 1f       	adc	r25, r29
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <sprintf>
			fputs(buffer1, stdout);
     a30:	f6 01       	movw	r30, r12
     a32:	62 81       	ldd	r22, Z+2	; 0x02
     a34:	73 81       	ldd	r23, Z+3	; 0x03
     a36:	ce 01       	movw	r24, r28
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	0e 94 18 0b 	call	0x1630	; 0x1630 <fputs>
			/****************************************************************/
			fputs("end step\n", stdout);
     a3e:	f6 01       	movw	r30, r12
     a40:	22 81       	ldd	r18, Z+2	; 0x02
     a42:	33 81       	ldd	r19, Z+3	; 0x03
     a44:	49 e0       	ldi	r20, 0x09	; 9
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	87 e8       	ldi	r24, 0x87	; 135
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 42 0b 	call	0x1684	; 0x1684 <fwrite>
			info_ptr->stepAct = '\0';
     a54:	f8 01       	movw	r30, r16
     a56:	14 82       	std	Z+4, r1	; 0x04
			info_ptr->stupidCount = 0;
     a58:	11 86       	std	Z+9, r1	; 0x09
			hold_step();
     a5a:	0e 94 62 05 	call	0xac4	; 0xac4 <hold_step>
				info_ptr->stepAct = '\0';
			}
			info_ptr->camera = 0;
			info_ptr->stopCommand = 0;
			info_ptr->stupidCount = 0;
		} else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	fc ce       	rjmp	.-520    	; 0x862 <main+0x58>
			/****************************************************************/
			fputs("end step\n", stdout);
			info_ptr->stepAct = '\0';
			info_ptr->stupidCount = 0;
			hold_step();
		} else if (info_ptr->camera != 0){
     a6a:	f8 01       	movw	r30, r16
     a6c:	86 81       	ldd	r24, Z+6	; 0x06
     a6e:	88 23       	and	r24, r24
     a70:	09 f4       	brne	.+2      	; 0xa74 <__stack+0x175>
     a72:	f7 ce       	rjmp	.-530    	; 0x862 <main+0x58>
			uint8_t pos = OCR0A;
     a74:	97 b5       	in	r25, 0x27	; 39
			pos += info_ptr->camera;
     a76:	89 0f       	add	r24, r25
					pos = 0;
			} else if (pos > 255){
					pos = 255;
			}
			/*	adjust camera position */
			OCR0A = pos;
     a78:	87 bd       	out	0x27, r24	; 39
			info_ptr->stupidCount = 0;
     a7a:	11 86       	std	Z+9, r1	; 0x09
     a7c:	f2 ce       	rjmp	.-540    	; 0x862 <main+0x58>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     a7e:	f8 01       	movw	r30, r16
     a80:	82 81       	ldd	r24, Z+2	; 0x02
     a82:	93 81       	ldd	r25, Z+3	; 0x03
     a84:	e8 16       	cp	r14, r24
     a86:	f9 06       	cpc	r15, r25
     a88:	08 f4       	brcc	.+2      	; 0xa8c <__stack+0x18d>
     a8a:	8f cf       	rjmp	.-226    	; 0x9aa <__stack+0xab>
     a8c:	b6 cf       	rjmp	.-148    	; 0x9fa <__stack+0xfb>

00000a8e <init_step>:
 uint8_t RED;				// port for stepper red wire


 void init_step(void){
	/* sets the ports for the stepper motor and initializes the steps and phase	*/
	steps = 0;
     a8e:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <steps+0x1>
     a92:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <steps>
	phase = 0;
     a96:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <phase>

	BLU = PORTC4;
     a9a:	84 e0       	ldi	r24, 0x04	; 4
     a9c:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <BLU>
	GRE = PORTC5;
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <GRE>
	YEL = PORTC2;
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <YEL>
	RED = PORTC3;
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <RED>
	//BLU = PORTC2;
	//GRE = PORTC3;
	//YEL = PORTC4;
	//RED = PORTC5;

	DDRC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     ab2:	87 b1       	in	r24, 0x07	; 7
     ab4:	8c 63       	ori	r24, 0x3C	; 60
     ab6:	87 b9       	out	0x07, r24	; 7
     ab8:	08 95       	ret

00000aba <current_step>:
	*	can be modified to return an angle from origin using gear
	*	ratio
	*/
	int16_t returnValue = steps;
	return returnValue;
 }
     aba:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <steps>
     abe:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <steps+0x1>
     ac2:	08 95       	ret

00000ac4 <hold_step>:

void hold_step(void){
	
	PORTC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     ac4:	38 b1       	in	r19, 0x08	; 8
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	bc 01       	movw	r22, r24
     acc:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <hold_step+0x12>
     ad2:	66 0f       	add	r22, r22
     ad4:	77 1f       	adc	r23, r23
     ad6:	0a 94       	dec	r0
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <hold_step+0xe>
     ada:	ac 01       	movw	r20, r24
     adc:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <hold_step+0x22>
     ae2:	44 0f       	add	r20, r20
     ae4:	55 1f       	adc	r21, r21
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <hold_step+0x1e>
     aea:	46 2b       	or	r20, r22
     aec:	43 2b       	or	r20, r19
     aee:	9c 01       	movw	r18, r24
     af0:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     af4:	02 c0       	rjmp	.+4      	; 0xafa <hold_step+0x36>
     af6:	22 0f       	add	r18, r18
     af8:	33 1f       	adc	r19, r19
     afa:	0a 94       	dec	r0
     afc:	e2 f7       	brpl	.-8      	; 0xaf6 <hold_step+0x32>
     afe:	24 2b       	or	r18, r20
     b00:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <hold_step+0x46>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <hold_step+0x42>
     b0e:	82 2b       	or	r24, r18
     b10:	88 b9       	out	0x08, r24	; 8
     b12:	08 95       	ret

00000b14 <release_step>:
	
}

void release_step(void){
	
	PORTC &= ~((1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED));
     b14:	28 b1       	in	r18, 0x08	; 8
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	bc 01       	movw	r22, r24
     b1c:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <release_step+0x12>
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <release_step+0xe>
     b2a:	ac 01       	movw	r20, r24
     b2c:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <release_step+0x22>
     b32:	44 0f       	add	r20, r20
     b34:	55 1f       	adc	r21, r21
     b36:	0a 94       	dec	r0
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <release_step+0x1e>
     b3a:	36 2f       	mov	r19, r22
     b3c:	34 2b       	or	r19, r20
     b3e:	ac 01       	movw	r20, r24
     b40:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <release_step+0x36>
     b46:	44 0f       	add	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	0a 94       	dec	r0
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <release_step+0x32>
     b4e:	43 2b       	or	r20, r19
     b50:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <release_step+0x46>
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	0a 94       	dec	r0
     b5c:	e2 f7       	brpl	.-8      	; 0xb56 <release_step+0x42>
     b5e:	84 2b       	or	r24, r20
     b60:	80 95       	com	r24
     b62:	82 23       	and	r24, r18
     b64:	88 b9       	out	0x08, r24	; 8
     b66:	08 95       	ret

00000b68 <increment_step>:
	}
 }

 void increment_step(void){
	/* the motor has turned one step, increase the count */
	++steps;
     b68:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <steps>
     b6c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <steps+0x1>
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <steps+0x1>
     b76:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <steps>
     b7a:	08 95       	ret

00000b7c <decrement_step>:
 }

 void decrement_step(void){
	/* the motor has turned back one step, decrease the count */
	--steps;
     b7c:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <steps>
     b80:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <steps+0x1>
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <steps+0x1>
     b8a:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <steps>
     b8e:	08 95       	ret

00000b90 <step_clockwise>:
 }

 void step_clockwise(uint8_t time_on){
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */

	 uint32_t current_time;
	 
	 if(phase == 0){
     b9e:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <phase>
     ba2:	81 11       	cpse	r24, r1
     ba4:	42 c0       	rjmp	.+132    	; 0xc2a <step_clockwise+0x9a>
		 current_time = get_tcnt1_ticks();
     ba6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     baa:	6b 01       	movw	r12, r22
     bac:	7c 01       	movw	r14, r24
     bae:	cc 0e       	add	r12, r28
     bb0:	d1 1c       	adc	r13, r1
     bb2:	e1 1c       	adc	r14, r1
     bb4:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
     bb6:	c1 e0       	ldi	r28, 0x01	; 1
     bb8:	d0 e0       	ldi	r29, 0x00	; 0

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     bba:	2a c0       	rjmp	.+84     	; 0xc10 <step_clockwise+0x80>
			 PORTC |= (1<<GRE)|(1<<YEL);
     bbc:	98 b1       	in	r25, 0x08	; 8
     bbe:	ae 01       	movw	r20, r28
     bc0:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <step_clockwise+0x3a>
     bc6:	44 0f       	add	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	0a 94       	dec	r0
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <step_clockwise+0x36>
     bce:	9e 01       	movw	r18, r28
     bd0:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <step_clockwise+0x4a>
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <step_clockwise+0x46>
     bde:	84 2f       	mov	r24, r20
     be0:	82 2b       	or	r24, r18
     be2:	89 2b       	or	r24, r25
     be4:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
     be6:	28 b1       	in	r18, 0x08	; 8
     be8:	ae 01       	movw	r20, r28
     bea:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <step_clockwise+0x64>
     bf0:	44 0f       	add	r20, r20
     bf2:	55 1f       	adc	r21, r21
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <step_clockwise+0x60>
     bf8:	ce 01       	movw	r24, r28
     bfa:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <step_clockwise+0x74>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <step_clockwise+0x70>
     c08:	84 2b       	or	r24, r20
     c0a:	80 95       	com	r24
     c0c:	82 23       	and	r24, r18
     c0e:	88 b9       	out	0x08, r24	; 8

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c10:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     c14:	6c 15       	cp	r22, r12
     c16:	7d 05       	cpc	r23, r13
     c18:	8e 05       	cpc	r24, r14
     c1a:	9f 05       	cpc	r25, r15
     c1c:	78 f2       	brcs	.-98     	; 0xbbc <step_clockwise+0x2c>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 ++phase;
     c1e:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <phase>
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <phase>
     c28:	ca c0       	rjmp	.+404    	; 0xdbe <step_clockwise+0x22e>
	 }
	 else if(phase == 1){
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	09 f0       	breq	.+2      	; 0xc30 <step_clockwise+0xa0>
     c2e:	42 c0       	rjmp	.+132    	; 0xcb4 <step_clockwise+0x124>
		 current_time = get_tcnt1_ticks();
     c30:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c34:	6b 01       	movw	r12, r22
     c36:	7c 01       	movw	r14, r24
     c38:	cc 0e       	add	r12, r28
     c3a:	d1 1c       	adc	r13, r1
     c3c:	e1 1c       	adc	r14, r1
     c3e:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
     c40:	c1 e0       	ldi	r28, 0x01	; 1
     c42:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c44:	2a c0       	rjmp	.+84     	; 0xc9a <step_clockwise+0x10a>
			 PORTC |= (1<<GRE)|(1<<RED);
     c46:	98 b1       	in	r25, 0x08	; 8
     c48:	ae 01       	movw	r20, r28
     c4a:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <step_clockwise+0xc4>
     c50:	44 0f       	add	r20, r20
     c52:	55 1f       	adc	r21, r21
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <step_clockwise+0xc0>
     c58:	9e 01       	movw	r18, r28
     c5a:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <step_clockwise+0xd4>
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <step_clockwise+0xd0>
     c68:	84 2f       	mov	r24, r20
     c6a:	82 2b       	or	r24, r18
     c6c:	89 2b       	or	r24, r25
     c6e:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
     c70:	28 b1       	in	r18, 0x08	; 8
     c72:	ae 01       	movw	r20, r28
     c74:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <step_clockwise+0xee>
     c7a:	44 0f       	add	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <step_clockwise+0xea>
     c82:	ce 01       	movw	r24, r28
     c84:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <step_clockwise+0xfe>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <step_clockwise+0xfa>
     c92:	84 2b       	or	r24, r20
     c94:	80 95       	com	r24
     c96:	82 23       	and	r24, r18
     c98:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c9a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     c9e:	6c 15       	cp	r22, r12
     ca0:	7d 05       	cpc	r23, r13
     ca2:	8e 05       	cpc	r24, r14
     ca4:	9f 05       	cpc	r25, r15
     ca6:	78 f2       	brcs	.-98     	; 0xc46 <step_clockwise+0xb6>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
     ca8:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <phase>
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <phase>
     cb2:	85 c0       	rjmp	.+266    	; 0xdbe <step_clockwise+0x22e>
	 }
	 else if(phase == 2){
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	09 f0       	breq	.+2      	; 0xcba <step_clockwise+0x12a>
     cb8:	42 c0       	rjmp	.+132    	; 0xd3e <step_clockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
     cba:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     cbe:	6b 01       	movw	r12, r22
     cc0:	7c 01       	movw	r14, r24
     cc2:	cc 0e       	add	r12, r28
     cc4:	d1 1c       	adc	r13, r1
     cc6:	e1 1c       	adc	r14, r1
     cc8:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
     cca:	c1 e0       	ldi	r28, 0x01	; 1
     ccc:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     cce:	2a c0       	rjmp	.+84     	; 0xd24 <step_clockwise+0x194>
			 PORTC |= (1<<BLU)|(1<<RED);
     cd0:	98 b1       	in	r25, 0x08	; 8
     cd2:	ae 01       	movw	r20, r28
     cd4:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <step_clockwise+0x14e>
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <step_clockwise+0x14a>
     ce2:	9e 01       	movw	r18, r28
     ce4:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <step_clockwise+0x15e>
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <step_clockwise+0x15a>
     cf2:	84 2f       	mov	r24, r20
     cf4:	82 2b       	or	r24, r18
     cf6:	89 2b       	or	r24, r25
     cf8:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
     cfa:	28 b1       	in	r18, 0x08	; 8
     cfc:	ae 01       	movw	r20, r28
     cfe:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <step_clockwise+0x178>
     d04:	44 0f       	add	r20, r20
     d06:	55 1f       	adc	r21, r21
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <step_clockwise+0x174>
     d0c:	ce 01       	movw	r24, r28
     d0e:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <step_clockwise+0x188>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <step_clockwise+0x184>
     d1c:	84 2b       	or	r24, r20
     d1e:	80 95       	com	r24
     d20:	82 23       	and	r24, r18
     d22:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     d24:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     d28:	6c 15       	cp	r22, r12
     d2a:	7d 05       	cpc	r23, r13
     d2c:	8e 05       	cpc	r24, r14
     d2e:	9f 05       	cpc	r25, r15
     d30:	78 f2       	brcs	.-98     	; 0xcd0 <step_clockwise+0x140>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
     d32:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <phase>
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <phase>
     d3c:	40 c0       	rjmp	.+128    	; 0xdbe <step_clockwise+0x22e>
	 }
	 else if(phase == 3){
     d3e:	83 30       	cpi	r24, 0x03	; 3
     d40:	f1 f5       	brne	.+124    	; 0xdbe <step_clockwise+0x22e>
		 current_time = get_tcnt1_ticks();
     d42:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     d46:	6b 01       	movw	r12, r22
     d48:	7c 01       	movw	r14, r24
     d4a:	cc 0e       	add	r12, r28
     d4c:	d1 1c       	adc	r13, r1
     d4e:	e1 1c       	adc	r14, r1
     d50:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
     d52:	c1 e0       	ldi	r28, 0x01	; 1
     d54:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     d56:	2a c0       	rjmp	.+84     	; 0xdac <step_clockwise+0x21c>
			 PORTC |= (1<<BLU)|(1<<YEL);
     d58:	98 b1       	in	r25, 0x08	; 8
     d5a:	ae 01       	movw	r20, r28
     d5c:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <step_clockwise+0x1d6>
     d62:	44 0f       	add	r20, r20
     d64:	55 1f       	adc	r21, r21
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <step_clockwise+0x1d2>
     d6a:	9e 01       	movw	r18, r28
     d6c:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <step_clockwise+0x1e6>
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <step_clockwise+0x1e2>
     d7a:	84 2f       	mov	r24, r20
     d7c:	82 2b       	or	r24, r18
     d7e:	89 2b       	or	r24, r25
     d80:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
     d82:	28 b1       	in	r18, 0x08	; 8
     d84:	ae 01       	movw	r20, r28
     d86:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <step_clockwise+0x200>
     d8c:	44 0f       	add	r20, r20
     d8e:	55 1f       	adc	r21, r21
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <step_clockwise+0x1fc>
     d94:	ce 01       	movw	r24, r28
     d96:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <step_clockwise+0x210>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <step_clockwise+0x20c>
     da4:	84 2b       	or	r24, r20
     da6:	80 95       	com	r24
     da8:	82 23       	and	r24, r18
     daa:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     dac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     db0:	6c 15       	cp	r22, r12
     db2:	7d 05       	cpc	r23, r13
     db4:	8e 05       	cpc	r24, r14
     db6:	9f 05       	cpc	r25, r15
     db8:	78 f2       	brcs	.-98     	; 0xd58 <step_clockwise+0x1c8>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 phase = 0;
     dba:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <phase>
	 }
	 increment_step();
     dbe:	0e 94 b4 05 	call	0xb68	; 0xb68 <increment_step>
 }
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <step_anticlockwise>:


 void step_anticlockwise(uint8_t time_on){
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */
	
	 uint32_t current_time;

	 if(phase == 0){
     dde:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <phase>
     de2:	81 11       	cpse	r24, r1
     de4:	42 c0       	rjmp	.+132    	; 0xe6a <step_anticlockwise+0x9a>
		 current_time = get_tcnt1_ticks();
     de6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     dea:	6b 01       	movw	r12, r22
     dec:	7c 01       	movw	r14, r24
     dee:	cc 0e       	add	r12, r28
     df0:	d1 1c       	adc	r13, r1
     df2:	e1 1c       	adc	r14, r1
     df4:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
     df6:	c1 e0       	ldi	r28, 0x01	; 1
     df8:	d0 e0       	ldi	r29, 0x00	; 0
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     dfa:	2a c0       	rjmp	.+84     	; 0xe50 <step_anticlockwise+0x80>
			 PORTC |= (1<<BLU)|(1<<YEL);
     dfc:	98 b1       	in	r25, 0x08	; 8
     dfe:	ae 01       	movw	r20, r28
     e00:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <step_anticlockwise+0x3a>
     e06:	44 0f       	add	r20, r20
     e08:	55 1f       	adc	r21, r21
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <step_anticlockwise+0x36>
     e0e:	9e 01       	movw	r18, r28
     e10:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <step_anticlockwise+0x4a>
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <step_anticlockwise+0x46>
     e1e:	84 2f       	mov	r24, r20
     e20:	82 2b       	or	r24, r18
     e22:	89 2b       	or	r24, r25
     e24:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
     e26:	28 b1       	in	r18, 0x08	; 8
     e28:	ae 01       	movw	r20, r28
     e2a:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <step_anticlockwise+0x64>
     e30:	44 0f       	add	r20, r20
     e32:	55 1f       	adc	r21, r21
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <step_anticlockwise+0x60>
     e38:	ce 01       	movw	r24, r28
     e3a:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <step_anticlockwise+0x74>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <step_anticlockwise+0x70>
     e48:	84 2b       	or	r24, r20
     e4a:	80 95       	com	r24
     e4c:	82 23       	and	r24, r18
     e4e:	88 b9       	out	0x08, r24	; 8
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e50:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     e54:	6c 15       	cp	r22, r12
     e56:	7d 05       	cpc	r23, r13
     e58:	8e 05       	cpc	r24, r14
     e5a:	9f 05       	cpc	r25, r15
     e5c:	78 f2       	brcs	.-98     	; 0xdfc <step_anticlockwise+0x2c>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 ++phase;
     e5e:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <phase>
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <phase>
     e68:	ca c0       	rjmp	.+404    	; 0xffe <step_anticlockwise+0x22e>
	 }
	 else if(phase == 1){
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	09 f0       	breq	.+2      	; 0xe70 <step_anticlockwise+0xa0>
     e6e:	42 c0       	rjmp	.+132    	; 0xef4 <step_anticlockwise+0x124>
		 current_time = get_tcnt1_ticks();
     e70:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e74:	6b 01       	movw	r12, r22
     e76:	7c 01       	movw	r14, r24
     e78:	cc 0e       	add	r12, r28
     e7a:	d1 1c       	adc	r13, r1
     e7c:	e1 1c       	adc	r14, r1
     e7e:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
     e80:	c1 e0       	ldi	r28, 0x01	; 1
     e82:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e84:	2a c0       	rjmp	.+84     	; 0xeda <step_anticlockwise+0x10a>
			 PORTC |= (1<<BLU)|(1<<RED);
     e86:	98 b1       	in	r25, 0x08	; 8
     e88:	ae 01       	movw	r20, r28
     e8a:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <step_anticlockwise+0xc4>
     e90:	44 0f       	add	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <step_anticlockwise+0xc0>
     e98:	9e 01       	movw	r18, r28
     e9a:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <step_anticlockwise+0xd4>
     ea0:	22 0f       	add	r18, r18
     ea2:	33 1f       	adc	r19, r19
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <step_anticlockwise+0xd0>
     ea8:	84 2f       	mov	r24, r20
     eaa:	82 2b       	or	r24, r18
     eac:	89 2b       	or	r24, r25
     eae:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
     eb0:	28 b1       	in	r18, 0x08	; 8
     eb2:	ae 01       	movw	r20, r28
     eb4:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <step_anticlockwise+0xee>
     eba:	44 0f       	add	r20, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <step_anticlockwise+0xea>
     ec2:	ce 01       	movw	r24, r28
     ec4:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     ec8:	02 c0       	rjmp	.+4      	; 0xece <step_anticlockwise+0xfe>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <step_anticlockwise+0xfa>
     ed2:	84 2b       	or	r24, r20
     ed4:	80 95       	com	r24
     ed6:	82 23       	and	r24, r18
     ed8:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     eda:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     ede:	6c 15       	cp	r22, r12
     ee0:	7d 05       	cpc	r23, r13
     ee2:	8e 05       	cpc	r24, r14
     ee4:	9f 05       	cpc	r25, r15
     ee6:	78 f2       	brcs	.-98     	; 0xe86 <step_anticlockwise+0xb6>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
     ee8:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <phase>
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <phase>
     ef2:	85 c0       	rjmp	.+266    	; 0xffe <step_anticlockwise+0x22e>
	 }
	 else if(phase == 2){
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	09 f0       	breq	.+2      	; 0xefa <step_anticlockwise+0x12a>
     ef8:	42 c0       	rjmp	.+132    	; 0xf7e <step_anticlockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
     efa:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     efe:	6b 01       	movw	r12, r22
     f00:	7c 01       	movw	r14, r24
     f02:	cc 0e       	add	r12, r28
     f04:	d1 1c       	adc	r13, r1
     f06:	e1 1c       	adc	r14, r1
     f08:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
     f0a:	c1 e0       	ldi	r28, 0x01	; 1
     f0c:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f0e:	2a c0       	rjmp	.+84     	; 0xf64 <step_anticlockwise+0x194>
			 PORTC |= (1<<GRE)|(1<<RED);
     f10:	98 b1       	in	r25, 0x08	; 8
     f12:	ae 01       	movw	r20, r28
     f14:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <step_anticlockwise+0x14e>
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <step_anticlockwise+0x14a>
     f22:	9e 01       	movw	r18, r28
     f24:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <step_anticlockwise+0x15e>
     f2a:	22 0f       	add	r18, r18
     f2c:	33 1f       	adc	r19, r19
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <step_anticlockwise+0x15a>
     f32:	84 2f       	mov	r24, r20
     f34:	82 2b       	or	r24, r18
     f36:	89 2b       	or	r24, r25
     f38:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
     f3a:	28 b1       	in	r18, 0x08	; 8
     f3c:	ae 01       	movw	r20, r28
     f3e:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <step_anticlockwise+0x178>
     f44:	44 0f       	add	r20, r20
     f46:	55 1f       	adc	r21, r21
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <step_anticlockwise+0x174>
     f4c:	ce 01       	movw	r24, r28
     f4e:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <step_anticlockwise+0x188>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <step_anticlockwise+0x184>
     f5c:	84 2b       	or	r24, r20
     f5e:	80 95       	com	r24
     f60:	82 23       	and	r24, r18
     f62:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f64:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     f68:	6c 15       	cp	r22, r12
     f6a:	7d 05       	cpc	r23, r13
     f6c:	8e 05       	cpc	r24, r14
     f6e:	9f 05       	cpc	r25, r15
     f70:	78 f2       	brcs	.-98     	; 0xf10 <step_anticlockwise+0x140>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
     f72:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <phase>
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <phase>
     f7c:	40 c0       	rjmp	.+128    	; 0xffe <step_anticlockwise+0x22e>
	 }
	 else if(phase == 3){
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	f1 f5       	brne	.+124    	; 0xffe <step_anticlockwise+0x22e>
		 current_time = get_tcnt1_ticks();
     f82:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f86:	6b 01       	movw	r12, r22
     f88:	7c 01       	movw	r14, r24
     f8a:	cc 0e       	add	r12, r28
     f8c:	d1 1c       	adc	r13, r1
     f8e:	e1 1c       	adc	r14, r1
     f90:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
     f92:	c1 e0       	ldi	r28, 0x01	; 1
     f94:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f96:	2a c0       	rjmp	.+84     	; 0xfec <step_anticlockwise+0x21c>
			 PORTC |= (1<<GRE)|(1<<YEL);
     f98:	98 b1       	in	r25, 0x08	; 8
     f9a:	ae 01       	movw	r20, r28
     f9c:	00 90 b0 02 	lds	r0, 0x02B0	; 0x8002b0 <GRE>
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <step_anticlockwise+0x1d6>
     fa2:	44 0f       	add	r20, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <step_anticlockwise+0x1d2>
     faa:	9e 01       	movw	r18, r28
     fac:	00 90 af 02 	lds	r0, 0x02AF	; 0x8002af <YEL>
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <step_anticlockwise+0x1e6>
     fb2:	22 0f       	add	r18, r18
     fb4:	33 1f       	adc	r19, r19
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <step_anticlockwise+0x1e2>
     fba:	84 2f       	mov	r24, r20
     fbc:	82 2b       	or	r24, r18
     fbe:	89 2b       	or	r24, r25
     fc0:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
     fc2:	28 b1       	in	r18, 0x08	; 8
     fc4:	ae 01       	movw	r20, r28
     fc6:	00 90 b1 02 	lds	r0, 0x02B1	; 0x8002b1 <BLU>
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <step_anticlockwise+0x200>
     fcc:	44 0f       	add	r20, r20
     fce:	55 1f       	adc	r21, r21
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <step_anticlockwise+0x1fc>
     fd4:	ce 01       	movw	r24, r28
     fd6:	00 90 b2 02 	lds	r0, 0x02B2	; 0x8002b2 <RED>
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <step_anticlockwise+0x210>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <step_anticlockwise+0x20c>
     fe4:	84 2b       	or	r24, r20
     fe6:	80 95       	com	r24
     fe8:	82 23       	and	r24, r18
     fea:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     fec:	0e 94 7f 08 	call	0x10fe	; 0x10fe <get_tcnt1_ticks>
     ff0:	6c 15       	cp	r22, r12
     ff2:	7d 05       	cpc	r23, r13
     ff4:	8e 05       	cpc	r24, r14
     ff6:	9f 05       	cpc	r25, r15
     ff8:	78 f2       	brcs	.-98     	; 0xf98 <step_anticlockwise+0x1c8>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 phase = 0;
     ffa:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <phase>
	 }
	 decrement_step();
     ffe:	0e 94 be 05 	call	0xb7c	; 0xb7c <decrement_step>
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	08 95       	ret

00001010 <step>:
	//if ((steps > info_ptr->maxStep) || (steps < 0)){
		///*	dont move	*/
		//return;
	//}
	
	int8_t speed = info_ptr->stepSpeed;
    1010:	fc 01       	movw	r30, r24
    1012:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t time_on;
	if (speed >= 0){
    1014:	88 23       	and	r24, r24
    1016:	44 f1       	brlt	.+80     	; 0x1068 <step+0x58>
			if (speed < 10){
    1018:	8a 30       	cpi	r24, 0x0A	; 10
    101a:	94 f0       	brlt	.+36     	; 0x1040 <step+0x30>
				time_on = 100;
			} else if (speed < 20) {
    101c:	84 31       	cpi	r24, 0x14	; 20
    101e:	94 f0       	brlt	.+36     	; 0x1044 <step+0x34>
				time_on = 90;
			} else if (speed < 30) {
    1020:	8e 31       	cpi	r24, 0x1E	; 30
    1022:	94 f0       	brlt	.+36     	; 0x1048 <step+0x38>
				time_on = 80;
			} else if (speed < 40) {
    1024:	88 32       	cpi	r24, 0x28	; 40
    1026:	94 f0       	brlt	.+36     	; 0x104c <step+0x3c>
				time_on = 70;
			} else if (speed < 50){
    1028:	82 33       	cpi	r24, 0x32	; 50
    102a:	94 f0       	brlt	.+36     	; 0x1050 <step+0x40>
				time_on = 60;
			} else if (speed < 60) {
    102c:	8c 33       	cpi	r24, 0x3C	; 60
    102e:	94 f0       	brlt	.+36     	; 0x1054 <step+0x44>
				time_on = 50;
			} else if (speed < 70){
    1030:	86 34       	cpi	r24, 0x46	; 70
    1032:	94 f0       	brlt	.+36     	; 0x1058 <step+0x48>
				time_on = 40;
			} else if (speed < 80) {
    1034:	80 35       	cpi	r24, 0x50	; 80
    1036:	94 f0       	brlt	.+36     	; 0x105c <step+0x4c>
				time_on = 30;
			} else if (speed < 90){
    1038:	8a 35       	cpi	r24, 0x5A	; 90
    103a:	94 f0       	brlt	.+36     	; 0x1060 <step+0x50>
				time_on = 20;
			} else {
				time_on = 10;
    103c:	8a e0       	ldi	r24, 0x0A	; 10
    103e:	11 c0       	rjmp	.+34     	; 0x1062 <step+0x52>
	
	int8_t speed = info_ptr->stepSpeed;
	uint8_t time_on;
	if (speed >= 0){
			if (speed < 10){
				time_on = 100;
    1040:	84 e6       	ldi	r24, 0x64	; 100
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <step+0x52>
			} else if (speed < 20) {
				time_on = 90;
    1044:	8a e5       	ldi	r24, 0x5A	; 90
    1046:	0d c0       	rjmp	.+26     	; 0x1062 <step+0x52>
			} else if (speed < 30) {
				time_on = 80;
    1048:	80 e5       	ldi	r24, 0x50	; 80
    104a:	0b c0       	rjmp	.+22     	; 0x1062 <step+0x52>
			} else if (speed < 40) {
				time_on = 70;
    104c:	86 e4       	ldi	r24, 0x46	; 70
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <step+0x52>
			} else if (speed < 50){
				time_on = 60;
    1050:	8c e3       	ldi	r24, 0x3C	; 60
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <step+0x52>
			} else if (speed < 60) {
				time_on = 50;
    1054:	82 e3       	ldi	r24, 0x32	; 50
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <step+0x52>
			} else if (speed < 70){
				time_on = 40;
    1058:	88 e2       	ldi	r24, 0x28	; 40
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <step+0x52>
			} else if (speed < 80) {
				time_on = 30;
    105c:	8e e1       	ldi	r24, 0x1E	; 30
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <step+0x52>
			} else if (speed < 90){
				time_on = 20;
    1060:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 10;
			}
			step_clockwise(time_on);
    1062:	0e 94 c8 05 	call	0xb90	; 0xb90 <step_clockwise>
    1066:	08 95       	ret
	} else {
			if (speed > -10){
    1068:	87 3f       	cpi	r24, 0xF7	; 247
    106a:	94 f4       	brge	.+36     	; 0x1090 <step+0x80>
				time_on = 100;
			} else if (speed > -20) {
    106c:	8d 3e       	cpi	r24, 0xED	; 237
    106e:	94 f4       	brge	.+36     	; 0x1094 <step+0x84>
				time_on = 90;
			} else if (speed > -30) {
    1070:	83 3e       	cpi	r24, 0xE3	; 227
    1072:	94 f4       	brge	.+36     	; 0x1098 <step+0x88>
				time_on = 80;
			} else if (speed > -40) {
    1074:	89 3d       	cpi	r24, 0xD9	; 217
    1076:	94 f4       	brge	.+36     	; 0x109c <step+0x8c>
				time_on = 70;
			} else if (speed > -50){
    1078:	8f 3c       	cpi	r24, 0xCF	; 207
    107a:	94 f4       	brge	.+36     	; 0x10a0 <step+0x90>
				time_on = 60;
			} else if (speed > -60) {
    107c:	85 3c       	cpi	r24, 0xC5	; 197
    107e:	94 f4       	brge	.+36     	; 0x10a4 <step+0x94>
				time_on = 50;
			} else if (speed > -70){
    1080:	8b 3b       	cpi	r24, 0xBB	; 187
    1082:	94 f4       	brge	.+36     	; 0x10a8 <step+0x98>
				time_on = 40;
			} else if (speed > -80) {
    1084:	81 3b       	cpi	r24, 0xB1	; 177
    1086:	94 f4       	brge	.+36     	; 0x10ac <step+0x9c>
				time_on = 30;
			} else if (speed > -90){
    1088:	87 3a       	cpi	r24, 0xA7	; 167
    108a:	94 f4       	brge	.+36     	; 0x10b0 <step+0xa0>
				time_on = 20;
			} else {
				time_on = 10;
    108c:	8a e0       	ldi	r24, 0x0A	; 10
    108e:	11 c0       	rjmp	.+34     	; 0x10b2 <step+0xa2>
				time_on = 10;
			}
			step_clockwise(time_on);
	} else {
			if (speed > -10){
				time_on = 100;
    1090:	84 e6       	ldi	r24, 0x64	; 100
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <step+0xa2>
			} else if (speed > -20) {
				time_on = 90;
    1094:	8a e5       	ldi	r24, 0x5A	; 90
    1096:	0d c0       	rjmp	.+26     	; 0x10b2 <step+0xa2>
			} else if (speed > -30) {
				time_on = 80;
    1098:	80 e5       	ldi	r24, 0x50	; 80
    109a:	0b c0       	rjmp	.+22     	; 0x10b2 <step+0xa2>
			} else if (speed > -40) {
				time_on = 70;
    109c:	86 e4       	ldi	r24, 0x46	; 70
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <step+0xa2>
			} else if (speed > -50){
				time_on = 60;
    10a0:	8c e3       	ldi	r24, 0x3C	; 60
    10a2:	07 c0       	rjmp	.+14     	; 0x10b2 <step+0xa2>
			} else if (speed > -60) {
				time_on = 50;
    10a4:	82 e3       	ldi	r24, 0x32	; 50
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <step+0xa2>
			} else if (speed > -70){
				time_on = 40;
    10a8:	88 e2       	ldi	r24, 0x28	; 40
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <step+0xa2>
			} else if (speed > -80) {
				time_on = 30;
    10ac:	8e e1       	ldi	r24, 0x1E	; 30
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <step+0xa2>
			} else if (speed > -90){
				time_on = 20;
    10b0:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 10;
			}
			step_anticlockwise(time_on);
    10b2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <step_anticlockwise>
    10b6:	08 95       	ret

000010b8 <init_tcnt1>:

 void init_tcnt1(void){
	 /* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	 
	 //set button to be not pushed
	 Button_on = 0;
    10b8:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Button_on>
	 
	 // set global counter
	 tcnt1_ticks = 0L;
    10bc:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <tcnt1_ticks>
    10c0:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <tcnt1_ticks+0x1>
    10c4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <tcnt1_ticks+0x2>
    10c8:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <tcnt1_ticks+0x3>
	 
	 // set timer / counter
	 TCNT1 = 0;
    10cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	 
	 // set output compare resgister; value to execute ISR
	 OCR1A = 124; // between 1 and 255
    10d4:	8c e7       	ldi	r24, 0x7C	; 124
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    10dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	 
	 // timer/counter control register A - set to clear when TCNT0 matches OCR0A
	 TCCR1A = (1<<WGM11);
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	 
	 // set the timer to update at a fraction of a clock cycle
	 TCCR1B = (1<<CS11)|(1<<CS10);	// set to f(clk) / 64
    10e6:	83 e0       	ldi	r24, 0x03	; 3
    10e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 
	 // timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK1 |= (1<<OCIE1A);
    10ec:	ef e6       	ldi	r30, 0x6F	; 111
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	82 60       	ori	r24, 0x02	; 2
    10f4:	80 83       	st	Z, r24
	 
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR1 &= (1<<OCF1A);
    10f6:	86 b3       	in	r24, 0x16	; 22
    10f8:	82 70       	andi	r24, 0x02	; 2
    10fa:	86 bb       	out	0x16, r24	; 22
    10fc:	08 95       	ret

000010fe <get_tcnt1_ticks>:


 uint32_t get_tcnt1_ticks(void) {
	 /* internal reference clock, times how long the system has been on for	*/

	 uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
    10fe:	2f b7       	in	r18, 0x3f	; 63
	 cli();
    1100:	f8 94       	cli
	 uint32_t return_value = tcnt1_ticks;
    1102:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <tcnt1_ticks>
    1106:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <tcnt1_ticks+0x1>
    110a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <tcnt1_ticks+0x2>
    110e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <tcnt1_ticks+0x3>
	 if(interrupts_on) {
    1112:	22 23       	and	r18, r18
    1114:	0c f4       	brge	.+2      	; 0x1118 <get_tcnt1_ticks+0x1a>
		 sei();
    1116:	78 94       	sei
	 }
	 return return_value;
 }
    1118:	08 95       	ret

0000111a <__vector_13>:



 ISR(TIMER1_COMPA_vect) {
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 
	 tcnt1_ticks++;
    112c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tcnt1_ticks>
    1130:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <tcnt1_ticks+0x1>
    1134:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <tcnt1_ticks+0x2>
    1138:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <tcnt1_ticks+0x3>
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	a1 1d       	adc	r26, r1
    1140:	b1 1d       	adc	r27, r1
    1142:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <tcnt1_ticks>
    1146:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <tcnt1_ticks+0x1>
    114a:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <tcnt1_ticks+0x2>
    114e:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <tcnt1_ticks+0x3>

    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <__divmodhi4>:
    1164:	97 fb       	bst	r25, 7
    1166:	07 2e       	mov	r0, r23
    1168:	16 f4       	brtc	.+4      	; 0x116e <__divmodhi4+0xa>
    116a:	00 94       	com	r0
    116c:	07 d0       	rcall	.+14     	; 0x117c <__divmodhi4_neg1>
    116e:	77 fd       	sbrc	r23, 7
    1170:	09 d0       	rcall	.+18     	; 0x1184 <__divmodhi4_neg2>
    1172:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__udivmodhi4>
    1176:	07 fc       	sbrc	r0, 7
    1178:	05 d0       	rcall	.+10     	; 0x1184 <__divmodhi4_neg2>
    117a:	3e f4       	brtc	.+14     	; 0x118a <__divmodhi4_exit>

0000117c <__divmodhi4_neg1>:
    117c:	90 95       	com	r25
    117e:	81 95       	neg	r24
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	08 95       	ret

00001184 <__divmodhi4_neg2>:
    1184:	70 95       	com	r23
    1186:	61 95       	neg	r22
    1188:	7f 4f       	sbci	r23, 0xFF	; 255

0000118a <__divmodhi4_exit>:
    118a:	08 95       	ret

0000118c <__divmodsi4>:
    118c:	05 2e       	mov	r0, r21
    118e:	97 fb       	bst	r25, 7
    1190:	1e f4       	brtc	.+6      	; 0x1198 <__divmodsi4+0xc>
    1192:	00 94       	com	r0
    1194:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__negsi2>
    1198:	57 fd       	sbrc	r21, 7
    119a:	07 d0       	rcall	.+14     	; 0x11aa <__divmodsi4_neg2>
    119c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__udivmodsi4>
    11a0:	07 fc       	sbrc	r0, 7
    11a2:	03 d0       	rcall	.+6      	; 0x11aa <__divmodsi4_neg2>
    11a4:	4e f4       	brtc	.+18     	; 0x11b8 <__divmodsi4_exit>
    11a6:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__negsi2>

000011aa <__divmodsi4_neg2>:
    11aa:	50 95       	com	r21
    11ac:	40 95       	com	r20
    11ae:	30 95       	com	r19
    11b0:	21 95       	neg	r18
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	4f 4f       	sbci	r20, 0xFF	; 255
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255

000011b8 <__divmodsi4_exit>:
    11b8:	08 95       	ret

000011ba <__negsi2>:
    11ba:	90 95       	com	r25
    11bc:	80 95       	com	r24
    11be:	70 95       	com	r23
    11c0:	61 95       	neg	r22
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	8f 4f       	sbci	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	08 95       	ret

000011ca <__tablejump2__>:
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	05 90       	lpm	r0, Z+
    11d0:	f4 91       	lpm	r31, Z
    11d2:	e0 2d       	mov	r30, r0
    11d4:	09 94       	ijmp

000011d6 <__udivmodhi4>:
    11d6:	aa 1b       	sub	r26, r26
    11d8:	bb 1b       	sub	r27, r27
    11da:	51 e1       	ldi	r21, 0x11	; 17
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <__udivmodhi4_ep>

000011de <__udivmodhi4_loop>:
    11de:	aa 1f       	adc	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	a6 17       	cp	r26, r22
    11e4:	b7 07       	cpc	r27, r23
    11e6:	10 f0       	brcs	.+4      	; 0x11ec <__udivmodhi4_ep>
    11e8:	a6 1b       	sub	r26, r22
    11ea:	b7 0b       	sbc	r27, r23

000011ec <__udivmodhi4_ep>:
    11ec:	88 1f       	adc	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	5a 95       	dec	r21
    11f2:	a9 f7       	brne	.-22     	; 0x11de <__udivmodhi4_loop>
    11f4:	80 95       	com	r24
    11f6:	90 95       	com	r25
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	08 95       	ret

000011fe <__udivmodsi4>:
    11fe:	a1 e2       	ldi	r26, 0x21	; 33
    1200:	1a 2e       	mov	r1, r26
    1202:	aa 1b       	sub	r26, r26
    1204:	bb 1b       	sub	r27, r27
    1206:	fd 01       	movw	r30, r26
    1208:	0d c0       	rjmp	.+26     	; 0x1224 <__udivmodsi4_ep>

0000120a <__udivmodsi4_loop>:
    120a:	aa 1f       	adc	r26, r26
    120c:	bb 1f       	adc	r27, r27
    120e:	ee 1f       	adc	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	a2 17       	cp	r26, r18
    1214:	b3 07       	cpc	r27, r19
    1216:	e4 07       	cpc	r30, r20
    1218:	f5 07       	cpc	r31, r21
    121a:	20 f0       	brcs	.+8      	; 0x1224 <__udivmodsi4_ep>
    121c:	a2 1b       	sub	r26, r18
    121e:	b3 0b       	sbc	r27, r19
    1220:	e4 0b       	sbc	r30, r20
    1222:	f5 0b       	sbc	r31, r21

00001224 <__udivmodsi4_ep>:
    1224:	66 1f       	adc	r22, r22
    1226:	77 1f       	adc	r23, r23
    1228:	88 1f       	adc	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	1a 94       	dec	r1
    122e:	69 f7       	brne	.-38     	; 0x120a <__udivmodsi4_loop>
    1230:	60 95       	com	r22
    1232:	70 95       	com	r23
    1234:	80 95       	com	r24
    1236:	90 95       	com	r25
    1238:	9b 01       	movw	r18, r22
    123a:	ac 01       	movw	r20, r24
    123c:	bd 01       	movw	r22, r26
    123e:	cf 01       	movw	r24, r30
    1240:	08 95       	ret

00001242 <malloc>:
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	91 05       	cpc	r25, r1
    124e:	10 f4       	brcc	.+4      	; 0x1254 <malloc+0x12>
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <__flp>
    1258:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <__flp+0x1>
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	a0 e0       	ldi	r26, 0x00	; 0
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	30 97       	sbiw	r30, 0x00	; 0
    1266:	19 f1       	breq	.+70     	; 0x12ae <malloc+0x6c>
    1268:	40 81       	ld	r20, Z
    126a:	51 81       	ldd	r21, Z+1	; 0x01
    126c:	02 81       	ldd	r16, Z+2	; 0x02
    126e:	13 81       	ldd	r17, Z+3	; 0x03
    1270:	48 17       	cp	r20, r24
    1272:	59 07       	cpc	r21, r25
    1274:	c8 f0       	brcs	.+50     	; 0x12a8 <malloc+0x66>
    1276:	84 17       	cp	r24, r20
    1278:	95 07       	cpc	r25, r21
    127a:	69 f4       	brne	.+26     	; 0x1296 <malloc+0x54>
    127c:	10 97       	sbiw	r26, 0x00	; 0
    127e:	31 f0       	breq	.+12     	; 0x128c <malloc+0x4a>
    1280:	12 96       	adiw	r26, 0x02	; 2
    1282:	0c 93       	st	X, r16
    1284:	12 97       	sbiw	r26, 0x02	; 2
    1286:	13 96       	adiw	r26, 0x03	; 3
    1288:	1c 93       	st	X, r17
    128a:	27 c0       	rjmp	.+78     	; 0x12da <malloc+0x98>
    128c:	00 93 b5 02 	sts	0x02B5, r16	; 0x8002b5 <__flp>
    1290:	10 93 b6 02 	sts	0x02B6, r17	; 0x8002b6 <__flp+0x1>
    1294:	22 c0       	rjmp	.+68     	; 0x12da <malloc+0x98>
    1296:	21 15       	cp	r18, r1
    1298:	31 05       	cpc	r19, r1
    129a:	19 f0       	breq	.+6      	; 0x12a2 <malloc+0x60>
    129c:	42 17       	cp	r20, r18
    129e:	53 07       	cpc	r21, r19
    12a0:	18 f4       	brcc	.+6      	; 0x12a8 <malloc+0x66>
    12a2:	9a 01       	movw	r18, r20
    12a4:	bd 01       	movw	r22, r26
    12a6:	ef 01       	movw	r28, r30
    12a8:	df 01       	movw	r26, r30
    12aa:	f8 01       	movw	r30, r16
    12ac:	db cf       	rjmp	.-74     	; 0x1264 <malloc+0x22>
    12ae:	21 15       	cp	r18, r1
    12b0:	31 05       	cpc	r19, r1
    12b2:	f9 f0       	breq	.+62     	; 0x12f2 <malloc+0xb0>
    12b4:	28 1b       	sub	r18, r24
    12b6:	39 0b       	sbc	r19, r25
    12b8:	24 30       	cpi	r18, 0x04	; 4
    12ba:	31 05       	cpc	r19, r1
    12bc:	80 f4       	brcc	.+32     	; 0x12de <malloc+0x9c>
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	9b 81       	ldd	r25, Y+3	; 0x03
    12c2:	61 15       	cp	r22, r1
    12c4:	71 05       	cpc	r23, r1
    12c6:	21 f0       	breq	.+8      	; 0x12d0 <malloc+0x8e>
    12c8:	fb 01       	movw	r30, r22
    12ca:	93 83       	std	Z+3, r25	; 0x03
    12cc:	82 83       	std	Z+2, r24	; 0x02
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <malloc+0x96>
    12d0:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <__flp+0x1>
    12d4:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <__flp>
    12d8:	fe 01       	movw	r30, r28
    12da:	32 96       	adiw	r30, 0x02	; 2
    12dc:	44 c0       	rjmp	.+136    	; 0x1366 <malloc+0x124>
    12de:	fe 01       	movw	r30, r28
    12e0:	e2 0f       	add	r30, r18
    12e2:	f3 1f       	adc	r31, r19
    12e4:	81 93       	st	Z+, r24
    12e6:	91 93       	st	Z+, r25
    12e8:	22 50       	subi	r18, 0x02	; 2
    12ea:	31 09       	sbc	r19, r1
    12ec:	39 83       	std	Y+1, r19	; 0x01
    12ee:	28 83       	st	Y, r18
    12f0:	3a c0       	rjmp	.+116    	; 0x1366 <malloc+0x124>
    12f2:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <__brkval>
    12f6:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <__brkval+0x1>
    12fa:	23 2b       	or	r18, r19
    12fc:	41 f4       	brne	.+16     	; 0x130e <malloc+0xcc>
    12fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1302:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1306:	30 93 b4 02 	sts	0x02B4, r19	; 0x8002b4 <__brkval+0x1>
    130a:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <__brkval>
    130e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1312:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1316:	21 15       	cp	r18, r1
    1318:	31 05       	cpc	r19, r1
    131a:	41 f4       	brne	.+16     	; 0x132c <malloc+0xea>
    131c:	2d b7       	in	r18, 0x3d	; 61
    131e:	3e b7       	in	r19, 0x3e	; 62
    1320:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1324:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1328:	24 1b       	sub	r18, r20
    132a:	35 0b       	sbc	r19, r21
    132c:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <__brkval>
    1330:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <__brkval+0x1>
    1334:	e2 17       	cp	r30, r18
    1336:	f3 07       	cpc	r31, r19
    1338:	a0 f4       	brcc	.+40     	; 0x1362 <malloc+0x120>
    133a:	2e 1b       	sub	r18, r30
    133c:	3f 0b       	sbc	r19, r31
    133e:	28 17       	cp	r18, r24
    1340:	39 07       	cpc	r19, r25
    1342:	78 f0       	brcs	.+30     	; 0x1362 <malloc+0x120>
    1344:	ac 01       	movw	r20, r24
    1346:	4e 5f       	subi	r20, 0xFE	; 254
    1348:	5f 4f       	sbci	r21, 0xFF	; 255
    134a:	24 17       	cp	r18, r20
    134c:	35 07       	cpc	r19, r21
    134e:	48 f0       	brcs	.+18     	; 0x1362 <malloc+0x120>
    1350:	4e 0f       	add	r20, r30
    1352:	5f 1f       	adc	r21, r31
    1354:	50 93 b4 02 	sts	0x02B4, r21	; 0x8002b4 <__brkval+0x1>
    1358:	40 93 b3 02 	sts	0x02B3, r20	; 0x8002b3 <__brkval>
    135c:	81 93       	st	Z+, r24
    135e:	91 93       	st	Z+, r25
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <malloc+0x124>
    1362:	e0 e0       	ldi	r30, 0x00	; 0
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	cf 01       	movw	r24, r30
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <free>:
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	09 f4       	brne	.+2      	; 0x137c <free+0xa>
    137a:	81 c0       	rjmp	.+258    	; 0x147e <free+0x10c>
    137c:	fc 01       	movw	r30, r24
    137e:	32 97       	sbiw	r30, 0x02	; 2
    1380:	13 82       	std	Z+3, r1	; 0x03
    1382:	12 82       	std	Z+2, r1	; 0x02
    1384:	a0 91 b5 02 	lds	r26, 0x02B5	; 0x8002b5 <__flp>
    1388:	b0 91 b6 02 	lds	r27, 0x02B6	; 0x8002b6 <__flp+0x1>
    138c:	10 97       	sbiw	r26, 0x00	; 0
    138e:	81 f4       	brne	.+32     	; 0x13b0 <free+0x3e>
    1390:	20 81       	ld	r18, Z
    1392:	31 81       	ldd	r19, Z+1	; 0x01
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <__brkval>
    139c:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <__brkval+0x1>
    13a0:	28 17       	cp	r18, r24
    13a2:	39 07       	cpc	r19, r25
    13a4:	51 f5       	brne	.+84     	; 0x13fa <free+0x88>
    13a6:	f0 93 b4 02 	sts	0x02B4, r31	; 0x8002b4 <__brkval+0x1>
    13aa:	e0 93 b3 02 	sts	0x02B3, r30	; 0x8002b3 <__brkval>
    13ae:	67 c0       	rjmp	.+206    	; 0x147e <free+0x10c>
    13b0:	ed 01       	movw	r28, r26
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	ce 17       	cp	r28, r30
    13b8:	df 07       	cpc	r29, r31
    13ba:	40 f4       	brcc	.+16     	; 0x13cc <free+0x5a>
    13bc:	4a 81       	ldd	r20, Y+2	; 0x02
    13be:	5b 81       	ldd	r21, Y+3	; 0x03
    13c0:	9e 01       	movw	r18, r28
    13c2:	41 15       	cp	r20, r1
    13c4:	51 05       	cpc	r21, r1
    13c6:	f1 f0       	breq	.+60     	; 0x1404 <free+0x92>
    13c8:	ea 01       	movw	r28, r20
    13ca:	f5 cf       	rjmp	.-22     	; 0x13b6 <free+0x44>
    13cc:	d3 83       	std	Z+3, r29	; 0x03
    13ce:	c2 83       	std	Z+2, r28	; 0x02
    13d0:	40 81       	ld	r20, Z
    13d2:	51 81       	ldd	r21, Z+1	; 0x01
    13d4:	84 0f       	add	r24, r20
    13d6:	95 1f       	adc	r25, r21
    13d8:	c8 17       	cp	r28, r24
    13da:	d9 07       	cpc	r29, r25
    13dc:	59 f4       	brne	.+22     	; 0x13f4 <free+0x82>
    13de:	88 81       	ld	r24, Y
    13e0:	99 81       	ldd	r25, Y+1	; 0x01
    13e2:	84 0f       	add	r24, r20
    13e4:	95 1f       	adc	r25, r21
    13e6:	02 96       	adiw	r24, 0x02	; 2
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	93 83       	std	Z+3, r25	; 0x03
    13f2:	82 83       	std	Z+2, r24	; 0x02
    13f4:	21 15       	cp	r18, r1
    13f6:	31 05       	cpc	r19, r1
    13f8:	29 f4       	brne	.+10     	; 0x1404 <free+0x92>
    13fa:	f0 93 b6 02 	sts	0x02B6, r31	; 0x8002b6 <__flp+0x1>
    13fe:	e0 93 b5 02 	sts	0x02B5, r30	; 0x8002b5 <__flp>
    1402:	3d c0       	rjmp	.+122    	; 0x147e <free+0x10c>
    1404:	e9 01       	movw	r28, r18
    1406:	fb 83       	std	Y+3, r31	; 0x03
    1408:	ea 83       	std	Y+2, r30	; 0x02
    140a:	49 91       	ld	r20, Y+
    140c:	59 91       	ld	r21, Y+
    140e:	c4 0f       	add	r28, r20
    1410:	d5 1f       	adc	r29, r21
    1412:	ec 17       	cp	r30, r28
    1414:	fd 07       	cpc	r31, r29
    1416:	61 f4       	brne	.+24     	; 0x1430 <free+0xbe>
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	84 0f       	add	r24, r20
    141e:	95 1f       	adc	r25, r21
    1420:	02 96       	adiw	r24, 0x02	; 2
    1422:	e9 01       	movw	r28, r18
    1424:	99 83       	std	Y+1, r25	; 0x01
    1426:	88 83       	st	Y, r24
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	9b 83       	std	Y+3, r25	; 0x03
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	e0 e0       	ldi	r30, 0x00	; 0
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	12 96       	adiw	r26, 0x02	; 2
    1436:	8d 91       	ld	r24, X+
    1438:	9c 91       	ld	r25, X
    143a:	13 97       	sbiw	r26, 0x03	; 3
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	19 f0       	breq	.+6      	; 0x1446 <free+0xd4>
    1440:	fd 01       	movw	r30, r26
    1442:	dc 01       	movw	r26, r24
    1444:	f7 cf       	rjmp	.-18     	; 0x1434 <free+0xc2>
    1446:	8d 91       	ld	r24, X+
    1448:	9c 91       	ld	r25, X
    144a:	11 97       	sbiw	r26, 0x01	; 1
    144c:	9d 01       	movw	r18, r26
    144e:	2e 5f       	subi	r18, 0xFE	; 254
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	82 0f       	add	r24, r18
    1454:	93 1f       	adc	r25, r19
    1456:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <__brkval>
    145a:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <__brkval+0x1>
    145e:	28 17       	cp	r18, r24
    1460:	39 07       	cpc	r19, r25
    1462:	69 f4       	brne	.+26     	; 0x147e <free+0x10c>
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	29 f4       	brne	.+10     	; 0x1472 <free+0x100>
    1468:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <__flp+0x1>
    146c:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <__flp>
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <free+0x104>
    1472:	13 82       	std	Z+3, r1	; 0x03
    1474:	12 82       	std	Z+2, r1	; 0x02
    1476:	b0 93 b4 02 	sts	0x02B4, r27	; 0x8002b4 <__brkval+0x1>
    147a:	a0 93 b3 02 	sts	0x02B3, r26	; 0x8002b3 <__brkval>
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <do_rand>:
    1484:	8f 92       	push	r8
    1486:	9f 92       	push	r9
    1488:	af 92       	push	r10
    148a:	bf 92       	push	r11
    148c:	cf 92       	push	r12
    148e:	df 92       	push	r13
    1490:	ef 92       	push	r14
    1492:	ff 92       	push	r15
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	ec 01       	movw	r28, r24
    149a:	68 81       	ld	r22, Y
    149c:	79 81       	ldd	r23, Y+1	; 0x01
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	61 15       	cp	r22, r1
    14a4:	71 05       	cpc	r23, r1
    14a6:	81 05       	cpc	r24, r1
    14a8:	91 05       	cpc	r25, r1
    14aa:	21 f4       	brne	.+8      	; 0x14b4 <do_rand+0x30>
    14ac:	64 e2       	ldi	r22, 0x24	; 36
    14ae:	79 ed       	ldi	r23, 0xD9	; 217
    14b0:	8b e5       	ldi	r24, 0x5B	; 91
    14b2:	97 e0       	ldi	r25, 0x07	; 7
    14b4:	2d e1       	ldi	r18, 0x1D	; 29
    14b6:	33 ef       	ldi	r19, 0xF3	; 243
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	0e 94 c6 08 	call	0x118c	; 0x118c <__divmodsi4>
    14c0:	49 01       	movw	r8, r18
    14c2:	5a 01       	movw	r10, r20
    14c4:	9b 01       	movw	r18, r22
    14c6:	ac 01       	movw	r20, r24
    14c8:	a7 ea       	ldi	r26, 0xA7	; 167
    14ca:	b1 e4       	ldi	r27, 0x41	; 65
    14cc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__muluhisi3>
    14d0:	6b 01       	movw	r12, r22
    14d2:	7c 01       	movw	r14, r24
    14d4:	ac ee       	ldi	r26, 0xEC	; 236
    14d6:	b4 ef       	ldi	r27, 0xF4	; 244
    14d8:	a5 01       	movw	r20, r10
    14da:	94 01       	movw	r18, r8
    14dc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__mulohisi3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	8c 0d       	add	r24, r12
    14e6:	9d 1d       	adc	r25, r13
    14e8:	ae 1d       	adc	r26, r14
    14ea:	bf 1d       	adc	r27, r15
    14ec:	b7 ff       	sbrs	r27, 7
    14ee:	03 c0       	rjmp	.+6      	; 0x14f6 <do_rand+0x72>
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	a1 09       	sbc	r26, r1
    14f4:	b0 48       	sbci	r27, 0x80	; 128
    14f6:	88 83       	st	Y, r24
    14f8:	99 83       	std	Y+1, r25	; 0x01
    14fa:	aa 83       	std	Y+2, r26	; 0x02
    14fc:	bb 83       	std	Y+3, r27	; 0x03
    14fe:	9f 77       	andi	r25, 0x7F	; 127
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	8f 90       	pop	r8
    1514:	08 95       	ret

00001516 <rand_r>:
    1516:	0e 94 42 0a 	call	0x1484	; 0x1484 <do_rand>
    151a:	08 95       	ret

0000151c <rand>:
    151c:	86 e0       	ldi	r24, 0x06	; 6
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	0e 94 42 0a 	call	0x1484	; 0x1484 <do_rand>
    1524:	08 95       	ret

00001526 <srand>:
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    152e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1532:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1536:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    153a:	08 95       	ret

0000153c <fgetc>:
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	ec 01       	movw	r28, r24
    1542:	2b 81       	ldd	r18, Y+3	; 0x03
    1544:	20 ff       	sbrs	r18, 0
    1546:	33 c0       	rjmp	.+102    	; 0x15ae <fgetc+0x72>
    1548:	26 ff       	sbrs	r18, 6
    154a:	0a c0       	rjmp	.+20     	; 0x1560 <fgetc+0x24>
    154c:	2f 7b       	andi	r18, 0xBF	; 191
    154e:	2b 83       	std	Y+3, r18	; 0x03
    1550:	8e 81       	ldd	r24, Y+6	; 0x06
    1552:	9f 81       	ldd	r25, Y+7	; 0x07
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	9f 83       	std	Y+7, r25	; 0x07
    1558:	8e 83       	std	Y+6, r24	; 0x06
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	29 c0       	rjmp	.+82     	; 0x15b2 <fgetc+0x76>
    1560:	22 ff       	sbrs	r18, 2
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <fgetc+0x46>
    1564:	e8 81       	ld	r30, Y
    1566:	f9 81       	ldd	r31, Y+1	; 0x01
    1568:	80 81       	ld	r24, Z
    156a:	08 2e       	mov	r0, r24
    156c:	00 0c       	add	r0, r0
    156e:	99 0b       	sbc	r25, r25
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	19 f4       	brne	.+6      	; 0x157a <fgetc+0x3e>
    1574:	20 62       	ori	r18, 0x20	; 32
    1576:	2b 83       	std	Y+3, r18	; 0x03
    1578:	1a c0       	rjmp	.+52     	; 0x15ae <fgetc+0x72>
    157a:	31 96       	adiw	r30, 0x01	; 1
    157c:	f9 83       	std	Y+1, r31	; 0x01
    157e:	e8 83       	st	Y, r30
    1580:	0e c0       	rjmp	.+28     	; 0x159e <fgetc+0x62>
    1582:	ea 85       	ldd	r30, Y+10	; 0x0a
    1584:	fb 85       	ldd	r31, Y+11	; 0x0b
    1586:	09 95       	icall
    1588:	97 ff       	sbrs	r25, 7
    158a:	09 c0       	rjmp	.+18     	; 0x159e <fgetc+0x62>
    158c:	2b 81       	ldd	r18, Y+3	; 0x03
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	11 f0       	breq	.+4      	; 0x1596 <fgetc+0x5a>
    1592:	80 e2       	ldi	r24, 0x20	; 32
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <fgetc+0x5c>
    1596:	80 e1       	ldi	r24, 0x10	; 16
    1598:	82 2b       	or	r24, r18
    159a:	8b 83       	std	Y+3, r24	; 0x03
    159c:	08 c0       	rjmp	.+16     	; 0x15ae <fgetc+0x72>
    159e:	2e 81       	ldd	r18, Y+6	; 0x06
    15a0:	3f 81       	ldd	r19, Y+7	; 0x07
    15a2:	2f 5f       	subi	r18, 0xFF	; 255
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	3f 83       	std	Y+7, r19	; 0x07
    15a8:	2e 83       	std	Y+6, r18	; 0x06
    15aa:	99 27       	eor	r25, r25
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <fgetc+0x76>
    15ae:	8f ef       	ldi	r24, 0xFF	; 255
    15b0:	9f ef       	ldi	r25, 0xFF	; 255
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <fputc>:
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	fb 01       	movw	r30, r22
    15c2:	23 81       	ldd	r18, Z+3	; 0x03
    15c4:	21 fd       	sbrc	r18, 1
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <fputc+0x16>
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    15cc:	2c c0       	rjmp	.+88     	; 0x1626 <fputc+0x6e>
    15ce:	22 ff       	sbrs	r18, 2
    15d0:	16 c0       	rjmp	.+44     	; 0x15fe <fputc+0x46>
    15d2:	46 81       	ldd	r20, Z+6	; 0x06
    15d4:	57 81       	ldd	r21, Z+7	; 0x07
    15d6:	24 81       	ldd	r18, Z+4	; 0x04
    15d8:	35 81       	ldd	r19, Z+5	; 0x05
    15da:	42 17       	cp	r20, r18
    15dc:	53 07       	cpc	r21, r19
    15de:	44 f4       	brge	.+16     	; 0x15f0 <fputc+0x38>
    15e0:	a0 81       	ld	r26, Z
    15e2:	b1 81       	ldd	r27, Z+1	; 0x01
    15e4:	9d 01       	movw	r18, r26
    15e6:	2f 5f       	subi	r18, 0xFF	; 255
    15e8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ea:	31 83       	std	Z+1, r19	; 0x01
    15ec:	20 83       	st	Z, r18
    15ee:	8c 93       	st	X, r24
    15f0:	26 81       	ldd	r18, Z+6	; 0x06
    15f2:	37 81       	ldd	r19, Z+7	; 0x07
    15f4:	2f 5f       	subi	r18, 0xFF	; 255
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	37 83       	std	Z+7, r19	; 0x07
    15fa:	26 83       	std	Z+6, r18	; 0x06
    15fc:	14 c0       	rjmp	.+40     	; 0x1626 <fputc+0x6e>
    15fe:	8b 01       	movw	r16, r22
    1600:	ec 01       	movw	r28, r24
    1602:	fb 01       	movw	r30, r22
    1604:	00 84       	ldd	r0, Z+8	; 0x08
    1606:	f1 85       	ldd	r31, Z+9	; 0x09
    1608:	e0 2d       	mov	r30, r0
    160a:	09 95       	icall
    160c:	89 2b       	or	r24, r25
    160e:	e1 f6       	brne	.-72     	; 0x15c8 <fputc+0x10>
    1610:	d8 01       	movw	r26, r16
    1612:	16 96       	adiw	r26, 0x06	; 6
    1614:	8d 91       	ld	r24, X+
    1616:	9c 91       	ld	r25, X
    1618:	17 97       	sbiw	r26, 0x07	; 7
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	17 96       	adiw	r26, 0x07	; 7
    161e:	9c 93       	st	X, r25
    1620:	8e 93       	st	-X, r24
    1622:	16 97       	sbiw	r26, 0x06	; 6
    1624:	ce 01       	movw	r24, r28
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <fputs>:
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	db 01       	movw	r26, r22
    163e:	13 96       	adiw	r26, 0x03	; 3
    1640:	2c 91       	ld	r18, X
    1642:	21 ff       	sbrs	r18, 1
    1644:	18 c0       	rjmp	.+48     	; 0x1676 <fputs+0x46>
    1646:	8b 01       	movw	r16, r22
    1648:	7c 01       	movw	r14, r24
    164a:	d0 e0       	ldi	r29, 0x00	; 0
    164c:	c0 e0       	ldi	r28, 0x00	; 0
    164e:	f7 01       	movw	r30, r14
    1650:	81 91       	ld	r24, Z+
    1652:	7f 01       	movw	r14, r30
    1654:	88 23       	and	r24, r24
    1656:	61 f0       	breq	.+24     	; 0x1670 <fputs+0x40>
    1658:	d8 01       	movw	r26, r16
    165a:	18 96       	adiw	r26, 0x08	; 8
    165c:	ed 91       	ld	r30, X+
    165e:	fc 91       	ld	r31, X
    1660:	19 97       	sbiw	r26, 0x09	; 9
    1662:	b8 01       	movw	r22, r16
    1664:	09 95       	icall
    1666:	89 2b       	or	r24, r25
    1668:	91 f3       	breq	.-28     	; 0x164e <fputs+0x1e>
    166a:	df ef       	ldi	r29, 0xFF	; 255
    166c:	cf ef       	ldi	r28, 0xFF	; 255
    166e:	ef cf       	rjmp	.-34     	; 0x164e <fputs+0x1e>
    1670:	8d 2f       	mov	r24, r29
    1672:	9c 2f       	mov	r25, r28
    1674:	02 c0       	rjmp	.+4      	; 0x167a <fputs+0x4a>
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	9f ef       	ldi	r25, 0xFF	; 255
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	e6 e0       	ldi	r30, 0x06	; 6
    1680:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__epilogue_restores__+0x18>

00001684 <fwrite>:
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e8 e4       	ldi	r30, 0x48	; 72
    168a:	fb e0       	ldi	r31, 0x0B	; 11
    168c:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__prologue_saves__+0xc>
    1690:	5b 01       	movw	r10, r22
    1692:	4a 01       	movw	r8, r20
    1694:	79 01       	movw	r14, r18
    1696:	d9 01       	movw	r26, r18
    1698:	13 96       	adiw	r26, 0x03	; 3
    169a:	2c 91       	ld	r18, X
    169c:	21 ff       	sbrs	r18, 1
    169e:	1d c0       	rjmp	.+58     	; 0x16da <fwrite+0x56>
    16a0:	c0 e0       	ldi	r28, 0x00	; 0
    16a2:	d0 e0       	ldi	r29, 0x00	; 0
    16a4:	c8 15       	cp	r28, r8
    16a6:	d9 05       	cpc	r29, r9
    16a8:	d9 f0       	breq	.+54     	; 0x16e0 <fwrite+0x5c>
    16aa:	8c 01       	movw	r16, r24
    16ac:	6c 01       	movw	r12, r24
    16ae:	ca 0c       	add	r12, r10
    16b0:	db 1c       	adc	r13, r11
    16b2:	c8 01       	movw	r24, r16
    16b4:	0c 15       	cp	r16, r12
    16b6:	1d 05       	cpc	r17, r13
    16b8:	71 f0       	breq	.+28     	; 0x16d6 <fwrite+0x52>
    16ba:	0f 5f       	subi	r16, 0xFF	; 255
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	d7 01       	movw	r26, r14
    16c0:	18 96       	adiw	r26, 0x08	; 8
    16c2:	ed 91       	ld	r30, X+
    16c4:	fc 91       	ld	r31, X
    16c6:	19 97       	sbiw	r26, 0x09	; 9
    16c8:	b7 01       	movw	r22, r14
    16ca:	dc 01       	movw	r26, r24
    16cc:	8c 91       	ld	r24, X
    16ce:	09 95       	icall
    16d0:	89 2b       	or	r24, r25
    16d2:	79 f3       	breq	.-34     	; 0x16b2 <fwrite+0x2e>
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <fwrite+0x5c>
    16d6:	21 96       	adiw	r28, 0x01	; 1
    16d8:	e5 cf       	rjmp	.-54     	; 0x16a4 <fwrite+0x20>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <fwrite+0x5e>
    16e0:	ce 01       	movw	r24, r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	ec e0       	ldi	r30, 0x0C	; 12
    16e8:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__epilogue_restores__+0xc>

000016ec <sprintf>:
    16ec:	ae e0       	ldi	r26, 0x0E	; 14
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ec e7       	ldi	r30, 0x7C	; 124
    16f2:	fb e0       	ldi	r31, 0x0B	; 11
    16f4:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__prologue_saves__+0x1c>
    16f8:	0d 89       	ldd	r16, Y+21	; 0x15
    16fa:	1e 89       	ldd	r17, Y+22	; 0x16
    16fc:	86 e0       	ldi	r24, 0x06	; 6
    16fe:	8c 83       	std	Y+4, r24	; 0x04
    1700:	1a 83       	std	Y+2, r17	; 0x02
    1702:	09 83       	std	Y+1, r16	; 0x01
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f e7       	ldi	r25, 0x7F	; 127
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	ae 01       	movw	r20, r28
    170e:	47 5e       	subi	r20, 0xE7	; 231
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	6f 89       	ldd	r22, Y+23	; 0x17
    1714:	78 8d       	ldd	r23, Y+24	; 0x18
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	0e 94 98 0b 	call	0x1730	; 0x1730 <vfprintf>
    171e:	ef 81       	ldd	r30, Y+7	; 0x07
    1720:	f8 85       	ldd	r31, Y+8	; 0x08
    1722:	e0 0f       	add	r30, r16
    1724:	f1 1f       	adc	r31, r17
    1726:	10 82       	st	Z, r1
    1728:	2e 96       	adiw	r28, 0x0e	; 14
    172a:	e4 e0       	ldi	r30, 0x04	; 4
    172c:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__epilogue_restores__+0x1c>

00001730 <vfprintf>:
    1730:	ab e0       	ldi	r26, 0x0B	; 11
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e9       	ldi	r30, 0x9E	; 158
    1736:	fb e0       	ldi	r31, 0x0B	; 11
    1738:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__prologue_saves__>
    173c:	6c 01       	movw	r12, r24
    173e:	7b 01       	movw	r14, r22
    1740:	8a 01       	movw	r16, r20
    1742:	fc 01       	movw	r30, r24
    1744:	17 82       	std	Z+7, r1	; 0x07
    1746:	16 82       	std	Z+6, r1	; 0x06
    1748:	83 81       	ldd	r24, Z+3	; 0x03
    174a:	81 ff       	sbrs	r24, 1
    174c:	cc c1       	rjmp	.+920    	; 0x1ae6 <vfprintf+0x3b6>
    174e:	ce 01       	movw	r24, r28
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	3c 01       	movw	r6, r24
    1754:	f6 01       	movw	r30, r12
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	f7 01       	movw	r30, r14
    175a:	93 fd       	sbrc	r25, 3
    175c:	85 91       	lpm	r24, Z+
    175e:	93 ff       	sbrs	r25, 3
    1760:	81 91       	ld	r24, Z+
    1762:	7f 01       	movw	r14, r30
    1764:	88 23       	and	r24, r24
    1766:	09 f4       	brne	.+2      	; 0x176a <vfprintf+0x3a>
    1768:	ba c1       	rjmp	.+884    	; 0x1ade <vfprintf+0x3ae>
    176a:	85 32       	cpi	r24, 0x25	; 37
    176c:	39 f4       	brne	.+14     	; 0x177c <vfprintf+0x4c>
    176e:	93 fd       	sbrc	r25, 3
    1770:	85 91       	lpm	r24, Z+
    1772:	93 ff       	sbrs	r25, 3
    1774:	81 91       	ld	r24, Z+
    1776:	7f 01       	movw	r14, r30
    1778:	85 32       	cpi	r24, 0x25	; 37
    177a:	29 f4       	brne	.+10     	; 0x1786 <vfprintf+0x56>
    177c:	b6 01       	movw	r22, r12
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    1784:	e7 cf       	rjmp	.-50     	; 0x1754 <vfprintf+0x24>
    1786:	91 2c       	mov	r9, r1
    1788:	21 2c       	mov	r2, r1
    178a:	31 2c       	mov	r3, r1
    178c:	ff e1       	ldi	r31, 0x1F	; 31
    178e:	f3 15       	cp	r31, r3
    1790:	d8 f0       	brcs	.+54     	; 0x17c8 <vfprintf+0x98>
    1792:	8b 32       	cpi	r24, 0x2B	; 43
    1794:	79 f0       	breq	.+30     	; 0x17b4 <vfprintf+0x84>
    1796:	38 f4       	brcc	.+14     	; 0x17a6 <vfprintf+0x76>
    1798:	80 32       	cpi	r24, 0x20	; 32
    179a:	79 f0       	breq	.+30     	; 0x17ba <vfprintf+0x8a>
    179c:	83 32       	cpi	r24, 0x23	; 35
    179e:	a1 f4       	brne	.+40     	; 0x17c8 <vfprintf+0x98>
    17a0:	23 2d       	mov	r18, r3
    17a2:	20 61       	ori	r18, 0x10	; 16
    17a4:	1d c0       	rjmp	.+58     	; 0x17e0 <vfprintf+0xb0>
    17a6:	8d 32       	cpi	r24, 0x2D	; 45
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <vfprintf+0x92>
    17aa:	80 33       	cpi	r24, 0x30	; 48
    17ac:	69 f4       	brne	.+26     	; 0x17c8 <vfprintf+0x98>
    17ae:	23 2d       	mov	r18, r3
    17b0:	21 60       	ori	r18, 0x01	; 1
    17b2:	16 c0       	rjmp	.+44     	; 0x17e0 <vfprintf+0xb0>
    17b4:	83 2d       	mov	r24, r3
    17b6:	82 60       	ori	r24, 0x02	; 2
    17b8:	38 2e       	mov	r3, r24
    17ba:	e3 2d       	mov	r30, r3
    17bc:	e4 60       	ori	r30, 0x04	; 4
    17be:	3e 2e       	mov	r3, r30
    17c0:	2a c0       	rjmp	.+84     	; 0x1816 <vfprintf+0xe6>
    17c2:	f3 2d       	mov	r31, r3
    17c4:	f8 60       	ori	r31, 0x08	; 8
    17c6:	1d c0       	rjmp	.+58     	; 0x1802 <vfprintf+0xd2>
    17c8:	37 fc       	sbrc	r3, 7
    17ca:	2d c0       	rjmp	.+90     	; 0x1826 <vfprintf+0xf6>
    17cc:	20 ed       	ldi	r18, 0xD0	; 208
    17ce:	28 0f       	add	r18, r24
    17d0:	2a 30       	cpi	r18, 0x0A	; 10
    17d2:	40 f0       	brcs	.+16     	; 0x17e4 <vfprintf+0xb4>
    17d4:	8e 32       	cpi	r24, 0x2E	; 46
    17d6:	b9 f4       	brne	.+46     	; 0x1806 <vfprintf+0xd6>
    17d8:	36 fc       	sbrc	r3, 6
    17da:	81 c1       	rjmp	.+770    	; 0x1ade <vfprintf+0x3ae>
    17dc:	23 2d       	mov	r18, r3
    17de:	20 64       	ori	r18, 0x40	; 64
    17e0:	32 2e       	mov	r3, r18
    17e2:	19 c0       	rjmp	.+50     	; 0x1816 <vfprintf+0xe6>
    17e4:	36 fe       	sbrs	r3, 6
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0xc4>
    17e8:	8a e0       	ldi	r24, 0x0A	; 10
    17ea:	98 9e       	mul	r9, r24
    17ec:	20 0d       	add	r18, r0
    17ee:	11 24       	eor	r1, r1
    17f0:	92 2e       	mov	r9, r18
    17f2:	11 c0       	rjmp	.+34     	; 0x1816 <vfprintf+0xe6>
    17f4:	ea e0       	ldi	r30, 0x0A	; 10
    17f6:	2e 9e       	mul	r2, r30
    17f8:	20 0d       	add	r18, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	22 2e       	mov	r2, r18
    17fe:	f3 2d       	mov	r31, r3
    1800:	f0 62       	ori	r31, 0x20	; 32
    1802:	3f 2e       	mov	r3, r31
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <vfprintf+0xe6>
    1806:	8c 36       	cpi	r24, 0x6C	; 108
    1808:	21 f4       	brne	.+8      	; 0x1812 <vfprintf+0xe2>
    180a:	83 2d       	mov	r24, r3
    180c:	80 68       	ori	r24, 0x80	; 128
    180e:	38 2e       	mov	r3, r24
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <vfprintf+0xe6>
    1812:	88 36       	cpi	r24, 0x68	; 104
    1814:	41 f4       	brne	.+16     	; 0x1826 <vfprintf+0xf6>
    1816:	f7 01       	movw	r30, r14
    1818:	93 fd       	sbrc	r25, 3
    181a:	85 91       	lpm	r24, Z+
    181c:	93 ff       	sbrs	r25, 3
    181e:	81 91       	ld	r24, Z+
    1820:	7f 01       	movw	r14, r30
    1822:	81 11       	cpse	r24, r1
    1824:	b3 cf       	rjmp	.-154    	; 0x178c <vfprintf+0x5c>
    1826:	98 2f       	mov	r25, r24
    1828:	9f 7d       	andi	r25, 0xDF	; 223
    182a:	95 54       	subi	r25, 0x45	; 69
    182c:	93 30       	cpi	r25, 0x03	; 3
    182e:	28 f4       	brcc	.+10     	; 0x183a <vfprintf+0x10a>
    1830:	0c 5f       	subi	r16, 0xFC	; 252
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	9f e3       	ldi	r25, 0x3F	; 63
    1836:	99 83       	std	Y+1, r25	; 0x01
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <vfprintf+0x124>
    183a:	83 36       	cpi	r24, 0x63	; 99
    183c:	31 f0       	breq	.+12     	; 0x184a <vfprintf+0x11a>
    183e:	83 37       	cpi	r24, 0x73	; 115
    1840:	71 f0       	breq	.+28     	; 0x185e <vfprintf+0x12e>
    1842:	83 35       	cpi	r24, 0x53	; 83
    1844:	09 f0       	breq	.+2      	; 0x1848 <vfprintf+0x118>
    1846:	59 c0       	rjmp	.+178    	; 0x18fa <vfprintf+0x1ca>
    1848:	21 c0       	rjmp	.+66     	; 0x188c <vfprintf+0x15c>
    184a:	f8 01       	movw	r30, r16
    184c:	80 81       	ld	r24, Z
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	0e 5f       	subi	r16, 0xFE	; 254
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	88 24       	eor	r8, r8
    1856:	83 94       	inc	r8
    1858:	91 2c       	mov	r9, r1
    185a:	53 01       	movw	r10, r6
    185c:	13 c0       	rjmp	.+38     	; 0x1884 <vfprintf+0x154>
    185e:	28 01       	movw	r4, r16
    1860:	f2 e0       	ldi	r31, 0x02	; 2
    1862:	4f 0e       	add	r4, r31
    1864:	51 1c       	adc	r5, r1
    1866:	f8 01       	movw	r30, r16
    1868:	a0 80       	ld	r10, Z
    186a:	b1 80       	ldd	r11, Z+1	; 0x01
    186c:	36 fe       	sbrs	r3, 6
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <vfprintf+0x146>
    1870:	69 2d       	mov	r22, r9
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0x14a>
    1876:	6f ef       	ldi	r22, 0xFF	; 255
    1878:	7f ef       	ldi	r23, 0xFF	; 255
    187a:	c5 01       	movw	r24, r10
    187c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <strnlen>
    1880:	4c 01       	movw	r8, r24
    1882:	82 01       	movw	r16, r4
    1884:	f3 2d       	mov	r31, r3
    1886:	ff 77       	andi	r31, 0x7F	; 127
    1888:	3f 2e       	mov	r3, r31
    188a:	16 c0       	rjmp	.+44     	; 0x18b8 <vfprintf+0x188>
    188c:	28 01       	movw	r4, r16
    188e:	22 e0       	ldi	r18, 0x02	; 2
    1890:	42 0e       	add	r4, r18
    1892:	51 1c       	adc	r5, r1
    1894:	f8 01       	movw	r30, r16
    1896:	a0 80       	ld	r10, Z
    1898:	b1 80       	ldd	r11, Z+1	; 0x01
    189a:	36 fe       	sbrs	r3, 6
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <vfprintf+0x174>
    189e:	69 2d       	mov	r22, r9
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <vfprintf+0x178>
    18a4:	6f ef       	ldi	r22, 0xFF	; 255
    18a6:	7f ef       	ldi	r23, 0xFF	; 255
    18a8:	c5 01       	movw	r24, r10
    18aa:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <strnlen_P>
    18ae:	4c 01       	movw	r8, r24
    18b0:	f3 2d       	mov	r31, r3
    18b2:	f0 68       	ori	r31, 0x80	; 128
    18b4:	3f 2e       	mov	r3, r31
    18b6:	82 01       	movw	r16, r4
    18b8:	33 fc       	sbrc	r3, 3
    18ba:	1b c0       	rjmp	.+54     	; 0x18f2 <vfprintf+0x1c2>
    18bc:	82 2d       	mov	r24, r2
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	88 16       	cp	r8, r24
    18c2:	99 06       	cpc	r9, r25
    18c4:	b0 f4       	brcc	.+44     	; 0x18f2 <vfprintf+0x1c2>
    18c6:	b6 01       	movw	r22, r12
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    18d0:	2a 94       	dec	r2
    18d2:	f4 cf       	rjmp	.-24     	; 0x18bc <vfprintf+0x18c>
    18d4:	f5 01       	movw	r30, r10
    18d6:	37 fc       	sbrc	r3, 7
    18d8:	85 91       	lpm	r24, Z+
    18da:	37 fe       	sbrs	r3, 7
    18dc:	81 91       	ld	r24, Z+
    18de:	5f 01       	movw	r10, r30
    18e0:	b6 01       	movw	r22, r12
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    18e8:	21 10       	cpse	r2, r1
    18ea:	2a 94       	dec	r2
    18ec:	21 e0       	ldi	r18, 0x01	; 1
    18ee:	82 1a       	sub	r8, r18
    18f0:	91 08       	sbc	r9, r1
    18f2:	81 14       	cp	r8, r1
    18f4:	91 04       	cpc	r9, r1
    18f6:	71 f7       	brne	.-36     	; 0x18d4 <vfprintf+0x1a4>
    18f8:	e8 c0       	rjmp	.+464    	; 0x1aca <vfprintf+0x39a>
    18fa:	84 36       	cpi	r24, 0x64	; 100
    18fc:	11 f0       	breq	.+4      	; 0x1902 <vfprintf+0x1d2>
    18fe:	89 36       	cpi	r24, 0x69	; 105
    1900:	41 f5       	brne	.+80     	; 0x1952 <vfprintf+0x222>
    1902:	f8 01       	movw	r30, r16
    1904:	37 fe       	sbrs	r3, 7
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <vfprintf+0x1e6>
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	0c 5f       	subi	r16, 0xFC	; 252
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	08 c0       	rjmp	.+16     	; 0x1926 <vfprintf+0x1f6>
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	07 2e       	mov	r0, r23
    191c:	00 0c       	add	r0, r0
    191e:	88 0b       	sbc	r24, r24
    1920:	99 0b       	sbc	r25, r25
    1922:	0e 5f       	subi	r16, 0xFE	; 254
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	f3 2d       	mov	r31, r3
    1928:	ff 76       	andi	r31, 0x6F	; 111
    192a:	3f 2e       	mov	r3, r31
    192c:	97 ff       	sbrs	r25, 7
    192e:	09 c0       	rjmp	.+18     	; 0x1942 <vfprintf+0x212>
    1930:	90 95       	com	r25
    1932:	80 95       	com	r24
    1934:	70 95       	com	r23
    1936:	61 95       	neg	r22
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	f0 68       	ori	r31, 0x80	; 128
    1940:	3f 2e       	mov	r3, r31
    1942:	2a e0       	ldi	r18, 0x0A	; 10
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	a3 01       	movw	r20, r6
    1948:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__ultoa_invert>
    194c:	88 2e       	mov	r8, r24
    194e:	86 18       	sub	r8, r6
    1950:	45 c0       	rjmp	.+138    	; 0x19dc <vfprintf+0x2ac>
    1952:	85 37       	cpi	r24, 0x75	; 117
    1954:	31 f4       	brne	.+12     	; 0x1962 <vfprintf+0x232>
    1956:	23 2d       	mov	r18, r3
    1958:	2f 7e       	andi	r18, 0xEF	; 239
    195a:	b2 2e       	mov	r11, r18
    195c:	2a e0       	ldi	r18, 0x0A	; 10
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	25 c0       	rjmp	.+74     	; 0x19ac <vfprintf+0x27c>
    1962:	93 2d       	mov	r25, r3
    1964:	99 7f       	andi	r25, 0xF9	; 249
    1966:	b9 2e       	mov	r11, r25
    1968:	8f 36       	cpi	r24, 0x6F	; 111
    196a:	c1 f0       	breq	.+48     	; 0x199c <vfprintf+0x26c>
    196c:	18 f4       	brcc	.+6      	; 0x1974 <vfprintf+0x244>
    196e:	88 35       	cpi	r24, 0x58	; 88
    1970:	79 f0       	breq	.+30     	; 0x1990 <vfprintf+0x260>
    1972:	b5 c0       	rjmp	.+362    	; 0x1ade <vfprintf+0x3ae>
    1974:	80 37       	cpi	r24, 0x70	; 112
    1976:	19 f0       	breq	.+6      	; 0x197e <vfprintf+0x24e>
    1978:	88 37       	cpi	r24, 0x78	; 120
    197a:	21 f0       	breq	.+8      	; 0x1984 <vfprintf+0x254>
    197c:	b0 c0       	rjmp	.+352    	; 0x1ade <vfprintf+0x3ae>
    197e:	e9 2f       	mov	r30, r25
    1980:	e0 61       	ori	r30, 0x10	; 16
    1982:	be 2e       	mov	r11, r30
    1984:	b4 fe       	sbrs	r11, 4
    1986:	0d c0       	rjmp	.+26     	; 0x19a2 <vfprintf+0x272>
    1988:	fb 2d       	mov	r31, r11
    198a:	f4 60       	ori	r31, 0x04	; 4
    198c:	bf 2e       	mov	r11, r31
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <vfprintf+0x272>
    1990:	34 fe       	sbrs	r3, 4
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <vfprintf+0x278>
    1994:	29 2f       	mov	r18, r25
    1996:	26 60       	ori	r18, 0x06	; 6
    1998:	b2 2e       	mov	r11, r18
    199a:	06 c0       	rjmp	.+12     	; 0x19a8 <vfprintf+0x278>
    199c:	28 e0       	ldi	r18, 0x08	; 8
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <vfprintf+0x27c>
    19a2:	20 e1       	ldi	r18, 0x10	; 16
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <vfprintf+0x27c>
    19a8:	20 e1       	ldi	r18, 0x10	; 16
    19aa:	32 e0       	ldi	r19, 0x02	; 2
    19ac:	f8 01       	movw	r30, r16
    19ae:	b7 fe       	sbrs	r11, 7
    19b0:	07 c0       	rjmp	.+14     	; 0x19c0 <vfprintf+0x290>
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	0c 5f       	subi	r16, 0xFC	; 252
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <vfprintf+0x29c>
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 5f       	subi	r16, 0xFE	; 254
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	a3 01       	movw	r20, r6
    19ce:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__ultoa_invert>
    19d2:	88 2e       	mov	r8, r24
    19d4:	86 18       	sub	r8, r6
    19d6:	fb 2d       	mov	r31, r11
    19d8:	ff 77       	andi	r31, 0x7F	; 127
    19da:	3f 2e       	mov	r3, r31
    19dc:	36 fe       	sbrs	r3, 6
    19de:	0d c0       	rjmp	.+26     	; 0x19fa <vfprintf+0x2ca>
    19e0:	23 2d       	mov	r18, r3
    19e2:	2e 7f       	andi	r18, 0xFE	; 254
    19e4:	a2 2e       	mov	r10, r18
    19e6:	89 14       	cp	r8, r9
    19e8:	58 f4       	brcc	.+22     	; 0x1a00 <vfprintf+0x2d0>
    19ea:	34 fe       	sbrs	r3, 4
    19ec:	0b c0       	rjmp	.+22     	; 0x1a04 <vfprintf+0x2d4>
    19ee:	32 fc       	sbrc	r3, 2
    19f0:	09 c0       	rjmp	.+18     	; 0x1a04 <vfprintf+0x2d4>
    19f2:	83 2d       	mov	r24, r3
    19f4:	8e 7e       	andi	r24, 0xEE	; 238
    19f6:	a8 2e       	mov	r10, r24
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <vfprintf+0x2d4>
    19fa:	b8 2c       	mov	r11, r8
    19fc:	a3 2c       	mov	r10, r3
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <vfprintf+0x2d6>
    1a00:	b8 2c       	mov	r11, r8
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <vfprintf+0x2d6>
    1a04:	b9 2c       	mov	r11, r9
    1a06:	a4 fe       	sbrs	r10, 4
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <vfprintf+0x2f8>
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e8 0d       	add	r30, r8
    1a0e:	f1 1d       	adc	r31, r1
    1a10:	80 81       	ld	r24, Z
    1a12:	80 33       	cpi	r24, 0x30	; 48
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <vfprintf+0x2ee>
    1a16:	9a 2d       	mov	r25, r10
    1a18:	99 7e       	andi	r25, 0xE9	; 233
    1a1a:	a9 2e       	mov	r10, r25
    1a1c:	09 c0       	rjmp	.+18     	; 0x1a30 <vfprintf+0x300>
    1a1e:	a2 fe       	sbrs	r10, 2
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <vfprintf+0x2fe>
    1a22:	b3 94       	inc	r11
    1a24:	b3 94       	inc	r11
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <vfprintf+0x300>
    1a28:	8a 2d       	mov	r24, r10
    1a2a:	86 78       	andi	r24, 0x86	; 134
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <vfprintf+0x300>
    1a2e:	b3 94       	inc	r11
    1a30:	a3 fc       	sbrc	r10, 3
    1a32:	11 c0       	rjmp	.+34     	; 0x1a56 <vfprintf+0x326>
    1a34:	a0 fe       	sbrs	r10, 0
    1a36:	06 c0       	rjmp	.+12     	; 0x1a44 <vfprintf+0x314>
    1a38:	b2 14       	cp	r11, r2
    1a3a:	88 f4       	brcc	.+34     	; 0x1a5e <vfprintf+0x32e>
    1a3c:	28 0c       	add	r2, r8
    1a3e:	92 2c       	mov	r9, r2
    1a40:	9b 18       	sub	r9, r11
    1a42:	0e c0       	rjmp	.+28     	; 0x1a60 <vfprintf+0x330>
    1a44:	b2 14       	cp	r11, r2
    1a46:	60 f4       	brcc	.+24     	; 0x1a60 <vfprintf+0x330>
    1a48:	b6 01       	movw	r22, r12
    1a4a:	80 e2       	ldi	r24, 0x20	; 32
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    1a52:	b3 94       	inc	r11
    1a54:	f7 cf       	rjmp	.-18     	; 0x1a44 <vfprintf+0x314>
    1a56:	b2 14       	cp	r11, r2
    1a58:	18 f4       	brcc	.+6      	; 0x1a60 <vfprintf+0x330>
    1a5a:	2b 18       	sub	r2, r11
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <vfprintf+0x332>
    1a5e:	98 2c       	mov	r9, r8
    1a60:	21 2c       	mov	r2, r1
    1a62:	a4 fe       	sbrs	r10, 4
    1a64:	10 c0       	rjmp	.+32     	; 0x1a86 <vfprintf+0x356>
    1a66:	b6 01       	movw	r22, r12
    1a68:	80 e3       	ldi	r24, 0x30	; 48
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    1a70:	a2 fe       	sbrs	r10, 2
    1a72:	17 c0       	rjmp	.+46     	; 0x1aa2 <vfprintf+0x372>
    1a74:	a1 fc       	sbrc	r10, 1
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <vfprintf+0x34e>
    1a78:	88 e7       	ldi	r24, 0x78	; 120
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <vfprintf+0x352>
    1a7e:	88 e5       	ldi	r24, 0x58	; 88
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	b6 01       	movw	r22, r12
    1a84:	0c c0       	rjmp	.+24     	; 0x1a9e <vfprintf+0x36e>
    1a86:	8a 2d       	mov	r24, r10
    1a88:	86 78       	andi	r24, 0x86	; 134
    1a8a:	59 f0       	breq	.+22     	; 0x1aa2 <vfprintf+0x372>
    1a8c:	a1 fe       	sbrs	r10, 1
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <vfprintf+0x364>
    1a90:	8b e2       	ldi	r24, 0x2B	; 43
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <vfprintf+0x366>
    1a94:	80 e2       	ldi	r24, 0x20	; 32
    1a96:	a7 fc       	sbrc	r10, 7
    1a98:	8d e2       	ldi	r24, 0x2D	; 45
    1a9a:	b6 01       	movw	r22, r12
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    1aa2:	89 14       	cp	r8, r9
    1aa4:	38 f4       	brcc	.+14     	; 0x1ab4 <vfprintf+0x384>
    1aa6:	b6 01       	movw	r22, r12
    1aa8:	80 e3       	ldi	r24, 0x30	; 48
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    1ab0:	9a 94       	dec	r9
    1ab2:	f7 cf       	rjmp	.-18     	; 0x1aa2 <vfprintf+0x372>
    1ab4:	8a 94       	dec	r8
    1ab6:	f3 01       	movw	r30, r6
    1ab8:	e8 0d       	add	r30, r8
    1aba:	f1 1d       	adc	r31, r1
    1abc:	80 81       	ld	r24, Z
    1abe:	b6 01       	movw	r22, r12
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    1ac6:	81 10       	cpse	r8, r1
    1ac8:	f5 cf       	rjmp	.-22     	; 0x1ab4 <vfprintf+0x384>
    1aca:	22 20       	and	r2, r2
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <vfprintf+0x3a0>
    1ace:	42 ce       	rjmp	.-892    	; 0x1754 <vfprintf+0x24>
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <fputc>
    1ada:	2a 94       	dec	r2
    1adc:	f6 cf       	rjmp	.-20     	; 0x1aca <vfprintf+0x39a>
    1ade:	f6 01       	movw	r30, r12
    1ae0:	86 81       	ldd	r24, Z+6	; 0x06
    1ae2:	97 81       	ldd	r25, Z+7	; 0x07
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <vfprintf+0x3ba>
    1ae6:	8f ef       	ldi	r24, 0xFF	; 255
    1ae8:	9f ef       	ldi	r25, 0xFF	; 255
    1aea:	2b 96       	adiw	r28, 0x0b	; 11
    1aec:	e2 e1       	ldi	r30, 0x12	; 18
    1aee:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__epilogue_restores__>

00001af2 <strnlen_P>:
    1af2:	fc 01       	movw	r30, r24
    1af4:	05 90       	lpm	r0, Z+
    1af6:	61 50       	subi	r22, 0x01	; 1
    1af8:	70 40       	sbci	r23, 0x00	; 0
    1afa:	01 10       	cpse	r0, r1
    1afc:	d8 f7       	brcc	.-10     	; 0x1af4 <strnlen_P+0x2>
    1afe:	80 95       	com	r24
    1b00:	90 95       	com	r25
    1b02:	8e 0f       	add	r24, r30
    1b04:	9f 1f       	adc	r25, r31
    1b06:	08 95       	ret

00001b08 <strnlen>:
    1b08:	fc 01       	movw	r30, r24
    1b0a:	61 50       	subi	r22, 0x01	; 1
    1b0c:	70 40       	sbci	r23, 0x00	; 0
    1b0e:	01 90       	ld	r0, Z+
    1b10:	01 10       	cpse	r0, r1
    1b12:	d8 f7       	brcc	.-10     	; 0x1b0a <strnlen+0x2>
    1b14:	80 95       	com	r24
    1b16:	90 95       	com	r25
    1b18:	8e 0f       	add	r24, r30
    1b1a:	9f 1f       	adc	r25, r31
    1b1c:	08 95       	ret

00001b1e <__ultoa_invert>:
    1b1e:	fa 01       	movw	r30, r20
    1b20:	aa 27       	eor	r26, r26
    1b22:	28 30       	cpi	r18, 0x08	; 8
    1b24:	51 f1       	breq	.+84     	; 0x1b7a <__ultoa_invert+0x5c>
    1b26:	20 31       	cpi	r18, 0x10	; 16
    1b28:	81 f1       	breq	.+96     	; 0x1b8a <__ultoa_invert+0x6c>
    1b2a:	e8 94       	clt
    1b2c:	6f 93       	push	r22
    1b2e:	6e 7f       	andi	r22, 0xFE	; 254
    1b30:	6e 5f       	subi	r22, 0xFE	; 254
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	8f 4f       	sbci	r24, 0xFF	; 255
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	af 4f       	sbci	r26, 0xFF	; 255
    1b3a:	b1 e0       	ldi	r27, 0x01	; 1
    1b3c:	3e d0       	rcall	.+124    	; 0x1bba <__ultoa_invert+0x9c>
    1b3e:	b4 e0       	ldi	r27, 0x04	; 4
    1b40:	3c d0       	rcall	.+120    	; 0x1bba <__ultoa_invert+0x9c>
    1b42:	67 0f       	add	r22, r23
    1b44:	78 1f       	adc	r23, r24
    1b46:	89 1f       	adc	r24, r25
    1b48:	9a 1f       	adc	r25, r26
    1b4a:	a1 1d       	adc	r26, r1
    1b4c:	68 0f       	add	r22, r24
    1b4e:	79 1f       	adc	r23, r25
    1b50:	8a 1f       	adc	r24, r26
    1b52:	91 1d       	adc	r25, r1
    1b54:	a1 1d       	adc	r26, r1
    1b56:	6a 0f       	add	r22, r26
    1b58:	71 1d       	adc	r23, r1
    1b5a:	81 1d       	adc	r24, r1
    1b5c:	91 1d       	adc	r25, r1
    1b5e:	a1 1d       	adc	r26, r1
    1b60:	20 d0       	rcall	.+64     	; 0x1ba2 <__ultoa_invert+0x84>
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <__ultoa_invert+0x48>
    1b64:	68 94       	set
    1b66:	3f 91       	pop	r19
    1b68:	2a e0       	ldi	r18, 0x0A	; 10
    1b6a:	26 9f       	mul	r18, r22
    1b6c:	11 24       	eor	r1, r1
    1b6e:	30 19       	sub	r19, r0
    1b70:	30 5d       	subi	r19, 0xD0	; 208
    1b72:	31 93       	st	Z+, r19
    1b74:	de f6       	brtc	.-74     	; 0x1b2c <__ultoa_invert+0xe>
    1b76:	cf 01       	movw	r24, r30
    1b78:	08 95       	ret
    1b7a:	46 2f       	mov	r20, r22
    1b7c:	47 70       	andi	r20, 0x07	; 7
    1b7e:	40 5d       	subi	r20, 0xD0	; 208
    1b80:	41 93       	st	Z+, r20
    1b82:	b3 e0       	ldi	r27, 0x03	; 3
    1b84:	0f d0       	rcall	.+30     	; 0x1ba4 <__ultoa_invert+0x86>
    1b86:	c9 f7       	brne	.-14     	; 0x1b7a <__ultoa_invert+0x5c>
    1b88:	f6 cf       	rjmp	.-20     	; 0x1b76 <__ultoa_invert+0x58>
    1b8a:	46 2f       	mov	r20, r22
    1b8c:	4f 70       	andi	r20, 0x0F	; 15
    1b8e:	40 5d       	subi	r20, 0xD0	; 208
    1b90:	4a 33       	cpi	r20, 0x3A	; 58
    1b92:	18 f0       	brcs	.+6      	; 0x1b9a <__ultoa_invert+0x7c>
    1b94:	49 5d       	subi	r20, 0xD9	; 217
    1b96:	31 fd       	sbrc	r19, 1
    1b98:	40 52       	subi	r20, 0x20	; 32
    1b9a:	41 93       	st	Z+, r20
    1b9c:	02 d0       	rcall	.+4      	; 0x1ba2 <__ultoa_invert+0x84>
    1b9e:	a9 f7       	brne	.-22     	; 0x1b8a <__ultoa_invert+0x6c>
    1ba0:	ea cf       	rjmp	.-44     	; 0x1b76 <__ultoa_invert+0x58>
    1ba2:	b4 e0       	ldi	r27, 0x04	; 4
    1ba4:	a6 95       	lsr	r26
    1ba6:	97 95       	ror	r25
    1ba8:	87 95       	ror	r24
    1baa:	77 95       	ror	r23
    1bac:	67 95       	ror	r22
    1bae:	ba 95       	dec	r27
    1bb0:	c9 f7       	brne	.-14     	; 0x1ba4 <__ultoa_invert+0x86>
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	61 05       	cpc	r22, r1
    1bb6:	71 05       	cpc	r23, r1
    1bb8:	08 95       	ret
    1bba:	9b 01       	movw	r18, r22
    1bbc:	ac 01       	movw	r20, r24
    1bbe:	0a 2e       	mov	r0, r26
    1bc0:	06 94       	lsr	r0
    1bc2:	57 95       	ror	r21
    1bc4:	47 95       	ror	r20
    1bc6:	37 95       	ror	r19
    1bc8:	27 95       	ror	r18
    1bca:	ba 95       	dec	r27
    1bcc:	c9 f7       	brne	.-14     	; 0x1bc0 <__ultoa_invert+0xa2>
    1bce:	62 0f       	add	r22, r18
    1bd0:	73 1f       	adc	r23, r19
    1bd2:	84 1f       	adc	r24, r20
    1bd4:	95 1f       	adc	r25, r21
    1bd6:	a0 1d       	adc	r26, r0
    1bd8:	08 95       	ret

00001bda <__muluhisi3>:
    1bda:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__umulhisi3>
    1bde:	a5 9f       	mul	r26, r21
    1be0:	90 0d       	add	r25, r0
    1be2:	b4 9f       	mul	r27, r20
    1be4:	90 0d       	add	r25, r0
    1be6:	a4 9f       	mul	r26, r20
    1be8:	80 0d       	add	r24, r0
    1bea:	91 1d       	adc	r25, r1
    1bec:	11 24       	eor	r1, r1
    1bee:	08 95       	ret

00001bf0 <__mulshisi3>:
    1bf0:	b7 ff       	sbrs	r27, 7
    1bf2:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__muluhisi3>

00001bf6 <__mulohisi3>:
    1bf6:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__muluhisi3>
    1bfa:	82 1b       	sub	r24, r18
    1bfc:	93 0b       	sbc	r25, r19
    1bfe:	08 95       	ret

00001c00 <__prologue_saves__>:
    1c00:	2f 92       	push	r2
    1c02:	3f 92       	push	r3
    1c04:	4f 92       	push	r4
    1c06:	5f 92       	push	r5
    1c08:	6f 92       	push	r6
    1c0a:	7f 92       	push	r7
    1c0c:	8f 92       	push	r8
    1c0e:	9f 92       	push	r9
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	ca 1b       	sub	r28, r26
    1c2a:	db 0b       	sbc	r29, r27
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	09 94       	ijmp

00001c38 <__epilogue_restores__>:
    1c38:	2a 88       	ldd	r2, Y+18	; 0x12
    1c3a:	39 88       	ldd	r3, Y+17	; 0x11
    1c3c:	48 88       	ldd	r4, Y+16	; 0x10
    1c3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c4e:	df 80       	ldd	r13, Y+7	; 0x07
    1c50:	ee 80       	ldd	r14, Y+6	; 0x06
    1c52:	fd 80       	ldd	r15, Y+5	; 0x05
    1c54:	0c 81       	ldd	r16, Y+4	; 0x04
    1c56:	1b 81       	ldd	r17, Y+3	; 0x03
    1c58:	aa 81       	ldd	r26, Y+2	; 0x02
    1c5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c5c:	ce 0f       	add	r28, r30
    1c5e:	d1 1d       	adc	r29, r1
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	ed 01       	movw	r28, r26
    1c6c:	08 95       	ret

00001c6e <__umulhisi3>:
    1c6e:	a2 9f       	mul	r26, r18
    1c70:	b0 01       	movw	r22, r0
    1c72:	b3 9f       	mul	r27, r19
    1c74:	c0 01       	movw	r24, r0
    1c76:	a3 9f       	mul	r26, r19
    1c78:	70 0d       	add	r23, r0
    1c7a:	81 1d       	adc	r24, r1
    1c7c:	11 24       	eor	r1, r1
    1c7e:	91 1d       	adc	r25, r1
    1c80:	b2 9f       	mul	r27, r18
    1c82:	70 0d       	add	r23, r0
    1c84:	81 1d       	adc	r24, r1
    1c86:	11 24       	eor	r1, r1
    1c88:	91 1d       	adc	r25, r1
    1c8a:	08 95       	ret

00001c8c <_exit>:
    1c8c:	f8 94       	cli

00001c8e <__stop_program>:
    1c8e:	ff cf       	rjmp	.-2      	; 0x1c8e <__stop_program>
