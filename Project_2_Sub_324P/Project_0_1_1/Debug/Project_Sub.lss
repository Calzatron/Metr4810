
Project_Sub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000018b8  0000194c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  00800158  00800158  000019a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d9  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000746  00000000  00000000  00002d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eff  00000000  00000000  000034cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000043d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000491  00000000  00000000  00004738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c8e  00000000  00000000  00004bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__vector_13>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      50:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_20>
      54:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_21>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      6c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      70:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      74:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      78:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      7c:	9b 03       	fmulsu	r17, r19
      7e:	c7 03       	fmuls	r20, r23
      80:	c7 03       	fmuls	r20, r23
      82:	c7 03       	fmuls	r20, r23
      84:	c7 03       	fmuls	r20, r23
      86:	c7 03       	fmuls	r20, r23
      88:	c7 03       	fmuls	r20, r23
      8a:	c7 03       	fmuls	r20, r23
      8c:	c7 03       	fmuls	r20, r23
      8e:	c7 03       	fmuls	r20, r23
      90:	c7 03       	fmuls	r20, r23
      92:	d3 03       	fmuls	r21, r19
      94:	c7 03       	fmuls	r20, r23
      96:	c9 02       	muls	r28, r25
      98:	c7 03       	fmuls	r20, r23
      9a:	c7 03       	fmuls	r20, r23
      9c:	29 03       	fmul	r18, r17
      9e:	2c 03       	fmul	r18, r20
      a0:	30 03       	mulsu	r19, r16
      a2:	34 03       	mulsu	r19, r20
      a4:	38 03       	fmul	r19, r16
      a6:	3c 03       	fmul	r19, r20
      a8:	c7 03       	fmuls	r20, r23
      aa:	c7 03       	fmuls	r20, r23
      ac:	c7 03       	fmuls	r20, r23
      ae:	c7 03       	fmuls	r20, r23
      b0:	c7 03       	fmuls	r20, r23
      b2:	c7 03       	fmuls	r20, r23
      b4:	c7 03       	fmuls	r20, r23
      b6:	c0 02       	muls	r28, r16
      b8:	c7 03       	fmuls	r20, r23
      ba:	b0 03       	fmuls	r19, r16
      bc:	c7 03       	fmuls	r20, r23
      be:	c7 03       	fmuls	r20, r23
      c0:	c7 03       	fmuls	r20, r23
      c2:	c7 03       	fmuls	r20, r23
      c4:	c7 03       	fmuls	r20, r23
      c6:	c7 03       	fmuls	r20, r23
      c8:	c7 03       	fmuls	r20, r23
      ca:	c7 03       	fmuls	r20, r23
      cc:	c7 03       	fmuls	r20, r23
      ce:	c7 03       	fmuls	r20, r23
      d0:	c7 03       	fmuls	r20, r23
      d2:	c7 03       	fmuls	r20, r23
      d4:	c7 03       	fmuls	r20, r23
      d6:	c7 03       	fmuls	r20, r23
      d8:	c7 03       	fmuls	r20, r23
      da:	c7 03       	fmuls	r20, r23
      dc:	c7 03       	fmuls	r20, r23
      de:	c7 03       	fmuls	r20, r23
      e0:	c7 03       	fmuls	r20, r23
      e2:	c7 03       	fmuls	r20, r23
      e4:	c7 03       	fmuls	r20, r23
      e6:	c7 03       	fmuls	r20, r23
      e8:	c7 03       	fmuls	r20, r23
      ea:	c7 03       	fmuls	r20, r23
      ec:	c7 03       	fmuls	r20, r23
      ee:	c7 03       	fmuls	r20, r23
      f0:	c7 03       	fmuls	r20, r23
      f2:	40 03       	mulsu	r20, r16
      f4:	c7 03       	fmuls	r20, r23
      f6:	6e 03       	fmul	r22, r22
      f8:	c7 03       	fmuls	r20, r23
      fa:	c7 03       	fmuls	r20, r23
      fc:	26 03       	mulsu	r18, r22
      fe:	a7 02       	muls	r26, r23
     100:	c7 03       	fmuls	r20, r23
     102:	c7 03       	fmuls	r20, r23
     104:	b1 02       	muls	r27, r17
     106:	d2 02       	muls	r29, r18
     108:	c7 03       	fmuls	r20, r23
     10a:	ac 03       	fmulsu	r18, r20
     10c:	a8 03       	fmulsu	r18, r16
     10e:	c7 03       	fmuls	r20, r23
     110:	c7 03       	fmuls	r20, r23
     112:	c7 03       	fmuls	r20, r23
     114:	c7 03       	fmuls	r20, r23
     116:	c7 03       	fmuls	r20, r23
     118:	c7 03       	fmuls	r20, r23
     11a:	b4 03       	fmuls	r19, r20
     11c:	c7 03       	fmuls	r20, r23
     11e:	fc 02       	muls	r31, r28
     120:	bb 02       	muls	r27, r27
     122:	ac 02       	muls	r26, r28
     124:	c7 03       	fmuls	r20, r23
     126:	c7 03       	fmuls	r20, r23
     128:	c7 03       	fmuls	r20, r23
     12a:	b6 02       	muls	r27, r22

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d8 e0       	ldi	r29, 0x08	; 8
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e8 eb       	ldi	r30, 0xB8	; 184
     140:	f8 e1       	ldi	r31, 0x18	; 24
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	a8 35       	cpi	r26, 0x58	; 88
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	22 e0       	ldi	r18, 0x02	; 2
     150:	a8 e5       	ldi	r26, 0x58	; 88
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a3 38       	cpi	r26, 0x83	; 131
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <main>
     162:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <_exit>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     16a:	cf 93       	push	r28
     16c:	c8 2f       	mov	r28, r24
     16e:	8a 30       	cpi	r24, 0x0A	; 10
     170:	19 f4       	brne	.+6      	; 0x178 <uart_put_char+0xe>
     172:	8d e0       	ldi	r24, 0x0D	; 13
     174:	0e 94 b5 00 	call	0x16a	; 0x16a <uart_put_char>
     178:	2f b7       	in	r18, 0x3f	; 63
     17a:	20 78       	andi	r18, 0x80	; 128
     17c:	02 c0       	rjmp	.+4      	; 0x182 <uart_put_char+0x18>
     17e:	22 23       	and	r18, r18
     180:	29 f1       	breq	.+74     	; 0x1cc <uart_put_char+0x62>
     182:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <bytes_in_out_buffer>
     186:	9f 3f       	cpi	r25, 0xFF	; 255
     188:	d1 f3       	breq	.-12     	; 0x17e <uart_put_char+0x14>
     18a:	f8 94       	cli
     18c:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <out_insert_pos>
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	8e 0f       	add	r24, r30
     194:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <out_insert_pos>
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	e0 5a       	subi	r30, 0xA0	; 160
     19c:	fe 4f       	sbci	r31, 0xFE	; 254
     19e:	c0 83       	st	Z, r28
     1a0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     1a4:	8f 5f       	subi	r24, 0xFF	; 255
     1a6:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <bytes_in_out_buffer>
     1aa:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <out_insert_pos>
     1ae:	8f 3f       	cpi	r24, 0xFF	; 255
     1b0:	11 f4       	brne	.+4      	; 0x1b6 <uart_put_char+0x4c>
     1b2:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <out_insert_pos>
     1b6:	e1 ec       	ldi	r30, 0xC1	; 193
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 62       	ori	r24, 0x20	; 32
     1be:	80 83       	st	Z, r24
     1c0:	22 23       	and	r18, r18
     1c2:	39 f0       	breq	.+14     	; 0x1d2 <uart_put_char+0x68>
     1c4:	78 94       	sei
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <uart_put_char+0x6c>
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <uart_put_char+0x6c>
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <uart_get_char>:
     1da:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     1de:	88 23       	and	r24, r24
     1e0:	e1 f3       	breq	.-8      	; 0x1da <uart_get_char>
     1e2:	2f b7       	in	r18, 0x3f	; 63
     1e4:	20 78       	andi	r18, 0x80	; 128
     1e6:	f8 94       	cli
     1e8:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <input_insert_pos>
     1ec:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <bytes_in_input_buffer>
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	83 1b       	sub	r24, r19
     1f4:	91 09       	sbc	r25, r1
     1f6:	5a f4       	brpl	.+22     	; 0x20e <uart_get_char+0x34>
     1f8:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <input_insert_pos>
     1fc:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	e8 1b       	sub	r30, r24
     204:	f1 09       	sbc	r31, r1
     206:	e0 59       	subi	r30, 0x90	; 144
     208:	fd 4f       	sbci	r31, 0xFD	; 253
     20a:	80 81       	ld	r24, Z
     20c:	0a c0       	rjmp	.+20     	; 0x222 <uart_get_char+0x48>
     20e:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <input_insert_pos>
     212:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	e8 1b       	sub	r30, r24
     21a:	f1 09       	sbc	r31, r1
     21c:	e0 5a       	subi	r30, 0xA0	; 160
     21e:	fd 4f       	sbci	r31, 0xFD	; 253
     220:	80 81       	ld	r24, Z
     222:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <bytes_in_input_buffer>
     226:	91 50       	subi	r25, 0x01	; 1
     228:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <bytes_in_input_buffer>
     22c:	22 23       	and	r18, r18
     22e:	09 f0       	breq	.+2      	; 0x232 <uart_get_char+0x58>
     230:	78 94       	sei
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	08 95       	ret

00000236 <init_serial_stdio>:
     236:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <out_insert_pos>
     23a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <bytes_in_out_buffer>
     23e:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <input_insert_pos>
     242:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <bytes_in_input_buffer>
     246:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <input_overrun>
     24a:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <__data_end>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	88 0f       	add	r24, r24
     254:	99 1f       	adc	r25, r25
     256:	aa 1f       	adc	r26, r26
     258:	bb 1f       	adc	r27, r27
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	aa 1f       	adc	r26, r26
     260:	bb 1f       	adc	r27, r27
     262:	9c 01       	movw	r18, r24
     264:	ad 01       	movw	r20, r26
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	72 e1       	ldi	r23, 0x12	; 18
     272:	8a e7       	ldi	r24, 0x7A	; 122
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 f4 06 	call	0xde8	; 0xde8 <__divmodsi4>
     27a:	ba 01       	movw	r22, r20
     27c:	a9 01       	movw	r20, r18
     27e:	4f 5f       	subi	r20, 0xFF	; 255
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	6f 4f       	sbci	r22, 0xFF	; 255
     284:	7f 4f       	sbci	r23, 0xFF	; 255
     286:	db 01       	movw	r26, r22
     288:	ca 01       	movw	r24, r20
     28a:	1a f4       	brpl	.+6      	; 0x292 <init_serial_stdio+0x5c>
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	a1 1d       	adc	r26, r1
     290:	b1 1d       	adc	r27, r1
     292:	b5 95       	asr	r27
     294:	a7 95       	ror	r26
     296:	97 95       	ror	r25
     298:	87 95       	ror	r24
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2a4:	e1 ec       	ldi	r30, 0xC1	; 193
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	88 e1       	ldi	r24, 0x18	; 24
     2aa:	80 83       	st	Z, r24
     2ac:	80 81       	ld	r24, Z
     2ae:	80 68       	ori	r24, 0x80	; 128
     2b0:	80 83       	st	Z, r24
     2b2:	ed e7       	ldi	r30, 0x7D	; 125
     2b4:	f2 e0       	ldi	r31, 0x02	; 2
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	93 83       	std	Z+3, r25	; 0x03
     2bc:	82 83       	std	Z+2, r24	; 0x02
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	80 83       	st	Z, r24
     2c2:	08 95       	ret

000002c4 <serial_input_available>:
     2c4:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <bytes_in_input_buffer>
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	91 11       	cpse	r25, r1
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <serial_input_available+0xc>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	08 95       	ret

000002d2 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	2f 93       	push	r18
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
     2e2:	ef 93       	push	r30
     2e4:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     2e6:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     2ea:	88 23       	and	r24, r24
     2ec:	29 f1       	breq	.+74     	; 0x338 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     2ee:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <out_insert_pos>
     2f2:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <bytes_in_out_buffer>
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	82 1b       	sub	r24, r18
     2fa:	91 09       	sbc	r25, r1
     2fc:	5a f4       	brpl	.+22     	; 0x314 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2fe:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <out_insert_pos>
     302:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	e8 1b       	sub	r30, r24
     30a:	f1 09       	sbc	r31, r1
     30c:	e1 5a       	subi	r30, 0xA1	; 161
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	90 81       	ld	r25, Z
     312:	0a c0       	rjmp	.+20     	; 0x328 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     314:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <out_insert_pos>
     318:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	e8 1b       	sub	r30, r24
     320:	f1 09       	sbc	r31, r1
     322:	e0 5a       	subi	r30, 0xA0	; 160
     324:	fe 4f       	sbci	r31, 0xFE	; 254
     326:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     328:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     32c:	81 50       	subi	r24, 0x01	; 1
     32e:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     332:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     336:	05 c0       	rjmp	.+10     	; 0x342 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     338:	e1 ec       	ldi	r30, 0xC1	; 193
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8f 7d       	andi	r24, 0xDF	; 223
     340:	80 83       	st	Z, r24
	}
}
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	2f 91       	pop	r18
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	cf 93       	push	r28
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     37a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     37e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
     382:	88 23       	and	r24, r24
     384:	49 f0       	breq	.+18     	; 0x398 <__vector_20+0x42>
     386:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     38a:	8f 3f       	cpi	r24, 0xFF	; 255
     38c:	29 f0       	breq	.+10     	; 0x398 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	8c 2f       	mov	r24, r28
     394:	0e 94 b5 00 	call	0x16a	; 0x16a <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     398:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     39c:	80 31       	cpi	r24, 0x10	; 16
     39e:	20 f0       	brcs	.+8      	; 0x3a8 <__vector_20+0x52>
		input_overrun = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <input_overrun>
     3a6:	18 c0       	rjmp	.+48     	; 0x3d8 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     3a8:	cd 30       	cpi	r28, 0x0D	; 13
     3aa:	09 f4       	brne	.+2      	; 0x3ae <__vector_20+0x58>
			c = '\n';
     3ac:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     3ae:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <input_insert_pos>
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	8e 0f       	add	r24, r30
     3b6:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <input_insert_pos>
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	e0 5a       	subi	r30, 0xA0	; 160
     3be:	fd 4f       	sbci	r31, 0xFD	; 253
     3c0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     3c2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     3cc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <input_insert_pos>
     3d0:	80 31       	cpi	r24, 0x10	; 16
     3d2:	11 f4       	brne	.+4      	; 0x3d8 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     3d4:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <input_insert_pos>
		}
	}
}
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	cf 91       	pop	r28
     3de:	bf 91       	pop	r27
     3e0:	af 91       	pop	r26
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	7f 91       	pop	r23
     3e8:	6f 91       	pop	r22
     3ea:	5f 91       	pop	r21
     3ec:	4f 91       	pop	r20
     3ee:	3f 91       	pop	r19
     3f0:	2f 91       	pop	r18
     3f2:	0f 90       	pop	r0
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	0f 90       	pop	r0
     3f8:	1f 90       	pop	r1
     3fa:	18 95       	reti

000003fc <init_tcnt0>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT0 = 0;
     3fc:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
     3fe:	17 bc       	out	0x27, r1	; 39
	//OCR0B = 124;
	

	TCCR0A |= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | _BV(WGM00) | _BV(WGM01);
     400:	84 b5       	in	r24, 0x24	; 36
     402:	83 68       	ori	r24, 0x83	; 131
     404:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS10);
     406:	85 b5       	in	r24, 0x25	; 37
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	85 bd       	out	0x25, r24	; 37
     40c:	08 95       	ret

0000040e <init_tcnt2>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
     40e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 124;
     412:	8c e7       	ldi	r24, 0x7C	; 124
     414:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 124;
     418:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	

	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
     41c:	e0 eb       	ldi	r30, 0xB0	; 176
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	83 6a       	ori	r24, 0xA3	; 163
     424:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
     426:	e1 eb       	ldi	r30, 0xB1	; 177
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	81 60       	ori	r24, 0x01	; 1
     42e:	80 83       	st	Z, r24
     430:	08 95       	ret

00000432 <makeInfo>:
	}
}

info* makeInfo(void) {
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     432:	87 e0       	ldi	r24, 0x07	; 7
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 3b 07 	call	0xe76	; 0xe76 <malloc>
	return info_ptr;
}
     43a:	08 95       	ret

0000043c <initialise>:





void initialise(info* info_ptr){
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	8c 01       	movw	r16, r24

	DDRA = (1<<PORTA0)|(1<<PORTA1);
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	81 b9       	out	0x01, r24	; 1
	DDRB = (1<<PORTB3);			/*	PWM camera	*/
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5)|(1<<PORTC6)|(1<<PORTC7);
     44e:	8c ef       	ldi	r24, 0xFC	; 252
     450:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
     452:	8e ef       	ldi	r24, 0xFE	; 254
     454:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
     456:	50 98       	cbi	0x0a, 0	; 10
	init_serial_stdio(9600,0);
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	60 e8       	ldi	r22, 0x80	; 128
     45c:	75 e2       	ldi	r23, 0x25	; 37
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 1b 01 	call	0x236	; 0x236 <init_serial_stdio>

	init_tcnt0();				/*	Camera PWM	*/
     466:	0e 94 fe 01 	call	0x3fc	; 0x3fc <init_tcnt0>
	init_tcnt1();				/*	Timer		*/
     46a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <init_tcnt1>
	init_tcnt2();				/*	Motor PWM	*/
     46e:	0e 94 07 02 	call	0x40e	; 0x40e <init_tcnt2>
	
	srand(get_tcnt1_ticks());
     472:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     476:	cb 01       	movw	r24, r22
     478:	0e 94 b9 08 	call	0x1172	; 0x1172 <srand>
	sei();
     47c:	78 94       	sei
	
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     47e:	cd e7       	ldi	r28, 0x7D	; 125
     480:	d2 e0       	ldi	r29, 0x02	; 2
	
	srand(get_tcnt1_ticks());
	sei();
	
	uint8_t check = 1;
	while (check){
     482:	1b c0       	rjmp	.+54     	; 0x4ba <initialise+0x7e>
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     484:	88 81       	ld	r24, Y
     486:	99 81       	ldd	r25, Y+1	; 0x01
     488:	0e 94 c4 08 	call	0x1188	; 0x1188 <fgetc>
			if (start == 'o'){
     48c:	8f 36       	cpi	r24, 0x6F	; 111
     48e:	a9 f4       	brne	.+42     	; 0x4ba <initialise+0x7e>
				fputs("start\n", stdout);
     490:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <__iob+0x2>
     494:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <__iob+0x3>
     498:	46 e0       	ldi	r20, 0x06	; 6
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	88 e1       	ldi	r24, 0x18	; 24
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <fwrite>
			//k=1;
		//}
	//}


	info_ptr->stepAct = '\0';
     4a8:	f8 01       	movw	r30, r16
     4aa:	14 82       	std	Z+4, r1	; 0x04
	info_ptr->maxStep = 150;
     4ac:	86 e9       	ldi	r24, 0x96	; 150
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	93 83       	std	Z+3, r25	; 0x03
     4b2:	82 83       	std	Z+2, r24	; 0x02
	info_ptr->camera = 0;
     4b4:	16 82       	std	Z+6, r1	; 0x06
	info_ptr->pwmSpeed = 0;
     4b6:	10 82       	st	Z, r1
     4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <initialise+0x88>
	sei();
	
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
     4ba:	0e 94 62 01 	call	0x2c4	; 0x2c4 <serial_input_available>
     4be:	88 23       	and	r24, r24
     4c0:	e1 f3       	breq	.-8      	; 0x4ba <initialise+0x7e>
     4c2:	e0 cf       	rjmp	.-64     	; 0x484 <initialise+0x48>

	info_ptr->stepAct = '\0';
	info_ptr->maxStep = 150;
	info_ptr->camera = 0;
	info_ptr->pwmSpeed = 0;
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	08 95       	ret

000004ce <custom_delay>:




void custom_delay(uint32_t ticks){
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	6b 01       	movw	r12, r22
     4d8:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt1 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt1_ticks();
     4da:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
	while((current_time + ticks) > get_tcnt1_ticks()){
     4de:	c6 0e       	add	r12, r22
     4e0:	d7 1e       	adc	r13, r23
     4e2:	e8 1e       	adc	r14, r24
     4e4:	f9 1e       	adc	r15, r25
     4e6:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     4ea:	6c 15       	cp	r22, r12
     4ec:	7d 05       	cpc	r23, r13
     4ee:	8e 05       	cpc	r24, r14
     4f0:	9f 05       	cpc	r25, r15
     4f2:	c8 f3       	brcs	.-14     	; 0x4e6 <custom_delay+0x18>
		;
	}
}
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	08 95       	ret

000004fe <input>:
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}


void input(info* info_ptr){
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	64 97       	sbiw	r28, 0x14	; 20
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	7c 01       	movw	r14, r24
	
	if(!serial_input_available()){
     520:	0e 94 62 01 	call	0x2c4	; 0x2c4 <serial_input_available>
     524:	88 23       	and	r24, r24
     526:	09 f4       	brne	.+2      	; 0x52a <input+0x2c>
     528:	45 c1       	rjmp	.+650    	; 0x7b4 <input+0x2b6>
		return;
		
	}

	char c = fgetc(stdin);
     52a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <__iob>
     52e:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <__iob+0x1>
     532:	0e 94 c4 08 	call	0x1188	; 0x1188 <fgetc>
	int16_t speed;
	char buffer[20];
	
	switch(c){
     536:	8c 01       	movw	r16, r24
     538:	11 27       	eor	r17, r17
     53a:	f8 01       	movw	r30, r16
     53c:	b0 97       	sbiw	r30, 0x20	; 32
     53e:	e8 35       	cpi	r30, 0x58	; 88
     540:	f1 05       	cpc	r31, r1
     542:	08 f0       	brcs	.+2      	; 0x546 <input+0x48>
     544:	24 c1       	rjmp	.+584    	; 0x78e <input+0x290>
     546:	e2 5c       	subi	r30, 0xC2	; 194
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__tablejump2__>
		
		case 'a' :
			//turn left
			PORTD &= ~(1<<PORTD2);
     54e:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     550:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     552:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     554:	47 98       	cbi	0x08, 7	; 8
			break;
     556:	27 c1       	rjmp	.+590    	; 0x7a6 <input+0x2a8>
		case 's' :
			//backwards
			PORTD &= ~(1<<PORTD2);
     558:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     55a:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     55c:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     55e:	47 9a       	sbi	0x08, 7	; 8
			break;
     560:	22 c1       	rjmp	.+580    	; 0x7a6 <input+0x2a8>
		case 'd' :
			//turn right
			PORTD |= (1<<PORTD2);
     562:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     564:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     566:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     568:	47 9a       	sbi	0x08, 7	; 8
			break;
     56a:	1d c1       	rjmp	.+570    	; 0x7a6 <input+0x2a8>
		case 'w' :
			// forward
			PORTD |= (1<<PORTD2);
     56c:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     56e:	5b 98       	cbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     570:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     572:	47 98       	cbi	0x08, 7	; 8
			break;
     574:	18 c1       	rjmp	.+560    	; 0x7a6 <input+0x2a8>
		case 'r' :
			// release claw
			release_step();
     576:	0e 94 86 04 	call	0x90c	; 0x90c <release_step>
			info_ptr->stepAct = '\0';
     57a:	f7 01       	movw	r30, r14
     57c:	14 82       	std	Z+4, r1	; 0x04
			break;
     57e:	13 c1       	rjmp	.+550    	; 0x7a6 <input+0x2a8>
			// rely to winch to lift up
			//fputc('+', stdout);
			break;
		case '=' :
			// someone panic'd; winch to lift up
			fputc('-', stdout);
     580:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <__iob+0x2>
     584:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <__iob+0x3>
     588:	8d e2       	ldi	r24, 0x2D	; 45
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
			break;
     590:	0a c1       	rjmp	.+532    	; 0x7a6 <input+0x2a8>
		case '-' :
			//lower
			fputc('-', stdout);
     592:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <__iob+0x2>
     596:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <__iob+0x3>
     59a:	8d e2       	ldi	r24, 0x2D	; 45
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
			break;
     5a2:	01 c1       	rjmp	.+514    	; 0x7a6 <input+0x2a8>
		case 'e' :
			// activate claw
			if (info_ptr->stepSpeed < 0){
     5a4:	f7 01       	movw	r30, r14
     5a6:	81 81       	ldd	r24, Z+1	; 0x01
     5a8:	88 23       	and	r24, r24
     5aa:	14 f4       	brge	.+4      	; 0x5b0 <input+0xb2>
				info_ptr->stepSpeed = -info_ptr->stepSpeed;
     5ac:	81 95       	neg	r24
     5ae:	81 83       	std	Z+1, r24	; 0x01
			}

			sprintf(buffer, "activate %d\n", info_ptr->stepSpeed);
     5b0:	f7 01       	movw	r30, r14
     5b2:	81 81       	ldd	r24, Z+1	; 0x01
     5b4:	28 2f       	mov	r18, r24
     5b6:	08 2e       	mov	r0, r24
     5b8:	00 0c       	add	r0, r0
     5ba:	33 0b       	sbc	r19, r19
     5bc:	3f 93       	push	r19
     5be:	8f 93       	push	r24
     5c0:	8f e1       	ldi	r24, 0x1F	; 31
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	ce 01       	movw	r24, r28
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	6c 01       	movw	r12, r24
     5ce:	9f 93       	push	r25
     5d0:	8f 93       	push	r24
     5d2:	0e 94 98 09 	call	0x1330	; 0x1330 <sprintf>
			fputs(buffer, stdout);
     5d6:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <__iob+0x2>
     5da:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <__iob+0x3>
     5de:	c6 01       	movw	r24, r12
     5e0:	0e 94 3a 09 	call	0x1274	; 0x1274 <fputs>
			info_ptr->stepAct = 'A';
     5e4:	81 e4       	ldi	r24, 0x41	; 65
     5e6:	f7 01       	movw	r30, r14
     5e8:	84 83       	std	Z+4, r24	; 0x04
			break;
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	d7 c0       	rjmp	.+430    	; 0x7a6 <input+0x2a8>
		case 'q' :
			// retract claw
			if (info_ptr->stepSpeed > 0){
     5f8:	f7 01       	movw	r30, r14
     5fa:	81 81       	ldd	r24, Z+1	; 0x01
     5fc:	18 16       	cp	r1, r24
     5fe:	14 f4       	brge	.+4      	; 0x604 <input+0x106>
					info_ptr->stepSpeed = -info_ptr->stepSpeed;
     600:	81 95       	neg	r24
     602:	81 83       	std	Z+1, r24	; 0x01
			}

			sprintf(buffer, "retract %d\n", info_ptr->stepSpeed);
     604:	f7 01       	movw	r30, r14
     606:	81 81       	ldd	r24, Z+1	; 0x01
     608:	28 2f       	mov	r18, r24
     60a:	08 2e       	mov	r0, r24
     60c:	00 0c       	add	r0, r0
     60e:	33 0b       	sbc	r19, r19
     610:	3f 93       	push	r19
     612:	8f 93       	push	r24
     614:	8c e2       	ldi	r24, 0x2C	; 44
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	ce 01       	movw	r24, r28
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	6c 01       	movw	r12, r24
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	0e 94 98 09 	call	0x1330	; 0x1330 <sprintf>
			fputs(buffer, stdout);
     62a:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <__iob+0x2>
     62e:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <__iob+0x3>
     632:	c6 01       	movw	r24, r12
     634:	0e 94 3a 09 	call	0x1274	; 0x1274 <fputs>
			info_ptr->stepAct = 'R';
     638:	82 e5       	ldi	r24, 0x52	; 82
     63a:	f7 01       	movw	r30, r14
     63c:	84 83       	std	Z+4, r24	; 0x04
			break;
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	ad c0       	rjmp	.+346    	; 0x7a6 <input+0x2a8>
		case '`' :
			info_ptr->pwmSpeed = 0;
     64c:	f7 01       	movw	r30, r14
     64e:	10 82       	st	Z, r1
			break;
     650:	aa c0       	rjmp	.+340    	; 0x7a6 <input+0x2a8>
		case '0' :
			info_ptr->pwmSpeed = 0;
     652:	f7 01       	movw	r30, r14
     654:	10 82       	st	Z, r1
			break;
     656:	a7 c0       	rjmp	.+334    	; 0x7a6 <input+0x2a8>
		case '1' :
			info_ptr->pwmSpeed = 20;
     658:	84 e1       	ldi	r24, 0x14	; 20
     65a:	f7 01       	movw	r30, r14
     65c:	80 83       	st	Z, r24
			break;
     65e:	a3 c0       	rjmp	.+326    	; 0x7a6 <input+0x2a8>
		case '2' :
			info_ptr->pwmSpeed = 40;
     660:	88 e2       	ldi	r24, 0x28	; 40
     662:	f7 01       	movw	r30, r14
     664:	80 83       	st	Z, r24
			break;
     666:	9f c0       	rjmp	.+318    	; 0x7a6 <input+0x2a8>
		case '3' :
			info_ptr->pwmSpeed = 60;
     668:	8c e3       	ldi	r24, 0x3C	; 60
     66a:	f7 01       	movw	r30, r14
     66c:	80 83       	st	Z, r24
			break;
     66e:	9b c0       	rjmp	.+310    	; 0x7a6 <input+0x2a8>
		case '4' :
			info_ptr->pwmSpeed = 80;
     670:	80 e5       	ldi	r24, 0x50	; 80
     672:	f7 01       	movw	r30, r14
     674:	80 83       	st	Z, r24
			break;
     676:	97 c0       	rjmp	.+302    	; 0x7a6 <input+0x2a8>
		case '5' :
			info_ptr->pwmSpeed = 100;
     678:	84 e6       	ldi	r24, 0x64	; 100
     67a:	f7 01       	movw	r30, r14
     67c:	80 83       	st	Z, r24
			break;
     67e:	93 c0       	rjmp	.+294    	; 0x7a6 <input+0x2a8>
		case '[' :
			speed = info_ptr->stepSpeed - 10;
     680:	f7 01       	movw	r30, r14
     682:	21 81       	ldd	r18, Z+1	; 0x01
     684:	82 2f       	mov	r24, r18
     686:	02 2e       	mov	r0, r18
     688:	00 0c       	add	r0, r0
     68a:	99 0b       	sbc	r25, r25
     68c:	0a 97       	sbiw	r24, 0x0a	; 10
			if (speed > -110){
     68e:	83 39       	cpi	r24, 0x93	; 147
     690:	9f 4f       	sbci	r25, 0xFF	; 255
     692:	1c f0       	brlt	.+6      	; 0x69a <input+0x19c>
				info_ptr->stepSpeed -= 10;
     694:	2a 50       	subi	r18, 0x0A	; 10
     696:	f7 01       	movw	r30, r14
     698:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     69a:	f7 01       	movw	r30, r14
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	28 2f       	mov	r18, r24
     6a0:	08 2e       	mov	r0, r24
     6a2:	00 0c       	add	r0, r0
     6a4:	33 0b       	sbc	r19, r19
     6a6:	3f 93       	push	r19
     6a8:	8f 93       	push	r24
     6aa:	88 e3       	ldi	r24, 0x38	; 56
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	7c 01       	movw	r14, r24
     6b8:	9f 93       	push	r25
     6ba:	8f 93       	push	r24
     6bc:	0e 94 98 09 	call	0x1330	; 0x1330 <sprintf>
			fputs(buffer, stdout);
     6c0:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <__iob+0x2>
     6c4:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <__iob+0x3>
     6c8:	c7 01       	movw	r24, r14
     6ca:	0e 94 3a 09 	call	0x1274	; 0x1274 <fputs>
			break;
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	65 c0       	rjmp	.+202    	; 0x7a6 <input+0x2a8>
		case ']' :
			speed = info_ptr->stepSpeed - 10;
     6dc:	f7 01       	movw	r30, r14
     6de:	21 81       	ldd	r18, Z+1	; 0x01
     6e0:	82 2f       	mov	r24, r18
     6e2:	02 2e       	mov	r0, r18
     6e4:	00 0c       	add	r0, r0
     6e6:	99 0b       	sbc	r25, r25
     6e8:	0a 97       	sbiw	r24, 0x0a	; 10
			if (speed < 110){
     6ea:	8e 36       	cpi	r24, 0x6E	; 110
     6ec:	91 05       	cpc	r25, r1
     6ee:	14 f4       	brge	.+4      	; 0x6f4 <input+0x1f6>
				info_ptr->stepSpeed += 10;
     6f0:	26 5f       	subi	r18, 0xF6	; 246
     6f2:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     6f4:	f7 01       	movw	r30, r14
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	28 2f       	mov	r18, r24
     6fa:	08 2e       	mov	r0, r24
     6fc:	00 0c       	add	r0, r0
     6fe:	33 0b       	sbc	r19, r19
     700:	3f 93       	push	r19
     702:	8f 93       	push	r24
     704:	88 e3       	ldi	r24, 0x38	; 56
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	9f 93       	push	r25
     70a:	8f 93       	push	r24
     70c:	ce 01       	movw	r24, r28
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	7c 01       	movw	r14, r24
     712:	9f 93       	push	r25
     714:	8f 93       	push	r24
     716:	0e 94 98 09 	call	0x1330	; 0x1330 <sprintf>
			fputs(buffer, stdout);
     71a:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <__iob+0x2>
     71e:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <__iob+0x3>
     722:	c7 01       	movw	r24, r14
     724:	0e 94 3a 09 	call	0x1274	; 0x1274 <fputs>
			break;
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	38 c0       	rjmp	.+112    	; 0x7a6 <input+0x2a8>
		case ' ' :
			info_ptr->pwmSpeed = 0;
     736:	f7 01       	movw	r30, r14
     738:	10 82       	st	Z, r1
			info_ptr->stopCommand = 1;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	85 83       	std	Z+5, r24	; 0x05
			fputc(' ', stdout);
     73e:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <__iob+0x2>
     742:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <__iob+0x3>
     746:	80 e2       	ldi	r24, 0x20	; 32
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
			break;
     74e:	2b c0       	rjmp	.+86     	; 0x7a6 <input+0x2a8>
		case 'h' :
			info_ptr->camera = 10;
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	f7 01       	movw	r30, r14
     754:	86 83       	std	Z+6, r24	; 0x06
			break;
     756:	27 c0       	rjmp	.+78     	; 0x7a6 <input+0x2a8>
		case 'g' :
			info_ptr->camera = -10;
     758:	86 ef       	ldi	r24, 0xF6	; 246
     75a:	f7 01       	movw	r30, r14
     75c:	86 83       	std	Z+6, r24	; 0x06
			break;
     75e:	23 c0       	rjmp	.+70     	; 0x7a6 <input+0x2a8>
		case '?' :
			// send stop command up
			//fputc('?', stdout);
			info_ptr->stopCommand = 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	f7 01       	movw	r30, r14
     764:	85 83       	std	Z+5, r24	; 0x05
			break;
     766:	1f c0       	rjmp	.+62     	; 0x7a6 <input+0x2a8>
		case 'o':
			// restart
			fputs("Start\n", stdout);
     768:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <__iob+0x2>
     76c:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <__iob+0x3>
     770:	46 e0       	ldi	r20, 0x06	; 6
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	87 e4       	ldi	r24, 0x47	; 71
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <fwrite>
			custom_delay(100);
     780:	64 e6       	ldi	r22, 0x64	; 100
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
			break;
     78c:	0c c0       	rjmp	.+24     	; 0x7a6 <input+0x2a8>
		default:
			fputs("stupid.\n", stdout);
     78e:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <__iob+0x2>
     792:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <__iob+0x3>
     796:	48 e0       	ldi	r20, 0x08	; 8
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	8e e4       	ldi	r24, 0x4E	; 78
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <fwrite>
			break;
	}
	fputc(c, stdout);
     7a6:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <__iob+0x2>
     7aa:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <__iob+0x3>
     7ae:	c8 01       	movw	r24, r16
     7b0:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
	
}
     7b4:	64 96       	adiw	r28, 0x14	; 20
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	08 95       	ret

000007d2 <main>:


/* functional code	*/
int main(void) {
	
	info* info_ptr = makeInfo();
     7d2:	0e 94 19 02 	call	0x432	; 0x432 <makeInfo>
     7d6:	ec 01       	movw	r28, r24
	initialise(info_ptr);
     7d8:	0e 94 1e 02 	call	0x43c	; 0x43c <initialise>
	
	while(1) {
		if(serial_input_available()){
			input(info_ptr);
		}
		OCR2A = 255 * (info_ptr->pwmSpeed/100);
     7dc:	0f 2e       	mov	r0, r31
     7de:	f9 e2       	ldi	r31, 0x29	; 41
     7e0:	df 2e       	mov	r13, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f3 eb       	ldi	r31, 0xB3	; 179
     7e8:	ef 2e       	mov	r14, r31
     7ea:	f1 2c       	mov	r15, r1
     7ec:	f0 2d       	mov	r31, r0
		OCR2B = 255 * (info_ptr->pwmSpeed/100);		
     7ee:	04 eb       	ldi	r16, 0xB4	; 180
     7f0:	10 e0       	ldi	r17, 0x00	; 0
			}
			info_ptr->camera = 0;
			
			
			info_ptr->stopCommand = 0;
		} else if ((info_ptr->stepAct == 'A')|(info_ptr->stepAct == 'R')){
     7f2:	cc 24       	eor	r12, r12
     7f4:	c3 94       	inc	r12
			uint16_t current = current_step();
     7f6:	68 94       	set
     7f8:	77 24       	eor	r7, r7
     7fa:	72 f8       	bld	r7, 2
     7fc:	81 2c       	mov	r8, r1
			}
			info_ptr->camera = 0;
			
			
			info_ptr->stopCommand = 0;
		} else if ((info_ptr->stepAct == 'A')|(info_ptr->stepAct == 'R')){
     7fe:	91 2c       	mov	r9, r1
	
	info* info_ptr = makeInfo();
	initialise(info_ptr);
	
	while(1) {
		if(serial_input_available()){
     800:	0e 94 62 01 	call	0x2c4	; 0x2c4 <serial_input_available>
     804:	88 23       	and	r24, r24
     806:	19 f0       	breq	.+6      	; 0x80e <main+0x3c>
			input(info_ptr);
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <input>
		}
		OCR2A = 255 * (info_ptr->pwmSpeed/100);
     80e:	88 81       	ld	r24, Y
     810:	8d 9d       	mul	r24, r13
     812:	81 2d       	mov	r24, r1
     814:	11 24       	eor	r1, r1
     816:	82 95       	swap	r24
     818:	8f 70       	andi	r24, 0x0F	; 15
     81a:	81 95       	neg	r24
     81c:	f7 01       	movw	r30, r14
     81e:	80 83       	st	Z, r24
		OCR2B = 255 * (info_ptr->pwmSpeed/100);		
     820:	98 81       	ld	r25, Y
     822:	9d 9d       	mul	r25, r13
     824:	91 2d       	mov	r25, r1
     826:	11 24       	eor	r1, r1
     828:	92 95       	swap	r25
     82a:	9f 70       	andi	r25, 0x0F	; 15
     82c:	91 95       	neg	r25
     82e:	f8 01       	movw	r30, r16
     830:	90 83       	st	Z, r25
		
		if (info_ptr->stopCommand){
     832:	8d 81       	ldd	r24, Y+5	; 0x05
     834:	88 23       	and	r24, r24
     836:	79 f0       	breq	.+30     	; 0x856 <main+0x84>
			/* stop everything */
			PORTD &= ~(1<<PORTD2);
     838:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     83a:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     83c:	46 98       	cbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     83e:	47 98       	cbi	0x08, 7	; 8
			if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     840:	8c 81       	ldd	r24, Y+4	; 0x04
     842:	81 34       	cpi	r24, 0x41	; 65
     844:	11 f0       	breq	.+4      	; 0x84a <main+0x78>
     846:	82 35       	cpi	r24, 0x52	; 82
     848:	19 f4       	brne	.+6      	; 0x850 <main+0x7e>
				hold_step();
     84a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <hold_step>
				info_ptr->stepAct = '\0';
     84e:	1c 82       	std	Y+4, r1	; 0x04
			}
			info_ptr->camera = 0;
     850:	1e 82       	std	Y+6, r1	; 0x06
			
			
			info_ptr->stopCommand = 0;
     852:	1d 82       	std	Y+5, r1	; 0x05
     854:	d5 cf       	rjmp	.-86     	; 0x800 <main+0x2e>
		} else if ((info_ptr->stepAct == 'A')|(info_ptr->stepAct == 'R')){
     856:	8c 81       	ldd	r24, Y+4	; 0x04
     858:	9c 2d       	mov	r25, r12
     85a:	82 35       	cpi	r24, 0x52	; 82
     85c:	09 f0       	breq	.+2      	; 0x860 <main+0x8e>
     85e:	99 2d       	mov	r25, r9
     860:	91 11       	cpse	r25, r1
     862:	06 c0       	rjmp	.+12     	; 0x870 <main+0x9e>
     864:	9c 2d       	mov	r25, r12
     866:	81 34       	cpi	r24, 0x41	; 65
     868:	09 f0       	breq	.+2      	; 0x86c <main+0x9a>
     86a:	99 2d       	mov	r25, r9
     86c:	99 23       	and	r25, r25
     86e:	c9 f0       	breq	.+50     	; 0x8a2 <main+0xd0>
			uint16_t current = current_step();
     870:	0e 94 59 04 	call	0x8b2	; 0x8b2 <current_step>
     874:	a7 2c       	mov	r10, r7
     876:	b8 2c       	mov	r11, r8
			for (int i = 0; i < 4; i++){
				current = current_step();
     878:	0e 94 59 04 	call	0x8b2	; 0x8b2 <current_step>
				if ((current > info_ptr->maxStep) || (current <= 0)){
     87c:	2a 81       	ldd	r18, Y+2	; 0x02
     87e:	3b 81       	ldd	r19, Y+3	; 0x03
     880:	28 17       	cp	r18, r24
     882:	39 07       	cpc	r19, r25
     884:	10 f0       	brcs	.+4      	; 0x88a <main+0xb8>
     886:	89 2b       	or	r24, r25
     888:	21 f4       	brne	.+8      	; 0x892 <main+0xc0>
					info_ptr->stepAct = '\0';
     88a:	1c 82       	std	Y+4, r1	; 0x04
					hold_step();
     88c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <hold_step>
					break;
     890:	b7 cf       	rjmp	.-146    	; 0x800 <main+0x2e>
				} else {
					step(info_ptr);
     892:	ce 01       	movw	r24, r28
     894:	0e 94 40 06 	call	0xc80	; 0xc80 <step>
     898:	f1 e0       	ldi	r31, 0x01	; 1
     89a:	af 1a       	sub	r10, r31
     89c:	b1 08       	sbc	r11, r1
			
			
			info_ptr->stopCommand = 0;
		} else if ((info_ptr->stepAct == 'A')|(info_ptr->stepAct == 'R')){
			uint16_t current = current_step();
			for (int i = 0; i < 4; i++){
     89e:	61 f7       	brne	.-40     	; 0x878 <main+0xa6>
     8a0:	af cf       	rjmp	.-162    	; 0x800 <main+0x2e>
				} else {
					step(info_ptr);
				}
			}
			
		} else if (info_ptr->camera != 0){
     8a2:	8e 81       	ldd	r24, Y+6	; 0x06
     8a4:	88 23       	and	r24, r24
     8a6:	09 f4       	brne	.+2      	; 0x8aa <main+0xd8>
     8a8:	ab cf       	rjmp	.-170    	; 0x800 <main+0x2e>
			uint8_t pos = OCR0A;
     8aa:	97 b5       	in	r25, 0x27	; 39
			pos += info_ptr->camera;
     8ac:	89 0f       	add	r24, r25
					pos = 0;
			} else if (pos > 255){
					pos = 255;
			}
			/*	adjust camera position */
			OCR0A = pos;
     8ae:	87 bd       	out	0x27, r24	; 39
     8b0:	a7 cf       	rjmp	.-178    	; 0x800 <main+0x2e>

000008b2 <current_step>:
	*	can be modified to return an angle from origin using gear
	*	ratio
	*/
	uint16_t returnValue = steps;
	return returnValue;
 }
     8b2:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <steps>
     8b6:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <steps+0x1>
     8ba:	08 95       	ret

000008bc <hold_step>:

void hold_step(void){
	
	PORTC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     8bc:	38 b1       	in	r19, 0x08	; 8
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	bc 01       	movw	r22, r24
     8c4:	00 90 77 02 	lds	r0, 0x0277	; 0x800277 <BLU>
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <hold_step+0x12>
     8ca:	66 0f       	add	r22, r22
     8cc:	77 1f       	adc	r23, r23
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <hold_step+0xe>
     8d2:	ac 01       	movw	r20, r24
     8d4:	00 90 76 02 	lds	r0, 0x0276	; 0x800276 <GRE>
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <hold_step+0x22>
     8da:	44 0f       	add	r20, r20
     8dc:	55 1f       	adc	r21, r21
     8de:	0a 94       	dec	r0
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <hold_step+0x1e>
     8e2:	46 2b       	or	r20, r22
     8e4:	43 2b       	or	r20, r19
     8e6:	9c 01       	movw	r18, r24
     8e8:	00 90 75 02 	lds	r0, 0x0275	; 0x800275 <YEL>
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <hold_step+0x36>
     8ee:	22 0f       	add	r18, r18
     8f0:	33 1f       	adc	r19, r19
     8f2:	0a 94       	dec	r0
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <hold_step+0x32>
     8f6:	24 2b       	or	r18, r20
     8f8:	00 90 78 02 	lds	r0, 0x0278	; 0x800278 <RED>
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	0a 94       	dec	r0
     904:	e2 f7       	brpl	.-8      	; 0x8fe <hold_step+0x42>
     906:	82 2b       	or	r24, r18
     908:	88 b9       	out	0x08, r24	; 8
     90a:	08 95       	ret

0000090c <release_step>:
	
}

void release_step(void){
	
	PORTC &= ~((1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED));
     90c:	28 b1       	in	r18, 0x08	; 8
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	bc 01       	movw	r22, r24
     914:	00 90 76 02 	lds	r0, 0x0276	; 0x800276 <GRE>
     918:	02 c0       	rjmp	.+4      	; 0x91e <release_step+0x12>
     91a:	66 0f       	add	r22, r22
     91c:	77 1f       	adc	r23, r23
     91e:	0a 94       	dec	r0
     920:	e2 f7       	brpl	.-8      	; 0x91a <release_step+0xe>
     922:	ac 01       	movw	r20, r24
     924:	00 90 77 02 	lds	r0, 0x0277	; 0x800277 <BLU>
     928:	02 c0       	rjmp	.+4      	; 0x92e <release_step+0x22>
     92a:	44 0f       	add	r20, r20
     92c:	55 1f       	adc	r21, r21
     92e:	0a 94       	dec	r0
     930:	e2 f7       	brpl	.-8      	; 0x92a <release_step+0x1e>
     932:	36 2f       	mov	r19, r22
     934:	34 2b       	or	r19, r20
     936:	ac 01       	movw	r20, r24
     938:	00 90 75 02 	lds	r0, 0x0275	; 0x800275 <YEL>
     93c:	02 c0       	rjmp	.+4      	; 0x942 <release_step+0x36>
     93e:	44 0f       	add	r20, r20
     940:	55 1f       	adc	r21, r21
     942:	0a 94       	dec	r0
     944:	e2 f7       	brpl	.-8      	; 0x93e <release_step+0x32>
     946:	43 2b       	or	r20, r19
     948:	00 90 78 02 	lds	r0, 0x0278	; 0x800278 <RED>
     94c:	02 c0       	rjmp	.+4      	; 0x952 <release_step+0x46>
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	0a 94       	dec	r0
     954:	e2 f7       	brpl	.-8      	; 0x94e <release_step+0x42>
     956:	84 2b       	or	r24, r20
     958:	80 95       	com	r24
     95a:	82 23       	and	r24, r18
     95c:	88 b9       	out	0x08, r24	; 8
     95e:	08 95       	ret

00000960 <increment_step>:
	}
 }

 void increment_step(void){
	/* the motor has turned one step, increase the count */
	++steps;
     960:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <steps>
     964:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <steps+0x1>
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <steps+0x1>
     96e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <steps>
     972:	08 95       	ret

00000974 <decrement_step>:
 }

 void decrement_step(void){
	/* the motor has turned back one step, decrease the count */
	--steps;
     974:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <steps>
     978:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <steps+0x1>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <steps+0x1>
     982:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <steps>
     986:	08 95       	ret

00000988 <step_clockwise>:
 }

 void step_clockwise(uint8_t time_on){
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */

	 uint32_t current_time;
	 
	 if(phase == 0){
     996:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <phase>
     99a:	91 11       	cpse	r25, r1
     99c:	2a c0       	rjmp	.+84     	; 0x9f2 <step_clockwise+0x6a>
		 current_time = get_tcnt1_ticks();
     99e:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     9a2:	6b 01       	movw	r12, r22
     9a4:	7c 01       	movw	r14, r24
     9a6:	cc 0e       	add	r12, r28
     9a8:	d1 1c       	adc	r13, r1
     9aa:	e1 1c       	adc	r14, r1
     9ac:	f1 1c       	adc	r15, r1
			 PORTC = (0<<BLU)|(1<<GRE)|(1<<YEL)|(0<<RED);
     9ae:	c1 e0       	ldi	r28, 0x01	; 1
     9b0:	d0 e0       	ldi	r29, 0x00	; 0

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     9b2:	12 c0       	rjmp	.+36     	; 0x9d8 <step_clockwise+0x50>
			 PORTC = (0<<BLU)|(1<<GRE)|(1<<YEL)|(0<<RED);
     9b4:	9e 01       	movw	r18, r28
     9b6:	00 90 75 02 	lds	r0, 0x0275	; 0x800275 <YEL>
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <step_clockwise+0x38>
     9bc:	22 0f       	add	r18, r18
     9be:	33 1f       	adc	r19, r19
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <step_clockwise+0x34>
     9c4:	ce 01       	movw	r24, r28
     9c6:	00 90 76 02 	lds	r0, 0x0276	; 0x800276 <GRE>
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <step_clockwise+0x48>
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	0a 94       	dec	r0
     9d2:	e2 f7       	brpl	.-8      	; 0x9cc <step_clockwise+0x44>
     9d4:	82 2b       	or	r24, r18
     9d6:	88 b9       	out	0x08, r24	; 8

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     9d8:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     9dc:	6c 15       	cp	r22, r12
     9de:	7d 05       	cpc	r23, r13
     9e0:	8e 05       	cpc	r24, r14
     9e2:	9f 05       	cpc	r25, r15
     9e4:	38 f3       	brcs	.-50     	; 0x9b4 <step_clockwise+0x2c>
			 PORTC = (0<<BLU)|(1<<GRE)|(1<<YEL)|(0<<RED);
		 }
		 ++phase;
     9e6:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <phase>
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <phase>
     9f0:	80 c0       	rjmp	.+256    	; 0xaf2 <step_clockwise+0x16a>
	 }
	 else if(phase == 1){
     9f2:	91 30       	cpi	r25, 0x01	; 1
     9f4:	51 f5       	brne	.+84     	; 0xa4a <step_clockwise+0xc2>
		 current_time = get_tcnt1_ticks();
     9f6:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     9fa:	6b 01       	movw	r12, r22
     9fc:	7c 01       	movw	r14, r24
     9fe:	cc 0e       	add	r12, r28
     a00:	d1 1c       	adc	r13, r1
     a02:	e1 1c       	adc	r14, r1
     a04:	f1 1c       	adc	r15, r1
			 PORTC = (0<<BLU)|(1<<GRE)|(0<<YEL)|(1<<RED);
     a06:	c1 e0       	ldi	r28, 0x01	; 1
     a08:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     a0a:	12 c0       	rjmp	.+36     	; 0xa30 <step_clockwise+0xa8>
			 PORTC = (0<<BLU)|(1<<GRE)|(0<<YEL)|(1<<RED);
     a0c:	9e 01       	movw	r18, r28
     a0e:	00 90 78 02 	lds	r0, 0x0278	; 0x800278 <RED>
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <step_clockwise+0x90>
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	0a 94       	dec	r0
     a1a:	e2 f7       	brpl	.-8      	; 0xa14 <step_clockwise+0x8c>
     a1c:	ce 01       	movw	r24, r28
     a1e:	00 90 76 02 	lds	r0, 0x0276	; 0x800276 <GRE>
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <step_clockwise+0xa0>
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	0a 94       	dec	r0
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <step_clockwise+0x9c>
     a2c:	82 2b       	or	r24, r18
     a2e:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     a30:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     a34:	6c 15       	cp	r22, r12
     a36:	7d 05       	cpc	r23, r13
     a38:	8e 05       	cpc	r24, r14
     a3a:	9f 05       	cpc	r25, r15
     a3c:	38 f3       	brcs	.-50     	; 0xa0c <step_clockwise+0x84>
			 PORTC = (0<<BLU)|(1<<GRE)|(0<<YEL)|(1<<RED);
		 }
		 ++phase;
     a3e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <phase>
     a42:	8f 5f       	subi	r24, 0xFF	; 255
     a44:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <phase>
     a48:	54 c0       	rjmp	.+168    	; 0xaf2 <step_clockwise+0x16a>
	 }
	 else if(phase == 2){
     a4a:	92 30       	cpi	r25, 0x02	; 2
     a4c:	51 f5       	brne	.+84     	; 0xaa2 <step_clockwise+0x11a>
		 current_time = get_tcnt1_ticks();
     a4e:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
     a56:	cc 0e       	add	r12, r28
     a58:	d1 1c       	adc	r13, r1
     a5a:	e1 1c       	adc	r14, r1
     a5c:	f1 1c       	adc	r15, r1
			 PORTC = (1<<BLU)|(0<<GRE)|(0<<YEL)|(1<<RED);
     a5e:	c1 e0       	ldi	r28, 0x01	; 1
     a60:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     a62:	12 c0       	rjmp	.+36     	; 0xa88 <step_clockwise+0x100>
			 PORTC = (1<<BLU)|(0<<GRE)|(0<<YEL)|(1<<RED);
     a64:	9e 01       	movw	r18, r28
     a66:	00 90 78 02 	lds	r0, 0x0278	; 0x800278 <RED>
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <step_clockwise+0xe8>
     a6c:	22 0f       	add	r18, r18
     a6e:	33 1f       	adc	r19, r19
     a70:	0a 94       	dec	r0
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <step_clockwise+0xe4>
     a74:	ce 01       	movw	r24, r28
     a76:	00 90 77 02 	lds	r0, 0x0277	; 0x800277 <BLU>
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <step_clockwise+0xf8>
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	0a 94       	dec	r0
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <step_clockwise+0xf4>
     a84:	82 2b       	or	r24, r18
     a86:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     a88:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     a8c:	6c 15       	cp	r22, r12
     a8e:	7d 05       	cpc	r23, r13
     a90:	8e 05       	cpc	r24, r14
     a92:	9f 05       	cpc	r25, r15
     a94:	38 f3       	brcs	.-50     	; 0xa64 <step_clockwise+0xdc>
			 PORTC = (1<<BLU)|(0<<GRE)|(0<<YEL)|(1<<RED);
		 }
		 ++phase;
     a96:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <phase>
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
     a9c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <phase>
     aa0:	28 c0       	rjmp	.+80     	; 0xaf2 <step_clockwise+0x16a>
	 }
	 else if(phase == 3){
     aa2:	93 30       	cpi	r25, 0x03	; 3
     aa4:	31 f5       	brne	.+76     	; 0xaf2 <step_clockwise+0x16a>
		 current_time = get_tcnt1_ticks();
     aa6:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     aaa:	6b 01       	movw	r12, r22
     aac:	7c 01       	movw	r14, r24
     aae:	cc 0e       	add	r12, r28
     ab0:	d1 1c       	adc	r13, r1
     ab2:	e1 1c       	adc	r14, r1
     ab4:	f1 1c       	adc	r15, r1
			 PORTC = (1<<BLU)|(0<<GRE)|(1<<YEL)|(0<<RED);
     ab6:	c1 e0       	ldi	r28, 0x01	; 1
     ab8:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     aba:	12 c0       	rjmp	.+36     	; 0xae0 <step_clockwise+0x158>
			 PORTC = (1<<BLU)|(0<<GRE)|(1<<YEL)|(0<<RED);
     abc:	9e 01       	movw	r18, r28
     abe:	00 90 75 02 	lds	r0, 0x0275	; 0x800275 <YEL>
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <step_clockwise+0x140>
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	0a 94       	dec	r0
     aca:	e2 f7       	brpl	.-8      	; 0xac4 <step_clockwise+0x13c>
     acc:	ce 01       	movw	r24, r28
     ace:	00 90 77 02 	lds	r0, 0x0277	; 0x800277 <BLU>
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <step_clockwise+0x150>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	0a 94       	dec	r0
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <step_clockwise+0x14c>
     adc:	82 2b       	or	r24, r18
     ade:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ae0:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     ae4:	6c 15       	cp	r22, r12
     ae6:	7d 05       	cpc	r23, r13
     ae8:	8e 05       	cpc	r24, r14
     aea:	9f 05       	cpc	r25, r15
     aec:	38 f3       	brcs	.-50     	; 0xabc <step_clockwise+0x134>
			 PORTC = (1<<BLU)|(0<<GRE)|(1<<YEL)|(0<<RED);
		 }
		 phase = 0;
     aee:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <phase>
	 }
	 increment_step();
     af2:	0e 94 b0 04 	call	0x960	; 0x960 <increment_step>
 }
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	08 95       	ret

00000b04 <step_anticlockwise>:


 void step_anticlockwise(uint8_t time_on){
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */
	
	 uint32_t current_time;

	 if(phase == 0){
     b12:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <phase>
     b16:	91 11       	cpse	r25, r1
     b18:	2a c0       	rjmp	.+84     	; 0xb6e <step_anticlockwise+0x6a>
		 current_time = get_tcnt1_ticks();
     b1a:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     b1e:	6b 01       	movw	r12, r22
     b20:	7c 01       	movw	r14, r24
     b22:	cc 0e       	add	r12, r28
     b24:	d1 1c       	adc	r13, r1
     b26:	e1 1c       	adc	r14, r1
     b28:	f1 1c       	adc	r15, r1
			 PORTC = (1<<BLU)|(0<<GRE)|(1<<YEL)|(0<<RED);
     b2a:	c1 e0       	ldi	r28, 0x01	; 1
     b2c:	d0 e0       	ldi	r29, 0x00	; 0
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <step_anticlockwise+0x50>
			 PORTC = (1<<BLU)|(0<<GRE)|(1<<YEL)|(0<<RED);
     b30:	9e 01       	movw	r18, r28
     b32:	00 90 75 02 	lds	r0, 0x0275	; 0x800275 <YEL>
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <step_anticlockwise+0x38>
     b38:	22 0f       	add	r18, r18
     b3a:	33 1f       	adc	r19, r19
     b3c:	0a 94       	dec	r0
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <step_anticlockwise+0x34>
     b40:	ce 01       	movw	r24, r28
     b42:	00 90 77 02 	lds	r0, 0x0277	; 0x800277 <BLU>
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <step_anticlockwise+0x48>
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	0a 94       	dec	r0
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <step_anticlockwise+0x44>
     b50:	82 2b       	or	r24, r18
     b52:	88 b9       	out	0x08, r24	; 8
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     b54:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     b58:	6c 15       	cp	r22, r12
     b5a:	7d 05       	cpc	r23, r13
     b5c:	8e 05       	cpc	r24, r14
     b5e:	9f 05       	cpc	r25, r15
     b60:	38 f3       	brcs	.-50     	; 0xb30 <step_anticlockwise+0x2c>
			 PORTC = (1<<BLU)|(0<<GRE)|(1<<YEL)|(0<<RED);
		 }
		 ++phase;
     b62:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <phase>
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <phase>
     b6c:	80 c0       	rjmp	.+256    	; 0xc6e <step_anticlockwise+0x16a>
	 }
	 else if(phase == 1){
     b6e:	91 30       	cpi	r25, 0x01	; 1
     b70:	51 f5       	brne	.+84     	; 0xbc6 <step_anticlockwise+0xc2>
		 current_time = get_tcnt1_ticks();
     b72:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     b76:	6b 01       	movw	r12, r22
     b78:	7c 01       	movw	r14, r24
     b7a:	cc 0e       	add	r12, r28
     b7c:	d1 1c       	adc	r13, r1
     b7e:	e1 1c       	adc	r14, r1
     b80:	f1 1c       	adc	r15, r1
			 PORTC = (1<<BLU)|(0<<GRE)|(0<<YEL)|(1<<RED);
     b82:	c1 e0       	ldi	r28, 0x01	; 1
     b84:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     b86:	12 c0       	rjmp	.+36     	; 0xbac <step_anticlockwise+0xa8>
			 PORTC = (1<<BLU)|(0<<GRE)|(0<<YEL)|(1<<RED);
     b88:	9e 01       	movw	r18, r28
     b8a:	00 90 78 02 	lds	r0, 0x0278	; 0x800278 <RED>
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <step_anticlockwise+0x90>
     b90:	22 0f       	add	r18, r18
     b92:	33 1f       	adc	r19, r19
     b94:	0a 94       	dec	r0
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <step_anticlockwise+0x8c>
     b98:	ce 01       	movw	r24, r28
     b9a:	00 90 77 02 	lds	r0, 0x0277	; 0x800277 <BLU>
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <step_anticlockwise+0xa0>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	0a 94       	dec	r0
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <step_anticlockwise+0x9c>
     ba8:	82 2b       	or	r24, r18
     baa:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     bac:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     bb0:	6c 15       	cp	r22, r12
     bb2:	7d 05       	cpc	r23, r13
     bb4:	8e 05       	cpc	r24, r14
     bb6:	9f 05       	cpc	r25, r15
     bb8:	38 f3       	brcs	.-50     	; 0xb88 <step_anticlockwise+0x84>
			 PORTC = (1<<BLU)|(0<<GRE)|(0<<YEL)|(1<<RED);
		 }
		 ++phase;
     bba:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <phase>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <phase>
     bc4:	54 c0       	rjmp	.+168    	; 0xc6e <step_anticlockwise+0x16a>
	 }
	 else if(phase == 2){
     bc6:	92 30       	cpi	r25, 0x02	; 2
     bc8:	51 f5       	brne	.+84     	; 0xc1e <step_anticlockwise+0x11a>
		 current_time = get_tcnt1_ticks();
     bca:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     bce:	6b 01       	movw	r12, r22
     bd0:	7c 01       	movw	r14, r24
     bd2:	cc 0e       	add	r12, r28
     bd4:	d1 1c       	adc	r13, r1
     bd6:	e1 1c       	adc	r14, r1
     bd8:	f1 1c       	adc	r15, r1
			 PORTC = (0<<BLU)|(1<<GRE)|(0<<YEL)|(1<<RED);
     bda:	c1 e0       	ldi	r28, 0x01	; 1
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     bde:	12 c0       	rjmp	.+36     	; 0xc04 <step_anticlockwise+0x100>
			 PORTC = (0<<BLU)|(1<<GRE)|(0<<YEL)|(1<<RED);
     be0:	9e 01       	movw	r18, r28
     be2:	00 90 78 02 	lds	r0, 0x0278	; 0x800278 <RED>
     be6:	02 c0       	rjmp	.+4      	; 0xbec <step_anticlockwise+0xe8>
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <step_anticlockwise+0xe4>
     bf0:	ce 01       	movw	r24, r28
     bf2:	00 90 76 02 	lds	r0, 0x0276	; 0x800276 <GRE>
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <step_anticlockwise+0xf8>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <step_anticlockwise+0xf4>
     c00:	82 2b       	or	r24, r18
     c02:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c04:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     c08:	6c 15       	cp	r22, r12
     c0a:	7d 05       	cpc	r23, r13
     c0c:	8e 05       	cpc	r24, r14
     c0e:	9f 05       	cpc	r25, r15
     c10:	38 f3       	brcs	.-50     	; 0xbe0 <step_anticlockwise+0xdc>
			 PORTC = (0<<BLU)|(1<<GRE)|(0<<YEL)|(1<<RED);
		 }
		 ++phase;
     c12:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <phase>
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <phase>
     c1c:	28 c0       	rjmp	.+80     	; 0xc6e <step_anticlockwise+0x16a>
	 }
	 else if(phase == 3){
     c1e:	93 30       	cpi	r25, 0x03	; 3
     c20:	31 f5       	brne	.+76     	; 0xc6e <step_anticlockwise+0x16a>
		 current_time = get_tcnt1_ticks();
     c22:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c26:	6b 01       	movw	r12, r22
     c28:	7c 01       	movw	r14, r24
     c2a:	cc 0e       	add	r12, r28
     c2c:	d1 1c       	adc	r13, r1
     c2e:	e1 1c       	adc	r14, r1
     c30:	f1 1c       	adc	r15, r1
			 PORTC = (0<<BLU)|(1<<GRE)|(1<<YEL)|(0<<RED);
     c32:	c1 e0       	ldi	r28, 0x01	; 1
     c34:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c36:	12 c0       	rjmp	.+36     	; 0xc5c <step_anticlockwise+0x158>
			 PORTC = (0<<BLU)|(1<<GRE)|(1<<YEL)|(0<<RED);
     c38:	9e 01       	movw	r18, r28
     c3a:	00 90 75 02 	lds	r0, 0x0275	; 0x800275 <YEL>
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <step_anticlockwise+0x140>
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <step_anticlockwise+0x13c>
     c48:	ce 01       	movw	r24, r28
     c4a:	00 90 76 02 	lds	r0, 0x0276	; 0x800276 <GRE>
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <step_anticlockwise+0x150>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <step_anticlockwise+0x14c>
     c58:	82 2b       	or	r24, r18
     c5a:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c5c:	0e 94 c1 06 	call	0xd82	; 0xd82 <get_tcnt1_ticks>
     c60:	6c 15       	cp	r22, r12
     c62:	7d 05       	cpc	r23, r13
     c64:	8e 05       	cpc	r24, r14
     c66:	9f 05       	cpc	r25, r15
     c68:	38 f3       	brcs	.-50     	; 0xc38 <step_anticlockwise+0x134>
			 PORTC = (0<<BLU)|(1<<GRE)|(1<<YEL)|(0<<RED);
		 }
		 phase = 0;
     c6a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <phase>
	 }
	 decrement_step();
     c6e:	0e 94 ba 04 	call	0x974	; 0x974 <decrement_step>
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	08 95       	ret

00000c80 <step>:
	/*	clockwise defined positive for speed
	*	will work out how fast to turn motor based on speed by setting
	*	time taken to move one step
	*	time_on is between -124 and +124
	*/
	if ((steps > info_ptr->maxStep) || (steps < 0)){
     c80:	fc 01       	movw	r30, r24
     c82:	42 81       	ldd	r20, Z+2	; 0x02
     c84:	53 81       	ldd	r21, Z+3	; 0x03
     c86:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <steps>
     c8a:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <steps+0x1>
     c8e:	42 17       	cp	r20, r18
     c90:	53 07       	cpc	r21, r19
     c92:	08 f4       	brcc	.+2      	; 0xc96 <step+0x16>
     c94:	52 c0       	rjmp	.+164    	; 0xd3a <step+0xba>
		/*	dont move	*/
		return;
	}
	
	int8_t speed = info_ptr->stepSpeed;
     c96:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t time_on;
	if (speed >= 0){
     c98:	88 23       	and	r24, r24
     c9a:	44 f1       	brlt	.+80     	; 0xcec <step+0x6c>
			if (speed < 10){
     c9c:	8a 30       	cpi	r24, 0x0A	; 10
     c9e:	94 f0       	brlt	.+36     	; 0xcc4 <step+0x44>
				time_on = 250;
			} else if (speed < 20) {
     ca0:	84 31       	cpi	r24, 0x14	; 20
     ca2:	94 f0       	brlt	.+36     	; 0xcc8 <step+0x48>
				time_on = 180;
			} else if (speed < 30) {
     ca4:	8e 31       	cpi	r24, 0x1E	; 30
     ca6:	94 f0       	brlt	.+36     	; 0xccc <step+0x4c>
				time_on = 160;
			} else if (speed < 40) {
     ca8:	88 32       	cpi	r24, 0x28	; 40
     caa:	94 f0       	brlt	.+36     	; 0xcd0 <step+0x50>
				time_on = 140;
			} else if (speed < 50){
     cac:	82 33       	cpi	r24, 0x32	; 50
     cae:	94 f0       	brlt	.+36     	; 0xcd4 <step+0x54>
				time_on = 120;
			} else if (speed < 60) {
     cb0:	8c 33       	cpi	r24, 0x3C	; 60
     cb2:	94 f0       	brlt	.+36     	; 0xcd8 <step+0x58>
				time_on = 100;
			} else if (speed < 70){
     cb4:	86 34       	cpi	r24, 0x46	; 70
     cb6:	94 f0       	brlt	.+36     	; 0xcdc <step+0x5c>
				time_on = 80;
			} else if (speed < 80) {
     cb8:	80 35       	cpi	r24, 0x50	; 80
     cba:	94 f0       	brlt	.+36     	; 0xce0 <step+0x60>
				time_on = 60;
			} else if (speed < 90){
     cbc:	8a 35       	cpi	r24, 0x5A	; 90
     cbe:	94 f0       	brlt	.+36     	; 0xce4 <step+0x64>
				time_on = 40;
			} else {
				time_on = 20;
     cc0:	84 e1       	ldi	r24, 0x14	; 20
     cc2:	11 c0       	rjmp	.+34     	; 0xce6 <step+0x66>
	
	int8_t speed = info_ptr->stepSpeed;
	uint8_t time_on;
	if (speed >= 0){
			if (speed < 10){
				time_on = 250;
     cc4:	8a ef       	ldi	r24, 0xFA	; 250
     cc6:	0f c0       	rjmp	.+30     	; 0xce6 <step+0x66>
			} else if (speed < 20) {
				time_on = 180;
     cc8:	84 eb       	ldi	r24, 0xB4	; 180
     cca:	0d c0       	rjmp	.+26     	; 0xce6 <step+0x66>
			} else if (speed < 30) {
				time_on = 160;
     ccc:	80 ea       	ldi	r24, 0xA0	; 160
     cce:	0b c0       	rjmp	.+22     	; 0xce6 <step+0x66>
			} else if (speed < 40) {
				time_on = 140;
     cd0:	8c e8       	ldi	r24, 0x8C	; 140
     cd2:	09 c0       	rjmp	.+18     	; 0xce6 <step+0x66>
			} else if (speed < 50){
				time_on = 120;
     cd4:	88 e7       	ldi	r24, 0x78	; 120
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <step+0x66>
			} else if (speed < 60) {
				time_on = 100;
     cd8:	84 e6       	ldi	r24, 0x64	; 100
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <step+0x66>
			} else if (speed < 70){
				time_on = 80;
     cdc:	80 e5       	ldi	r24, 0x50	; 80
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <step+0x66>
			} else if (speed < 80) {
				time_on = 60;
     ce0:	8c e3       	ldi	r24, 0x3C	; 60
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <step+0x66>
			} else if (speed < 90){
				time_on = 40;
     ce4:	88 e2       	ldi	r24, 0x28	; 40
			} else {
				time_on = 20;
			}
			step_clockwise(time_on);
     ce6:	0e 94 c4 04 	call	0x988	; 0x988 <step_clockwise>
     cea:	08 95       	ret
	} else {
			if (speed > -10){
     cec:	87 3f       	cpi	r24, 0xF7	; 247
     cee:	94 f4       	brge	.+36     	; 0xd14 <step+0x94>
				time_on = 100;
			} else if (speed > -20) {
     cf0:	8d 3e       	cpi	r24, 0xED	; 237
     cf2:	94 f4       	brge	.+36     	; 0xd18 <step+0x98>
				time_on = 90;
			} else if (speed > -30) {
     cf4:	83 3e       	cpi	r24, 0xE3	; 227
     cf6:	94 f4       	brge	.+36     	; 0xd1c <step+0x9c>
				time_on = 80;
			} else if (speed > -40) {
     cf8:	89 3d       	cpi	r24, 0xD9	; 217
     cfa:	94 f4       	brge	.+36     	; 0xd20 <step+0xa0>
				time_on = 70;
			} else if (speed > -50){
     cfc:	8f 3c       	cpi	r24, 0xCF	; 207
     cfe:	94 f4       	brge	.+36     	; 0xd24 <step+0xa4>
				time_on = 60;
			} else if (speed > -60) {
     d00:	85 3c       	cpi	r24, 0xC5	; 197
     d02:	94 f4       	brge	.+36     	; 0xd28 <step+0xa8>
				time_on = 50;
			} else if (speed > -70){
     d04:	8b 3b       	cpi	r24, 0xBB	; 187
     d06:	94 f4       	brge	.+36     	; 0xd2c <step+0xac>
				time_on = 40;
			} else if (speed > -80) {
     d08:	81 3b       	cpi	r24, 0xB1	; 177
     d0a:	94 f4       	brge	.+36     	; 0xd30 <step+0xb0>
				time_on = 30;
			} else if (speed > -90){
     d0c:	87 3a       	cpi	r24, 0xA7	; 167
     d0e:	94 f4       	brge	.+36     	; 0xd34 <step+0xb4>
				time_on = 20;
			} else {
				time_on = 10;
     d10:	8a e0       	ldi	r24, 0x0A	; 10
     d12:	11 c0       	rjmp	.+34     	; 0xd36 <step+0xb6>
				time_on = 20;
			}
			step_clockwise(time_on);
	} else {
			if (speed > -10){
				time_on = 100;
     d14:	84 e6       	ldi	r24, 0x64	; 100
     d16:	0f c0       	rjmp	.+30     	; 0xd36 <step+0xb6>
			} else if (speed > -20) {
				time_on = 90;
     d18:	8a e5       	ldi	r24, 0x5A	; 90
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <step+0xb6>
			} else if (speed > -30) {
				time_on = 80;
     d1c:	80 e5       	ldi	r24, 0x50	; 80
     d1e:	0b c0       	rjmp	.+22     	; 0xd36 <step+0xb6>
			} else if (speed > -40) {
				time_on = 70;
     d20:	86 e4       	ldi	r24, 0x46	; 70
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <step+0xb6>
			} else if (speed > -50){
				time_on = 60;
     d24:	8c e3       	ldi	r24, 0x3C	; 60
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <step+0xb6>
			} else if (speed > -60) {
				time_on = 50;
     d28:	82 e3       	ldi	r24, 0x32	; 50
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <step+0xb6>
			} else if (speed > -70){
				time_on = 40;
     d2c:	88 e2       	ldi	r24, 0x28	; 40
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <step+0xb6>
			} else if (speed > -80) {
				time_on = 30;
     d30:	8e e1       	ldi	r24, 0x1E	; 30
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <step+0xb6>
			} else if (speed > -90){
				time_on = 20;
     d34:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 10;
			}
			step_anticlockwise(time_on);
     d36:	0e 94 82 05 	call	0xb04	; 0xb04 <step_anticlockwise>
     d3a:	08 95       	ret

00000d3c <init_tcnt1>:

 void init_tcnt1(void){
	 /* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	 
	 //set button to be not pushed
	 Button_on = 0;
     d3c:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Button_on>
	 
	 // set global counter
	 tcnt1_ticks = 0L;
     d40:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tcnt1_ticks>
     d44:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <tcnt1_ticks+0x1>
     d48:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <tcnt1_ticks+0x2>
     d4c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <tcnt1_ticks+0x3>
	 
	 // set timer / counter
	 TCNT1 = 0;
     d50:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d54:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	 
	 // set output compare resgister; value to execute ISR
	 OCR1A = 124; // between 1 and 255
     d58:	8c e7       	ldi	r24, 0x7C	; 124
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d60:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	 
	 // timer/counter control register A - set to clear when TCNT0 matches OCR0A
	 TCCR1A = (1<<WGM11);
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	 
	 // set the timer to update at a fraction of a clock cycle
	 TCCR1B = (1<<CS11)|(1<<CS10);	// set to f(clk) / 64
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 
	 // timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK1 |= (1<<OCIE1A);
     d70:	ef e6       	ldi	r30, 0x6F	; 111
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	82 60       	ori	r24, 0x02	; 2
     d78:	80 83       	st	Z, r24
	 
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR1 &= (1<<OCF1A);
     d7a:	86 b3       	in	r24, 0x16	; 22
     d7c:	82 70       	andi	r24, 0x02	; 2
     d7e:	86 bb       	out	0x16, r24	; 22
     d80:	08 95       	ret

00000d82 <get_tcnt1_ticks>:


 uint32_t get_tcnt1_ticks(void) {
	 /* internal reference clock, times how long the system has been on for	*/

	 uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
     d82:	2f b7       	in	r18, 0x3f	; 63
	 cli();
     d84:	f8 94       	cli
	 uint32_t return_value = tcnt1_ticks;
     d86:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <tcnt1_ticks>
     d8a:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <tcnt1_ticks+0x1>
     d8e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <tcnt1_ticks+0x2>
     d92:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <tcnt1_ticks+0x3>
	 if(interrupts_on) {
     d96:	22 23       	and	r18, r18
     d98:	0c f4       	brge	.+2      	; 0xd9c <get_tcnt1_ticks+0x1a>
		 sei();
     d9a:	78 94       	sei
	 }
	 return return_value;
 }
     d9c:	08 95       	ret

00000d9e <__vector_13>:



 ISR(TIMER1_COMPA_vect) {
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 
	 tcnt1_ticks++;
     db0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <tcnt1_ticks>
     db4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <tcnt1_ticks+0x1>
     db8:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <tcnt1_ticks+0x2>
     dbc:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <tcnt1_ticks+0x3>
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
     dc6:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <tcnt1_ticks>
     dca:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <tcnt1_ticks+0x1>
     dce:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <tcnt1_ticks+0x2>
     dd2:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <tcnt1_ticks+0x3>

     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__divmodsi4>:
     de8:	05 2e       	mov	r0, r21
     dea:	97 fb       	bst	r25, 7
     dec:	1e f4       	brtc	.+6      	; 0xdf4 <__divmodsi4+0xc>
     dee:	00 94       	com	r0
     df0:	0e 94 0b 07 	call	0xe16	; 0xe16 <__negsi2>
     df4:	57 fd       	sbrc	r21, 7
     df6:	07 d0       	rcall	.+14     	; 0xe06 <__divmodsi4_neg2>
     df8:	0e 94 19 07 	call	0xe32	; 0xe32 <__udivmodsi4>
     dfc:	07 fc       	sbrc	r0, 7
     dfe:	03 d0       	rcall	.+6      	; 0xe06 <__divmodsi4_neg2>
     e00:	4e f4       	brtc	.+18     	; 0xe14 <__divmodsi4_exit>
     e02:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__negsi2>

00000e06 <__divmodsi4_neg2>:
     e06:	50 95       	com	r21
     e08:	40 95       	com	r20
     e0a:	30 95       	com	r19
     e0c:	21 95       	neg	r18
     e0e:	3f 4f       	sbci	r19, 0xFF	; 255
     e10:	4f 4f       	sbci	r20, 0xFF	; 255
     e12:	5f 4f       	sbci	r21, 0xFF	; 255

00000e14 <__divmodsi4_exit>:
     e14:	08 95       	ret

00000e16 <__negsi2>:
     e16:	90 95       	com	r25
     e18:	80 95       	com	r24
     e1a:	70 95       	com	r23
     e1c:	61 95       	neg	r22
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	8f 4f       	sbci	r24, 0xFF	; 255
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	08 95       	ret

00000e26 <__tablejump2__>:
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	05 90       	lpm	r0, Z+
     e2c:	f4 91       	lpm	r31, Z
     e2e:	e0 2d       	mov	r30, r0
     e30:	09 94       	ijmp

00000e32 <__udivmodsi4>:
     e32:	a1 e2       	ldi	r26, 0x21	; 33
     e34:	1a 2e       	mov	r1, r26
     e36:	aa 1b       	sub	r26, r26
     e38:	bb 1b       	sub	r27, r27
     e3a:	fd 01       	movw	r30, r26
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <__udivmodsi4_ep>

00000e3e <__udivmodsi4_loop>:
     e3e:	aa 1f       	adc	r26, r26
     e40:	bb 1f       	adc	r27, r27
     e42:	ee 1f       	adc	r30, r30
     e44:	ff 1f       	adc	r31, r31
     e46:	a2 17       	cp	r26, r18
     e48:	b3 07       	cpc	r27, r19
     e4a:	e4 07       	cpc	r30, r20
     e4c:	f5 07       	cpc	r31, r21
     e4e:	20 f0       	brcs	.+8      	; 0xe58 <__udivmodsi4_ep>
     e50:	a2 1b       	sub	r26, r18
     e52:	b3 0b       	sbc	r27, r19
     e54:	e4 0b       	sbc	r30, r20
     e56:	f5 0b       	sbc	r31, r21

00000e58 <__udivmodsi4_ep>:
     e58:	66 1f       	adc	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	1a 94       	dec	r1
     e62:	69 f7       	brne	.-38     	; 0xe3e <__udivmodsi4_loop>
     e64:	60 95       	com	r22
     e66:	70 95       	com	r23
     e68:	80 95       	com	r24
     e6a:	90 95       	com	r25
     e6c:	9b 01       	movw	r18, r22
     e6e:	ac 01       	movw	r20, r24
     e70:	bd 01       	movw	r22, r26
     e72:	cf 01       	movw	r24, r30
     e74:	08 95       	ret

00000e76 <malloc>:
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	82 30       	cpi	r24, 0x02	; 2
     e7c:	91 05       	cpc	r25, r1
     e7e:	10 f4       	brcc	.+4      	; 0xe84 <malloc+0xe>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <__flp>
     e88:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <__flp+0x1>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	d0 e0       	ldi	r29, 0x00	; 0
     e94:	30 97       	sbiw	r30, 0x00	; 0
     e96:	11 f1       	breq	.+68     	; 0xedc <malloc+0x66>
     e98:	40 81       	ld	r20, Z
     e9a:	51 81       	ldd	r21, Z+1	; 0x01
     e9c:	48 17       	cp	r20, r24
     e9e:	59 07       	cpc	r21, r25
     ea0:	c0 f0       	brcs	.+48     	; 0xed2 <malloc+0x5c>
     ea2:	48 17       	cp	r20, r24
     ea4:	59 07       	cpc	r21, r25
     ea6:	61 f4       	brne	.+24     	; 0xec0 <malloc+0x4a>
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	20 97       	sbiw	r28, 0x00	; 0
     eae:	19 f0       	breq	.+6      	; 0xeb6 <malloc+0x40>
     eb0:	9b 83       	std	Y+3, r25	; 0x03
     eb2:	8a 83       	std	Y+2, r24	; 0x02
     eb4:	2b c0       	rjmp	.+86     	; 0xf0c <malloc+0x96>
     eb6:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <__flp+0x1>
     eba:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <__flp>
     ebe:	26 c0       	rjmp	.+76     	; 0xf0c <malloc+0x96>
     ec0:	21 15       	cp	r18, r1
     ec2:	31 05       	cpc	r19, r1
     ec4:	19 f0       	breq	.+6      	; 0xecc <malloc+0x56>
     ec6:	42 17       	cp	r20, r18
     ec8:	53 07       	cpc	r21, r19
     eca:	18 f4       	brcc	.+6      	; 0xed2 <malloc+0x5c>
     ecc:	9a 01       	movw	r18, r20
     ece:	be 01       	movw	r22, r28
     ed0:	df 01       	movw	r26, r30
     ed2:	ef 01       	movw	r28, r30
     ed4:	02 80       	ldd	r0, Z+2	; 0x02
     ed6:	f3 81       	ldd	r31, Z+3	; 0x03
     ed8:	e0 2d       	mov	r30, r0
     eda:	dc cf       	rjmp	.-72     	; 0xe94 <malloc+0x1e>
     edc:	21 15       	cp	r18, r1
     ede:	31 05       	cpc	r19, r1
     ee0:	09 f1       	breq	.+66     	; 0xf24 <malloc+0xae>
     ee2:	28 1b       	sub	r18, r24
     ee4:	39 0b       	sbc	r19, r25
     ee6:	24 30       	cpi	r18, 0x04	; 4
     ee8:	31 05       	cpc	r19, r1
     eea:	90 f4       	brcc	.+36     	; 0xf10 <malloc+0x9a>
     eec:	12 96       	adiw	r26, 0x02	; 2
     eee:	8d 91       	ld	r24, X+
     ef0:	9c 91       	ld	r25, X
     ef2:	13 97       	sbiw	r26, 0x03	; 3
     ef4:	61 15       	cp	r22, r1
     ef6:	71 05       	cpc	r23, r1
     ef8:	21 f0       	breq	.+8      	; 0xf02 <malloc+0x8c>
     efa:	fb 01       	movw	r30, r22
     efc:	93 83       	std	Z+3, r25	; 0x03
     efe:	82 83       	std	Z+2, r24	; 0x02
     f00:	04 c0       	rjmp	.+8      	; 0xf0a <malloc+0x94>
     f02:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <__flp+0x1>
     f06:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <__flp>
     f0a:	fd 01       	movw	r30, r26
     f0c:	32 96       	adiw	r30, 0x02	; 2
     f0e:	44 c0       	rjmp	.+136    	; 0xf98 <malloc+0x122>
     f10:	fd 01       	movw	r30, r26
     f12:	e2 0f       	add	r30, r18
     f14:	f3 1f       	adc	r31, r19
     f16:	81 93       	st	Z+, r24
     f18:	91 93       	st	Z+, r25
     f1a:	22 50       	subi	r18, 0x02	; 2
     f1c:	31 09       	sbc	r19, r1
     f1e:	2d 93       	st	X+, r18
     f20:	3c 93       	st	X, r19
     f22:	3a c0       	rjmp	.+116    	; 0xf98 <malloc+0x122>
     f24:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <__brkval>
     f28:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <__brkval+0x1>
     f2c:	23 2b       	or	r18, r19
     f2e:	41 f4       	brne	.+16     	; 0xf40 <malloc+0xca>
     f30:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f34:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f38:	30 93 7a 02 	sts	0x027A, r19	; 0x80027a <__brkval+0x1>
     f3c:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <__brkval>
     f40:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f44:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f48:	21 15       	cp	r18, r1
     f4a:	31 05       	cpc	r19, r1
     f4c:	41 f4       	brne	.+16     	; 0xf5e <malloc+0xe8>
     f4e:	2d b7       	in	r18, 0x3d	; 61
     f50:	3e b7       	in	r19, 0x3e	; 62
     f52:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f56:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f5a:	24 1b       	sub	r18, r20
     f5c:	35 0b       	sbc	r19, r21
     f5e:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <__brkval>
     f62:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <__brkval+0x1>
     f66:	e2 17       	cp	r30, r18
     f68:	f3 07       	cpc	r31, r19
     f6a:	a0 f4       	brcc	.+40     	; 0xf94 <malloc+0x11e>
     f6c:	2e 1b       	sub	r18, r30
     f6e:	3f 0b       	sbc	r19, r31
     f70:	28 17       	cp	r18, r24
     f72:	39 07       	cpc	r19, r25
     f74:	78 f0       	brcs	.+30     	; 0xf94 <malloc+0x11e>
     f76:	ac 01       	movw	r20, r24
     f78:	4e 5f       	subi	r20, 0xFE	; 254
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	24 17       	cp	r18, r20
     f7e:	35 07       	cpc	r19, r21
     f80:	48 f0       	brcs	.+18     	; 0xf94 <malloc+0x11e>
     f82:	4e 0f       	add	r20, r30
     f84:	5f 1f       	adc	r21, r31
     f86:	50 93 7a 02 	sts	0x027A, r21	; 0x80027a <__brkval+0x1>
     f8a:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <__brkval>
     f8e:	81 93       	st	Z+, r24
     f90:	91 93       	st	Z+, r25
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <malloc+0x122>
     f94:	e0 e0       	ldi	r30, 0x00	; 0
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	cf 01       	movw	r24, r30
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <free>:
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	09 f4       	brne	.+2      	; 0xfae <free+0xe>
     fac:	8c c0       	rjmp	.+280    	; 0x10c6 <free+0x126>
     fae:	fc 01       	movw	r30, r24
     fb0:	32 97       	sbiw	r30, 0x02	; 2
     fb2:	13 82       	std	Z+3, r1	; 0x03
     fb4:	12 82       	std	Z+2, r1	; 0x02
     fb6:	00 91 7b 02 	lds	r16, 0x027B	; 0x80027b <__flp>
     fba:	10 91 7c 02 	lds	r17, 0x027C	; 0x80027c <__flp+0x1>
     fbe:	01 15       	cp	r16, r1
     fc0:	11 05       	cpc	r17, r1
     fc2:	81 f4       	brne	.+32     	; 0xfe4 <free+0x44>
     fc4:	20 81       	ld	r18, Z
     fc6:	31 81       	ldd	r19, Z+1	; 0x01
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <__brkval>
     fd0:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <__brkval+0x1>
     fd4:	28 17       	cp	r18, r24
     fd6:	39 07       	cpc	r19, r25
     fd8:	79 f5       	brne	.+94     	; 0x1038 <free+0x98>
     fda:	f0 93 7a 02 	sts	0x027A, r31	; 0x80027a <__brkval+0x1>
     fde:	e0 93 79 02 	sts	0x0279, r30	; 0x800279 <__brkval>
     fe2:	71 c0       	rjmp	.+226    	; 0x10c6 <free+0x126>
     fe4:	d8 01       	movw	r26, r16
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	ae 17       	cp	r26, r30
     fec:	bf 07       	cpc	r27, r31
     fee:	50 f4       	brcc	.+20     	; 0x1004 <free+0x64>
     ff0:	12 96       	adiw	r26, 0x02	; 2
     ff2:	2d 91       	ld	r18, X+
     ff4:	3c 91       	ld	r19, X
     ff6:	13 97       	sbiw	r26, 0x03	; 3
     ff8:	ad 01       	movw	r20, r26
     ffa:	21 15       	cp	r18, r1
     ffc:	31 05       	cpc	r19, r1
     ffe:	09 f1       	breq	.+66     	; 0x1042 <free+0xa2>
    1000:	d9 01       	movw	r26, r18
    1002:	f3 cf       	rjmp	.-26     	; 0xfea <free+0x4a>
    1004:	9d 01       	movw	r18, r26
    1006:	da 01       	movw	r26, r20
    1008:	33 83       	std	Z+3, r19	; 0x03
    100a:	22 83       	std	Z+2, r18	; 0x02
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	86 0f       	add	r24, r22
    1012:	97 1f       	adc	r25, r23
    1014:	82 17       	cp	r24, r18
    1016:	93 07       	cpc	r25, r19
    1018:	69 f4       	brne	.+26     	; 0x1034 <free+0x94>
    101a:	ec 01       	movw	r28, r24
    101c:	28 81       	ld	r18, Y
    101e:	39 81       	ldd	r19, Y+1	; 0x01
    1020:	26 0f       	add	r18, r22
    1022:	37 1f       	adc	r19, r23
    1024:	2e 5f       	subi	r18, 0xFE	; 254
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	31 83       	std	Z+1, r19	; 0x01
    102a:	20 83       	st	Z, r18
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	9b 81       	ldd	r25, Y+3	; 0x03
    1030:	93 83       	std	Z+3, r25	; 0x03
    1032:	82 83       	std	Z+2, r24	; 0x02
    1034:	45 2b       	or	r20, r21
    1036:	29 f4       	brne	.+10     	; 0x1042 <free+0xa2>
    1038:	f0 93 7c 02 	sts	0x027C, r31	; 0x80027c <__flp+0x1>
    103c:	e0 93 7b 02 	sts	0x027B, r30	; 0x80027b <__flp>
    1040:	42 c0       	rjmp	.+132    	; 0x10c6 <free+0x126>
    1042:	13 96       	adiw	r26, 0x03	; 3
    1044:	fc 93       	st	X, r31
    1046:	ee 93       	st	-X, r30
    1048:	12 97       	sbiw	r26, 0x02	; 2
    104a:	ed 01       	movw	r28, r26
    104c:	49 91       	ld	r20, Y+
    104e:	59 91       	ld	r21, Y+
    1050:	9e 01       	movw	r18, r28
    1052:	24 0f       	add	r18, r20
    1054:	35 1f       	adc	r19, r21
    1056:	e2 17       	cp	r30, r18
    1058:	f3 07       	cpc	r31, r19
    105a:	71 f4       	brne	.+28     	; 0x1078 <free+0xd8>
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	84 0f       	add	r24, r20
    1062:	95 1f       	adc	r25, r21
    1064:	02 96       	adiw	r24, 0x02	; 2
    1066:	11 96       	adiw	r26, 0x01	; 1
    1068:	9c 93       	st	X, r25
    106a:	8e 93       	st	-X, r24
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	13 96       	adiw	r26, 0x03	; 3
    1072:	9c 93       	st	X, r25
    1074:	8e 93       	st	-X, r24
    1076:	12 97       	sbiw	r26, 0x02	; 2
    1078:	e0 e0       	ldi	r30, 0x00	; 0
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	d8 01       	movw	r26, r16
    107e:	12 96       	adiw	r26, 0x02	; 2
    1080:	8d 91       	ld	r24, X+
    1082:	9c 91       	ld	r25, X
    1084:	13 97       	sbiw	r26, 0x03	; 3
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	19 f0       	breq	.+6      	; 0x1090 <free+0xf0>
    108a:	f8 01       	movw	r30, r16
    108c:	8c 01       	movw	r16, r24
    108e:	f6 cf       	rjmp	.-20     	; 0x107c <free+0xdc>
    1090:	8d 91       	ld	r24, X+
    1092:	9c 91       	ld	r25, X
    1094:	98 01       	movw	r18, r16
    1096:	2e 5f       	subi	r18, 0xFE	; 254
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	82 0f       	add	r24, r18
    109c:	93 1f       	adc	r25, r19
    109e:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <__brkval>
    10a2:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <__brkval+0x1>
    10a6:	28 17       	cp	r18, r24
    10a8:	39 07       	cpc	r19, r25
    10aa:	69 f4       	brne	.+26     	; 0x10c6 <free+0x126>
    10ac:	30 97       	sbiw	r30, 0x00	; 0
    10ae:	29 f4       	brne	.+10     	; 0x10ba <free+0x11a>
    10b0:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__flp+0x1>
    10b4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <__flp>
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <free+0x11e>
    10ba:	13 82       	std	Z+3, r1	; 0x03
    10bc:	12 82       	std	Z+2, r1	; 0x02
    10be:	10 93 7a 02 	sts	0x027A, r17	; 0x80027a <__brkval+0x1>
    10c2:	00 93 79 02 	sts	0x0279, r16	; 0x800279 <__brkval>
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <do_rand>:
    10d0:	8f 92       	push	r8
    10d2:	9f 92       	push	r9
    10d4:	af 92       	push	r10
    10d6:	bf 92       	push	r11
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    10e6:	68 81       	ld	r22, Y
    10e8:	79 81       	ldd	r23, Y+1	; 0x01
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	9b 81       	ldd	r25, Y+3	; 0x03
    10ee:	61 15       	cp	r22, r1
    10f0:	71 05       	cpc	r23, r1
    10f2:	81 05       	cpc	r24, r1
    10f4:	91 05       	cpc	r25, r1
    10f6:	21 f4       	brne	.+8      	; 0x1100 <do_rand+0x30>
    10f8:	64 e2       	ldi	r22, 0x24	; 36
    10fa:	79 ed       	ldi	r23, 0xD9	; 217
    10fc:	8b e5       	ldi	r24, 0x5B	; 91
    10fe:	97 e0       	ldi	r25, 0x07	; 7
    1100:	2d e1       	ldi	r18, 0x1D	; 29
    1102:	33 ef       	ldi	r19, 0xF3	; 243
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	0e 94 f4 06 	call	0xde8	; 0xde8 <__divmodsi4>
    110c:	49 01       	movw	r8, r18
    110e:	5a 01       	movw	r10, r20
    1110:	9b 01       	movw	r18, r22
    1112:	ac 01       	movw	r20, r24
    1114:	a7 ea       	ldi	r26, 0xA7	; 167
    1116:	b1 e4       	ldi	r27, 0x41	; 65
    1118:	0e 94 01 0c 	call	0x1802	; 0x1802 <__muluhisi3>
    111c:	6b 01       	movw	r12, r22
    111e:	7c 01       	movw	r14, r24
    1120:	ac ee       	ldi	r26, 0xEC	; 236
    1122:	b4 ef       	ldi	r27, 0xF4	; 244
    1124:	a5 01       	movw	r20, r10
    1126:	94 01       	movw	r18, r8
    1128:	0e 94 0f 0c 	call	0x181e	; 0x181e <__mulohisi3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8c 0d       	add	r24, r12
    1132:	9d 1d       	adc	r25, r13
    1134:	ae 1d       	adc	r26, r14
    1136:	bf 1d       	adc	r27, r15
    1138:	b7 ff       	sbrs	r27, 7
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <do_rand+0x72>
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	a1 09       	sbc	r26, r1
    1140:	b0 48       	sbci	r27, 0x80	; 128
    1142:	88 83       	st	Y, r24
    1144:	99 83       	std	Y+1, r25	; 0x01
    1146:	aa 83       	std	Y+2, r26	; 0x02
    1148:	bb 83       	std	Y+3, r27	; 0x03
    114a:	9f 77       	andi	r25, 0x7F	; 127
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	08 95       	ret

00001162 <rand_r>:
    1162:	0e 94 68 08 	call	0x10d0	; 0x10d0 <do_rand>
    1166:	08 95       	ret

00001168 <rand>:
    1168:	86 e0       	ldi	r24, 0x06	; 6
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <do_rand>
    1170:	08 95       	ret

00001172 <srand>:
    1172:	a0 e0       	ldi	r26, 0x00	; 0
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    117a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    117e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1182:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1186:	08 95       	ret

00001188 <fgetc>:
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	20 ff       	sbrs	r18, 0
    1192:	33 c0       	rjmp	.+102    	; 0x11fa <fgetc+0x72>
    1194:	26 ff       	sbrs	r18, 6
    1196:	0a c0       	rjmp	.+20     	; 0x11ac <fgetc+0x24>
    1198:	2f 7b       	andi	r18, 0xBF	; 191
    119a:	2b 83       	std	Y+3, r18	; 0x03
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	9f 81       	ldd	r25, Y+7	; 0x07
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	9f 83       	std	Y+7, r25	; 0x07
    11a4:	8e 83       	std	Y+6, r24	; 0x06
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <fgetc+0x76>
    11ac:	22 ff       	sbrs	r18, 2
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <fgetc+0x46>
    11b0:	e8 81       	ld	r30, Y
    11b2:	f9 81       	ldd	r31, Y+1	; 0x01
    11b4:	80 81       	ld	r24, Z
    11b6:	08 2e       	mov	r0, r24
    11b8:	00 0c       	add	r0, r0
    11ba:	99 0b       	sbc	r25, r25
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	19 f4       	brne	.+6      	; 0x11c6 <fgetc+0x3e>
    11c0:	20 62       	ori	r18, 0x20	; 32
    11c2:	2b 83       	std	Y+3, r18	; 0x03
    11c4:	1a c0       	rjmp	.+52     	; 0x11fa <fgetc+0x72>
    11c6:	31 96       	adiw	r30, 0x01	; 1
    11c8:	f9 83       	std	Y+1, r31	; 0x01
    11ca:	e8 83       	st	Y, r30
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <fgetc+0x62>
    11ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    11d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    11d2:	09 95       	icall
    11d4:	97 ff       	sbrs	r25, 7
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <fgetc+0x62>
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <fgetc+0x5a>
    11de:	80 e2       	ldi	r24, 0x20	; 32
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <fgetc+0x5c>
    11e2:	80 e1       	ldi	r24, 0x10	; 16
    11e4:	82 2b       	or	r24, r18
    11e6:	8b 83       	std	Y+3, r24	; 0x03
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <fgetc+0x72>
    11ea:	2e 81       	ldd	r18, Y+6	; 0x06
    11ec:	3f 81       	ldd	r19, Y+7	; 0x07
    11ee:	2f 5f       	subi	r18, 0xFF	; 255
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	3f 83       	std	Y+7, r19	; 0x07
    11f4:	2e 83       	std	Y+6, r18	; 0x06
    11f6:	99 27       	eor	r25, r25
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <fgetc+0x76>
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	9f ef       	ldi	r25, 0xFF	; 255
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <fputc>:
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	fb 01       	movw	r30, r22
    120e:	23 81       	ldd	r18, Z+3	; 0x03
    1210:	21 fd       	sbrc	r18, 1
    1212:	03 c0       	rjmp	.+6      	; 0x121a <fputc+0x16>
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	28 c0       	rjmp	.+80     	; 0x126a <fputc+0x66>
    121a:	22 ff       	sbrs	r18, 2
    121c:	16 c0       	rjmp	.+44     	; 0x124a <fputc+0x46>
    121e:	46 81       	ldd	r20, Z+6	; 0x06
    1220:	57 81       	ldd	r21, Z+7	; 0x07
    1222:	24 81       	ldd	r18, Z+4	; 0x04
    1224:	35 81       	ldd	r19, Z+5	; 0x05
    1226:	42 17       	cp	r20, r18
    1228:	53 07       	cpc	r21, r19
    122a:	44 f4       	brge	.+16     	; 0x123c <fputc+0x38>
    122c:	a0 81       	ld	r26, Z
    122e:	b1 81       	ldd	r27, Z+1	; 0x01
    1230:	9d 01       	movw	r18, r26
    1232:	2f 5f       	subi	r18, 0xFF	; 255
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	31 83       	std	Z+1, r19	; 0x01
    1238:	20 83       	st	Z, r18
    123a:	8c 93       	st	X, r24
    123c:	26 81       	ldd	r18, Z+6	; 0x06
    123e:	37 81       	ldd	r19, Z+7	; 0x07
    1240:	2f 5f       	subi	r18, 0xFF	; 255
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	37 83       	std	Z+7, r19	; 0x07
    1246:	26 83       	std	Z+6, r18	; 0x06
    1248:	10 c0       	rjmp	.+32     	; 0x126a <fputc+0x66>
    124a:	eb 01       	movw	r28, r22
    124c:	09 2f       	mov	r16, r25
    124e:	18 2f       	mov	r17, r24
    1250:	00 84       	ldd	r0, Z+8	; 0x08
    1252:	f1 85       	ldd	r31, Z+9	; 0x09
    1254:	e0 2d       	mov	r30, r0
    1256:	09 95       	icall
    1258:	89 2b       	or	r24, r25
    125a:	e1 f6       	brne	.-72     	; 0x1214 <fputc+0x10>
    125c:	8e 81       	ldd	r24, Y+6	; 0x06
    125e:	9f 81       	ldd	r25, Y+7	; 0x07
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	9f 83       	std	Y+7, r25	; 0x07
    1264:	8e 83       	std	Y+6, r24	; 0x06
    1266:	81 2f       	mov	r24, r17
    1268:	90 2f       	mov	r25, r16
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	08 95       	ret

00001274 <fputs>:
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	db 01       	movw	r26, r22
    1282:	13 96       	adiw	r26, 0x03	; 3
    1284:	2c 91       	ld	r18, X
    1286:	21 ff       	sbrs	r18, 1
    1288:	18 c0       	rjmp	.+48     	; 0x12ba <fputs+0x46>
    128a:	8b 01       	movw	r16, r22
    128c:	7c 01       	movw	r14, r24
    128e:	d0 e0       	ldi	r29, 0x00	; 0
    1290:	c0 e0       	ldi	r28, 0x00	; 0
    1292:	f7 01       	movw	r30, r14
    1294:	81 91       	ld	r24, Z+
    1296:	7f 01       	movw	r14, r30
    1298:	88 23       	and	r24, r24
    129a:	61 f0       	breq	.+24     	; 0x12b4 <fputs+0x40>
    129c:	d8 01       	movw	r26, r16
    129e:	18 96       	adiw	r26, 0x08	; 8
    12a0:	ed 91       	ld	r30, X+
    12a2:	fc 91       	ld	r31, X
    12a4:	19 97       	sbiw	r26, 0x09	; 9
    12a6:	b8 01       	movw	r22, r16
    12a8:	09 95       	icall
    12aa:	89 2b       	or	r24, r25
    12ac:	91 f3       	breq	.-28     	; 0x1292 <fputs+0x1e>
    12ae:	df ef       	ldi	r29, 0xFF	; 255
    12b0:	cf ef       	ldi	r28, 0xFF	; 255
    12b2:	ef cf       	rjmp	.-34     	; 0x1292 <fputs+0x1e>
    12b4:	8d 2f       	mov	r24, r29
    12b6:	9c 2f       	mov	r25, r28
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <fputs+0x4a>
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	e6 e0       	ldi	r30, 0x06	; 6
    12c4:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__epilogue_restores__+0x18>

000012c8 <fwrite>:
    12c8:	a0 e0       	ldi	r26, 0x00	; 0
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ea e6       	ldi	r30, 0x6A	; 106
    12ce:	f9 e0       	ldi	r31, 0x09	; 9
    12d0:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__prologue_saves__+0xc>
    12d4:	5b 01       	movw	r10, r22
    12d6:	4a 01       	movw	r8, r20
    12d8:	79 01       	movw	r14, r18
    12da:	d9 01       	movw	r26, r18
    12dc:	13 96       	adiw	r26, 0x03	; 3
    12de:	2c 91       	ld	r18, X
    12e0:	21 ff       	sbrs	r18, 1
    12e2:	1d c0       	rjmp	.+58     	; 0x131e <fwrite+0x56>
    12e4:	c0 e0       	ldi	r28, 0x00	; 0
    12e6:	d0 e0       	ldi	r29, 0x00	; 0
    12e8:	c8 15       	cp	r28, r8
    12ea:	d9 05       	cpc	r29, r9
    12ec:	d9 f0       	breq	.+54     	; 0x1324 <fwrite+0x5c>
    12ee:	8c 01       	movw	r16, r24
    12f0:	6c 01       	movw	r12, r24
    12f2:	ca 0c       	add	r12, r10
    12f4:	db 1c       	adc	r13, r11
    12f6:	c8 01       	movw	r24, r16
    12f8:	0c 15       	cp	r16, r12
    12fa:	1d 05       	cpc	r17, r13
    12fc:	71 f0       	breq	.+28     	; 0x131a <fwrite+0x52>
    12fe:	0f 5f       	subi	r16, 0xFF	; 255
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	d7 01       	movw	r26, r14
    1304:	18 96       	adiw	r26, 0x08	; 8
    1306:	ed 91       	ld	r30, X+
    1308:	fc 91       	ld	r31, X
    130a:	19 97       	sbiw	r26, 0x09	; 9
    130c:	b7 01       	movw	r22, r14
    130e:	dc 01       	movw	r26, r24
    1310:	8c 91       	ld	r24, X
    1312:	09 95       	icall
    1314:	89 2b       	or	r24, r25
    1316:	79 f3       	breq	.-34     	; 0x12f6 <fwrite+0x2e>
    1318:	05 c0       	rjmp	.+10     	; 0x1324 <fwrite+0x5c>
    131a:	21 96       	adiw	r28, 0x01	; 1
    131c:	e5 cf       	rjmp	.-54     	; 0x12e8 <fwrite+0x20>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <fwrite+0x5e>
    1324:	ce 01       	movw	r24, r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	ec e0       	ldi	r30, 0x0C	; 12
    132c:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__epilogue_restores__+0xc>

00001330 <sprintf>:
    1330:	ae e0       	ldi	r26, 0x0E	; 14
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ee e9       	ldi	r30, 0x9E	; 158
    1336:	f9 e0       	ldi	r31, 0x09	; 9
    1338:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__prologue_saves__+0x1c>
    133c:	0d 89       	ldd	r16, Y+21	; 0x15
    133e:	1e 89       	ldd	r17, Y+22	; 0x16
    1340:	86 e0       	ldi	r24, 0x06	; 6
    1342:	8c 83       	std	Y+4, r24	; 0x04
    1344:	1a 83       	std	Y+2, r17	; 0x02
    1346:	09 83       	std	Y+1, r16	; 0x01
    1348:	8f ef       	ldi	r24, 0xFF	; 255
    134a:	9f e7       	ldi	r25, 0x7F	; 127
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
    1350:	ae 01       	movw	r20, r28
    1352:	47 5e       	subi	r20, 0xE7	; 231
    1354:	5f 4f       	sbci	r21, 0xFF	; 255
    1356:	6f 89       	ldd	r22, Y+23	; 0x17
    1358:	78 8d       	ldd	r23, Y+24	; 0x18
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	0e 94 bb 09 	call	0x1376	; 0x1376 <vfprintf>
    1362:	2f 81       	ldd	r18, Y+7	; 0x07
    1364:	38 85       	ldd	r19, Y+8	; 0x08
    1366:	f8 01       	movw	r30, r16
    1368:	e2 0f       	add	r30, r18
    136a:	f3 1f       	adc	r31, r19
    136c:	10 82       	st	Z, r1
    136e:	2e 96       	adiw	r28, 0x0e	; 14
    1370:	e4 e0       	ldi	r30, 0x04	; 4
    1372:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__epilogue_restores__+0x1c>

00001376 <vfprintf>:
    1376:	ac e0       	ldi	r26, 0x0C	; 12
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 ec       	ldi	r30, 0xC1	; 193
    137c:	f9 e0       	ldi	r31, 0x09	; 9
    137e:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__prologue_saves__>
    1382:	7c 01       	movw	r14, r24
    1384:	6b 01       	movw	r12, r22
    1386:	8a 01       	movw	r16, r20
    1388:	fc 01       	movw	r30, r24
    138a:	17 82       	std	Z+7, r1	; 0x07
    138c:	16 82       	std	Z+6, r1	; 0x06
    138e:	83 81       	ldd	r24, Z+3	; 0x03
    1390:	81 ff       	sbrs	r24, 1
    1392:	bd c1       	rjmp	.+890    	; 0x170e <vfprintf+0x398>
    1394:	ce 01       	movw	r24, r28
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	4c 01       	movw	r8, r24
    139a:	f7 01       	movw	r30, r14
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	f6 01       	movw	r30, r12
    13a0:	93 fd       	sbrc	r25, 3
    13a2:	85 91       	lpm	r24, Z+
    13a4:	93 ff       	sbrs	r25, 3
    13a6:	81 91       	ld	r24, Z+
    13a8:	6f 01       	movw	r12, r30
    13aa:	88 23       	and	r24, r24
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <vfprintf+0x3a>
    13ae:	ab c1       	rjmp	.+854    	; 0x1706 <vfprintf+0x390>
    13b0:	85 32       	cpi	r24, 0x25	; 37
    13b2:	39 f4       	brne	.+14     	; 0x13c2 <vfprintf+0x4c>
    13b4:	93 fd       	sbrc	r25, 3
    13b6:	85 91       	lpm	r24, Z+
    13b8:	93 ff       	sbrs	r25, 3
    13ba:	81 91       	ld	r24, Z+
    13bc:	6f 01       	movw	r12, r30
    13be:	85 32       	cpi	r24, 0x25	; 37
    13c0:	29 f4       	brne	.+10     	; 0x13cc <vfprintf+0x56>
    13c2:	b7 01       	movw	r22, r14
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    13ca:	e7 cf       	rjmp	.-50     	; 0x139a <vfprintf+0x24>
    13cc:	51 2c       	mov	r5, r1
    13ce:	31 2c       	mov	r3, r1
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	20 32       	cpi	r18, 0x20	; 32
    13d4:	a0 f4       	brcc	.+40     	; 0x13fe <vfprintf+0x88>
    13d6:	8b 32       	cpi	r24, 0x2B	; 43
    13d8:	69 f0       	breq	.+26     	; 0x13f4 <vfprintf+0x7e>
    13da:	30 f4       	brcc	.+12     	; 0x13e8 <vfprintf+0x72>
    13dc:	80 32       	cpi	r24, 0x20	; 32
    13de:	59 f0       	breq	.+22     	; 0x13f6 <vfprintf+0x80>
    13e0:	83 32       	cpi	r24, 0x23	; 35
    13e2:	69 f4       	brne	.+26     	; 0x13fe <vfprintf+0x88>
    13e4:	20 61       	ori	r18, 0x10	; 16
    13e6:	2c c0       	rjmp	.+88     	; 0x1440 <vfprintf+0xca>
    13e8:	8d 32       	cpi	r24, 0x2D	; 45
    13ea:	39 f0       	breq	.+14     	; 0x13fa <vfprintf+0x84>
    13ec:	80 33       	cpi	r24, 0x30	; 48
    13ee:	39 f4       	brne	.+14     	; 0x13fe <vfprintf+0x88>
    13f0:	21 60       	ori	r18, 0x01	; 1
    13f2:	26 c0       	rjmp	.+76     	; 0x1440 <vfprintf+0xca>
    13f4:	22 60       	ori	r18, 0x02	; 2
    13f6:	24 60       	ori	r18, 0x04	; 4
    13f8:	23 c0       	rjmp	.+70     	; 0x1440 <vfprintf+0xca>
    13fa:	28 60       	ori	r18, 0x08	; 8
    13fc:	21 c0       	rjmp	.+66     	; 0x1440 <vfprintf+0xca>
    13fe:	27 fd       	sbrc	r18, 7
    1400:	27 c0       	rjmp	.+78     	; 0x1450 <vfprintf+0xda>
    1402:	30 ed       	ldi	r19, 0xD0	; 208
    1404:	38 0f       	add	r19, r24
    1406:	3a 30       	cpi	r19, 0x0A	; 10
    1408:	78 f4       	brcc	.+30     	; 0x1428 <vfprintf+0xb2>
    140a:	26 ff       	sbrs	r18, 6
    140c:	06 c0       	rjmp	.+12     	; 0x141a <vfprintf+0xa4>
    140e:	fa e0       	ldi	r31, 0x0A	; 10
    1410:	5f 9e       	mul	r5, r31
    1412:	30 0d       	add	r19, r0
    1414:	11 24       	eor	r1, r1
    1416:	53 2e       	mov	r5, r19
    1418:	13 c0       	rjmp	.+38     	; 0x1440 <vfprintf+0xca>
    141a:	8a e0       	ldi	r24, 0x0A	; 10
    141c:	38 9e       	mul	r3, r24
    141e:	30 0d       	add	r19, r0
    1420:	11 24       	eor	r1, r1
    1422:	33 2e       	mov	r3, r19
    1424:	20 62       	ori	r18, 0x20	; 32
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <vfprintf+0xca>
    1428:	8e 32       	cpi	r24, 0x2E	; 46
    142a:	21 f4       	brne	.+8      	; 0x1434 <vfprintf+0xbe>
    142c:	26 fd       	sbrc	r18, 6
    142e:	6b c1       	rjmp	.+726    	; 0x1706 <vfprintf+0x390>
    1430:	20 64       	ori	r18, 0x40	; 64
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <vfprintf+0xca>
    1434:	8c 36       	cpi	r24, 0x6C	; 108
    1436:	11 f4       	brne	.+4      	; 0x143c <vfprintf+0xc6>
    1438:	20 68       	ori	r18, 0x80	; 128
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <vfprintf+0xca>
    143c:	88 36       	cpi	r24, 0x68	; 104
    143e:	41 f4       	brne	.+16     	; 0x1450 <vfprintf+0xda>
    1440:	f6 01       	movw	r30, r12
    1442:	93 fd       	sbrc	r25, 3
    1444:	85 91       	lpm	r24, Z+
    1446:	93 ff       	sbrs	r25, 3
    1448:	81 91       	ld	r24, Z+
    144a:	6f 01       	movw	r12, r30
    144c:	81 11       	cpse	r24, r1
    144e:	c1 cf       	rjmp	.-126    	; 0x13d2 <vfprintf+0x5c>
    1450:	98 2f       	mov	r25, r24
    1452:	9f 7d       	andi	r25, 0xDF	; 223
    1454:	95 54       	subi	r25, 0x45	; 69
    1456:	93 30       	cpi	r25, 0x03	; 3
    1458:	28 f4       	brcc	.+10     	; 0x1464 <vfprintf+0xee>
    145a:	0c 5f       	subi	r16, 0xFC	; 252
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	ff e3       	ldi	r31, 0x3F	; 63
    1460:	f9 83       	std	Y+1, r31	; 0x01
    1462:	0d c0       	rjmp	.+26     	; 0x147e <vfprintf+0x108>
    1464:	83 36       	cpi	r24, 0x63	; 99
    1466:	31 f0       	breq	.+12     	; 0x1474 <vfprintf+0xfe>
    1468:	83 37       	cpi	r24, 0x73	; 115
    146a:	71 f0       	breq	.+28     	; 0x1488 <vfprintf+0x112>
    146c:	83 35       	cpi	r24, 0x53	; 83
    146e:	09 f0       	breq	.+2      	; 0x1472 <vfprintf+0xfc>
    1470:	5b c0       	rjmp	.+182    	; 0x1528 <vfprintf+0x1b2>
    1472:	22 c0       	rjmp	.+68     	; 0x14b8 <vfprintf+0x142>
    1474:	f8 01       	movw	r30, r16
    1476:	80 81       	ld	r24, Z
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	0e 5f       	subi	r16, 0xFE	; 254
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
    147e:	44 24       	eor	r4, r4
    1480:	43 94       	inc	r4
    1482:	51 2c       	mov	r5, r1
    1484:	54 01       	movw	r10, r8
    1486:	15 c0       	rjmp	.+42     	; 0x14b2 <vfprintf+0x13c>
    1488:	38 01       	movw	r6, r16
    148a:	f2 e0       	ldi	r31, 0x02	; 2
    148c:	6f 0e       	add	r6, r31
    148e:	71 1c       	adc	r7, r1
    1490:	f8 01       	movw	r30, r16
    1492:	a0 80       	ld	r10, Z
    1494:	b1 80       	ldd	r11, Z+1	; 0x01
    1496:	26 ff       	sbrs	r18, 6
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <vfprintf+0x12a>
    149a:	65 2d       	mov	r22, r5
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <vfprintf+0x12e>
    14a0:	6f ef       	ldi	r22, 0xFF	; 255
    14a2:	7f ef       	ldi	r23, 0xFF	; 255
    14a4:	c5 01       	movw	r24, r10
    14a6:	2c 87       	std	Y+12, r18	; 0x0c
    14a8:	0e 94 98 0b 	call	0x1730	; 0x1730 <strnlen>
    14ac:	2c 01       	movw	r4, r24
    14ae:	83 01       	movw	r16, r6
    14b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14b2:	2f 77       	andi	r18, 0x7F	; 127
    14b4:	22 2e       	mov	r2, r18
    14b6:	17 c0       	rjmp	.+46     	; 0x14e6 <vfprintf+0x170>
    14b8:	38 01       	movw	r6, r16
    14ba:	f2 e0       	ldi	r31, 0x02	; 2
    14bc:	6f 0e       	add	r6, r31
    14be:	71 1c       	adc	r7, r1
    14c0:	f8 01       	movw	r30, r16
    14c2:	a0 80       	ld	r10, Z
    14c4:	b1 80       	ldd	r11, Z+1	; 0x01
    14c6:	26 ff       	sbrs	r18, 6
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <vfprintf+0x15a>
    14ca:	65 2d       	mov	r22, r5
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <vfprintf+0x15e>
    14d0:	6f ef       	ldi	r22, 0xFF	; 255
    14d2:	7f ef       	ldi	r23, 0xFF	; 255
    14d4:	c5 01       	movw	r24, r10
    14d6:	2c 87       	std	Y+12, r18	; 0x0c
    14d8:	0e 94 8d 0b 	call	0x171a	; 0x171a <strnlen_P>
    14dc:	2c 01       	movw	r4, r24
    14de:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e0:	20 68       	ori	r18, 0x80	; 128
    14e2:	22 2e       	mov	r2, r18
    14e4:	83 01       	movw	r16, r6
    14e6:	23 fc       	sbrc	r2, 3
    14e8:	1b c0       	rjmp	.+54     	; 0x1520 <vfprintf+0x1aa>
    14ea:	83 2d       	mov	r24, r3
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	48 16       	cp	r4, r24
    14f0:	59 06       	cpc	r5, r25
    14f2:	b0 f4       	brcc	.+44     	; 0x1520 <vfprintf+0x1aa>
    14f4:	b7 01       	movw	r22, r14
    14f6:	80 e2       	ldi	r24, 0x20	; 32
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    14fe:	3a 94       	dec	r3
    1500:	f4 cf       	rjmp	.-24     	; 0x14ea <vfprintf+0x174>
    1502:	f5 01       	movw	r30, r10
    1504:	27 fc       	sbrc	r2, 7
    1506:	85 91       	lpm	r24, Z+
    1508:	27 fe       	sbrs	r2, 7
    150a:	81 91       	ld	r24, Z+
    150c:	5f 01       	movw	r10, r30
    150e:	b7 01       	movw	r22, r14
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    1516:	31 10       	cpse	r3, r1
    1518:	3a 94       	dec	r3
    151a:	f1 e0       	ldi	r31, 0x01	; 1
    151c:	4f 1a       	sub	r4, r31
    151e:	51 08       	sbc	r5, r1
    1520:	41 14       	cp	r4, r1
    1522:	51 04       	cpc	r5, r1
    1524:	71 f7       	brne	.-36     	; 0x1502 <vfprintf+0x18c>
    1526:	e5 c0       	rjmp	.+458    	; 0x16f2 <vfprintf+0x37c>
    1528:	84 36       	cpi	r24, 0x64	; 100
    152a:	11 f0       	breq	.+4      	; 0x1530 <vfprintf+0x1ba>
    152c:	89 36       	cpi	r24, 0x69	; 105
    152e:	39 f5       	brne	.+78     	; 0x157e <vfprintf+0x208>
    1530:	f8 01       	movw	r30, r16
    1532:	27 ff       	sbrs	r18, 7
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <vfprintf+0x1ce>
    1536:	60 81       	ld	r22, Z
    1538:	71 81       	ldd	r23, Z+1	; 0x01
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	0c 5f       	subi	r16, 0xFC	; 252
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	08 c0       	rjmp	.+16     	; 0x1554 <vfprintf+0x1de>
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	07 2e       	mov	r0, r23
    154a:	00 0c       	add	r0, r0
    154c:	88 0b       	sbc	r24, r24
    154e:	99 0b       	sbc	r25, r25
    1550:	0e 5f       	subi	r16, 0xFE	; 254
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	2f 76       	andi	r18, 0x6F	; 111
    1556:	72 2e       	mov	r7, r18
    1558:	97 ff       	sbrs	r25, 7
    155a:	09 c0       	rjmp	.+18     	; 0x156e <vfprintf+0x1f8>
    155c:	90 95       	com	r25
    155e:	80 95       	com	r24
    1560:	70 95       	com	r23
    1562:	61 95       	neg	r22
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	8f 4f       	sbci	r24, 0xFF	; 255
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	20 68       	ori	r18, 0x80	; 128
    156c:	72 2e       	mov	r7, r18
    156e:	2a e0       	ldi	r18, 0x0A	; 10
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	a4 01       	movw	r20, r8
    1574:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__ultoa_invert>
    1578:	a8 2e       	mov	r10, r24
    157a:	a8 18       	sub	r10, r8
    157c:	44 c0       	rjmp	.+136    	; 0x1606 <vfprintf+0x290>
    157e:	85 37       	cpi	r24, 0x75	; 117
    1580:	29 f4       	brne	.+10     	; 0x158c <vfprintf+0x216>
    1582:	2f 7e       	andi	r18, 0xEF	; 239
    1584:	b2 2e       	mov	r11, r18
    1586:	2a e0       	ldi	r18, 0x0A	; 10
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	25 c0       	rjmp	.+74     	; 0x15d6 <vfprintf+0x260>
    158c:	f2 2f       	mov	r31, r18
    158e:	f9 7f       	andi	r31, 0xF9	; 249
    1590:	bf 2e       	mov	r11, r31
    1592:	8f 36       	cpi	r24, 0x6F	; 111
    1594:	c1 f0       	breq	.+48     	; 0x15c6 <vfprintf+0x250>
    1596:	18 f4       	brcc	.+6      	; 0x159e <vfprintf+0x228>
    1598:	88 35       	cpi	r24, 0x58	; 88
    159a:	79 f0       	breq	.+30     	; 0x15ba <vfprintf+0x244>
    159c:	b4 c0       	rjmp	.+360    	; 0x1706 <vfprintf+0x390>
    159e:	80 37       	cpi	r24, 0x70	; 112
    15a0:	19 f0       	breq	.+6      	; 0x15a8 <vfprintf+0x232>
    15a2:	88 37       	cpi	r24, 0x78	; 120
    15a4:	21 f0       	breq	.+8      	; 0x15ae <vfprintf+0x238>
    15a6:	af c0       	rjmp	.+350    	; 0x1706 <vfprintf+0x390>
    15a8:	2f 2f       	mov	r18, r31
    15aa:	20 61       	ori	r18, 0x10	; 16
    15ac:	b2 2e       	mov	r11, r18
    15ae:	b4 fe       	sbrs	r11, 4
    15b0:	0d c0       	rjmp	.+26     	; 0x15cc <vfprintf+0x256>
    15b2:	8b 2d       	mov	r24, r11
    15b4:	84 60       	ori	r24, 0x04	; 4
    15b6:	b8 2e       	mov	r11, r24
    15b8:	09 c0       	rjmp	.+18     	; 0x15cc <vfprintf+0x256>
    15ba:	24 ff       	sbrs	r18, 4
    15bc:	0a c0       	rjmp	.+20     	; 0x15d2 <vfprintf+0x25c>
    15be:	9f 2f       	mov	r25, r31
    15c0:	96 60       	ori	r25, 0x06	; 6
    15c2:	b9 2e       	mov	r11, r25
    15c4:	06 c0       	rjmp	.+12     	; 0x15d2 <vfprintf+0x25c>
    15c6:	28 e0       	ldi	r18, 0x08	; 8
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <vfprintf+0x260>
    15cc:	20 e1       	ldi	r18, 0x10	; 16
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x260>
    15d2:	20 e1       	ldi	r18, 0x10	; 16
    15d4:	32 e0       	ldi	r19, 0x02	; 2
    15d6:	f8 01       	movw	r30, r16
    15d8:	b7 fe       	sbrs	r11, 7
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <vfprintf+0x274>
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	0c 5f       	subi	r16, 0xFC	; 252
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	06 c0       	rjmp	.+12     	; 0x15f6 <vfprintf+0x280>
    15ea:	60 81       	ld	r22, Z
    15ec:	71 81       	ldd	r23, Z+1	; 0x01
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 5f       	subi	r16, 0xFE	; 254
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	a4 01       	movw	r20, r8
    15f8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__ultoa_invert>
    15fc:	a8 2e       	mov	r10, r24
    15fe:	a8 18       	sub	r10, r8
    1600:	fb 2d       	mov	r31, r11
    1602:	ff 77       	andi	r31, 0x7F	; 127
    1604:	7f 2e       	mov	r7, r31
    1606:	76 fe       	sbrs	r7, 6
    1608:	0b c0       	rjmp	.+22     	; 0x1620 <vfprintf+0x2aa>
    160a:	37 2d       	mov	r19, r7
    160c:	3e 7f       	andi	r19, 0xFE	; 254
    160e:	a5 14       	cp	r10, r5
    1610:	50 f4       	brcc	.+20     	; 0x1626 <vfprintf+0x2b0>
    1612:	74 fe       	sbrs	r7, 4
    1614:	0a c0       	rjmp	.+20     	; 0x162a <vfprintf+0x2b4>
    1616:	72 fc       	sbrc	r7, 2
    1618:	08 c0       	rjmp	.+16     	; 0x162a <vfprintf+0x2b4>
    161a:	37 2d       	mov	r19, r7
    161c:	3e 7e       	andi	r19, 0xEE	; 238
    161e:	05 c0       	rjmp	.+10     	; 0x162a <vfprintf+0x2b4>
    1620:	ba 2c       	mov	r11, r10
    1622:	37 2d       	mov	r19, r7
    1624:	03 c0       	rjmp	.+6      	; 0x162c <vfprintf+0x2b6>
    1626:	ba 2c       	mov	r11, r10
    1628:	01 c0       	rjmp	.+2      	; 0x162c <vfprintf+0x2b6>
    162a:	b5 2c       	mov	r11, r5
    162c:	34 ff       	sbrs	r19, 4
    162e:	0d c0       	rjmp	.+26     	; 0x164a <vfprintf+0x2d4>
    1630:	fe 01       	movw	r30, r28
    1632:	ea 0d       	add	r30, r10
    1634:	f1 1d       	adc	r31, r1
    1636:	80 81       	ld	r24, Z
    1638:	80 33       	cpi	r24, 0x30	; 48
    163a:	11 f4       	brne	.+4      	; 0x1640 <vfprintf+0x2ca>
    163c:	39 7e       	andi	r19, 0xE9	; 233
    163e:	09 c0       	rjmp	.+18     	; 0x1652 <vfprintf+0x2dc>
    1640:	32 ff       	sbrs	r19, 2
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <vfprintf+0x2da>
    1644:	b3 94       	inc	r11
    1646:	b3 94       	inc	r11
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <vfprintf+0x2dc>
    164a:	83 2f       	mov	r24, r19
    164c:	86 78       	andi	r24, 0x86	; 134
    164e:	09 f0       	breq	.+2      	; 0x1652 <vfprintf+0x2dc>
    1650:	b3 94       	inc	r11
    1652:	33 fd       	sbrc	r19, 3
    1654:	13 c0       	rjmp	.+38     	; 0x167c <vfprintf+0x306>
    1656:	30 ff       	sbrs	r19, 0
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <vfprintf+0x2f0>
    165a:	5a 2c       	mov	r5, r10
    165c:	b3 14       	cp	r11, r3
    165e:	18 f4       	brcc	.+6      	; 0x1666 <vfprintf+0x2f0>
    1660:	53 0c       	add	r5, r3
    1662:	5b 18       	sub	r5, r11
    1664:	b3 2c       	mov	r11, r3
    1666:	b3 14       	cp	r11, r3
    1668:	68 f4       	brcc	.+26     	; 0x1684 <vfprintf+0x30e>
    166a:	b7 01       	movw	r22, r14
    166c:	80 e2       	ldi	r24, 0x20	; 32
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	3c 87       	std	Y+12, r19	; 0x0c
    1672:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    1676:	b3 94       	inc	r11
    1678:	3c 85       	ldd	r19, Y+12	; 0x0c
    167a:	f5 cf       	rjmp	.-22     	; 0x1666 <vfprintf+0x2f0>
    167c:	b3 14       	cp	r11, r3
    167e:	10 f4       	brcc	.+4      	; 0x1684 <vfprintf+0x30e>
    1680:	3b 18       	sub	r3, r11
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <vfprintf+0x310>
    1684:	31 2c       	mov	r3, r1
    1686:	34 ff       	sbrs	r19, 4
    1688:	12 c0       	rjmp	.+36     	; 0x16ae <vfprintf+0x338>
    168a:	b7 01       	movw	r22, r14
    168c:	80 e3       	ldi	r24, 0x30	; 48
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	3c 87       	std	Y+12, r19	; 0x0c
    1692:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    1696:	3c 85       	ldd	r19, Y+12	; 0x0c
    1698:	32 ff       	sbrs	r19, 2
    169a:	17 c0       	rjmp	.+46     	; 0x16ca <vfprintf+0x354>
    169c:	31 fd       	sbrc	r19, 1
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <vfprintf+0x330>
    16a0:	88 e7       	ldi	r24, 0x78	; 120
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <vfprintf+0x334>
    16a6:	88 e5       	ldi	r24, 0x58	; 88
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	b7 01       	movw	r22, r14
    16ac:	0c c0       	rjmp	.+24     	; 0x16c6 <vfprintf+0x350>
    16ae:	83 2f       	mov	r24, r19
    16b0:	86 78       	andi	r24, 0x86	; 134
    16b2:	59 f0       	breq	.+22     	; 0x16ca <vfprintf+0x354>
    16b4:	31 ff       	sbrs	r19, 1
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <vfprintf+0x346>
    16b8:	8b e2       	ldi	r24, 0x2B	; 43
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <vfprintf+0x348>
    16bc:	80 e2       	ldi	r24, 0x20	; 32
    16be:	37 fd       	sbrc	r19, 7
    16c0:	8d e2       	ldi	r24, 0x2D	; 45
    16c2:	b7 01       	movw	r22, r14
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    16ca:	a5 14       	cp	r10, r5
    16cc:	38 f4       	brcc	.+14     	; 0x16dc <vfprintf+0x366>
    16ce:	b7 01       	movw	r22, r14
    16d0:	80 e3       	ldi	r24, 0x30	; 48
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    16d8:	5a 94       	dec	r5
    16da:	f7 cf       	rjmp	.-18     	; 0x16ca <vfprintf+0x354>
    16dc:	aa 94       	dec	r10
    16de:	f4 01       	movw	r30, r8
    16e0:	ea 0d       	add	r30, r10
    16e2:	f1 1d       	adc	r31, r1
    16e4:	80 81       	ld	r24, Z
    16e6:	b7 01       	movw	r22, r14
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    16ee:	a1 10       	cpse	r10, r1
    16f0:	f5 cf       	rjmp	.-22     	; 0x16dc <vfprintf+0x366>
    16f2:	33 20       	and	r3, r3
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <vfprintf+0x382>
    16f6:	51 ce       	rjmp	.-862    	; 0x139a <vfprintf+0x24>
    16f8:	b7 01       	movw	r22, r14
    16fa:	80 e2       	ldi	r24, 0x20	; 32
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 02 09 	call	0x1204	; 0x1204 <fputc>
    1702:	3a 94       	dec	r3
    1704:	f6 cf       	rjmp	.-20     	; 0x16f2 <vfprintf+0x37c>
    1706:	f7 01       	movw	r30, r14
    1708:	86 81       	ldd	r24, Z+6	; 0x06
    170a:	97 81       	ldd	r25, Z+7	; 0x07
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x39c>
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	9f ef       	ldi	r25, 0xFF	; 255
    1712:	2c 96       	adiw	r28, 0x0c	; 12
    1714:	e2 e1       	ldi	r30, 0x12	; 18
    1716:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__epilogue_restores__>

0000171a <strnlen_P>:
    171a:	fc 01       	movw	r30, r24
    171c:	05 90       	lpm	r0, Z+
    171e:	61 50       	subi	r22, 0x01	; 1
    1720:	70 40       	sbci	r23, 0x00	; 0
    1722:	01 10       	cpse	r0, r1
    1724:	d8 f7       	brcc	.-10     	; 0x171c <strnlen_P+0x2>
    1726:	80 95       	com	r24
    1728:	90 95       	com	r25
    172a:	8e 0f       	add	r24, r30
    172c:	9f 1f       	adc	r25, r31
    172e:	08 95       	ret

00001730 <strnlen>:
    1730:	fc 01       	movw	r30, r24
    1732:	61 50       	subi	r22, 0x01	; 1
    1734:	70 40       	sbci	r23, 0x00	; 0
    1736:	01 90       	ld	r0, Z+
    1738:	01 10       	cpse	r0, r1
    173a:	d8 f7       	brcc	.-10     	; 0x1732 <strnlen+0x2>
    173c:	80 95       	com	r24
    173e:	90 95       	com	r25
    1740:	8e 0f       	add	r24, r30
    1742:	9f 1f       	adc	r25, r31
    1744:	08 95       	ret

00001746 <__ultoa_invert>:
    1746:	fa 01       	movw	r30, r20
    1748:	aa 27       	eor	r26, r26
    174a:	28 30       	cpi	r18, 0x08	; 8
    174c:	51 f1       	breq	.+84     	; 0x17a2 <__ultoa_invert+0x5c>
    174e:	20 31       	cpi	r18, 0x10	; 16
    1750:	81 f1       	breq	.+96     	; 0x17b2 <__ultoa_invert+0x6c>
    1752:	e8 94       	clt
    1754:	6f 93       	push	r22
    1756:	6e 7f       	andi	r22, 0xFE	; 254
    1758:	6e 5f       	subi	r22, 0xFE	; 254
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	af 4f       	sbci	r26, 0xFF	; 255
    1762:	b1 e0       	ldi	r27, 0x01	; 1
    1764:	3e d0       	rcall	.+124    	; 0x17e2 <__ultoa_invert+0x9c>
    1766:	b4 e0       	ldi	r27, 0x04	; 4
    1768:	3c d0       	rcall	.+120    	; 0x17e2 <__ultoa_invert+0x9c>
    176a:	67 0f       	add	r22, r23
    176c:	78 1f       	adc	r23, r24
    176e:	89 1f       	adc	r24, r25
    1770:	9a 1f       	adc	r25, r26
    1772:	a1 1d       	adc	r26, r1
    1774:	68 0f       	add	r22, r24
    1776:	79 1f       	adc	r23, r25
    1778:	8a 1f       	adc	r24, r26
    177a:	91 1d       	adc	r25, r1
    177c:	a1 1d       	adc	r26, r1
    177e:	6a 0f       	add	r22, r26
    1780:	71 1d       	adc	r23, r1
    1782:	81 1d       	adc	r24, r1
    1784:	91 1d       	adc	r25, r1
    1786:	a1 1d       	adc	r26, r1
    1788:	20 d0       	rcall	.+64     	; 0x17ca <__ultoa_invert+0x84>
    178a:	09 f4       	brne	.+2      	; 0x178e <__ultoa_invert+0x48>
    178c:	68 94       	set
    178e:	3f 91       	pop	r19
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	26 9f       	mul	r18, r22
    1794:	11 24       	eor	r1, r1
    1796:	30 19       	sub	r19, r0
    1798:	30 5d       	subi	r19, 0xD0	; 208
    179a:	31 93       	st	Z+, r19
    179c:	de f6       	brtc	.-74     	; 0x1754 <__ultoa_invert+0xe>
    179e:	cf 01       	movw	r24, r30
    17a0:	08 95       	ret
    17a2:	46 2f       	mov	r20, r22
    17a4:	47 70       	andi	r20, 0x07	; 7
    17a6:	40 5d       	subi	r20, 0xD0	; 208
    17a8:	41 93       	st	Z+, r20
    17aa:	b3 e0       	ldi	r27, 0x03	; 3
    17ac:	0f d0       	rcall	.+30     	; 0x17cc <__ultoa_invert+0x86>
    17ae:	c9 f7       	brne	.-14     	; 0x17a2 <__ultoa_invert+0x5c>
    17b0:	f6 cf       	rjmp	.-20     	; 0x179e <__ultoa_invert+0x58>
    17b2:	46 2f       	mov	r20, r22
    17b4:	4f 70       	andi	r20, 0x0F	; 15
    17b6:	40 5d       	subi	r20, 0xD0	; 208
    17b8:	4a 33       	cpi	r20, 0x3A	; 58
    17ba:	18 f0       	brcs	.+6      	; 0x17c2 <__ultoa_invert+0x7c>
    17bc:	49 5d       	subi	r20, 0xD9	; 217
    17be:	31 fd       	sbrc	r19, 1
    17c0:	40 52       	subi	r20, 0x20	; 32
    17c2:	41 93       	st	Z+, r20
    17c4:	02 d0       	rcall	.+4      	; 0x17ca <__ultoa_invert+0x84>
    17c6:	a9 f7       	brne	.-22     	; 0x17b2 <__ultoa_invert+0x6c>
    17c8:	ea cf       	rjmp	.-44     	; 0x179e <__ultoa_invert+0x58>
    17ca:	b4 e0       	ldi	r27, 0x04	; 4
    17cc:	a6 95       	lsr	r26
    17ce:	97 95       	ror	r25
    17d0:	87 95       	ror	r24
    17d2:	77 95       	ror	r23
    17d4:	67 95       	ror	r22
    17d6:	ba 95       	dec	r27
    17d8:	c9 f7       	brne	.-14     	; 0x17cc <__ultoa_invert+0x86>
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	61 05       	cpc	r22, r1
    17de:	71 05       	cpc	r23, r1
    17e0:	08 95       	ret
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
    17e6:	0a 2e       	mov	r0, r26
    17e8:	06 94       	lsr	r0
    17ea:	57 95       	ror	r21
    17ec:	47 95       	ror	r20
    17ee:	37 95       	ror	r19
    17f0:	27 95       	ror	r18
    17f2:	ba 95       	dec	r27
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__ultoa_invert+0xa2>
    17f6:	62 0f       	add	r22, r18
    17f8:	73 1f       	adc	r23, r19
    17fa:	84 1f       	adc	r24, r20
    17fc:	95 1f       	adc	r25, r21
    17fe:	a0 1d       	adc	r26, r0
    1800:	08 95       	ret

00001802 <__muluhisi3>:
    1802:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__umulhisi3>
    1806:	a5 9f       	mul	r26, r21
    1808:	90 0d       	add	r25, r0
    180a:	b4 9f       	mul	r27, r20
    180c:	90 0d       	add	r25, r0
    180e:	a4 9f       	mul	r26, r20
    1810:	80 0d       	add	r24, r0
    1812:	91 1d       	adc	r25, r1
    1814:	11 24       	eor	r1, r1
    1816:	08 95       	ret

00001818 <__mulshisi3>:
    1818:	b7 ff       	sbrs	r27, 7
    181a:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__muluhisi3>

0000181e <__mulohisi3>:
    181e:	0e 94 01 0c 	call	0x1802	; 0x1802 <__muluhisi3>
    1822:	82 1b       	sub	r24, r18
    1824:	93 0b       	sbc	r25, r19
    1826:	08 95       	ret

00001828 <__prologue_saves__>:
    1828:	2f 92       	push	r2
    182a:	3f 92       	push	r3
    182c:	4f 92       	push	r4
    182e:	5f 92       	push	r5
    1830:	6f 92       	push	r6
    1832:	7f 92       	push	r7
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	ca 1b       	sub	r28, r26
    1852:	db 0b       	sbc	r29, r27
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	09 94       	ijmp

00001860 <__epilogue_restores__>:
    1860:	2a 88       	ldd	r2, Y+18	; 0x12
    1862:	39 88       	ldd	r3, Y+17	; 0x11
    1864:	48 88       	ldd	r4, Y+16	; 0x10
    1866:	5f 84       	ldd	r5, Y+15	; 0x0f
    1868:	6e 84       	ldd	r6, Y+14	; 0x0e
    186a:	7d 84       	ldd	r7, Y+13	; 0x0d
    186c:	8c 84       	ldd	r8, Y+12	; 0x0c
    186e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1870:	aa 84       	ldd	r10, Y+10	; 0x0a
    1872:	b9 84       	ldd	r11, Y+9	; 0x09
    1874:	c8 84       	ldd	r12, Y+8	; 0x08
    1876:	df 80       	ldd	r13, Y+7	; 0x07
    1878:	ee 80       	ldd	r14, Y+6	; 0x06
    187a:	fd 80       	ldd	r15, Y+5	; 0x05
    187c:	0c 81       	ldd	r16, Y+4	; 0x04
    187e:	1b 81       	ldd	r17, Y+3	; 0x03
    1880:	aa 81       	ldd	r26, Y+2	; 0x02
    1882:	b9 81       	ldd	r27, Y+1	; 0x01
    1884:	ce 0f       	add	r28, r30
    1886:	d1 1d       	adc	r29, r1
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	ed 01       	movw	r28, r26
    1894:	08 95       	ret

00001896 <__umulhisi3>:
    1896:	a2 9f       	mul	r26, r18
    1898:	b0 01       	movw	r22, r0
    189a:	b3 9f       	mul	r27, r19
    189c:	c0 01       	movw	r24, r0
    189e:	a3 9f       	mul	r26, r19
    18a0:	70 0d       	add	r23, r0
    18a2:	81 1d       	adc	r24, r1
    18a4:	11 24       	eor	r1, r1
    18a6:	91 1d       	adc	r25, r1
    18a8:	b2 9f       	mul	r27, r18
    18aa:	70 0d       	add	r23, r0
    18ac:	81 1d       	adc	r24, r1
    18ae:	11 24       	eor	r1, r1
    18b0:	91 1d       	adc	r25, r1
    18b2:	08 95       	ret

000018b4 <_exit>:
    18b4:	f8 94       	cli

000018b6 <__stop_program>:
    18b6:	ff cf       	rjmp	.-2      	; 0x18b6 <__stop_program>
