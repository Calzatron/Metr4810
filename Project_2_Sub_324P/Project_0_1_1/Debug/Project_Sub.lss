
Project_Sub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00001c2a  00001cbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  0080017e  0080017e  00001d3c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001288  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  000031d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd3  00000000  00000000  000038ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00004880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6a  00000000  00000000  000050c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__vector_13>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      50:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_20>
      54:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_21>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      6c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      70:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      74:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      78:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      7c:	a8 03       	fmulsu	r18, r16
      7e:	c4 03       	fmuls	r20, r20
      80:	c4 03       	fmuls	r20, r20
      82:	c4 03       	fmuls	r20, r20
      84:	c4 03       	fmuls	r20, r20
      86:	c4 03       	fmuls	r20, r20
      88:	c4 03       	fmuls	r20, r20
      8a:	c4 03       	fmuls	r20, r20
      8c:	c4 03       	fmuls	r20, r20
      8e:	c4 03       	fmuls	r20, r20
      90:	c4 03       	fmuls	r20, r20
      92:	e6 03       	fmuls	r22, r22
      94:	c4 03       	fmuls	r20, r20
      96:	c8 02       	muls	r28, r24
      98:	c4 03       	fmuls	r20, r20
      9a:	c4 03       	fmuls	r20, r20
      9c:	2a 03       	fmul	r18, r18
      9e:	2f 03       	fmul	r18, r23
      a0:	35 03       	mulsu	r19, r21
      a2:	3b 03       	fmul	r19, r19
      a4:	41 03       	mulsu	r20, r17
      a6:	47 03       	mulsu	r20, r23
      a8:	c4 03       	fmuls	r20, r20
      aa:	c4 03       	fmuls	r20, r20
      ac:	c4 03       	fmuls	r20, r20
      ae:	c4 03       	fmuls	r20, r20
      b0:	c4 03       	fmuls	r20, r20
      b2:	c4 03       	fmuls	r20, r20
      b4:	c4 03       	fmuls	r20, r20
      b6:	bf 02       	muls	r27, r31
      b8:	c4 03       	fmuls	r20, r20
      ba:	e6 03       	fmuls	r22, r22
      bc:	c4 03       	fmuls	r20, r20
      be:	c4 03       	fmuls	r20, r20
      c0:	c4 03       	fmuls	r20, r20
      c2:	c4 03       	fmuls	r20, r20
      c4:	c4 03       	fmuls	r20, r20
      c6:	c4 03       	fmuls	r20, r20
      c8:	c4 03       	fmuls	r20, r20
      ca:	c4 03       	fmuls	r20, r20
      cc:	c4 03       	fmuls	r20, r20
      ce:	c4 03       	fmuls	r20, r20
      d0:	c4 03       	fmuls	r20, r20
      d2:	c4 03       	fmuls	r20, r20
      d4:	c4 03       	fmuls	r20, r20
      d6:	c4 03       	fmuls	r20, r20
      d8:	c4 03       	fmuls	r20, r20
      da:	c4 03       	fmuls	r20, r20
      dc:	c4 03       	fmuls	r20, r20
      de:	c4 03       	fmuls	r20, r20
      e0:	c4 03       	fmuls	r20, r20
      e2:	c4 03       	fmuls	r20, r20
      e4:	c4 03       	fmuls	r20, r20
      e6:	c4 03       	fmuls	r20, r20
      e8:	c4 03       	fmuls	r20, r20
      ea:	c4 03       	fmuls	r20, r20
      ec:	c4 03       	fmuls	r20, r20
      ee:	c4 03       	fmuls	r20, r20
      f0:	c4 03       	fmuls	r20, r20
      f2:	4d 03       	fmul	r20, r21
      f4:	c4 03       	fmuls	r20, r20
      f6:	7b 03       	fmul	r23, r19
      f8:	c4 03       	fmuls	r20, r20
      fa:	c4 03       	fmuls	r20, r20
      fc:	25 03       	mulsu	r18, r21
      fe:	a6 02       	muls	r26, r22
     100:	c4 03       	fmuls	r20, r20
     102:	c4 03       	fmuls	r20, r20
     104:	b0 02       	muls	r27, r16
     106:	d1 02       	muls	r29, r17
     108:	c4 03       	fmuls	r20, r20
     10a:	b3 03       	fmuls	r19, r19
     10c:	af 03       	fmulsu	r18, r23
     10e:	c4 03       	fmuls	r20, r20
     110:	c4 03       	fmuls	r20, r20
     112:	c4 03       	fmuls	r20, r20
     114:	c4 03       	fmuls	r20, r20
     116:	c4 03       	fmuls	r20, r20
     118:	c4 03       	fmuls	r20, r20
     11a:	b7 03       	fmuls	r19, r23
     11c:	c4 03       	fmuls	r20, r20
     11e:	fb 02       	muls	r31, r27
     120:	ba 02       	muls	r27, r26
     122:	ab 02       	muls	r26, r27
     124:	c4 03       	fmuls	r20, r20
     126:	c4 03       	fmuls	r20, r20
     128:	c4 03       	fmuls	r20, r20
     12a:	b5 02       	muls	r27, r21

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d8 e0       	ldi	r29, 0x08	; 8
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	ea e2       	ldi	r30, 0x2A	; 42
     140:	fc e1       	ldi	r31, 0x1C	; 28
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	ae 37       	cpi	r26, 0x7E	; 126
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	22 e0       	ldi	r18, 0x02	; 2
     150:	ae e7       	ldi	r26, 0x7E	; 126
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a9 3a       	cpi	r26, 0xA9	; 169
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <main>
     162:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <_exit>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     16a:	2f b7       	in	r18, 0x3f	; 63
     16c:	20 78       	andi	r18, 0x80	; 128
     16e:	02 c0       	rjmp	.+4      	; 0x174 <uart_put_char+0xa>
     170:	22 23       	and	r18, r18
     172:	29 f1       	breq	.+74     	; 0x1be <uart_put_char+0x54>
     174:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <bytes_in_out_buffer>
     178:	9f 3f       	cpi	r25, 0xFF	; 255
     17a:	d1 f3       	breq	.-12     	; 0x170 <uart_put_char+0x6>
     17c:	f8 94       	cli
     17e:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <out_insert_pos>
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	9e 0f       	add	r25, r30
     186:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <out_insert_pos>
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ea 57       	subi	r30, 0x7A	; 122
     18e:	fe 4f       	sbci	r31, 0xFE	; 254
     190:	80 83       	st	Z, r24
     192:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <bytes_in_out_buffer>
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <bytes_in_out_buffer>
     19c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <out_insert_pos>
     1a0:	8f 3f       	cpi	r24, 0xFF	; 255
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <uart_put_char+0x3e>
     1a4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <out_insert_pos>
     1a8:	e1 ec       	ldi	r30, 0xC1	; 193
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	80 62       	ori	r24, 0x20	; 32
     1b0:	80 83       	st	Z, r24
     1b2:	22 23       	and	r18, r18
     1b4:	39 f0       	breq	.+14     	; 0x1c4 <uart_put_char+0x5a>
     1b6:	78 94       	sei
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	08 95       	ret
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	08 95       	ret
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	08 95       	ret

000001ca <uart_get_char>:
     1ca:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <bytes_in_input_buffer>
     1ce:	88 23       	and	r24, r24
     1d0:	e1 f3       	breq	.-8      	; 0x1ca <uart_get_char>
     1d2:	2f b7       	in	r18, 0x3f	; 63
     1d4:	20 78       	andi	r18, 0x80	; 128
     1d6:	f8 94       	cli
     1d8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <input_insert_pos>
     1dc:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <bytes_in_input_buffer>
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	83 1b       	sub	r24, r19
     1e4:	91 09       	sbc	r25, r1
     1e6:	5a f4       	brpl	.+22     	; 0x1fe <uart_get_char+0x34>
     1e8:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <input_insert_pos>
     1ec:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <bytes_in_input_buffer>
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	e8 1b       	sub	r30, r24
     1f4:	f1 09       	sbc	r31, r1
     1f6:	ea 56       	subi	r30, 0x6A	; 106
     1f8:	fd 4f       	sbci	r31, 0xFD	; 253
     1fa:	80 81       	ld	r24, Z
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <uart_get_char+0x48>
     1fe:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <input_insert_pos>
     202:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <bytes_in_input_buffer>
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	e8 1b       	sub	r30, r24
     20a:	f1 09       	sbc	r31, r1
     20c:	ea 57       	subi	r30, 0x7A	; 122
     20e:	fd 4f       	sbci	r31, 0xFD	; 253
     210:	80 81       	ld	r24, Z
     212:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <bytes_in_input_buffer>
     216:	91 50       	subi	r25, 0x01	; 1
     218:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <bytes_in_input_buffer>
     21c:	22 23       	and	r18, r18
     21e:	09 f0       	breq	.+2      	; 0x222 <uart_get_char+0x58>
     220:	78 94       	sei
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	08 95       	ret

00000226 <init_serial_stdio>:
     226:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <out_insert_pos>
     22a:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <bytes_in_out_buffer>
     22e:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <input_insert_pos>
     232:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <bytes_in_input_buffer>
     236:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <input_overrun>
     23a:	40 93 7e 01 	sts	0x017E, r20	; 0x80017e <__data_end>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	aa 1f       	adc	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	aa 1f       	adc	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	9c 01       	movw	r18, r24
     254:	ad 01       	movw	r20, r26
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	44 1f       	adc	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	72 e1       	ldi	r23, 0x12	; 18
     262:	8a e7       	ldi	r24, 0x7A	; 122
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 93 08 	call	0x1126	; 0x1126 <__divmodsi4>
     26a:	ba 01       	movw	r22, r20
     26c:	a9 01       	movw	r20, r18
     26e:	4f 5f       	subi	r20, 0xFF	; 255
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	6f 4f       	sbci	r22, 0xFF	; 255
     274:	7f 4f       	sbci	r23, 0xFF	; 255
     276:	db 01       	movw	r26, r22
     278:	ca 01       	movw	r24, r20
     27a:	1a f4       	brpl	.+6      	; 0x282 <init_serial_stdio+0x5c>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	b5 95       	asr	r27
     284:	a7 95       	ror	r26
     286:	97 95       	ror	r25
     288:	87 95       	ror	r24
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     290:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     294:	e1 ec       	ldi	r30, 0xC1	; 193
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	88 e1       	ldi	r24, 0x18	; 24
     29a:	80 83       	st	Z, r24
     29c:	80 81       	ld	r24, Z
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	80 83       	st	Z, r24
     2a2:	e3 ea       	ldi	r30, 0xA3	; 163
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	93 83       	std	Z+3, r25	; 0x03
     2ac:	82 83       	std	Z+2, r24	; 0x02
     2ae:	91 83       	std	Z+1, r25	; 0x01
     2b0:	80 83       	st	Z, r24
     2b2:	08 95       	ret

000002b4 <serial_input_available>:
     2b4:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <bytes_in_input_buffer>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	91 11       	cpse	r25, r1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <serial_input_available+0xc>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     2d6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <bytes_in_out_buffer>
     2da:	88 23       	and	r24, r24
     2dc:	29 f1       	breq	.+74     	; 0x328 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     2de:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <out_insert_pos>
     2e2:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <bytes_in_out_buffer>
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	82 1b       	sub	r24, r18
     2ea:	91 09       	sbc	r25, r1
     2ec:	5a f4       	brpl	.+22     	; 0x304 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2ee:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <out_insert_pos>
     2f2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e8 1b       	sub	r30, r24
     2fa:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2fc:	eb 57       	subi	r30, 0x7B	; 123
     2fe:	fd 4f       	sbci	r31, 0xFD	; 253
     300:	90 81       	ld	r25, Z
     302:	0a c0       	rjmp	.+20     	; 0x318 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     304:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <out_insert_pos>
     308:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <bytes_in_out_buffer>
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	e8 1b       	sub	r30, r24
     310:	f1 09       	sbc	r31, r1
     312:	ea 57       	subi	r30, 0x7A	; 122
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     318:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <bytes_in_out_buffer>
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     322:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     326:	05 c0       	rjmp	.+10     	; 0x332 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     328:	e1 ec       	ldi	r30, 0xC1	; 193
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7d       	andi	r24, 0xDF	; 223
     330:	80 83       	st	Z, r24
	}
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	2f 91       	pop	r18
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	cf 93       	push	r28
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     36a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     36e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     372:	88 23       	and	r24, r24
     374:	49 f0       	breq	.+18     	; 0x388 <__vector_20+0x42>
     376:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <bytes_in_out_buffer>
     37a:	8f 3f       	cpi	r24, 0xFF	; 255
     37c:	29 f0       	breq	.+10     	; 0x388 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8c 2f       	mov	r24, r28
     384:	0e 94 b5 00 	call	0x16a	; 0x16a <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     388:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <bytes_in_input_buffer>
     38c:	80 31       	cpi	r24, 0x10	; 16
     38e:	20 f0       	brcs	.+8      	; 0x398 <__vector_20+0x52>
		input_overrun = 1;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <input_overrun>
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     398:	cd 30       	cpi	r28, 0x0D	; 13
     39a:	09 f4       	brne	.+2      	; 0x39e <__vector_20+0x58>
			c = '\n';
     39c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     39e:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <input_insert_pos>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	8e 0f       	add	r24, r30
     3a6:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <input_insert_pos>
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	ea 57       	subi	r30, 0x7A	; 122
     3ae:	fd 4f       	sbci	r31, 0xFD	; 253
     3b0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     3b2:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <bytes_in_input_buffer>
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     3bc:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <input_insert_pos>
     3c0:	80 31       	cpi	r24, 0x10	; 16
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     3c4:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <input_insert_pos>
		}
	}
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	cf 91       	pop	r28
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	7f 91       	pop	r23
     3d8:	6f 91       	pop	r22
     3da:	5f 91       	pop	r21
     3dc:	4f 91       	pop	r20
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <init_tcnt0>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT0 = 0;
     3ec:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
     3ee:	17 bc       	out	0x27, r1	; 39
	//OCR0B = 124;
	

	TCCR0A |= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | _BV(WGM00) | _BV(WGM01);
     3f0:	84 b5       	in	r24, 0x24	; 36
     3f2:	83 68       	ori	r24, 0x83	; 131
     3f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS10);
     3f6:	85 b5       	in	r24, 0x25	; 37
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	85 bd       	out	0x25, r24	; 37
     3fc:	08 95       	ret

000003fe <init_tcnt2>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
     3fe:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 124;
     402:	8c e7       	ldi	r24, 0x7C	; 124
     404:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 124;
     408:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	

	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
     40c:	e0 eb       	ldi	r30, 0xB0	; 176
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	83 6a       	ori	r24, 0xA3	; 163
     414:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
     416:	e1 eb       	ldi	r30, 0xB1	; 177
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 83       	st	Z, r24
     420:	08 95       	ret

00000422 <makeInfo>:
	}
}

info* makeInfo(void) {
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 ee 08 	call	0x11dc	; 0x11dc <malloc>
	return info_ptr;
}
     42a:	08 95       	ret

0000042c <initialise>:
	
}



void initialise(info* info_ptr){
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24

	DDRA = (1<<PORTA0)|(1<<PORTA1);
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	81 b9       	out	0x01, r24	; 1
	DDRB = (1<<PORTB3);			/*	PWM camera	*/
     43a:	88 e0       	ldi	r24, 0x08	; 8
     43c:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5)|(1<<PORTC0)|(1<<PORTC1);
     43e:	8f e3       	ldi	r24, 0x3F	; 63
     440:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
     442:	8e ef       	ldi	r24, 0xFE	; 254
     444:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
     446:	50 98       	cbi	0x0a, 0	; 10
	init_serial_stdio(9600,0);
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	60 e8       	ldi	r22, 0x80	; 128
     44c:	75 e2       	ldi	r23, 0x25	; 37
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 13 01 	call	0x226	; 0x226 <init_serial_stdio>

	init_tcnt0();				/*	Camera PWM	*/
     456:	0e 94 f6 01 	call	0x3ec	; 0x3ec <init_tcnt0>
	init_tcnt1();				/*	Timer		*/
     45a:	0e 94 29 08 	call	0x1052	; 0x1052 <init_tcnt1>
	init_tcnt2();				/*	Motor PWM	*/
     45e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <init_tcnt2>
	init_step();
     462:	0e 94 14 05 	call	0xa28	; 0xa28 <init_step>
	srand(get_tcnt1_ticks());
     466:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     46a:	cb 01       	movw	r24, r22
     46c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <srand>
	sei();
     470:	78 94       	sei
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     472:	c3 ea       	ldi	r28, 0xA3	; 163
     474:	d2 e0       	ldi	r29, 0x02	; 2
	srand(get_tcnt1_ticks());
	sei();
	
		
	uint8_t check = 1;
	while (check){
     476:	20 c0       	rjmp	.+64     	; 0x4b8 <initialise+0x8c>
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     478:	88 81       	ld	r24, Y
     47a:	99 81       	ldd	r25, Y+1	; 0x01
     47c:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <fgetc>
			if (start == 'o'){
     480:	8f 36       	cpi	r24, 0x6F	; 111
     482:	d1 f4       	brne	.+52     	; 0x4b8 <initialise+0x8c>
				fputs("Start\n", stdout);
     484:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__iob+0x2>
     488:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__iob+0x3>
     48c:	46 e0       	ldi	r20, 0x06	; 6
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 0f 0b 	call	0x161e	; 0x161e <fwrite>
				
		}
			
	}

	info_ptr->start = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	f8 01       	movw	r30, r16
     4a0:	87 83       	std	Z+7, r24	; 0x07
	info_ptr->stepAct = '\0';
     4a2:	14 82       	std	Z+4, r1	; 0x04
	info_ptr->maxStep = 150;
     4a4:	86 e9       	ldi	r24, 0x96	; 150
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	93 83       	std	Z+3, r25	; 0x03
     4aa:	82 83       	std	Z+2, r24	; 0x02
	info_ptr->camera = 0;
     4ac:	16 82       	std	Z+6, r1	; 0x06
	info_ptr->pwmSpeed = 0;
     4ae:	10 82       	st	Z, r1
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper
     4b0:	8b b1       	in	r24, 0x0b	; 11
     4b2:	80 63       	ori	r24, 0x30	; 48
     4b4:	8b b9       	out	0x0b, r24	; 11
	
}
     4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <initialise+0x96>
	
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
     4b8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     4bc:	88 23       	and	r24, r24
     4be:	e1 f3       	breq	.-8      	; 0x4b8 <initialise+0x8c>
     4c0:	db cf       	rjmp	.-74     	; 0x478 <initialise+0x4c>
	info_ptr->maxStep = 150;
	info_ptr->camera = 0;
	info_ptr->pwmSpeed = 0;
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper
	
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	08 95       	ret

000004cc <custom_delay>:




void custom_delay(uint32_t ticks){
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	6b 01       	movw	r12, r22
     4d6:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt1 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt1_ticks();
     4d8:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
	while((current_time + ticks) > get_tcnt1_ticks()){
     4dc:	c6 0e       	add	r12, r22
     4de:	d7 1e       	adc	r13, r23
     4e0:	e8 1e       	adc	r14, r24
     4e2:	f9 1e       	adc	r15, r25
     4e4:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     4e8:	6c 15       	cp	r22, r12
     4ea:	7d 05       	cpc	r23, r13
     4ec:	8e 05       	cpc	r24, r14
     4ee:	9f 05       	cpc	r25, r15
     4f0:	c8 f3       	brcs	.-14     	; 0x4e4 <custom_delay+0x18>
		;
	}
}
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <input>:
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}


void input(info* info_ptr){
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	64 97       	sbiw	r28, 0x14	; 20
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	7c 01       	movw	r14, r24
	
	if(!serial_input_available()){
     51e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     522:	88 23       	and	r24, r24
     524:	09 f4       	brne	.+2      	; 0x528 <input+0x2c>
     526:	59 c1       	rjmp	.+690    	; 0x7da <input+0x2de>
		return;
		
	}

	char c = fgetc(stdin);
     528:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <__iob>
     52c:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <__iob+0x1>
     530:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <fgetc>
     534:	8c 01       	movw	r16, r24
     536:	11 27       	eor	r17, r17
	int16_t speed;
	char buffer[20];
	
	switch(c){
     538:	f8 01       	movw	r30, r16
     53a:	b0 97       	sbiw	r30, 0x20	; 32
     53c:	e8 35       	cpi	r30, 0x58	; 88
     53e:	f1 05       	cpc	r31, r1
     540:	08 f0       	brcs	.+2      	; 0x544 <input+0x48>
     542:	22 c1       	rjmp	.+580    	; 0x788 <input+0x28c>
     544:	e2 5c       	subi	r30, 0xC2	; 194
     546:	ff 4f       	sbci	r31, 0xFF	; 255
     548:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__tablejump2__>
		
		case 'a' :
			// turn left
			PORTD &= ~(1<<PORTD2);
     54c:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     54e:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC0);
     550:	40 9a       	sbi	0x08, 0	; 8
			PORTC &= ~(1<<PORTC1);
     552:	41 98       	cbi	0x08, 1	; 8
			break;
     554:	3b c1       	rjmp	.+630    	; 0x7cc <input+0x2d0>
		case 's' :
			// backwards
			PORTD &= ~(1<<PORTD2);
     556:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     558:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC0);
     55a:	40 98       	cbi	0x08, 0	; 8
			PORTC |= (1<<PORTC1);
     55c:	41 9a       	sbi	0x08, 1	; 8
			break;
     55e:	36 c1       	rjmp	.+620    	; 0x7cc <input+0x2d0>
		case 'd' :
			// turn right
			PORTD |= (1<<PORTD2);
     560:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     562:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC0);
     564:	40 98       	cbi	0x08, 0	; 8
			PORTC |= (1<<PORTC1);
     566:	41 9a       	sbi	0x08, 1	; 8
			break;
     568:	31 c1       	rjmp	.+610    	; 0x7cc <input+0x2d0>
		case 'w' :
			// forward
			PORTD |= (1<<PORTD2);
     56a:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     56c:	5b 98       	cbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC0);
     56e:	40 9a       	sbi	0x08, 0	; 8
			PORTC &= ~(1<<PORTC1);
     570:	41 98       	cbi	0x08, 1	; 8
			break;
     572:	2c c1       	rjmp	.+600    	; 0x7cc <input+0x2d0>
		case 'r' :
			// release claw
			release_step();
     574:	0e 94 57 05 	call	0xaae	; 0xaae <release_step>
			info_ptr->stepAct = '\0';
     578:	f7 01       	movw	r30, r14
     57a:	14 82       	std	Z+4, r1	; 0x04
			break;
     57c:	27 c1       	rjmp	.+590    	; 0x7cc <input+0x2d0>
			// rely to winch to lift up
			//fputc('+', stdout);
			break;
		case '=' :
			// someone panic'd; winch to lift up
			fputc('+', stdout);
     57e:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <__iob+0x2>
     582:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <__iob+0x3>
     586:	8b e2       	ldi	r24, 0x2B	; 43
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
			break;
     58e:	1e c1       	rjmp	.+572    	; 0x7cc <input+0x2d0>
		case '-' :
			// lower
			fputc('_', stdout);
     590:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <__iob+0x2>
     594:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <__iob+0x3>
     598:	8f e5       	ldi	r24, 0x5F	; 95
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
			break;
     5a0:	15 c1       	rjmp	.+554    	; 0x7cc <input+0x2d0>
		case 'e' :
			// activate claw
			if (info_ptr->stepSpeed < 0){
     5a2:	f7 01       	movw	r30, r14
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
     5a6:	88 23       	and	r24, r24
     5a8:	14 f4       	brge	.+4      	; 0x5ae <input+0xb2>
				info_ptr->stepSpeed = -info_ptr->stepSpeed;
     5aa:	81 95       	neg	r24
     5ac:	81 83       	std	Z+1, r24	; 0x01
			}

			sprintf(buffer, "activate %d\n", info_ptr->stepSpeed);
     5ae:	f7 01       	movw	r30, r14
     5b0:	81 81       	ldd	r24, Z+1	; 0x01
     5b2:	28 2f       	mov	r18, r24
     5b4:	08 2e       	mov	r0, r24
     5b6:	00 0c       	add	r0, r0
     5b8:	33 0b       	sbc	r19, r19
     5ba:	3f 93       	push	r19
     5bc:	8f 93       	push	r24
     5be:	8f e1       	ldi	r24, 0x1F	; 31
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	ce 01       	movw	r24, r28
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	6c 01       	movw	r12, r24
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 43 0b 	call	0x1686	; 0x1686 <sprintf>
			fputs(buffer, stdout);
     5d4:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <__iob+0x2>
     5d8:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <__iob+0x3>
     5dc:	c6 01       	movw	r24, r12
     5de:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fputs>
			info_ptr->stepAct = 'A';
     5e2:	81 e4       	ldi	r24, 0x41	; 65
     5e4:	f7 01       	movw	r30, r14
     5e6:	84 83       	std	Z+4, r24	; 0x04
			break;
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	eb c0       	rjmp	.+470    	; 0x7cc <input+0x2d0>
		case 'q' :
			// retract claw
			if (info_ptr->stepSpeed > 0){
     5f6:	f7 01       	movw	r30, r14
     5f8:	81 81       	ldd	r24, Z+1	; 0x01
     5fa:	18 16       	cp	r1, r24
     5fc:	14 f4       	brge	.+4      	; 0x602 <input+0x106>
					info_ptr->stepSpeed = -info_ptr->stepSpeed;
     5fe:	81 95       	neg	r24
     600:	81 83       	std	Z+1, r24	; 0x01
			}
			/************sends negative to activate winch *******/
			sprintf(buffer, "retract %d\n", info_ptr->stepSpeed);
     602:	f7 01       	movw	r30, r14
     604:	81 81       	ldd	r24, Z+1	; 0x01
     606:	28 2f       	mov	r18, r24
     608:	08 2e       	mov	r0, r24
     60a:	00 0c       	add	r0, r0
     60c:	33 0b       	sbc	r19, r19
     60e:	3f 93       	push	r19
     610:	8f 93       	push	r24
     612:	8c e2       	ldi	r24, 0x2C	; 44
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	6c 01       	movw	r12, r24
     620:	9f 93       	push	r25
     622:	8f 93       	push	r24
     624:	0e 94 43 0b 	call	0x1686	; 0x1686 <sprintf>
			fputs(buffer, stdout);
     628:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <__iob+0x2>
     62c:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <__iob+0x3>
     630:	c6 01       	movw	r24, r12
     632:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fputs>
			info_ptr->stepAct = 'R';
     636:	82 e5       	ldi	r24, 0x52	; 82
     638:	f7 01       	movw	r30, r14
     63a:	84 83       	std	Z+4, r24	; 0x04
			break;
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	c1 c0       	rjmp	.+386    	; 0x7cc <input+0x2d0>
		case '`' :
			info_ptr->pwmSpeed = 0;
     64a:	f7 01       	movw	r30, r14
     64c:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 87       	std	Z+8, r24	; 0x08
			break;
     652:	bc c0       	rjmp	.+376    	; 0x7cc <input+0x2d0>
		case '0' :
			info_ptr->pwmSpeed = 0;
     654:	f7 01       	movw	r30, r14
     656:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 87       	std	Z+8, r24	; 0x08
			break;
     65c:	b7 c0       	rjmp	.+366    	; 0x7cc <input+0x2d0>
		case '1' :
			info_ptr->pwmSpeed = 20;
     65e:	84 e1       	ldi	r24, 0x14	; 20
     660:	f7 01       	movw	r30, r14
     662:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 87       	std	Z+8, r24	; 0x08
			break;
     668:	b1 c0       	rjmp	.+354    	; 0x7cc <input+0x2d0>
		case '2' :
			info_ptr->pwmSpeed = 40;
     66a:	88 e2       	ldi	r24, 0x28	; 40
     66c:	f7 01       	movw	r30, r14
     66e:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 87       	std	Z+8, r24	; 0x08
			break;
     674:	ab c0       	rjmp	.+342    	; 0x7cc <input+0x2d0>
		case '3' :
			info_ptr->pwmSpeed = 60;
     676:	8c e3       	ldi	r24, 0x3C	; 60
     678:	f7 01       	movw	r30, r14
     67a:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 87       	std	Z+8, r24	; 0x08
			break;
     680:	a5 c0       	rjmp	.+330    	; 0x7cc <input+0x2d0>
		case '4' :
			info_ptr->pwmSpeed = 80;
     682:	80 e5       	ldi	r24, 0x50	; 80
     684:	f7 01       	movw	r30, r14
     686:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 87       	std	Z+8, r24	; 0x08
			break;
     68c:	9f c0       	rjmp	.+318    	; 0x7cc <input+0x2d0>
		case '5' :
			info_ptr->pwmSpeed = 100;
     68e:	84 e6       	ldi	r24, 0x64	; 100
     690:	f7 01       	movw	r30, r14
     692:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 87       	std	Z+8, r24	; 0x08
			break;
     698:	99 c0       	rjmp	.+306    	; 0x7cc <input+0x2d0>
		case '[' :
			speed = info_ptr->stepSpeed - 10;
     69a:	f7 01       	movw	r30, r14
     69c:	21 81       	ldd	r18, Z+1	; 0x01
			if (speed > -110){
     69e:	82 2f       	mov	r24, r18
     6a0:	02 2e       	mov	r0, r18
     6a2:	00 0c       	add	r0, r0
     6a4:	99 0b       	sbc	r25, r25
     6a6:	0a 97       	sbiw	r24, 0x0a	; 10
     6a8:	83 39       	cpi	r24, 0x93	; 147
     6aa:	9f 4f       	sbci	r25, 0xFF	; 255
     6ac:	1c f0       	brlt	.+6      	; 0x6b4 <input+0x1b8>
				info_ptr->stepSpeed -= 10;
     6ae:	2a 50       	subi	r18, 0x0A	; 10
     6b0:	f7 01       	movw	r30, r14
     6b2:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     6b4:	f7 01       	movw	r30, r14
     6b6:	81 81       	ldd	r24, Z+1	; 0x01
     6b8:	28 2f       	mov	r18, r24
     6ba:	08 2e       	mov	r0, r24
     6bc:	00 0c       	add	r0, r0
     6be:	33 0b       	sbc	r19, r19
     6c0:	3f 93       	push	r19
     6c2:	8f 93       	push	r24
     6c4:	88 e3       	ldi	r24, 0x38	; 56
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	7c 01       	movw	r14, r24
     6d2:	9f 93       	push	r25
     6d4:	8f 93       	push	r24
     6d6:	0e 94 43 0b 	call	0x1686	; 0x1686 <sprintf>
			fputs(buffer, stdout);
     6da:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <__iob+0x2>
     6de:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <__iob+0x3>
     6e2:	c7 01       	movw	r24, r14
     6e4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fputs>
			break;
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	6b c0       	rjmp	.+214    	; 0x7cc <input+0x2d0>
		case ']' :
			speed = info_ptr->stepSpeed - 10;
     6f6:	f7 01       	movw	r30, r14
     6f8:	21 81       	ldd	r18, Z+1	; 0x01
			if (speed < 110){
     6fa:	82 2f       	mov	r24, r18
     6fc:	02 2e       	mov	r0, r18
     6fe:	00 0c       	add	r0, r0
     700:	99 0b       	sbc	r25, r25
     702:	0a 97       	sbiw	r24, 0x0a	; 10
     704:	8e 36       	cpi	r24, 0x6E	; 110
     706:	91 05       	cpc	r25, r1
     708:	14 f4       	brge	.+4      	; 0x70e <input+0x212>
				info_ptr->stepSpeed += 10;
     70a:	26 5f       	subi	r18, 0xF6	; 246
     70c:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     70e:	f7 01       	movw	r30, r14
     710:	81 81       	ldd	r24, Z+1	; 0x01
     712:	28 2f       	mov	r18, r24
     714:	08 2e       	mov	r0, r24
     716:	00 0c       	add	r0, r0
     718:	33 0b       	sbc	r19, r19
     71a:	3f 93       	push	r19
     71c:	8f 93       	push	r24
     71e:	88 e3       	ldi	r24, 0x38	; 56
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	7c 01       	movw	r14, r24
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	0e 94 43 0b 	call	0x1686	; 0x1686 <sprintf>
			fputs(buffer, stdout);
     734:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <__iob+0x2>
     738:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <__iob+0x3>
     73c:	c7 01       	movw	r24, r14
     73e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fputs>
			break;
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	3e c0       	rjmp	.+124    	; 0x7cc <input+0x2d0>
		case ' ' :
			info_ptr->pwmSpeed = 0;
     750:	f7 01       	movw	r30, r14
     752:	10 82       	st	Z, r1
			info_ptr->stopCommand = 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	85 83       	std	Z+5, r24	; 0x05
			info_ptr->motorAct = 0;
     758:	10 86       	std	Z+8, r1	; 0x08
			info_ptr->stepAct = '\0';
     75a:	14 82       	std	Z+4, r1	; 0x04
			//fputc(' ', stdout);
			break;
     75c:	37 c0       	rjmp	.+110    	; 0x7cc <input+0x2d0>
		case 'h' :
			info_ptr->camera = 10;
     75e:	8a e0       	ldi	r24, 0x0A	; 10
     760:	f7 01       	movw	r30, r14
     762:	86 83       	std	Z+6, r24	; 0x06
			break;
     764:	33 c0       	rjmp	.+102    	; 0x7cc <input+0x2d0>
		case 'g' :
			info_ptr->camera = -10;
     766:	86 ef       	ldi	r24, 0xF6	; 246
     768:	f7 01       	movw	r30, r14
     76a:	86 83       	std	Z+6, r24	; 0x06
			break;
     76c:	2f c0       	rjmp	.+94     	; 0x7cc <input+0x2d0>
			//fputc('?', stdout);
			//info_ptr->stopCommand = 1;
			break;
		case 'o':
			// restart
			fputs("started\n", stdout);
     76e:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__iob+0x2>
     772:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__iob+0x3>
     776:	48 e0       	ldi	r20, 0x08	; 8
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	87 e4       	ldi	r24, 0x47	; 71
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 0f 0b 	call	0x161e	; 0x161e <fwrite>
			break;
     786:	22 c0       	rjmp	.+68     	; 0x7cc <input+0x2d0>
		default:
			fputs("stupid.\n", stdout);
     788:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <__iob+0x2>
     78c:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <__iob+0x3>
     790:	48 e0       	ldi	r20, 0x08	; 8
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e5       	ldi	r24, 0x50	; 80
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 0f 0b 	call	0x161e	; 0x161e <fwrite>
			++info_ptr->stupidCount;
     7a0:	f7 01       	movw	r30, r14
     7a2:	81 85       	ldd	r24, Z+9	; 0x09
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	81 87       	std	Z+9, r24	; 0x09
			if (info_ptr->stupidCount >= 10){
     7a8:	8a 30       	cpi	r24, 0x0A	; 10
     7aa:	80 f0       	brcs	.+32     	; 0x7cc <input+0x2d0>
					fputc('H', stdout);
     7ac:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <__iob+0x2>
     7b0:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <__iob+0x3>
     7b4:	88 e4       	ldi	r24, 0x48	; 72
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
					custom_delay(1000);
     7bc:	68 ee       	ldi	r22, 0xE8	; 232
     7be:	73 e0       	ldi	r23, 0x03	; 3
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 66 02 	call	0x4cc	; 0x4cc <custom_delay>
					info_ptr->stupidCount = 0;
     7c8:	f7 01       	movw	r30, r14
     7ca:	11 86       	std	Z+9, r1	; 0x09
			}
			break;
	}
	/* echo character to next micro */
	fputc(c, stdout);
     7cc:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <__iob+0x2>
     7d0:	70 91 a6 02 	lds	r23, 0x02A6	; 0x8002a6 <__iob+0x3>
     7d4:	c8 01       	movw	r24, r16
     7d6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
	
}
     7da:	64 96       	adiw	r28, 0x14	; 20
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	08 95       	ret

000007f8 <main>:
void initialise(info* info_ptr);
void input(info* info_ptr);


/* functional code	*/
int main(void) {
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	64 97       	sbiw	r28, 0x14	; 20
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
	
	info* info_ptr = makeInfo();
     80c:	0e 94 11 02 	call	0x422	; 0x422 <makeInfo>
     810:	8c 01       	movw	r16, r24
	initialise(info_ptr);
     812:	0e 94 16 02 	call	0x42c	; 0x42c <initialise>
	DDRA |= (1<<PORTA0);
     816:	08 9a       	sbi	0x01, 0	; 1
	PORTA |= (1<<PORTA0);
     818:	10 9a       	sbi	0x02, 0	; 2
	while(1) {
		if(serial_input_available()){
			input(info_ptr);
		}
		if (info_ptr->motorAct){
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     81a:	33 24       	eor	r3, r3
     81c:	3a 94       	dec	r3
     81e:	0f 2e       	mov	r0, r31
     820:	f4 e6       	ldi	r31, 0x64	; 100
     822:	af 2e       	mov	r10, r31
     824:	b1 2c       	mov	r11, r1
     826:	f0 2d       	mov	r31, r0
     828:	0f 2e       	mov	r0, r31
     82a:	f3 eb       	ldi	r31, 0xB3	; 179
     82c:	8f 2e       	mov	r8, r31
     82e:	91 2c       	mov	r9, r1
     830:	f0 2d       	mov	r31, r0
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     832:	0f 2e       	mov	r0, r31
     834:	f4 eb       	ldi	r31, 0xB4	; 180
     836:	6f 2e       	mov	r6, r31
     838:	71 2c       	mov	r7, r1
     83a:	f0 2d       	mov	r31, r0
			info_ptr->stopCommand = 0;
			info_ptr->stupidCount = 0;
		} else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	2c 01       	movw	r4, r24
			fputs(buffer, stdout);
     842:	0f 2e       	mov	r0, r31
     844:	f3 ea       	ldi	r31, 0xA3	; 163
     846:	cf 2e       	mov	r12, r31
     848:	f2 e0       	ldi	r31, 0x02	; 2
     84a:	df 2e       	mov	r13, r31
     84c:	f0 2d       	mov	r31, r0
	initialise(info_ptr);
	DDRA |= (1<<PORTA0);
	PORTA |= (1<<PORTA0);
	
	while(1) {
		if(serial_input_available()){
     84e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     852:	88 23       	and	r24, r24
     854:	19 f0       	breq	.+6      	; 0x85c <main+0x64>
			input(info_ptr);
     856:	c8 01       	movw	r24, r16
     858:	0e 94 7e 02 	call	0x4fc	; 0x4fc <input>
		}
		if (info_ptr->motorAct){
     85c:	f8 01       	movw	r30, r16
     85e:	80 85       	ldd	r24, Z+8	; 0x08
     860:	88 23       	and	r24, r24
     862:	b1 f0       	breq	.+44     	; 0x890 <main+0x98>
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     864:	80 81       	ld	r24, Z
     866:	38 9e       	mul	r3, r24
     868:	c0 01       	movw	r24, r0
     86a:	11 24       	eor	r1, r1
     86c:	b5 01       	movw	r22, r10
     86e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__divmodhi4>
     872:	f4 01       	movw	r30, r8
     874:	60 83       	st	Z, r22
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     876:	f8 01       	movw	r30, r16
     878:	80 81       	ld	r24, Z
     87a:	38 9e       	mul	r3, r24
     87c:	c0 01       	movw	r24, r0
     87e:	11 24       	eor	r1, r1
     880:	b5 01       	movw	r22, r10
     882:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__divmodhi4>
     886:	f3 01       	movw	r30, r6
     888:	60 83       	st	Z, r22
			info_ptr->motorAct = 0;
     88a:	f8 01       	movw	r30, r16
     88c:	10 86       	std	Z+8, r1	; 0x08
			info_ptr->stupidCount = 0;
     88e:	11 86       	std	Z+9, r1	; 0x09
		}
		if (info_ptr->stopCommand){
     890:	f8 01       	movw	r30, r16
     892:	85 81       	ldd	r24, Z+5	; 0x05
     894:	88 23       	and	r24, r24
     896:	91 f0       	breq	.+36     	; 0x8bc <main+0xc4>
			/* stop everything */
			PORTD &= ~(1<<PORTD2);
     898:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     89a:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC0);
     89c:	40 98       	cbi	0x08, 0	; 8
			PORTC &= ~(1<<PORTC1);
     89e:	41 98       	cbi	0x08, 1	; 8
			if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     8a0:	84 81       	ldd	r24, Z+4	; 0x04
     8a2:	81 34       	cpi	r24, 0x41	; 65
     8a4:	11 f0       	breq	.+4      	; 0x8aa <main+0xb2>
     8a6:	82 35       	cpi	r24, 0x52	; 82
     8a8:	21 f4       	brne	.+8      	; 0x8b2 <main+0xba>
				hold_step();
     8aa:	0e 94 2f 05 	call	0xa5e	; 0xa5e <hold_step>
				info_ptr->stepAct = '\0';
     8ae:	f8 01       	movw	r30, r16
     8b0:	14 82       	std	Z+4, r1	; 0x04
			}
			info_ptr->camera = 0;
     8b2:	f8 01       	movw	r30, r16
     8b4:	16 82       	std	Z+6, r1	; 0x06
			info_ptr->stopCommand = 0;
     8b6:	15 82       	std	Z+5, r1	; 0x05
			info_ptr->stupidCount = 0;
     8b8:	11 86       	std	Z+9, r1	; 0x09
     8ba:	c9 cf       	rjmp	.-110    	; 0x84e <main+0x56>
		} else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     8bc:	f8 01       	movw	r30, r16
     8be:	84 81       	ldd	r24, Z+4	; 0x04
     8c0:	81 34       	cpi	r24, 0x41	; 65
     8c2:	19 f0       	breq	.+6      	; 0x8ca <main+0xd2>
     8c4:	82 35       	cpi	r24, 0x52	; 82
     8c6:	09 f0       	breq	.+2      	; 0x8ca <main+0xd2>
     8c8:	9d c0       	rjmp	.+314    	; 0xa04 <__stack+0x105>
			int16_t current = current_step();
     8ca:	0e 94 2a 05 	call	0xa54	; 0xa54 <current_step>
     8ce:	7c 01       	movw	r14, r24
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     8d0:	f8 01       	movw	r30, r16
     8d2:	84 81       	ldd	r24, Z+4	; 0x04
     8d4:	1f 92       	push	r1
     8d6:	8f 93       	push	r24
     8d8:	81 81       	ldd	r24, Z+1	; 0x01
     8da:	28 2f       	mov	r18, r24
     8dc:	08 2e       	mov	r0, r24
     8de:	00 0c       	add	r0, r0
     8e0:	33 0b       	sbc	r19, r19
     8e2:	3f 93       	push	r19
     8e4:	8f 93       	push	r24
     8e6:	ff 92       	push	r15
     8e8:	ef 92       	push	r14
     8ea:	89 e5       	ldi	r24, 0x59	; 89
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	9f 93       	push	r25
     8f0:	8f 93       	push	r24
     8f2:	5f 92       	push	r5
     8f4:	4f 92       	push	r4
     8f6:	0e 94 43 0b 	call	0x1686	; 0x1686 <sprintf>
			fputs(buffer, stdout);
     8fa:	f6 01       	movw	r30, r12
     8fc:	62 81       	ldd	r22, Z+2	; 0x02
     8fe:	73 81       	ldd	r23, Z+3	; 0x03
     900:	c2 01       	movw	r24, r4
     902:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fputs>
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	f8 01       	movw	r30, r16
     912:	81 81       	ldd	r24, Z+1	; 0x01
     914:	88 23       	and	r24, r24
     916:	dc f4       	brge	.+54     	; 0x94e <__stack+0x4f>
     918:	84 81       	ldd	r24, Z+4	; 0x04
     91a:	82 35       	cpi	r24, 0x52	; 82
     91c:	c1 f4       	brne	.+48     	; 0x94e <__stack+0x4f>
     91e:	82 81       	ldd	r24, Z+2	; 0x02
     920:	93 81       	ldd	r25, Z+3	; 0x03
     922:	e8 16       	cp	r14, r24
     924:	f9 06       	cpc	r15, r25
     926:	a8 f1       	brcs	.+106    	; 0x992 <__stack+0x93>
					step(info_ptr);
     928:	c8 01       	movw	r24, r16
     92a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <step>
					current = current_step();
     92e:	0e 94 2a 05 	call	0xa54	; 0xa54 <current_step>
     932:	7c 01       	movw	r14, r24
		} else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     934:	f8 01       	movw	r30, r16
     936:	81 81       	ldd	r24, Z+1	; 0x01
     938:	88 23       	and	r24, r24
     93a:	4c f4       	brge	.+18     	; 0x94e <__stack+0x4f>
     93c:	84 81       	ldd	r24, Z+4	; 0x04
     93e:	82 35       	cpi	r24, 0x52	; 82
     940:	31 f4       	brne	.+12     	; 0x94e <__stack+0x4f>
     942:	82 81       	ldd	r24, Z+2	; 0x02
     944:	93 81       	ldd	r25, Z+3	; 0x03
     946:	e8 16       	cp	r14, r24
     948:	f9 06       	cpc	r15, r25
     94a:	70 f7       	brcc	.-36     	; 0x928 <__stack+0x29>
     94c:	22 c0       	rjmp	.+68     	; 0x992 <__stack+0x93>
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     94e:	f8 01       	movw	r30, r16
     950:	81 81       	ldd	r24, Z+1	; 0x01
     952:	18 16       	cp	r1, r24
     954:	c4 f4       	brge	.+48     	; 0x986 <__stack+0x87>
     956:	84 81       	ldd	r24, Z+4	; 0x04
     958:	81 34       	cpi	r24, 0x41	; 65
     95a:	a9 f4       	brne	.+42     	; 0x986 <__stack+0x87>
     95c:	1e 14       	cp	r1, r14
     95e:	1f 04       	cpc	r1, r15
     960:	0c f4       	brge	.+2      	; 0x964 <__stack+0x65>
     962:	5a c0       	rjmp	.+180    	; 0xa18 <__stack+0x119>
				step(info_ptr);
     964:	c8 01       	movw	r24, r16
     966:	0e 94 d5 07 	call	0xfaa	; 0xfaa <step>
				current = current_step();
     96a:	0e 94 2a 05 	call	0xa54	; 0xa54 <current_step>
     96e:	7c 01       	movw	r14, r24
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     970:	f8 01       	movw	r30, r16
     972:	81 81       	ldd	r24, Z+1	; 0x01
     974:	18 16       	cp	r1, r24
     976:	3c f4       	brge	.+14     	; 0x986 <__stack+0x87>
     978:	84 81       	ldd	r24, Z+4	; 0x04
     97a:	81 34       	cpi	r24, 0x41	; 65
     97c:	21 f4       	brne	.+8      	; 0x986 <__stack+0x87>
     97e:	1e 14       	cp	r1, r14
     980:	1f 04       	cpc	r1, r15
     982:	84 f7       	brge	.-32     	; 0x964 <__stack+0x65>
     984:	49 c0       	rjmp	.+146    	; 0xa18 <__stack+0x119>
				step(info_ptr);
				current = current_step();
			}
			while ((current < info_ptr->maxStep) && (current >= 0)){
     986:	f8 01       	movw	r30, r16
     988:	82 81       	ldd	r24, Z+2	; 0x02
     98a:	93 81       	ldd	r25, Z+3	; 0x03
     98c:	e8 16       	cp	r14, r24
     98e:	f9 06       	cpc	r15, r25
     990:	50 f5       	brcc	.+84     	; 0x9e6 <__stack+0xe7>
     992:	ff 20       	and	r15, r15
     994:	44 f1       	brlt	.+80     	; 0x9e6 <__stack+0xe7>
				if (serial_input_available()){
     996:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     99a:	88 23       	and	r24, r24
     99c:	b9 f0       	breq	.+46     	; 0x9cc <__stack+0xcd>
					char in = fgetc(stdin);
     99e:	f6 01       	movw	r30, r12
     9a0:	80 81       	ld	r24, Z
     9a2:	91 81       	ldd	r25, Z+1	; 0x01
     9a4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <fgetc>
					if (in == ' '){
     9a8:	80 32       	cpi	r24, 0x20	; 32
     9aa:	81 f4       	brne	.+32     	; 0x9cc <__stack+0xcd>
						info_ptr->stepAct = '\0';
     9ac:	f8 01       	movw	r30, r16
     9ae:	14 82       	std	Z+4, r1	; 0x04
						hold_step();
     9b0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <hold_step>
						fputs("canceled\n", stdout);
     9b4:	f6 01       	movw	r30, r12
     9b6:	22 81       	ldd	r18, Z+2	; 0x02
     9b8:	33 81       	ldd	r19, Z+3	; 0x03
     9ba:	49 e0       	ldi	r20, 0x09	; 9
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	89 e6       	ldi	r24, 0x69	; 105
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 0f 0b 	call	0x161e	; 0x161e <fwrite>
						break;
     9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0xe7>
					}
				}
				step(info_ptr);
     9cc:	c8 01       	movw	r24, r16
     9ce:	0e 94 d5 07 	call	0xfaa	; 0xfaa <step>
				current = current_step();				
     9d2:	0e 94 2a 05 	call	0xa54	; 0xa54 <current_step>
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
				step(info_ptr);
				current = current_step();
			}
			while ((current < info_ptr->maxStep) && (current >= 0)){
     9d6:	f8 01       	movw	r30, r16
     9d8:	22 81       	ldd	r18, Z+2	; 0x02
     9da:	33 81       	ldd	r19, Z+3	; 0x03
     9dc:	82 17       	cp	r24, r18
     9de:	93 07       	cpc	r25, r19
     9e0:	10 f4       	brcc	.+4      	; 0x9e6 <__stack+0xe7>
     9e2:	99 23       	and	r25, r25
     9e4:	c4 f6       	brge	.-80     	; 0x996 <__stack+0x97>
					}
				}
				step(info_ptr);
				current = current_step();				
			}
			fputs("end step\n", stdout);
     9e6:	f6 01       	movw	r30, r12
     9e8:	22 81       	ldd	r18, Z+2	; 0x02
     9ea:	33 81       	ldd	r19, Z+3	; 0x03
     9ec:	49 e0       	ldi	r20, 0x09	; 9
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	83 e7       	ldi	r24, 0x73	; 115
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 0f 0b 	call	0x161e	; 0x161e <fwrite>
			info_ptr->stepAct = '\0';
     9fc:	f8 01       	movw	r30, r16
     9fe:	14 82       	std	Z+4, r1	; 0x04
			info_ptr->stupidCount = 0;
     a00:	11 86       	std	Z+9, r1	; 0x09
				info_ptr->stepAct = '\0';
			}
			info_ptr->camera = 0;
			info_ptr->stopCommand = 0;
			info_ptr->stupidCount = 0;
		} else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     a02:	25 cf       	rjmp	.-438    	; 0x84e <main+0x56>
				current = current_step();				
			}
			fputs("end step\n", stdout);
			info_ptr->stepAct = '\0';
			info_ptr->stupidCount = 0;
		} else if (info_ptr->camera != 0){
     a04:	f8 01       	movw	r30, r16
     a06:	86 81       	ldd	r24, Z+6	; 0x06
     a08:	88 23       	and	r24, r24
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	20 cf       	rjmp	.-448    	; 0x84e <main+0x56>
			uint8_t pos = OCR0A;
     a0e:	97 b5       	in	r25, 0x27	; 39
			pos += info_ptr->camera;
     a10:	89 0f       	add	r24, r25
					pos = 0;
			} else if (pos > 255){
					pos = 255;
			}
			/*	adjust camera position */
			OCR0A = pos;
     a12:	87 bd       	out	0x27, r24	; 39
			info_ptr->stupidCount = 0;
     a14:	11 86       	std	Z+9, r1	; 0x09
     a16:	1b cf       	rjmp	.-458    	; 0x84e <main+0x56>
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
				step(info_ptr);
				current = current_step();
			}
			while ((current < info_ptr->maxStep) && (current >= 0)){
     a18:	f8 01       	movw	r30, r16
     a1a:	82 81       	ldd	r24, Z+2	; 0x02
     a1c:	93 81       	ldd	r25, Z+3	; 0x03
     a1e:	e8 16       	cp	r14, r24
     a20:	f9 06       	cpc	r15, r25
     a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x127>
     a24:	b8 cf       	rjmp	.-144    	; 0x996 <__stack+0x97>
     a26:	df cf       	rjmp	.-66     	; 0x9e6 <__stack+0xe7>

00000a28 <init_step>:
 uint8_t RED;				// port for stepper red wire


 void init_step(void){
	/* sets the ports for the stepper motor and initializes the steps and phase	*/
	steps = 0;
     a28:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <steps+0x1>
     a2c:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <steps>
	phase = 0;
     a30:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <phase>

	BLU = PORTC4;
     a34:	84 e0       	ldi	r24, 0x04	; 4
     a36:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <BLU>
	GRE = PORTC5;
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <GRE>
	YEL = PORTC2;
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <YEL>
	RED = PORTC3;
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <RED>

	DDRC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     a4c:	87 b1       	in	r24, 0x07	; 7
     a4e:	8c 63       	ori	r24, 0x3C	; 60
     a50:	87 b9       	out	0x07, r24	; 7
     a52:	08 95       	ret

00000a54 <current_step>:
	*	can be modified to return an angle from origin using gear
	*	ratio
	*/
	int16_t returnValue = steps;
	return returnValue;
 }
     a54:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <steps>
     a58:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <steps+0x1>
     a5c:	08 95       	ret

00000a5e <hold_step>:

void hold_step(void){
	
	PORTC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     a5e:	38 b1       	in	r19, 0x08	; 8
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	bc 01       	movw	r22, r24
     a66:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <hold_step+0x12>
     a6c:	66 0f       	add	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	0a 94       	dec	r0
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <hold_step+0xe>
     a74:	ac 01       	movw	r20, r24
     a76:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <hold_step+0x22>
     a7c:	44 0f       	add	r20, r20
     a7e:	55 1f       	adc	r21, r21
     a80:	0a 94       	dec	r0
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <hold_step+0x1e>
     a84:	46 2b       	or	r20, r22
     a86:	43 2b       	or	r20, r19
     a88:	9c 01       	movw	r18, r24
     a8a:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <hold_step+0x36>
     a90:	22 0f       	add	r18, r18
     a92:	33 1f       	adc	r19, r19
     a94:	0a 94       	dec	r0
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <hold_step+0x32>
     a98:	24 2b       	or	r18, r20
     a9a:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <hold_step+0x46>
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	0a 94       	dec	r0
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <hold_step+0x42>
     aa8:	82 2b       	or	r24, r18
     aaa:	88 b9       	out	0x08, r24	; 8
     aac:	08 95       	ret

00000aae <release_step>:
	
}

void release_step(void){
	
	PORTC &= ~((1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED));
     aae:	28 b1       	in	r18, 0x08	; 8
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	bc 01       	movw	r22, r24
     ab6:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <release_step+0x12>
     abc:	66 0f       	add	r22, r22
     abe:	77 1f       	adc	r23, r23
     ac0:	0a 94       	dec	r0
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <release_step+0xe>
     ac4:	ac 01       	movw	r20, r24
     ac6:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <release_step+0x22>
     acc:	44 0f       	add	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	0a 94       	dec	r0
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <release_step+0x1e>
     ad4:	36 2f       	mov	r19, r22
     ad6:	34 2b       	or	r19, r20
     ad8:	ac 01       	movw	r20, r24
     ada:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <release_step+0x36>
     ae0:	44 0f       	add	r20, r20
     ae2:	55 1f       	adc	r21, r21
     ae4:	0a 94       	dec	r0
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <release_step+0x32>
     ae8:	43 2b       	or	r20, r19
     aea:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <release_step+0x46>
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	0a 94       	dec	r0
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <release_step+0x42>
     af8:	84 2b       	or	r24, r20
     afa:	80 95       	com	r24
     afc:	82 23       	and	r24, r18
     afe:	88 b9       	out	0x08, r24	; 8
     b00:	08 95       	ret

00000b02 <increment_step>:
	}
 }

 void increment_step(void){
	/* the motor has turned one step, increase the count */
	++steps;
     b02:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <steps>
     b06:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <steps+0x1>
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <steps+0x1>
     b10:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <steps>
     b14:	08 95       	ret

00000b16 <decrement_step>:
 }

 void decrement_step(void){
	/* the motor has turned back one step, decrease the count */
	--steps;
     b16:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <steps>
     b1a:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <steps+0x1>
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <steps+0x1>
     b24:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <steps>
     b28:	08 95       	ret

00000b2a <step_clockwise>:
 }

 void step_clockwise(uint8_t time_on){
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */

	 uint32_t current_time;
	 
	 if(phase == 0){
     b38:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <phase>
     b3c:	81 11       	cpse	r24, r1
     b3e:	42 c0       	rjmp	.+132    	; 0xbc4 <step_clockwise+0x9a>
		 current_time = get_tcnt1_ticks();
     b40:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     b44:	6b 01       	movw	r12, r22
     b46:	7c 01       	movw	r14, r24
     b48:	cc 0e       	add	r12, r28
     b4a:	d1 1c       	adc	r13, r1
     b4c:	e1 1c       	adc	r14, r1
     b4e:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
     b50:	c1 e0       	ldi	r28, 0x01	; 1
     b52:	d0 e0       	ldi	r29, 0x00	; 0

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     b54:	2a c0       	rjmp	.+84     	; 0xbaa <step_clockwise+0x80>
			 PORTC |= (1<<GRE)|(1<<YEL);
     b56:	98 b1       	in	r25, 0x08	; 8
     b58:	ae 01       	movw	r20, r28
     b5a:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <step_clockwise+0x3a>
     b60:	44 0f       	add	r20, r20
     b62:	55 1f       	adc	r21, r21
     b64:	0a 94       	dec	r0
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <step_clockwise+0x36>
     b68:	9e 01       	movw	r18, r28
     b6a:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <step_clockwise+0x4a>
     b70:	22 0f       	add	r18, r18
     b72:	33 1f       	adc	r19, r19
     b74:	0a 94       	dec	r0
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <step_clockwise+0x46>
     b78:	84 2f       	mov	r24, r20
     b7a:	82 2b       	or	r24, r18
     b7c:	89 2b       	or	r24, r25
     b7e:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
     b80:	28 b1       	in	r18, 0x08	; 8
     b82:	ae 01       	movw	r20, r28
     b84:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <step_clockwise+0x64>
     b8a:	44 0f       	add	r20, r20
     b8c:	55 1f       	adc	r21, r21
     b8e:	0a 94       	dec	r0
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <step_clockwise+0x60>
     b92:	ce 01       	movw	r24, r28
     b94:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <step_clockwise+0x74>
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	0a 94       	dec	r0
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <step_clockwise+0x70>
     ba2:	84 2b       	or	r24, r20
     ba4:	80 95       	com	r24
     ba6:	82 23       	and	r24, r18
     ba8:	88 b9       	out	0x08, r24	; 8

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     baa:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     bae:	6c 15       	cp	r22, r12
     bb0:	7d 05       	cpc	r23, r13
     bb2:	8e 05       	cpc	r24, r14
     bb4:	9f 05       	cpc	r25, r15
     bb6:	78 f2       	brcs	.-98     	; 0xb56 <step_clockwise+0x2c>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 ++phase;
     bb8:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <phase>
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <phase>
     bc2:	ca c0       	rjmp	.+404    	; 0xd58 <step_clockwise+0x22e>
	 }
	 else if(phase == 1){
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	09 f0       	breq	.+2      	; 0xbca <step_clockwise+0xa0>
     bc8:	42 c0       	rjmp	.+132    	; 0xc4e <step_clockwise+0x124>
		 current_time = get_tcnt1_ticks();
     bca:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     bce:	6b 01       	movw	r12, r22
     bd0:	7c 01       	movw	r14, r24
     bd2:	cc 0e       	add	r12, r28
     bd4:	d1 1c       	adc	r13, r1
     bd6:	e1 1c       	adc	r14, r1
     bd8:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
     bda:	c1 e0       	ldi	r28, 0x01	; 1
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     bde:	2a c0       	rjmp	.+84     	; 0xc34 <step_clockwise+0x10a>
			 PORTC |= (1<<GRE)|(1<<RED);
     be0:	98 b1       	in	r25, 0x08	; 8
     be2:	ae 01       	movw	r20, r28
     be4:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     be8:	02 c0       	rjmp	.+4      	; 0xbee <step_clockwise+0xc4>
     bea:	44 0f       	add	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <step_clockwise+0xc0>
     bf2:	9e 01       	movw	r18, r28
     bf4:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <step_clockwise+0xd4>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	0a 94       	dec	r0
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <step_clockwise+0xd0>
     c02:	84 2f       	mov	r24, r20
     c04:	82 2b       	or	r24, r18
     c06:	89 2b       	or	r24, r25
     c08:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
     c0a:	28 b1       	in	r18, 0x08	; 8
     c0c:	ae 01       	movw	r20, r28
     c0e:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <step_clockwise+0xee>
     c14:	44 0f       	add	r20, r20
     c16:	55 1f       	adc	r21, r21
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <step_clockwise+0xea>
     c1c:	ce 01       	movw	r24, r28
     c1e:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <step_clockwise+0xfe>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <step_clockwise+0xfa>
     c2c:	84 2b       	or	r24, r20
     c2e:	80 95       	com	r24
     c30:	82 23       	and	r24, r18
     c32:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c34:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     c38:	6c 15       	cp	r22, r12
     c3a:	7d 05       	cpc	r23, r13
     c3c:	8e 05       	cpc	r24, r14
     c3e:	9f 05       	cpc	r25, r15
     c40:	78 f2       	brcs	.-98     	; 0xbe0 <step_clockwise+0xb6>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
     c42:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <phase>
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <phase>
     c4c:	85 c0       	rjmp	.+266    	; 0xd58 <step_clockwise+0x22e>
	 }
	 else if(phase == 2){
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	09 f0       	breq	.+2      	; 0xc54 <step_clockwise+0x12a>
     c52:	42 c0       	rjmp	.+132    	; 0xcd8 <step_clockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
     c54:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c58:	6b 01       	movw	r12, r22
     c5a:	7c 01       	movw	r14, r24
     c5c:	cc 0e       	add	r12, r28
     c5e:	d1 1c       	adc	r13, r1
     c60:	e1 1c       	adc	r14, r1
     c62:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
     c64:	c1 e0       	ldi	r28, 0x01	; 1
     c66:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     c68:	2a c0       	rjmp	.+84     	; 0xcbe <step_clockwise+0x194>
			 PORTC |= (1<<BLU)|(1<<RED);
     c6a:	98 b1       	in	r25, 0x08	; 8
     c6c:	ae 01       	movw	r20, r28
     c6e:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <step_clockwise+0x14e>
     c74:	44 0f       	add	r20, r20
     c76:	55 1f       	adc	r21, r21
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <step_clockwise+0x14a>
     c7c:	9e 01       	movw	r18, r28
     c7e:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <step_clockwise+0x15e>
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	0a 94       	dec	r0
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <step_clockwise+0x15a>
     c8c:	84 2f       	mov	r24, r20
     c8e:	82 2b       	or	r24, r18
     c90:	89 2b       	or	r24, r25
     c92:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
     c94:	28 b1       	in	r18, 0x08	; 8
     c96:	ae 01       	movw	r20, r28
     c98:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <step_clockwise+0x178>
     c9e:	44 0f       	add	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <step_clockwise+0x174>
     ca6:	ce 01       	movw	r24, r28
     ca8:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <step_clockwise+0x188>
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	0a 94       	dec	r0
     cb4:	e2 f7       	brpl	.-8      	; 0xcae <step_clockwise+0x184>
     cb6:	84 2b       	or	r24, r20
     cb8:	80 95       	com	r24
     cba:	82 23       	and	r24, r18
     cbc:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     cbe:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     cc2:	6c 15       	cp	r22, r12
     cc4:	7d 05       	cpc	r23, r13
     cc6:	8e 05       	cpc	r24, r14
     cc8:	9f 05       	cpc	r25, r15
     cca:	78 f2       	brcs	.-98     	; 0xc6a <step_clockwise+0x140>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
     ccc:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <phase>
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <phase>
     cd6:	40 c0       	rjmp	.+128    	; 0xd58 <step_clockwise+0x22e>
	 }
	 else if(phase == 3){
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	f1 f5       	brne	.+124    	; 0xd58 <step_clockwise+0x22e>
		 current_time = get_tcnt1_ticks();
     cdc:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ce0:	6b 01       	movw	r12, r22
     ce2:	7c 01       	movw	r14, r24
     ce4:	cc 0e       	add	r12, r28
     ce6:	d1 1c       	adc	r13, r1
     ce8:	e1 1c       	adc	r14, r1
     cea:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
     cec:	c1 e0       	ldi	r28, 0x01	; 1
     cee:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     cf0:	2a c0       	rjmp	.+84     	; 0xd46 <step_clockwise+0x21c>
			 PORTC |= (1<<BLU)|(1<<YEL);
     cf2:	98 b1       	in	r25, 0x08	; 8
     cf4:	ae 01       	movw	r20, r28
     cf6:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <step_clockwise+0x1d6>
     cfc:	44 0f       	add	r20, r20
     cfe:	55 1f       	adc	r21, r21
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <step_clockwise+0x1d2>
     d04:	9e 01       	movw	r18, r28
     d06:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <step_clockwise+0x1e6>
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <step_clockwise+0x1e2>
     d14:	84 2f       	mov	r24, r20
     d16:	82 2b       	or	r24, r18
     d18:	89 2b       	or	r24, r25
     d1a:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
     d1c:	28 b1       	in	r18, 0x08	; 8
     d1e:	ae 01       	movw	r20, r28
     d20:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <step_clockwise+0x200>
     d26:	44 0f       	add	r20, r20
     d28:	55 1f       	adc	r21, r21
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <step_clockwise+0x1fc>
     d2e:	ce 01       	movw	r24, r28
     d30:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <step_clockwise+0x210>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <step_clockwise+0x20c>
     d3e:	84 2b       	or	r24, r20
     d40:	80 95       	com	r24
     d42:	82 23       	and	r24, r18
     d44:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     d46:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     d4a:	6c 15       	cp	r22, r12
     d4c:	7d 05       	cpc	r23, r13
     d4e:	8e 05       	cpc	r24, r14
     d50:	9f 05       	cpc	r25, r15
     d52:	78 f2       	brcs	.-98     	; 0xcf2 <step_clockwise+0x1c8>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 phase = 0;
     d54:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <phase>
	 }
	 increment_step();
     d58:	0e 94 81 05 	call	0xb02	; 0xb02 <increment_step>
 }
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	df 90       	pop	r13
     d66:	cf 90       	pop	r12
     d68:	08 95       	ret

00000d6a <step_anticlockwise>:


 void step_anticlockwise(uint8_t time_on){
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */
	
	 uint32_t current_time;

	 if(phase == 0){
     d78:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <phase>
     d7c:	81 11       	cpse	r24, r1
     d7e:	42 c0       	rjmp	.+132    	; 0xe04 <step_anticlockwise+0x9a>
		 current_time = get_tcnt1_ticks();
     d80:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     d84:	6b 01       	movw	r12, r22
     d86:	7c 01       	movw	r14, r24
     d88:	cc 0e       	add	r12, r28
     d8a:	d1 1c       	adc	r13, r1
     d8c:	e1 1c       	adc	r14, r1
     d8e:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
     d90:	c1 e0       	ldi	r28, 0x01	; 1
     d92:	d0 e0       	ldi	r29, 0x00	; 0
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     d94:	2a c0       	rjmp	.+84     	; 0xdea <step_anticlockwise+0x80>
			 PORTC |= (1<<BLU)|(1<<YEL);
     d96:	98 b1       	in	r25, 0x08	; 8
     d98:	ae 01       	movw	r20, r28
     d9a:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <step_anticlockwise+0x3a>
     da0:	44 0f       	add	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <step_anticlockwise+0x36>
     da8:	9e 01       	movw	r18, r28
     daa:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <step_anticlockwise+0x4a>
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <step_anticlockwise+0x46>
     db8:	84 2f       	mov	r24, r20
     dba:	82 2b       	or	r24, r18
     dbc:	89 2b       	or	r24, r25
     dbe:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
     dc0:	28 b1       	in	r18, 0x08	; 8
     dc2:	ae 01       	movw	r20, r28
     dc4:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <step_anticlockwise+0x64>
     dca:	44 0f       	add	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <step_anticlockwise+0x60>
     dd2:	ce 01       	movw	r24, r28
     dd4:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <step_anticlockwise+0x74>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	0a 94       	dec	r0
     de0:	e2 f7       	brpl	.-8      	; 0xdda <step_anticlockwise+0x70>
     de2:	84 2b       	or	r24, r20
     de4:	80 95       	com	r24
     de6:	82 23       	and	r24, r18
     de8:	88 b9       	out	0x08, r24	; 8
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     dea:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     dee:	6c 15       	cp	r22, r12
     df0:	7d 05       	cpc	r23, r13
     df2:	8e 05       	cpc	r24, r14
     df4:	9f 05       	cpc	r25, r15
     df6:	78 f2       	brcs	.-98     	; 0xd96 <step_anticlockwise+0x2c>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 ++phase;
     df8:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <phase>
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <phase>
     e02:	ca c0       	rjmp	.+404    	; 0xf98 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 1){
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	09 f0       	breq	.+2      	; 0xe0a <step_anticlockwise+0xa0>
     e08:	42 c0       	rjmp	.+132    	; 0xe8e <step_anticlockwise+0x124>
		 current_time = get_tcnt1_ticks();
     e0a:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e0e:	6b 01       	movw	r12, r22
     e10:	7c 01       	movw	r14, r24
     e12:	cc 0e       	add	r12, r28
     e14:	d1 1c       	adc	r13, r1
     e16:	e1 1c       	adc	r14, r1
     e18:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
     e1a:	c1 e0       	ldi	r28, 0x01	; 1
     e1c:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e1e:	2a c0       	rjmp	.+84     	; 0xe74 <step_anticlockwise+0x10a>
			 PORTC |= (1<<BLU)|(1<<RED);
     e20:	98 b1       	in	r25, 0x08	; 8
     e22:	ae 01       	movw	r20, r28
     e24:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <step_anticlockwise+0xc4>
     e2a:	44 0f       	add	r20, r20
     e2c:	55 1f       	adc	r21, r21
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <step_anticlockwise+0xc0>
     e32:	9e 01       	movw	r18, r28
     e34:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <step_anticlockwise+0xd4>
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <step_anticlockwise+0xd0>
     e42:	84 2f       	mov	r24, r20
     e44:	82 2b       	or	r24, r18
     e46:	89 2b       	or	r24, r25
     e48:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
     e4a:	28 b1       	in	r18, 0x08	; 8
     e4c:	ae 01       	movw	r20, r28
     e4e:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <step_anticlockwise+0xee>
     e54:	44 0f       	add	r20, r20
     e56:	55 1f       	adc	r21, r21
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <step_anticlockwise+0xea>
     e5c:	ce 01       	movw	r24, r28
     e5e:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <step_anticlockwise+0xfe>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <step_anticlockwise+0xfa>
     e6c:	84 2b       	or	r24, r20
     e6e:	80 95       	com	r24
     e70:	82 23       	and	r24, r18
     e72:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e74:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     e78:	6c 15       	cp	r22, r12
     e7a:	7d 05       	cpc	r23, r13
     e7c:	8e 05       	cpc	r24, r14
     e7e:	9f 05       	cpc	r25, r15
     e80:	78 f2       	brcs	.-98     	; 0xe20 <step_anticlockwise+0xb6>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
     e82:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <phase>
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <phase>
     e8c:	85 c0       	rjmp	.+266    	; 0xf98 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 2){
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	09 f0       	breq	.+2      	; 0xe94 <step_anticlockwise+0x12a>
     e92:	42 c0       	rjmp	.+132    	; 0xf18 <step_anticlockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
     e94:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e98:	6b 01       	movw	r12, r22
     e9a:	7c 01       	movw	r14, r24
     e9c:	cc 0e       	add	r12, r28
     e9e:	d1 1c       	adc	r13, r1
     ea0:	e1 1c       	adc	r14, r1
     ea2:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
     ea4:	c1 e0       	ldi	r28, 0x01	; 1
     ea6:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ea8:	2a c0       	rjmp	.+84     	; 0xefe <step_anticlockwise+0x194>
			 PORTC |= (1<<GRE)|(1<<RED);
     eaa:	98 b1       	in	r25, 0x08	; 8
     eac:	ae 01       	movw	r20, r28
     eae:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <step_anticlockwise+0x14e>
     eb4:	44 0f       	add	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <step_anticlockwise+0x14a>
     ebc:	9e 01       	movw	r18, r28
     ebe:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <step_anticlockwise+0x15e>
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <step_anticlockwise+0x15a>
     ecc:	84 2f       	mov	r24, r20
     ece:	82 2b       	or	r24, r18
     ed0:	89 2b       	or	r24, r25
     ed2:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
     ed4:	28 b1       	in	r18, 0x08	; 8
     ed6:	ae 01       	movw	r20, r28
     ed8:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <step_anticlockwise+0x178>
     ede:	44 0f       	add	r20, r20
     ee0:	55 1f       	adc	r21, r21
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <step_anticlockwise+0x174>
     ee6:	ce 01       	movw	r24, r28
     ee8:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <step_anticlockwise+0x188>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <step_anticlockwise+0x184>
     ef6:	84 2b       	or	r24, r20
     ef8:	80 95       	com	r24
     efa:	82 23       	and	r24, r18
     efc:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     efe:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     f02:	6c 15       	cp	r22, r12
     f04:	7d 05       	cpc	r23, r13
     f06:	8e 05       	cpc	r24, r14
     f08:	9f 05       	cpc	r25, r15
     f0a:	78 f2       	brcs	.-98     	; 0xeaa <step_anticlockwise+0x140>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
     f0c:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <phase>
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <phase>
     f16:	40 c0       	rjmp	.+128    	; 0xf98 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 3){
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	f1 f5       	brne	.+124    	; 0xf98 <step_anticlockwise+0x22e>
		 current_time = get_tcnt1_ticks();
     f1c:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f20:	6b 01       	movw	r12, r22
     f22:	7c 01       	movw	r14, r24
     f24:	cc 0e       	add	r12, r28
     f26:	d1 1c       	adc	r13, r1
     f28:	e1 1c       	adc	r14, r1
     f2a:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
     f2c:	c1 e0       	ldi	r28, 0x01	; 1
     f2e:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f30:	2a c0       	rjmp	.+84     	; 0xf86 <step_anticlockwise+0x21c>
			 PORTC |= (1<<GRE)|(1<<YEL);
     f32:	98 b1       	in	r25, 0x08	; 8
     f34:	ae 01       	movw	r20, r28
     f36:	00 90 9c 02 	lds	r0, 0x029C	; 0x80029c <GRE>
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <step_anticlockwise+0x1d6>
     f3c:	44 0f       	add	r20, r20
     f3e:	55 1f       	adc	r21, r21
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <step_anticlockwise+0x1d2>
     f44:	9e 01       	movw	r18, r28
     f46:	00 90 9b 02 	lds	r0, 0x029B	; 0x80029b <YEL>
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <step_anticlockwise+0x1e6>
     f4c:	22 0f       	add	r18, r18
     f4e:	33 1f       	adc	r19, r19
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <step_anticlockwise+0x1e2>
     f54:	84 2f       	mov	r24, r20
     f56:	82 2b       	or	r24, r18
     f58:	89 2b       	or	r24, r25
     f5a:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
     f5c:	28 b1       	in	r18, 0x08	; 8
     f5e:	ae 01       	movw	r20, r28
     f60:	00 90 9d 02 	lds	r0, 0x029D	; 0x80029d <BLU>
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <step_anticlockwise+0x200>
     f66:	44 0f       	add	r20, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <step_anticlockwise+0x1fc>
     f6e:	ce 01       	movw	r24, r28
     f70:	00 90 9e 02 	lds	r0, 0x029E	; 0x80029e <RED>
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <step_anticlockwise+0x210>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <step_anticlockwise+0x20c>
     f7e:	84 2b       	or	r24, r20
     f80:	80 95       	com	r24
     f82:	82 23       	and	r24, r18
     f84:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f86:	0e 94 4c 08 	call	0x1098	; 0x1098 <get_tcnt1_ticks>
     f8a:	6c 15       	cp	r22, r12
     f8c:	7d 05       	cpc	r23, r13
     f8e:	8e 05       	cpc	r24, r14
     f90:	9f 05       	cpc	r25, r15
     f92:	78 f2       	brcs	.-98     	; 0xf32 <step_anticlockwise+0x1c8>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 phase = 0;
     f94:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <phase>
	 }
	 decrement_step();
     f98:	0e 94 8b 05 	call	0xb16	; 0xb16 <decrement_step>
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	08 95       	ret

00000faa <step>:
	//if ((steps > info_ptr->maxStep) || (steps < 0)){
		///*	dont move	*/
		//return;
	//}
	
	int8_t speed = info_ptr->stepSpeed;
     faa:	fc 01       	movw	r30, r24
     fac:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t time_on;
	if (speed >= 0){
     fae:	88 23       	and	r24, r24
     fb0:	44 f1       	brlt	.+80     	; 0x1002 <step+0x58>
			if (speed < 10){
     fb2:	8a 30       	cpi	r24, 0x0A	; 10
     fb4:	94 f0       	brlt	.+36     	; 0xfda <step+0x30>
				time_on = 100;
			} else if (speed < 20) {
     fb6:	84 31       	cpi	r24, 0x14	; 20
     fb8:	94 f0       	brlt	.+36     	; 0xfde <step+0x34>
				time_on = 90;
			} else if (speed < 30) {
     fba:	8e 31       	cpi	r24, 0x1E	; 30
     fbc:	94 f0       	brlt	.+36     	; 0xfe2 <step+0x38>
				time_on = 80;
			} else if (speed < 40) {
     fbe:	88 32       	cpi	r24, 0x28	; 40
     fc0:	94 f0       	brlt	.+36     	; 0xfe6 <step+0x3c>
				time_on = 70;
			} else if (speed < 50){
     fc2:	82 33       	cpi	r24, 0x32	; 50
     fc4:	94 f0       	brlt	.+36     	; 0xfea <step+0x40>
				time_on = 60;
			} else if (speed < 60) {
     fc6:	8c 33       	cpi	r24, 0x3C	; 60
     fc8:	94 f0       	brlt	.+36     	; 0xfee <step+0x44>
				time_on = 50;
			} else if (speed < 70){
     fca:	86 34       	cpi	r24, 0x46	; 70
     fcc:	94 f0       	brlt	.+36     	; 0xff2 <step+0x48>
				time_on = 40;
			} else if (speed < 80) {
     fce:	80 35       	cpi	r24, 0x50	; 80
     fd0:	94 f0       	brlt	.+36     	; 0xff6 <step+0x4c>
				time_on = 30;
			} else if (speed < 90){
     fd2:	8a 35       	cpi	r24, 0x5A	; 90
     fd4:	94 f0       	brlt	.+36     	; 0xffa <step+0x50>
				time_on = 20;
			} else {
				time_on = 10;
     fd6:	8a e0       	ldi	r24, 0x0A	; 10
     fd8:	11 c0       	rjmp	.+34     	; 0xffc <step+0x52>
	
	int8_t speed = info_ptr->stepSpeed;
	uint8_t time_on;
	if (speed >= 0){
			if (speed < 10){
				time_on = 100;
     fda:	84 e6       	ldi	r24, 0x64	; 100
     fdc:	0f c0       	rjmp	.+30     	; 0xffc <step+0x52>
			} else if (speed < 20) {
				time_on = 90;
     fde:	8a e5       	ldi	r24, 0x5A	; 90
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <step+0x52>
			} else if (speed < 30) {
				time_on = 80;
     fe2:	80 e5       	ldi	r24, 0x50	; 80
     fe4:	0b c0       	rjmp	.+22     	; 0xffc <step+0x52>
			} else if (speed < 40) {
				time_on = 70;
     fe6:	86 e4       	ldi	r24, 0x46	; 70
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <step+0x52>
			} else if (speed < 50){
				time_on = 60;
     fea:	8c e3       	ldi	r24, 0x3C	; 60
     fec:	07 c0       	rjmp	.+14     	; 0xffc <step+0x52>
			} else if (speed < 60) {
				time_on = 50;
     fee:	82 e3       	ldi	r24, 0x32	; 50
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <step+0x52>
			} else if (speed < 70){
				time_on = 40;
     ff2:	88 e2       	ldi	r24, 0x28	; 40
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <step+0x52>
			} else if (speed < 80) {
				time_on = 30;
     ff6:	8e e1       	ldi	r24, 0x1E	; 30
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <step+0x52>
			} else if (speed < 90){
				time_on = 20;
     ffa:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 10;
			}
			step_clockwise(time_on);
     ffc:	0e 94 95 05 	call	0xb2a	; 0xb2a <step_clockwise>
    1000:	08 95       	ret
	} else {
			if (speed > -10){
    1002:	87 3f       	cpi	r24, 0xF7	; 247
    1004:	94 f4       	brge	.+36     	; 0x102a <step+0x80>
				time_on = 100;
			} else if (speed > -20) {
    1006:	8d 3e       	cpi	r24, 0xED	; 237
    1008:	94 f4       	brge	.+36     	; 0x102e <step+0x84>
				time_on = 90;
			} else if (speed > -30) {
    100a:	83 3e       	cpi	r24, 0xE3	; 227
    100c:	94 f4       	brge	.+36     	; 0x1032 <step+0x88>
				time_on = 80;
			} else if (speed > -40) {
    100e:	89 3d       	cpi	r24, 0xD9	; 217
    1010:	94 f4       	brge	.+36     	; 0x1036 <step+0x8c>
				time_on = 70;
			} else if (speed > -50){
    1012:	8f 3c       	cpi	r24, 0xCF	; 207
    1014:	94 f4       	brge	.+36     	; 0x103a <step+0x90>
				time_on = 60;
			} else if (speed > -60) {
    1016:	85 3c       	cpi	r24, 0xC5	; 197
    1018:	94 f4       	brge	.+36     	; 0x103e <step+0x94>
				time_on = 50;
			} else if (speed > -70){
    101a:	8b 3b       	cpi	r24, 0xBB	; 187
    101c:	94 f4       	brge	.+36     	; 0x1042 <step+0x98>
				time_on = 40;
			} else if (speed > -80) {
    101e:	81 3b       	cpi	r24, 0xB1	; 177
    1020:	94 f4       	brge	.+36     	; 0x1046 <step+0x9c>
				time_on = 30;
			} else if (speed > -90){
    1022:	87 3a       	cpi	r24, 0xA7	; 167
    1024:	94 f4       	brge	.+36     	; 0x104a <step+0xa0>
				time_on = 20;
			} else {
				time_on = 10;
    1026:	8a e0       	ldi	r24, 0x0A	; 10
    1028:	11 c0       	rjmp	.+34     	; 0x104c <step+0xa2>
				time_on = 10;
			}
			step_clockwise(time_on);
	} else {
			if (speed > -10){
				time_on = 100;
    102a:	84 e6       	ldi	r24, 0x64	; 100
    102c:	0f c0       	rjmp	.+30     	; 0x104c <step+0xa2>
			} else if (speed > -20) {
				time_on = 90;
    102e:	8a e5       	ldi	r24, 0x5A	; 90
    1030:	0d c0       	rjmp	.+26     	; 0x104c <step+0xa2>
			} else if (speed > -30) {
				time_on = 80;
    1032:	80 e5       	ldi	r24, 0x50	; 80
    1034:	0b c0       	rjmp	.+22     	; 0x104c <step+0xa2>
			} else if (speed > -40) {
				time_on = 70;
    1036:	86 e4       	ldi	r24, 0x46	; 70
    1038:	09 c0       	rjmp	.+18     	; 0x104c <step+0xa2>
			} else if (speed > -50){
				time_on = 60;
    103a:	8c e3       	ldi	r24, 0x3C	; 60
    103c:	07 c0       	rjmp	.+14     	; 0x104c <step+0xa2>
			} else if (speed > -60) {
				time_on = 50;
    103e:	82 e3       	ldi	r24, 0x32	; 50
    1040:	05 c0       	rjmp	.+10     	; 0x104c <step+0xa2>
			} else if (speed > -70){
				time_on = 40;
    1042:	88 e2       	ldi	r24, 0x28	; 40
    1044:	03 c0       	rjmp	.+6      	; 0x104c <step+0xa2>
			} else if (speed > -80) {
				time_on = 30;
    1046:	8e e1       	ldi	r24, 0x1E	; 30
    1048:	01 c0       	rjmp	.+2      	; 0x104c <step+0xa2>
			} else if (speed > -90){
				time_on = 20;
    104a:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 10;
			}
			step_anticlockwise(time_on);
    104c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <step_anticlockwise>
    1050:	08 95       	ret

00001052 <init_tcnt1>:

 void init_tcnt1(void){
	 /* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	 
	 //set button to be not pushed
	 Button_on = 0;
    1052:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <Button_on>
	 
	 // set global counter
	 tcnt1_ticks = 0L;
    1056:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <tcnt1_ticks>
    105a:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <tcnt1_ticks+0x1>
    105e:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <tcnt1_ticks+0x2>
    1062:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <tcnt1_ticks+0x3>
	 
	 // set timer / counter
	 TCNT1 = 0;
    1066:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    106a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	 
	 // set output compare resgister; value to execute ISR
	 OCR1A = 124; // between 1 and 255
    106e:	8c e7       	ldi	r24, 0x7C	; 124
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1076:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	 
	 // timer/counter control register A - set to clear when TCNT0 matches OCR0A
	 TCCR1A = (1<<WGM11);
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	 
	 // set the timer to update at a fraction of a clock cycle
	 TCCR1B = (1<<CS11)|(1<<CS10);	// set to f(clk) / 64
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 
	 // timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK1 |= (1<<OCIE1A);
    1086:	ef e6       	ldi	r30, 0x6F	; 111
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	80 83       	st	Z, r24
	 
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR1 &= (1<<OCF1A);
    1090:	86 b3       	in	r24, 0x16	; 22
    1092:	82 70       	andi	r24, 0x02	; 2
    1094:	86 bb       	out	0x16, r24	; 22
    1096:	08 95       	ret

00001098 <get_tcnt1_ticks>:


 uint32_t get_tcnt1_ticks(void) {
	 /* internal reference clock, times how long the system has been on for	*/

	 uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
    1098:	2f b7       	in	r18, 0x3f	; 63
	 cli();
    109a:	f8 94       	cli
	 uint32_t return_value = tcnt1_ticks;
    109c:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <tcnt1_ticks>
    10a0:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <tcnt1_ticks+0x1>
    10a4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <tcnt1_ticks+0x2>
    10a8:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <tcnt1_ticks+0x3>
	 if(interrupts_on) {
    10ac:	22 23       	and	r18, r18
    10ae:	0c f4       	brge	.+2      	; 0x10b2 <get_tcnt1_ticks+0x1a>
		 sei();
    10b0:	78 94       	sei
	 }
	 return return_value;
 }
    10b2:	08 95       	ret

000010b4 <__vector_13>:



 ISR(TIMER1_COMPA_vect) {
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 
	 tcnt1_ticks++;
    10c6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <tcnt1_ticks>
    10ca:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <tcnt1_ticks+0x1>
    10ce:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <tcnt1_ticks+0x2>
    10d2:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <tcnt1_ticks+0x3>
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	a1 1d       	adc	r26, r1
    10da:	b1 1d       	adc	r27, r1
    10dc:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <tcnt1_ticks>
    10e0:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <tcnt1_ticks+0x1>
    10e4:	a0 93 82 01 	sts	0x0182, r26	; 0x800182 <tcnt1_ticks+0x2>
    10e8:	b0 93 83 01 	sts	0x0183, r27	; 0x800183 <tcnt1_ticks+0x3>

    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <__divmodhi4>:
    10fe:	97 fb       	bst	r25, 7
    1100:	07 2e       	mov	r0, r23
    1102:	16 f4       	brtc	.+4      	; 0x1108 <__divmodhi4+0xa>
    1104:	00 94       	com	r0
    1106:	07 d0       	rcall	.+14     	; 0x1116 <__divmodhi4_neg1>
    1108:	77 fd       	sbrc	r23, 7
    110a:	09 d0       	rcall	.+18     	; 0x111e <__divmodhi4_neg2>
    110c:	0e 94 b8 08 	call	0x1170	; 0x1170 <__udivmodhi4>
    1110:	07 fc       	sbrc	r0, 7
    1112:	05 d0       	rcall	.+10     	; 0x111e <__divmodhi4_neg2>
    1114:	3e f4       	brtc	.+14     	; 0x1124 <__divmodhi4_exit>

00001116 <__divmodhi4_neg1>:
    1116:	90 95       	com	r25
    1118:	81 95       	neg	r24
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	08 95       	ret

0000111e <__divmodhi4_neg2>:
    111e:	70 95       	com	r23
    1120:	61 95       	neg	r22
    1122:	7f 4f       	sbci	r23, 0xFF	; 255

00001124 <__divmodhi4_exit>:
    1124:	08 95       	ret

00001126 <__divmodsi4>:
    1126:	05 2e       	mov	r0, r21
    1128:	97 fb       	bst	r25, 7
    112a:	1e f4       	brtc	.+6      	; 0x1132 <__divmodsi4+0xc>
    112c:	00 94       	com	r0
    112e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__negsi2>
    1132:	57 fd       	sbrc	r21, 7
    1134:	07 d0       	rcall	.+14     	; 0x1144 <__divmodsi4_neg2>
    1136:	0e 94 cc 08 	call	0x1198	; 0x1198 <__udivmodsi4>
    113a:	07 fc       	sbrc	r0, 7
    113c:	03 d0       	rcall	.+6      	; 0x1144 <__divmodsi4_neg2>
    113e:	4e f4       	brtc	.+18     	; 0x1152 <__divmodsi4_exit>
    1140:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__negsi2>

00001144 <__divmodsi4_neg2>:
    1144:	50 95       	com	r21
    1146:	40 95       	com	r20
    1148:	30 95       	com	r19
    114a:	21 95       	neg	r18
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	4f 4f       	sbci	r20, 0xFF	; 255
    1150:	5f 4f       	sbci	r21, 0xFF	; 255

00001152 <__divmodsi4_exit>:
    1152:	08 95       	ret

00001154 <__negsi2>:
    1154:	90 95       	com	r25
    1156:	80 95       	com	r24
    1158:	70 95       	com	r23
    115a:	61 95       	neg	r22
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__tablejump2__>:
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	05 90       	lpm	r0, Z+
    116a:	f4 91       	lpm	r31, Z
    116c:	e0 2d       	mov	r30, r0
    116e:	09 94       	ijmp

00001170 <__udivmodhi4>:
    1170:	aa 1b       	sub	r26, r26
    1172:	bb 1b       	sub	r27, r27
    1174:	51 e1       	ldi	r21, 0x11	; 17
    1176:	07 c0       	rjmp	.+14     	; 0x1186 <__udivmodhi4_ep>

00001178 <__udivmodhi4_loop>:
    1178:	aa 1f       	adc	r26, r26
    117a:	bb 1f       	adc	r27, r27
    117c:	a6 17       	cp	r26, r22
    117e:	b7 07       	cpc	r27, r23
    1180:	10 f0       	brcs	.+4      	; 0x1186 <__udivmodhi4_ep>
    1182:	a6 1b       	sub	r26, r22
    1184:	b7 0b       	sbc	r27, r23

00001186 <__udivmodhi4_ep>:
    1186:	88 1f       	adc	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	5a 95       	dec	r21
    118c:	a9 f7       	brne	.-22     	; 0x1178 <__udivmodhi4_loop>
    118e:	80 95       	com	r24
    1190:	90 95       	com	r25
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	08 95       	ret

00001198 <__udivmodsi4>:
    1198:	a1 e2       	ldi	r26, 0x21	; 33
    119a:	1a 2e       	mov	r1, r26
    119c:	aa 1b       	sub	r26, r26
    119e:	bb 1b       	sub	r27, r27
    11a0:	fd 01       	movw	r30, r26
    11a2:	0d c0       	rjmp	.+26     	; 0x11be <__udivmodsi4_ep>

000011a4 <__udivmodsi4_loop>:
    11a4:	aa 1f       	adc	r26, r26
    11a6:	bb 1f       	adc	r27, r27
    11a8:	ee 1f       	adc	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	a2 17       	cp	r26, r18
    11ae:	b3 07       	cpc	r27, r19
    11b0:	e4 07       	cpc	r30, r20
    11b2:	f5 07       	cpc	r31, r21
    11b4:	20 f0       	brcs	.+8      	; 0x11be <__udivmodsi4_ep>
    11b6:	a2 1b       	sub	r26, r18
    11b8:	b3 0b       	sbc	r27, r19
    11ba:	e4 0b       	sbc	r30, r20
    11bc:	f5 0b       	sbc	r31, r21

000011be <__udivmodsi4_ep>:
    11be:	66 1f       	adc	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	88 1f       	adc	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	1a 94       	dec	r1
    11c8:	69 f7       	brne	.-38     	; 0x11a4 <__udivmodsi4_loop>
    11ca:	60 95       	com	r22
    11cc:	70 95       	com	r23
    11ce:	80 95       	com	r24
    11d0:	90 95       	com	r25
    11d2:	9b 01       	movw	r18, r22
    11d4:	ac 01       	movw	r20, r24
    11d6:	bd 01       	movw	r22, r26
    11d8:	cf 01       	movw	r24, r30
    11da:	08 95       	ret

000011dc <malloc>:
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	91 05       	cpc	r25, r1
    11e8:	10 f4       	brcc	.+4      	; 0x11ee <malloc+0x12>
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <__flp>
    11f2:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <__flp+0x1>
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	30 97       	sbiw	r30, 0x00	; 0
    1200:	19 f1       	breq	.+70     	; 0x1248 <malloc+0x6c>
    1202:	40 81       	ld	r20, Z
    1204:	51 81       	ldd	r21, Z+1	; 0x01
    1206:	02 81       	ldd	r16, Z+2	; 0x02
    1208:	13 81       	ldd	r17, Z+3	; 0x03
    120a:	48 17       	cp	r20, r24
    120c:	59 07       	cpc	r21, r25
    120e:	c8 f0       	brcs	.+50     	; 0x1242 <malloc+0x66>
    1210:	84 17       	cp	r24, r20
    1212:	95 07       	cpc	r25, r21
    1214:	69 f4       	brne	.+26     	; 0x1230 <malloc+0x54>
    1216:	10 97       	sbiw	r26, 0x00	; 0
    1218:	31 f0       	breq	.+12     	; 0x1226 <malloc+0x4a>
    121a:	12 96       	adiw	r26, 0x02	; 2
    121c:	0c 93       	st	X, r16
    121e:	12 97       	sbiw	r26, 0x02	; 2
    1220:	13 96       	adiw	r26, 0x03	; 3
    1222:	1c 93       	st	X, r17
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <malloc+0x98>
    1226:	00 93 a1 02 	sts	0x02A1, r16	; 0x8002a1 <__flp>
    122a:	10 93 a2 02 	sts	0x02A2, r17	; 0x8002a2 <__flp+0x1>
    122e:	22 c0       	rjmp	.+68     	; 0x1274 <malloc+0x98>
    1230:	21 15       	cp	r18, r1
    1232:	31 05       	cpc	r19, r1
    1234:	19 f0       	breq	.+6      	; 0x123c <malloc+0x60>
    1236:	42 17       	cp	r20, r18
    1238:	53 07       	cpc	r21, r19
    123a:	18 f4       	brcc	.+6      	; 0x1242 <malloc+0x66>
    123c:	9a 01       	movw	r18, r20
    123e:	bd 01       	movw	r22, r26
    1240:	ef 01       	movw	r28, r30
    1242:	df 01       	movw	r26, r30
    1244:	f8 01       	movw	r30, r16
    1246:	db cf       	rjmp	.-74     	; 0x11fe <malloc+0x22>
    1248:	21 15       	cp	r18, r1
    124a:	31 05       	cpc	r19, r1
    124c:	f9 f0       	breq	.+62     	; 0x128c <malloc+0xb0>
    124e:	28 1b       	sub	r18, r24
    1250:	39 0b       	sbc	r19, r25
    1252:	24 30       	cpi	r18, 0x04	; 4
    1254:	31 05       	cpc	r19, r1
    1256:	80 f4       	brcc	.+32     	; 0x1278 <malloc+0x9c>
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	9b 81       	ldd	r25, Y+3	; 0x03
    125c:	61 15       	cp	r22, r1
    125e:	71 05       	cpc	r23, r1
    1260:	21 f0       	breq	.+8      	; 0x126a <malloc+0x8e>
    1262:	fb 01       	movw	r30, r22
    1264:	93 83       	std	Z+3, r25	; 0x03
    1266:	82 83       	std	Z+2, r24	; 0x02
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <malloc+0x96>
    126a:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__flp+0x1>
    126e:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <__flp>
    1272:	fe 01       	movw	r30, r28
    1274:	32 96       	adiw	r30, 0x02	; 2
    1276:	44 c0       	rjmp	.+136    	; 0x1300 <malloc+0x124>
    1278:	fe 01       	movw	r30, r28
    127a:	e2 0f       	add	r30, r18
    127c:	f3 1f       	adc	r31, r19
    127e:	81 93       	st	Z+, r24
    1280:	91 93       	st	Z+, r25
    1282:	22 50       	subi	r18, 0x02	; 2
    1284:	31 09       	sbc	r19, r1
    1286:	39 83       	std	Y+1, r19	; 0x01
    1288:	28 83       	st	Y, r18
    128a:	3a c0       	rjmp	.+116    	; 0x1300 <malloc+0x124>
    128c:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    1290:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    1294:	23 2b       	or	r18, r19
    1296:	41 f4       	brne	.+16     	; 0x12a8 <malloc+0xcc>
    1298:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    129c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    12a0:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <__brkval+0x1>
    12a4:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <__brkval>
    12a8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    12ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    12b0:	21 15       	cp	r18, r1
    12b2:	31 05       	cpc	r19, r1
    12b4:	41 f4       	brne	.+16     	; 0x12c6 <malloc+0xea>
    12b6:	2d b7       	in	r18, 0x3d	; 61
    12b8:	3e b7       	in	r19, 0x3e	; 62
    12ba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    12be:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    12c2:	24 1b       	sub	r18, r20
    12c4:	35 0b       	sbc	r19, r21
    12c6:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__brkval>
    12ca:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <__brkval+0x1>
    12ce:	e2 17       	cp	r30, r18
    12d0:	f3 07       	cpc	r31, r19
    12d2:	a0 f4       	brcc	.+40     	; 0x12fc <malloc+0x120>
    12d4:	2e 1b       	sub	r18, r30
    12d6:	3f 0b       	sbc	r19, r31
    12d8:	28 17       	cp	r18, r24
    12da:	39 07       	cpc	r19, r25
    12dc:	78 f0       	brcs	.+30     	; 0x12fc <malloc+0x120>
    12de:	ac 01       	movw	r20, r24
    12e0:	4e 5f       	subi	r20, 0xFE	; 254
    12e2:	5f 4f       	sbci	r21, 0xFF	; 255
    12e4:	24 17       	cp	r18, r20
    12e6:	35 07       	cpc	r19, r21
    12e8:	48 f0       	brcs	.+18     	; 0x12fc <malloc+0x120>
    12ea:	4e 0f       	add	r20, r30
    12ec:	5f 1f       	adc	r21, r31
    12ee:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <__brkval+0x1>
    12f2:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <__brkval>
    12f6:	81 93       	st	Z+, r24
    12f8:	91 93       	st	Z+, r25
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <malloc+0x124>
    12fc:	e0 e0       	ldi	r30, 0x00	; 0
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	cf 01       	movw	r24, r30
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	08 95       	ret

0000130c <free>:
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	09 f4       	brne	.+2      	; 0x1316 <free+0xa>
    1314:	81 c0       	rjmp	.+258    	; 0x1418 <free+0x10c>
    1316:	fc 01       	movw	r30, r24
    1318:	32 97       	sbiw	r30, 0x02	; 2
    131a:	13 82       	std	Z+3, r1	; 0x03
    131c:	12 82       	std	Z+2, r1	; 0x02
    131e:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <__flp>
    1322:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <__flp+0x1>
    1326:	10 97       	sbiw	r26, 0x00	; 0
    1328:	81 f4       	brne	.+32     	; 0x134a <free+0x3e>
    132a:	20 81       	ld	r18, Z
    132c:	31 81       	ldd	r19, Z+1	; 0x01
    132e:	82 0f       	add	r24, r18
    1330:	93 1f       	adc	r25, r19
    1332:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    1336:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    133a:	28 17       	cp	r18, r24
    133c:	39 07       	cpc	r19, r25
    133e:	51 f5       	brne	.+84     	; 0x1394 <free+0x88>
    1340:	f0 93 a0 02 	sts	0x02A0, r31	; 0x8002a0 <__brkval+0x1>
    1344:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <__brkval>
    1348:	67 c0       	rjmp	.+206    	; 0x1418 <free+0x10c>
    134a:	ed 01       	movw	r28, r26
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	ce 17       	cp	r28, r30
    1352:	df 07       	cpc	r29, r31
    1354:	40 f4       	brcc	.+16     	; 0x1366 <free+0x5a>
    1356:	4a 81       	ldd	r20, Y+2	; 0x02
    1358:	5b 81       	ldd	r21, Y+3	; 0x03
    135a:	9e 01       	movw	r18, r28
    135c:	41 15       	cp	r20, r1
    135e:	51 05       	cpc	r21, r1
    1360:	f1 f0       	breq	.+60     	; 0x139e <free+0x92>
    1362:	ea 01       	movw	r28, r20
    1364:	f5 cf       	rjmp	.-22     	; 0x1350 <free+0x44>
    1366:	d3 83       	std	Z+3, r29	; 0x03
    1368:	c2 83       	std	Z+2, r28	; 0x02
    136a:	40 81       	ld	r20, Z
    136c:	51 81       	ldd	r21, Z+1	; 0x01
    136e:	84 0f       	add	r24, r20
    1370:	95 1f       	adc	r25, r21
    1372:	c8 17       	cp	r28, r24
    1374:	d9 07       	cpc	r29, r25
    1376:	59 f4       	brne	.+22     	; 0x138e <free+0x82>
    1378:	88 81       	ld	r24, Y
    137a:	99 81       	ldd	r25, Y+1	; 0x01
    137c:	84 0f       	add	r24, r20
    137e:	95 1f       	adc	r25, r21
    1380:	02 96       	adiw	r24, 0x02	; 2
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	9b 81       	ldd	r25, Y+3	; 0x03
    138a:	93 83       	std	Z+3, r25	; 0x03
    138c:	82 83       	std	Z+2, r24	; 0x02
    138e:	21 15       	cp	r18, r1
    1390:	31 05       	cpc	r19, r1
    1392:	29 f4       	brne	.+10     	; 0x139e <free+0x92>
    1394:	f0 93 a2 02 	sts	0x02A2, r31	; 0x8002a2 <__flp+0x1>
    1398:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <__flp>
    139c:	3d c0       	rjmp	.+122    	; 0x1418 <free+0x10c>
    139e:	e9 01       	movw	r28, r18
    13a0:	fb 83       	std	Y+3, r31	; 0x03
    13a2:	ea 83       	std	Y+2, r30	; 0x02
    13a4:	49 91       	ld	r20, Y+
    13a6:	59 91       	ld	r21, Y+
    13a8:	c4 0f       	add	r28, r20
    13aa:	d5 1f       	adc	r29, r21
    13ac:	ec 17       	cp	r30, r28
    13ae:	fd 07       	cpc	r31, r29
    13b0:	61 f4       	brne	.+24     	; 0x13ca <free+0xbe>
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	84 0f       	add	r24, r20
    13b8:	95 1f       	adc	r25, r21
    13ba:	02 96       	adiw	r24, 0x02	; 2
    13bc:	e9 01       	movw	r28, r18
    13be:	99 83       	std	Y+1, r25	; 0x01
    13c0:	88 83       	st	Y, r24
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	9b 83       	std	Y+3, r25	; 0x03
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	e0 e0       	ldi	r30, 0x00	; 0
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	8d 91       	ld	r24, X+
    13d2:	9c 91       	ld	r25, X
    13d4:	13 97       	sbiw	r26, 0x03	; 3
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <free+0xd4>
    13da:	fd 01       	movw	r30, r26
    13dc:	dc 01       	movw	r26, r24
    13de:	f7 cf       	rjmp	.-18     	; 0x13ce <free+0xc2>
    13e0:	8d 91       	ld	r24, X+
    13e2:	9c 91       	ld	r25, X
    13e4:	11 97       	sbiw	r26, 0x01	; 1
    13e6:	9d 01       	movw	r18, r26
    13e8:	2e 5f       	subi	r18, 0xFE	; 254
    13ea:	3f 4f       	sbci	r19, 0xFF	; 255
    13ec:	82 0f       	add	r24, r18
    13ee:	93 1f       	adc	r25, r19
    13f0:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    13f4:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    13f8:	28 17       	cp	r18, r24
    13fa:	39 07       	cpc	r19, r25
    13fc:	69 f4       	brne	.+26     	; 0x1418 <free+0x10c>
    13fe:	30 97       	sbiw	r30, 0x00	; 0
    1400:	29 f4       	brne	.+10     	; 0x140c <free+0x100>
    1402:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__flp+0x1>
    1406:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <__flp>
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <free+0x104>
    140c:	13 82       	std	Z+3, r1	; 0x03
    140e:	12 82       	std	Z+2, r1	; 0x02
    1410:	b0 93 a0 02 	sts	0x02A0, r27	; 0x8002a0 <__brkval+0x1>
    1414:	a0 93 9f 02 	sts	0x029F, r26	; 0x80029f <__brkval>
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <do_rand>:
    141e:	8f 92       	push	r8
    1420:	9f 92       	push	r9
    1422:	af 92       	push	r10
    1424:	bf 92       	push	r11
    1426:	cf 92       	push	r12
    1428:	df 92       	push	r13
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	ec 01       	movw	r28, r24
    1434:	68 81       	ld	r22, Y
    1436:	79 81       	ldd	r23, Y+1	; 0x01
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	9b 81       	ldd	r25, Y+3	; 0x03
    143c:	61 15       	cp	r22, r1
    143e:	71 05       	cpc	r23, r1
    1440:	81 05       	cpc	r24, r1
    1442:	91 05       	cpc	r25, r1
    1444:	21 f4       	brne	.+8      	; 0x144e <do_rand+0x30>
    1446:	64 e2       	ldi	r22, 0x24	; 36
    1448:	79 ed       	ldi	r23, 0xD9	; 217
    144a:	8b e5       	ldi	r24, 0x5B	; 91
    144c:	97 e0       	ldi	r25, 0x07	; 7
    144e:	2d e1       	ldi	r18, 0x1D	; 29
    1450:	33 ef       	ldi	r19, 0xF3	; 243
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	0e 94 93 08 	call	0x1126	; 0x1126 <__divmodsi4>
    145a:	49 01       	movw	r8, r18
    145c:	5a 01       	movw	r10, r20
    145e:	9b 01       	movw	r18, r22
    1460:	ac 01       	movw	r20, r24
    1462:	a7 ea       	ldi	r26, 0xA7	; 167
    1464:	b1 e4       	ldi	r27, 0x41	; 65
    1466:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__muluhisi3>
    146a:	6b 01       	movw	r12, r22
    146c:	7c 01       	movw	r14, r24
    146e:	ac ee       	ldi	r26, 0xEC	; 236
    1470:	b4 ef       	ldi	r27, 0xF4	; 244
    1472:	a5 01       	movw	r20, r10
    1474:	94 01       	movw	r18, r8
    1476:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__mulohisi3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	8c 0d       	add	r24, r12
    1480:	9d 1d       	adc	r25, r13
    1482:	ae 1d       	adc	r26, r14
    1484:	bf 1d       	adc	r27, r15
    1486:	b7 ff       	sbrs	r27, 7
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <do_rand+0x72>
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	a1 09       	sbc	r26, r1
    148e:	b0 48       	sbci	r27, 0x80	; 128
    1490:	88 83       	st	Y, r24
    1492:	99 83       	std	Y+1, r25	; 0x01
    1494:	aa 83       	std	Y+2, r26	; 0x02
    1496:	bb 83       	std	Y+3, r27	; 0x03
    1498:	9f 77       	andi	r25, 0x7F	; 127
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	9f 90       	pop	r9
    14ac:	8f 90       	pop	r8
    14ae:	08 95       	ret

000014b0 <rand_r>:
    14b0:	0e 94 0f 0a 	call	0x141e	; 0x141e <do_rand>
    14b4:	08 95       	ret

000014b6 <rand>:
    14b6:	86 e0       	ldi	r24, 0x06	; 6
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	0e 94 0f 0a 	call	0x141e	; 0x141e <do_rand>
    14be:	08 95       	ret

000014c0 <srand>:
    14c0:	a0 e0       	ldi	r26, 0x00	; 0
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    14c8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    14cc:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    14d0:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    14d4:	08 95       	ret

000014d6 <fgetc>:
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	ec 01       	movw	r28, r24
    14dc:	2b 81       	ldd	r18, Y+3	; 0x03
    14de:	20 ff       	sbrs	r18, 0
    14e0:	33 c0       	rjmp	.+102    	; 0x1548 <fgetc+0x72>
    14e2:	26 ff       	sbrs	r18, 6
    14e4:	0a c0       	rjmp	.+20     	; 0x14fa <fgetc+0x24>
    14e6:	2f 7b       	andi	r18, 0xBF	; 191
    14e8:	2b 83       	std	Y+3, r18	; 0x03
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	9f 81       	ldd	r25, Y+7	; 0x07
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9f 83       	std	Y+7, r25	; 0x07
    14f2:	8e 83       	std	Y+6, r24	; 0x06
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	29 c0       	rjmp	.+82     	; 0x154c <fgetc+0x76>
    14fa:	22 ff       	sbrs	r18, 2
    14fc:	0f c0       	rjmp	.+30     	; 0x151c <fgetc+0x46>
    14fe:	e8 81       	ld	r30, Y
    1500:	f9 81       	ldd	r31, Y+1	; 0x01
    1502:	80 81       	ld	r24, Z
    1504:	08 2e       	mov	r0, r24
    1506:	00 0c       	add	r0, r0
    1508:	99 0b       	sbc	r25, r25
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	19 f4       	brne	.+6      	; 0x1514 <fgetc+0x3e>
    150e:	20 62       	ori	r18, 0x20	; 32
    1510:	2b 83       	std	Y+3, r18	; 0x03
    1512:	1a c0       	rjmp	.+52     	; 0x1548 <fgetc+0x72>
    1514:	31 96       	adiw	r30, 0x01	; 1
    1516:	f9 83       	std	Y+1, r31	; 0x01
    1518:	e8 83       	st	Y, r30
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <fgetc+0x62>
    151c:	ea 85       	ldd	r30, Y+10	; 0x0a
    151e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1520:	09 95       	icall
    1522:	97 ff       	sbrs	r25, 7
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <fgetc+0x62>
    1526:	2b 81       	ldd	r18, Y+3	; 0x03
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	11 f0       	breq	.+4      	; 0x1530 <fgetc+0x5a>
    152c:	80 e2       	ldi	r24, 0x20	; 32
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <fgetc+0x5c>
    1530:	80 e1       	ldi	r24, 0x10	; 16
    1532:	82 2b       	or	r24, r18
    1534:	8b 83       	std	Y+3, r24	; 0x03
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <fgetc+0x72>
    1538:	2e 81       	ldd	r18, Y+6	; 0x06
    153a:	3f 81       	ldd	r19, Y+7	; 0x07
    153c:	2f 5f       	subi	r18, 0xFF	; 255
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	3f 83       	std	Y+7, r19	; 0x07
    1542:	2e 83       	std	Y+6, r18	; 0x06
    1544:	99 27       	eor	r25, r25
    1546:	02 c0       	rjmp	.+4      	; 0x154c <fgetc+0x76>
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	9f ef       	ldi	r25, 0xFF	; 255
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	08 95       	ret

00001552 <fputc>:
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	fb 01       	movw	r30, r22
    155c:	23 81       	ldd	r18, Z+3	; 0x03
    155e:	21 fd       	sbrc	r18, 1
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <fputc+0x16>
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	9f ef       	ldi	r25, 0xFF	; 255
    1566:	2c c0       	rjmp	.+88     	; 0x15c0 <fputc+0x6e>
    1568:	22 ff       	sbrs	r18, 2
    156a:	16 c0       	rjmp	.+44     	; 0x1598 <fputc+0x46>
    156c:	46 81       	ldd	r20, Z+6	; 0x06
    156e:	57 81       	ldd	r21, Z+7	; 0x07
    1570:	24 81       	ldd	r18, Z+4	; 0x04
    1572:	35 81       	ldd	r19, Z+5	; 0x05
    1574:	42 17       	cp	r20, r18
    1576:	53 07       	cpc	r21, r19
    1578:	44 f4       	brge	.+16     	; 0x158a <fputc+0x38>
    157a:	a0 81       	ld	r26, Z
    157c:	b1 81       	ldd	r27, Z+1	; 0x01
    157e:	9d 01       	movw	r18, r26
    1580:	2f 5f       	subi	r18, 0xFF	; 255
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	31 83       	std	Z+1, r19	; 0x01
    1586:	20 83       	st	Z, r18
    1588:	8c 93       	st	X, r24
    158a:	26 81       	ldd	r18, Z+6	; 0x06
    158c:	37 81       	ldd	r19, Z+7	; 0x07
    158e:	2f 5f       	subi	r18, 0xFF	; 255
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	37 83       	std	Z+7, r19	; 0x07
    1594:	26 83       	std	Z+6, r18	; 0x06
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <fputc+0x6e>
    1598:	8b 01       	movw	r16, r22
    159a:	ec 01       	movw	r28, r24
    159c:	fb 01       	movw	r30, r22
    159e:	00 84       	ldd	r0, Z+8	; 0x08
    15a0:	f1 85       	ldd	r31, Z+9	; 0x09
    15a2:	e0 2d       	mov	r30, r0
    15a4:	09 95       	icall
    15a6:	89 2b       	or	r24, r25
    15a8:	e1 f6       	brne	.-72     	; 0x1562 <fputc+0x10>
    15aa:	d8 01       	movw	r26, r16
    15ac:	16 96       	adiw	r26, 0x06	; 6
    15ae:	8d 91       	ld	r24, X+
    15b0:	9c 91       	ld	r25, X
    15b2:	17 97       	sbiw	r26, 0x07	; 7
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	17 96       	adiw	r26, 0x07	; 7
    15b8:	9c 93       	st	X, r25
    15ba:	8e 93       	st	-X, r24
    15bc:	16 97       	sbiw	r26, 0x06	; 6
    15be:	ce 01       	movw	r24, r28
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	08 95       	ret

000015ca <fputs>:
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	db 01       	movw	r26, r22
    15d8:	13 96       	adiw	r26, 0x03	; 3
    15da:	2c 91       	ld	r18, X
    15dc:	21 ff       	sbrs	r18, 1
    15de:	18 c0       	rjmp	.+48     	; 0x1610 <fputs+0x46>
    15e0:	8b 01       	movw	r16, r22
    15e2:	7c 01       	movw	r14, r24
    15e4:	d0 e0       	ldi	r29, 0x00	; 0
    15e6:	c0 e0       	ldi	r28, 0x00	; 0
    15e8:	f7 01       	movw	r30, r14
    15ea:	81 91       	ld	r24, Z+
    15ec:	7f 01       	movw	r14, r30
    15ee:	88 23       	and	r24, r24
    15f0:	61 f0       	breq	.+24     	; 0x160a <fputs+0x40>
    15f2:	d8 01       	movw	r26, r16
    15f4:	18 96       	adiw	r26, 0x08	; 8
    15f6:	ed 91       	ld	r30, X+
    15f8:	fc 91       	ld	r31, X
    15fa:	19 97       	sbiw	r26, 0x09	; 9
    15fc:	b8 01       	movw	r22, r16
    15fe:	09 95       	icall
    1600:	89 2b       	or	r24, r25
    1602:	91 f3       	breq	.-28     	; 0x15e8 <fputs+0x1e>
    1604:	df ef       	ldi	r29, 0xFF	; 255
    1606:	cf ef       	ldi	r28, 0xFF	; 255
    1608:	ef cf       	rjmp	.-34     	; 0x15e8 <fputs+0x1e>
    160a:	8d 2f       	mov	r24, r29
    160c:	9c 2f       	mov	r25, r28
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <fputs+0x4a>
    1610:	8f ef       	ldi	r24, 0xFF	; 255
    1612:	9f ef       	ldi	r25, 0xFF	; 255
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	e6 e0       	ldi	r30, 0x06	; 6
    161a:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__epilogue_restores__+0x18>

0000161e <fwrite>:
    161e:	a0 e0       	ldi	r26, 0x00	; 0
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e5 e1       	ldi	r30, 0x15	; 21
    1624:	fb e0       	ldi	r31, 0x0B	; 11
    1626:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__prologue_saves__+0xc>
    162a:	5b 01       	movw	r10, r22
    162c:	4a 01       	movw	r8, r20
    162e:	79 01       	movw	r14, r18
    1630:	d9 01       	movw	r26, r18
    1632:	13 96       	adiw	r26, 0x03	; 3
    1634:	2c 91       	ld	r18, X
    1636:	21 ff       	sbrs	r18, 1
    1638:	1d c0       	rjmp	.+58     	; 0x1674 <fwrite+0x56>
    163a:	c0 e0       	ldi	r28, 0x00	; 0
    163c:	d0 e0       	ldi	r29, 0x00	; 0
    163e:	c8 15       	cp	r28, r8
    1640:	d9 05       	cpc	r29, r9
    1642:	d9 f0       	breq	.+54     	; 0x167a <fwrite+0x5c>
    1644:	8c 01       	movw	r16, r24
    1646:	6c 01       	movw	r12, r24
    1648:	ca 0c       	add	r12, r10
    164a:	db 1c       	adc	r13, r11
    164c:	c8 01       	movw	r24, r16
    164e:	0c 15       	cp	r16, r12
    1650:	1d 05       	cpc	r17, r13
    1652:	71 f0       	breq	.+28     	; 0x1670 <fwrite+0x52>
    1654:	0f 5f       	subi	r16, 0xFF	; 255
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	d7 01       	movw	r26, r14
    165a:	18 96       	adiw	r26, 0x08	; 8
    165c:	ed 91       	ld	r30, X+
    165e:	fc 91       	ld	r31, X
    1660:	19 97       	sbiw	r26, 0x09	; 9
    1662:	b7 01       	movw	r22, r14
    1664:	dc 01       	movw	r26, r24
    1666:	8c 91       	ld	r24, X
    1668:	09 95       	icall
    166a:	89 2b       	or	r24, r25
    166c:	79 f3       	breq	.-34     	; 0x164c <fwrite+0x2e>
    166e:	05 c0       	rjmp	.+10     	; 0x167a <fwrite+0x5c>
    1670:	21 96       	adiw	r28, 0x01	; 1
    1672:	e5 cf       	rjmp	.-54     	; 0x163e <fwrite+0x20>
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	01 c0       	rjmp	.+2      	; 0x167c <fwrite+0x5e>
    167a:	ce 01       	movw	r24, r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	ec e0       	ldi	r30, 0x0C	; 12
    1682:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__epilogue_restores__+0xc>

00001686 <sprintf>:
    1686:	ae e0       	ldi	r26, 0x0E	; 14
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e9 e4       	ldi	r30, 0x49	; 73
    168c:	fb e0       	ldi	r31, 0x0B	; 11
    168e:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__prologue_saves__+0x1c>
    1692:	0d 89       	ldd	r16, Y+21	; 0x15
    1694:	1e 89       	ldd	r17, Y+22	; 0x16
    1696:	86 e0       	ldi	r24, 0x06	; 6
    1698:	8c 83       	std	Y+4, r24	; 0x04
    169a:	1a 83       	std	Y+2, r17	; 0x02
    169c:	09 83       	std	Y+1, r16	; 0x01
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	9f e7       	ldi	r25, 0x7F	; 127
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	ae 01       	movw	r20, r28
    16a8:	47 5e       	subi	r20, 0xE7	; 231
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	6f 89       	ldd	r22, Y+23	; 0x17
    16ae:	78 8d       	ldd	r23, Y+24	; 0x18
    16b0:	ce 01       	movw	r24, r28
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vfprintf>
    16b8:	ef 81       	ldd	r30, Y+7	; 0x07
    16ba:	f8 85       	ldd	r31, Y+8	; 0x08
    16bc:	e0 0f       	add	r30, r16
    16be:	f1 1f       	adc	r31, r17
    16c0:	10 82       	st	Z, r1
    16c2:	2e 96       	adiw	r28, 0x0e	; 14
    16c4:	e4 e0       	ldi	r30, 0x04	; 4
    16c6:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__epilogue_restores__+0x1c>

000016ca <vfprintf>:
    16ca:	ab e0       	ldi	r26, 0x0B	; 11
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e6       	ldi	r30, 0x6B	; 107
    16d0:	fb e0       	ldi	r31, 0x0B	; 11
    16d2:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__prologue_saves__>
    16d6:	6c 01       	movw	r12, r24
    16d8:	7b 01       	movw	r14, r22
    16da:	8a 01       	movw	r16, r20
    16dc:	fc 01       	movw	r30, r24
    16de:	17 82       	std	Z+7, r1	; 0x07
    16e0:	16 82       	std	Z+6, r1	; 0x06
    16e2:	83 81       	ldd	r24, Z+3	; 0x03
    16e4:	81 ff       	sbrs	r24, 1
    16e6:	cc c1       	rjmp	.+920    	; 0x1a80 <vfprintf+0x3b6>
    16e8:	ce 01       	movw	r24, r28
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	3c 01       	movw	r6, r24
    16ee:	f6 01       	movw	r30, r12
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	f7 01       	movw	r30, r14
    16f4:	93 fd       	sbrc	r25, 3
    16f6:	85 91       	lpm	r24, Z+
    16f8:	93 ff       	sbrs	r25, 3
    16fa:	81 91       	ld	r24, Z+
    16fc:	7f 01       	movw	r14, r30
    16fe:	88 23       	and	r24, r24
    1700:	09 f4       	brne	.+2      	; 0x1704 <vfprintf+0x3a>
    1702:	ba c1       	rjmp	.+884    	; 0x1a78 <vfprintf+0x3ae>
    1704:	85 32       	cpi	r24, 0x25	; 37
    1706:	39 f4       	brne	.+14     	; 0x1716 <vfprintf+0x4c>
    1708:	93 fd       	sbrc	r25, 3
    170a:	85 91       	lpm	r24, Z+
    170c:	93 ff       	sbrs	r25, 3
    170e:	81 91       	ld	r24, Z+
    1710:	7f 01       	movw	r14, r30
    1712:	85 32       	cpi	r24, 0x25	; 37
    1714:	29 f4       	brne	.+10     	; 0x1720 <vfprintf+0x56>
    1716:	b6 01       	movw	r22, r12
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    171e:	e7 cf       	rjmp	.-50     	; 0x16ee <vfprintf+0x24>
    1720:	91 2c       	mov	r9, r1
    1722:	21 2c       	mov	r2, r1
    1724:	31 2c       	mov	r3, r1
    1726:	ff e1       	ldi	r31, 0x1F	; 31
    1728:	f3 15       	cp	r31, r3
    172a:	d8 f0       	brcs	.+54     	; 0x1762 <vfprintf+0x98>
    172c:	8b 32       	cpi	r24, 0x2B	; 43
    172e:	79 f0       	breq	.+30     	; 0x174e <vfprintf+0x84>
    1730:	38 f4       	brcc	.+14     	; 0x1740 <vfprintf+0x76>
    1732:	80 32       	cpi	r24, 0x20	; 32
    1734:	79 f0       	breq	.+30     	; 0x1754 <vfprintf+0x8a>
    1736:	83 32       	cpi	r24, 0x23	; 35
    1738:	a1 f4       	brne	.+40     	; 0x1762 <vfprintf+0x98>
    173a:	23 2d       	mov	r18, r3
    173c:	20 61       	ori	r18, 0x10	; 16
    173e:	1d c0       	rjmp	.+58     	; 0x177a <vfprintf+0xb0>
    1740:	8d 32       	cpi	r24, 0x2D	; 45
    1742:	61 f0       	breq	.+24     	; 0x175c <vfprintf+0x92>
    1744:	80 33       	cpi	r24, 0x30	; 48
    1746:	69 f4       	brne	.+26     	; 0x1762 <vfprintf+0x98>
    1748:	23 2d       	mov	r18, r3
    174a:	21 60       	ori	r18, 0x01	; 1
    174c:	16 c0       	rjmp	.+44     	; 0x177a <vfprintf+0xb0>
    174e:	83 2d       	mov	r24, r3
    1750:	82 60       	ori	r24, 0x02	; 2
    1752:	38 2e       	mov	r3, r24
    1754:	e3 2d       	mov	r30, r3
    1756:	e4 60       	ori	r30, 0x04	; 4
    1758:	3e 2e       	mov	r3, r30
    175a:	2a c0       	rjmp	.+84     	; 0x17b0 <vfprintf+0xe6>
    175c:	f3 2d       	mov	r31, r3
    175e:	f8 60       	ori	r31, 0x08	; 8
    1760:	1d c0       	rjmp	.+58     	; 0x179c <vfprintf+0xd2>
    1762:	37 fc       	sbrc	r3, 7
    1764:	2d c0       	rjmp	.+90     	; 0x17c0 <vfprintf+0xf6>
    1766:	20 ed       	ldi	r18, 0xD0	; 208
    1768:	28 0f       	add	r18, r24
    176a:	2a 30       	cpi	r18, 0x0A	; 10
    176c:	40 f0       	brcs	.+16     	; 0x177e <vfprintf+0xb4>
    176e:	8e 32       	cpi	r24, 0x2E	; 46
    1770:	b9 f4       	brne	.+46     	; 0x17a0 <vfprintf+0xd6>
    1772:	36 fc       	sbrc	r3, 6
    1774:	81 c1       	rjmp	.+770    	; 0x1a78 <vfprintf+0x3ae>
    1776:	23 2d       	mov	r18, r3
    1778:	20 64       	ori	r18, 0x40	; 64
    177a:	32 2e       	mov	r3, r18
    177c:	19 c0       	rjmp	.+50     	; 0x17b0 <vfprintf+0xe6>
    177e:	36 fe       	sbrs	r3, 6
    1780:	06 c0       	rjmp	.+12     	; 0x178e <vfprintf+0xc4>
    1782:	8a e0       	ldi	r24, 0x0A	; 10
    1784:	98 9e       	mul	r9, r24
    1786:	20 0d       	add	r18, r0
    1788:	11 24       	eor	r1, r1
    178a:	92 2e       	mov	r9, r18
    178c:	11 c0       	rjmp	.+34     	; 0x17b0 <vfprintf+0xe6>
    178e:	ea e0       	ldi	r30, 0x0A	; 10
    1790:	2e 9e       	mul	r2, r30
    1792:	20 0d       	add	r18, r0
    1794:	11 24       	eor	r1, r1
    1796:	22 2e       	mov	r2, r18
    1798:	f3 2d       	mov	r31, r3
    179a:	f0 62       	ori	r31, 0x20	; 32
    179c:	3f 2e       	mov	r3, r31
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <vfprintf+0xe6>
    17a0:	8c 36       	cpi	r24, 0x6C	; 108
    17a2:	21 f4       	brne	.+8      	; 0x17ac <vfprintf+0xe2>
    17a4:	83 2d       	mov	r24, r3
    17a6:	80 68       	ori	r24, 0x80	; 128
    17a8:	38 2e       	mov	r3, r24
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <vfprintf+0xe6>
    17ac:	88 36       	cpi	r24, 0x68	; 104
    17ae:	41 f4       	brne	.+16     	; 0x17c0 <vfprintf+0xf6>
    17b0:	f7 01       	movw	r30, r14
    17b2:	93 fd       	sbrc	r25, 3
    17b4:	85 91       	lpm	r24, Z+
    17b6:	93 ff       	sbrs	r25, 3
    17b8:	81 91       	ld	r24, Z+
    17ba:	7f 01       	movw	r14, r30
    17bc:	81 11       	cpse	r24, r1
    17be:	b3 cf       	rjmp	.-154    	; 0x1726 <vfprintf+0x5c>
    17c0:	98 2f       	mov	r25, r24
    17c2:	9f 7d       	andi	r25, 0xDF	; 223
    17c4:	95 54       	subi	r25, 0x45	; 69
    17c6:	93 30       	cpi	r25, 0x03	; 3
    17c8:	28 f4       	brcc	.+10     	; 0x17d4 <vfprintf+0x10a>
    17ca:	0c 5f       	subi	r16, 0xFC	; 252
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	9f e3       	ldi	r25, 0x3F	; 63
    17d0:	99 83       	std	Y+1, r25	; 0x01
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <vfprintf+0x124>
    17d4:	83 36       	cpi	r24, 0x63	; 99
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <vfprintf+0x11a>
    17d8:	83 37       	cpi	r24, 0x73	; 115
    17da:	71 f0       	breq	.+28     	; 0x17f8 <vfprintf+0x12e>
    17dc:	83 35       	cpi	r24, 0x53	; 83
    17de:	09 f0       	breq	.+2      	; 0x17e2 <vfprintf+0x118>
    17e0:	59 c0       	rjmp	.+178    	; 0x1894 <vfprintf+0x1ca>
    17e2:	21 c0       	rjmp	.+66     	; 0x1826 <vfprintf+0x15c>
    17e4:	f8 01       	movw	r30, r16
    17e6:	80 81       	ld	r24, Z
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	0e 5f       	subi	r16, 0xFE	; 254
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	88 24       	eor	r8, r8
    17f0:	83 94       	inc	r8
    17f2:	91 2c       	mov	r9, r1
    17f4:	53 01       	movw	r10, r6
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <vfprintf+0x154>
    17f8:	28 01       	movw	r4, r16
    17fa:	f2 e0       	ldi	r31, 0x02	; 2
    17fc:	4f 0e       	add	r4, r31
    17fe:	51 1c       	adc	r5, r1
    1800:	f8 01       	movw	r30, r16
    1802:	a0 80       	ld	r10, Z
    1804:	b1 80       	ldd	r11, Z+1	; 0x01
    1806:	36 fe       	sbrs	r3, 6
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <vfprintf+0x146>
    180a:	69 2d       	mov	r22, r9
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <vfprintf+0x14a>
    1810:	6f ef       	ldi	r22, 0xFF	; 255
    1812:	7f ef       	ldi	r23, 0xFF	; 255
    1814:	c5 01       	movw	r24, r10
    1816:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <strnlen>
    181a:	4c 01       	movw	r8, r24
    181c:	82 01       	movw	r16, r4
    181e:	f3 2d       	mov	r31, r3
    1820:	ff 77       	andi	r31, 0x7F	; 127
    1822:	3f 2e       	mov	r3, r31
    1824:	16 c0       	rjmp	.+44     	; 0x1852 <vfprintf+0x188>
    1826:	28 01       	movw	r4, r16
    1828:	22 e0       	ldi	r18, 0x02	; 2
    182a:	42 0e       	add	r4, r18
    182c:	51 1c       	adc	r5, r1
    182e:	f8 01       	movw	r30, r16
    1830:	a0 80       	ld	r10, Z
    1832:	b1 80       	ldd	r11, Z+1	; 0x01
    1834:	36 fe       	sbrs	r3, 6
    1836:	03 c0       	rjmp	.+6      	; 0x183e <vfprintf+0x174>
    1838:	69 2d       	mov	r22, r9
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <vfprintf+0x178>
    183e:	6f ef       	ldi	r22, 0xFF	; 255
    1840:	7f ef       	ldi	r23, 0xFF	; 255
    1842:	c5 01       	movw	r24, r10
    1844:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <strnlen_P>
    1848:	4c 01       	movw	r8, r24
    184a:	f3 2d       	mov	r31, r3
    184c:	f0 68       	ori	r31, 0x80	; 128
    184e:	3f 2e       	mov	r3, r31
    1850:	82 01       	movw	r16, r4
    1852:	33 fc       	sbrc	r3, 3
    1854:	1b c0       	rjmp	.+54     	; 0x188c <vfprintf+0x1c2>
    1856:	82 2d       	mov	r24, r2
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	88 16       	cp	r8, r24
    185c:	99 06       	cpc	r9, r25
    185e:	b0 f4       	brcc	.+44     	; 0x188c <vfprintf+0x1c2>
    1860:	b6 01       	movw	r22, r12
    1862:	80 e2       	ldi	r24, 0x20	; 32
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    186a:	2a 94       	dec	r2
    186c:	f4 cf       	rjmp	.-24     	; 0x1856 <vfprintf+0x18c>
    186e:	f5 01       	movw	r30, r10
    1870:	37 fc       	sbrc	r3, 7
    1872:	85 91       	lpm	r24, Z+
    1874:	37 fe       	sbrs	r3, 7
    1876:	81 91       	ld	r24, Z+
    1878:	5f 01       	movw	r10, r30
    187a:	b6 01       	movw	r22, r12
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    1882:	21 10       	cpse	r2, r1
    1884:	2a 94       	dec	r2
    1886:	21 e0       	ldi	r18, 0x01	; 1
    1888:	82 1a       	sub	r8, r18
    188a:	91 08       	sbc	r9, r1
    188c:	81 14       	cp	r8, r1
    188e:	91 04       	cpc	r9, r1
    1890:	71 f7       	brne	.-36     	; 0x186e <vfprintf+0x1a4>
    1892:	e8 c0       	rjmp	.+464    	; 0x1a64 <vfprintf+0x39a>
    1894:	84 36       	cpi	r24, 0x64	; 100
    1896:	11 f0       	breq	.+4      	; 0x189c <vfprintf+0x1d2>
    1898:	89 36       	cpi	r24, 0x69	; 105
    189a:	41 f5       	brne	.+80     	; 0x18ec <vfprintf+0x222>
    189c:	f8 01       	movw	r30, r16
    189e:	37 fe       	sbrs	r3, 7
    18a0:	07 c0       	rjmp	.+14     	; 0x18b0 <vfprintf+0x1e6>
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	0c 5f       	subi	r16, 0xFC	; 252
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <vfprintf+0x1f6>
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	07 2e       	mov	r0, r23
    18b6:	00 0c       	add	r0, r0
    18b8:	88 0b       	sbc	r24, r24
    18ba:	99 0b       	sbc	r25, r25
    18bc:	0e 5f       	subi	r16, 0xFE	; 254
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	f3 2d       	mov	r31, r3
    18c2:	ff 76       	andi	r31, 0x6F	; 111
    18c4:	3f 2e       	mov	r3, r31
    18c6:	97 ff       	sbrs	r25, 7
    18c8:	09 c0       	rjmp	.+18     	; 0x18dc <vfprintf+0x212>
    18ca:	90 95       	com	r25
    18cc:	80 95       	com	r24
    18ce:	70 95       	com	r23
    18d0:	61 95       	neg	r22
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	8f 4f       	sbci	r24, 0xFF	; 255
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	f0 68       	ori	r31, 0x80	; 128
    18da:	3f 2e       	mov	r3, r31
    18dc:	2a e0       	ldi	r18, 0x0A	; 10
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	a3 01       	movw	r20, r6
    18e2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__ultoa_invert>
    18e6:	88 2e       	mov	r8, r24
    18e8:	86 18       	sub	r8, r6
    18ea:	45 c0       	rjmp	.+138    	; 0x1976 <vfprintf+0x2ac>
    18ec:	85 37       	cpi	r24, 0x75	; 117
    18ee:	31 f4       	brne	.+12     	; 0x18fc <vfprintf+0x232>
    18f0:	23 2d       	mov	r18, r3
    18f2:	2f 7e       	andi	r18, 0xEF	; 239
    18f4:	b2 2e       	mov	r11, r18
    18f6:	2a e0       	ldi	r18, 0x0A	; 10
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	25 c0       	rjmp	.+74     	; 0x1946 <vfprintf+0x27c>
    18fc:	93 2d       	mov	r25, r3
    18fe:	99 7f       	andi	r25, 0xF9	; 249
    1900:	b9 2e       	mov	r11, r25
    1902:	8f 36       	cpi	r24, 0x6F	; 111
    1904:	c1 f0       	breq	.+48     	; 0x1936 <vfprintf+0x26c>
    1906:	18 f4       	brcc	.+6      	; 0x190e <vfprintf+0x244>
    1908:	88 35       	cpi	r24, 0x58	; 88
    190a:	79 f0       	breq	.+30     	; 0x192a <vfprintf+0x260>
    190c:	b5 c0       	rjmp	.+362    	; 0x1a78 <vfprintf+0x3ae>
    190e:	80 37       	cpi	r24, 0x70	; 112
    1910:	19 f0       	breq	.+6      	; 0x1918 <vfprintf+0x24e>
    1912:	88 37       	cpi	r24, 0x78	; 120
    1914:	21 f0       	breq	.+8      	; 0x191e <vfprintf+0x254>
    1916:	b0 c0       	rjmp	.+352    	; 0x1a78 <vfprintf+0x3ae>
    1918:	e9 2f       	mov	r30, r25
    191a:	e0 61       	ori	r30, 0x10	; 16
    191c:	be 2e       	mov	r11, r30
    191e:	b4 fe       	sbrs	r11, 4
    1920:	0d c0       	rjmp	.+26     	; 0x193c <vfprintf+0x272>
    1922:	fb 2d       	mov	r31, r11
    1924:	f4 60       	ori	r31, 0x04	; 4
    1926:	bf 2e       	mov	r11, r31
    1928:	09 c0       	rjmp	.+18     	; 0x193c <vfprintf+0x272>
    192a:	34 fe       	sbrs	r3, 4
    192c:	0a c0       	rjmp	.+20     	; 0x1942 <vfprintf+0x278>
    192e:	29 2f       	mov	r18, r25
    1930:	26 60       	ori	r18, 0x06	; 6
    1932:	b2 2e       	mov	r11, r18
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <vfprintf+0x278>
    1936:	28 e0       	ldi	r18, 0x08	; 8
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <vfprintf+0x27c>
    193c:	20 e1       	ldi	r18, 0x10	; 16
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <vfprintf+0x27c>
    1942:	20 e1       	ldi	r18, 0x10	; 16
    1944:	32 e0       	ldi	r19, 0x02	; 2
    1946:	f8 01       	movw	r30, r16
    1948:	b7 fe       	sbrs	r11, 7
    194a:	07 c0       	rjmp	.+14     	; 0x195a <vfprintf+0x290>
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	0c 5f       	subi	r16, 0xFC	; 252
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	06 c0       	rjmp	.+12     	; 0x1966 <vfprintf+0x29c>
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 5f       	subi	r16, 0xFE	; 254
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	a3 01       	movw	r20, r6
    1968:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__ultoa_invert>
    196c:	88 2e       	mov	r8, r24
    196e:	86 18       	sub	r8, r6
    1970:	fb 2d       	mov	r31, r11
    1972:	ff 77       	andi	r31, 0x7F	; 127
    1974:	3f 2e       	mov	r3, r31
    1976:	36 fe       	sbrs	r3, 6
    1978:	0d c0       	rjmp	.+26     	; 0x1994 <vfprintf+0x2ca>
    197a:	23 2d       	mov	r18, r3
    197c:	2e 7f       	andi	r18, 0xFE	; 254
    197e:	a2 2e       	mov	r10, r18
    1980:	89 14       	cp	r8, r9
    1982:	58 f4       	brcc	.+22     	; 0x199a <vfprintf+0x2d0>
    1984:	34 fe       	sbrs	r3, 4
    1986:	0b c0       	rjmp	.+22     	; 0x199e <vfprintf+0x2d4>
    1988:	32 fc       	sbrc	r3, 2
    198a:	09 c0       	rjmp	.+18     	; 0x199e <vfprintf+0x2d4>
    198c:	83 2d       	mov	r24, r3
    198e:	8e 7e       	andi	r24, 0xEE	; 238
    1990:	a8 2e       	mov	r10, r24
    1992:	05 c0       	rjmp	.+10     	; 0x199e <vfprintf+0x2d4>
    1994:	b8 2c       	mov	r11, r8
    1996:	a3 2c       	mov	r10, r3
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <vfprintf+0x2d6>
    199a:	b8 2c       	mov	r11, r8
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <vfprintf+0x2d6>
    199e:	b9 2c       	mov	r11, r9
    19a0:	a4 fe       	sbrs	r10, 4
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <vfprintf+0x2f8>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e8 0d       	add	r30, r8
    19a8:	f1 1d       	adc	r31, r1
    19aa:	80 81       	ld	r24, Z
    19ac:	80 33       	cpi	r24, 0x30	; 48
    19ae:	21 f4       	brne	.+8      	; 0x19b8 <vfprintf+0x2ee>
    19b0:	9a 2d       	mov	r25, r10
    19b2:	99 7e       	andi	r25, 0xE9	; 233
    19b4:	a9 2e       	mov	r10, r25
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <vfprintf+0x300>
    19b8:	a2 fe       	sbrs	r10, 2
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <vfprintf+0x2fe>
    19bc:	b3 94       	inc	r11
    19be:	b3 94       	inc	r11
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <vfprintf+0x300>
    19c2:	8a 2d       	mov	r24, r10
    19c4:	86 78       	andi	r24, 0x86	; 134
    19c6:	09 f0       	breq	.+2      	; 0x19ca <vfprintf+0x300>
    19c8:	b3 94       	inc	r11
    19ca:	a3 fc       	sbrc	r10, 3
    19cc:	11 c0       	rjmp	.+34     	; 0x19f0 <vfprintf+0x326>
    19ce:	a0 fe       	sbrs	r10, 0
    19d0:	06 c0       	rjmp	.+12     	; 0x19de <vfprintf+0x314>
    19d2:	b2 14       	cp	r11, r2
    19d4:	88 f4       	brcc	.+34     	; 0x19f8 <vfprintf+0x32e>
    19d6:	28 0c       	add	r2, r8
    19d8:	92 2c       	mov	r9, r2
    19da:	9b 18       	sub	r9, r11
    19dc:	0e c0       	rjmp	.+28     	; 0x19fa <vfprintf+0x330>
    19de:	b2 14       	cp	r11, r2
    19e0:	60 f4       	brcc	.+24     	; 0x19fa <vfprintf+0x330>
    19e2:	b6 01       	movw	r22, r12
    19e4:	80 e2       	ldi	r24, 0x20	; 32
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    19ec:	b3 94       	inc	r11
    19ee:	f7 cf       	rjmp	.-18     	; 0x19de <vfprintf+0x314>
    19f0:	b2 14       	cp	r11, r2
    19f2:	18 f4       	brcc	.+6      	; 0x19fa <vfprintf+0x330>
    19f4:	2b 18       	sub	r2, r11
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <vfprintf+0x332>
    19f8:	98 2c       	mov	r9, r8
    19fa:	21 2c       	mov	r2, r1
    19fc:	a4 fe       	sbrs	r10, 4
    19fe:	10 c0       	rjmp	.+32     	; 0x1a20 <vfprintf+0x356>
    1a00:	b6 01       	movw	r22, r12
    1a02:	80 e3       	ldi	r24, 0x30	; 48
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    1a0a:	a2 fe       	sbrs	r10, 2
    1a0c:	17 c0       	rjmp	.+46     	; 0x1a3c <vfprintf+0x372>
    1a0e:	a1 fc       	sbrc	r10, 1
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <vfprintf+0x34e>
    1a12:	88 e7       	ldi	r24, 0x78	; 120
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <vfprintf+0x352>
    1a18:	88 e5       	ldi	r24, 0x58	; 88
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	0c c0       	rjmp	.+24     	; 0x1a38 <vfprintf+0x36e>
    1a20:	8a 2d       	mov	r24, r10
    1a22:	86 78       	andi	r24, 0x86	; 134
    1a24:	59 f0       	breq	.+22     	; 0x1a3c <vfprintf+0x372>
    1a26:	a1 fe       	sbrs	r10, 1
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <vfprintf+0x364>
    1a2a:	8b e2       	ldi	r24, 0x2B	; 43
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <vfprintf+0x366>
    1a2e:	80 e2       	ldi	r24, 0x20	; 32
    1a30:	a7 fc       	sbrc	r10, 7
    1a32:	8d e2       	ldi	r24, 0x2D	; 45
    1a34:	b6 01       	movw	r22, r12
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    1a3c:	89 14       	cp	r8, r9
    1a3e:	38 f4       	brcc	.+14     	; 0x1a4e <vfprintf+0x384>
    1a40:	b6 01       	movw	r22, r12
    1a42:	80 e3       	ldi	r24, 0x30	; 48
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    1a4a:	9a 94       	dec	r9
    1a4c:	f7 cf       	rjmp	.-18     	; 0x1a3c <vfprintf+0x372>
    1a4e:	8a 94       	dec	r8
    1a50:	f3 01       	movw	r30, r6
    1a52:	e8 0d       	add	r30, r8
    1a54:	f1 1d       	adc	r31, r1
    1a56:	80 81       	ld	r24, Z
    1a58:	b6 01       	movw	r22, r12
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    1a60:	81 10       	cpse	r8, r1
    1a62:	f5 cf       	rjmp	.-22     	; 0x1a4e <vfprintf+0x384>
    1a64:	22 20       	and	r2, r2
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <vfprintf+0x3a0>
    1a68:	42 ce       	rjmp	.-892    	; 0x16ee <vfprintf+0x24>
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	80 e2       	ldi	r24, 0x20	; 32
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    1a74:	2a 94       	dec	r2
    1a76:	f6 cf       	rjmp	.-20     	; 0x1a64 <vfprintf+0x39a>
    1a78:	f6 01       	movw	r30, r12
    1a7a:	86 81       	ldd	r24, Z+6	; 0x06
    1a7c:	97 81       	ldd	r25, Z+7	; 0x07
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <vfprintf+0x3ba>
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	9f ef       	ldi	r25, 0xFF	; 255
    1a84:	2b 96       	adiw	r28, 0x0b	; 11
    1a86:	e2 e1       	ldi	r30, 0x12	; 18
    1a88:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__epilogue_restores__>

00001a8c <strnlen_P>:
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	05 90       	lpm	r0, Z+
    1a90:	61 50       	subi	r22, 0x01	; 1
    1a92:	70 40       	sbci	r23, 0x00	; 0
    1a94:	01 10       	cpse	r0, r1
    1a96:	d8 f7       	brcc	.-10     	; 0x1a8e <strnlen_P+0x2>
    1a98:	80 95       	com	r24
    1a9a:	90 95       	com	r25
    1a9c:	8e 0f       	add	r24, r30
    1a9e:	9f 1f       	adc	r25, r31
    1aa0:	08 95       	ret

00001aa2 <strnlen>:
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	61 50       	subi	r22, 0x01	; 1
    1aa6:	70 40       	sbci	r23, 0x00	; 0
    1aa8:	01 90       	ld	r0, Z+
    1aaa:	01 10       	cpse	r0, r1
    1aac:	d8 f7       	brcc	.-10     	; 0x1aa4 <strnlen+0x2>
    1aae:	80 95       	com	r24
    1ab0:	90 95       	com	r25
    1ab2:	8e 0f       	add	r24, r30
    1ab4:	9f 1f       	adc	r25, r31
    1ab6:	08 95       	ret

00001ab8 <__ultoa_invert>:
    1ab8:	fa 01       	movw	r30, r20
    1aba:	aa 27       	eor	r26, r26
    1abc:	28 30       	cpi	r18, 0x08	; 8
    1abe:	51 f1       	breq	.+84     	; 0x1b14 <__ultoa_invert+0x5c>
    1ac0:	20 31       	cpi	r18, 0x10	; 16
    1ac2:	81 f1       	breq	.+96     	; 0x1b24 <__ultoa_invert+0x6c>
    1ac4:	e8 94       	clt
    1ac6:	6f 93       	push	r22
    1ac8:	6e 7f       	andi	r22, 0xFE	; 254
    1aca:	6e 5f       	subi	r22, 0xFE	; 254
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	af 4f       	sbci	r26, 0xFF	; 255
    1ad4:	b1 e0       	ldi	r27, 0x01	; 1
    1ad6:	3e d0       	rcall	.+124    	; 0x1b54 <__ultoa_invert+0x9c>
    1ad8:	b4 e0       	ldi	r27, 0x04	; 4
    1ada:	3c d0       	rcall	.+120    	; 0x1b54 <__ultoa_invert+0x9c>
    1adc:	67 0f       	add	r22, r23
    1ade:	78 1f       	adc	r23, r24
    1ae0:	89 1f       	adc	r24, r25
    1ae2:	9a 1f       	adc	r25, r26
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	68 0f       	add	r22, r24
    1ae8:	79 1f       	adc	r23, r25
    1aea:	8a 1f       	adc	r24, r26
    1aec:	91 1d       	adc	r25, r1
    1aee:	a1 1d       	adc	r26, r1
    1af0:	6a 0f       	add	r22, r26
    1af2:	71 1d       	adc	r23, r1
    1af4:	81 1d       	adc	r24, r1
    1af6:	91 1d       	adc	r25, r1
    1af8:	a1 1d       	adc	r26, r1
    1afa:	20 d0       	rcall	.+64     	; 0x1b3c <__ultoa_invert+0x84>
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <__ultoa_invert+0x48>
    1afe:	68 94       	set
    1b00:	3f 91       	pop	r19
    1b02:	2a e0       	ldi	r18, 0x0A	; 10
    1b04:	26 9f       	mul	r18, r22
    1b06:	11 24       	eor	r1, r1
    1b08:	30 19       	sub	r19, r0
    1b0a:	30 5d       	subi	r19, 0xD0	; 208
    1b0c:	31 93       	st	Z+, r19
    1b0e:	de f6       	brtc	.-74     	; 0x1ac6 <__ultoa_invert+0xe>
    1b10:	cf 01       	movw	r24, r30
    1b12:	08 95       	ret
    1b14:	46 2f       	mov	r20, r22
    1b16:	47 70       	andi	r20, 0x07	; 7
    1b18:	40 5d       	subi	r20, 0xD0	; 208
    1b1a:	41 93       	st	Z+, r20
    1b1c:	b3 e0       	ldi	r27, 0x03	; 3
    1b1e:	0f d0       	rcall	.+30     	; 0x1b3e <__ultoa_invert+0x86>
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__ultoa_invert+0x5c>
    1b22:	f6 cf       	rjmp	.-20     	; 0x1b10 <__ultoa_invert+0x58>
    1b24:	46 2f       	mov	r20, r22
    1b26:	4f 70       	andi	r20, 0x0F	; 15
    1b28:	40 5d       	subi	r20, 0xD0	; 208
    1b2a:	4a 33       	cpi	r20, 0x3A	; 58
    1b2c:	18 f0       	brcs	.+6      	; 0x1b34 <__ultoa_invert+0x7c>
    1b2e:	49 5d       	subi	r20, 0xD9	; 217
    1b30:	31 fd       	sbrc	r19, 1
    1b32:	40 52       	subi	r20, 0x20	; 32
    1b34:	41 93       	st	Z+, r20
    1b36:	02 d0       	rcall	.+4      	; 0x1b3c <__ultoa_invert+0x84>
    1b38:	a9 f7       	brne	.-22     	; 0x1b24 <__ultoa_invert+0x6c>
    1b3a:	ea cf       	rjmp	.-44     	; 0x1b10 <__ultoa_invert+0x58>
    1b3c:	b4 e0       	ldi	r27, 0x04	; 4
    1b3e:	a6 95       	lsr	r26
    1b40:	97 95       	ror	r25
    1b42:	87 95       	ror	r24
    1b44:	77 95       	ror	r23
    1b46:	67 95       	ror	r22
    1b48:	ba 95       	dec	r27
    1b4a:	c9 f7       	brne	.-14     	; 0x1b3e <__ultoa_invert+0x86>
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	61 05       	cpc	r22, r1
    1b50:	71 05       	cpc	r23, r1
    1b52:	08 95       	ret
    1b54:	9b 01       	movw	r18, r22
    1b56:	ac 01       	movw	r20, r24
    1b58:	0a 2e       	mov	r0, r26
    1b5a:	06 94       	lsr	r0
    1b5c:	57 95       	ror	r21
    1b5e:	47 95       	ror	r20
    1b60:	37 95       	ror	r19
    1b62:	27 95       	ror	r18
    1b64:	ba 95       	dec	r27
    1b66:	c9 f7       	brne	.-14     	; 0x1b5a <__ultoa_invert+0xa2>
    1b68:	62 0f       	add	r22, r18
    1b6a:	73 1f       	adc	r23, r19
    1b6c:	84 1f       	adc	r24, r20
    1b6e:	95 1f       	adc	r25, r21
    1b70:	a0 1d       	adc	r26, r0
    1b72:	08 95       	ret

00001b74 <__muluhisi3>:
    1b74:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__umulhisi3>
    1b78:	a5 9f       	mul	r26, r21
    1b7a:	90 0d       	add	r25, r0
    1b7c:	b4 9f       	mul	r27, r20
    1b7e:	90 0d       	add	r25, r0
    1b80:	a4 9f       	mul	r26, r20
    1b82:	80 0d       	add	r24, r0
    1b84:	91 1d       	adc	r25, r1
    1b86:	11 24       	eor	r1, r1
    1b88:	08 95       	ret

00001b8a <__mulshisi3>:
    1b8a:	b7 ff       	sbrs	r27, 7
    1b8c:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__muluhisi3>

00001b90 <__mulohisi3>:
    1b90:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__muluhisi3>
    1b94:	82 1b       	sub	r24, r18
    1b96:	93 0b       	sbc	r25, r19
    1b98:	08 95       	ret

00001b9a <__prologue_saves__>:
    1b9a:	2f 92       	push	r2
    1b9c:	3f 92       	push	r3
    1b9e:	4f 92       	push	r4
    1ba0:	5f 92       	push	r5
    1ba2:	6f 92       	push	r6
    1ba4:	7f 92       	push	r7
    1ba6:	8f 92       	push	r8
    1ba8:	9f 92       	push	r9
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	ca 1b       	sub	r28, r26
    1bc4:	db 0b       	sbc	r29, r27
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	09 94       	ijmp

00001bd2 <__epilogue_restores__>:
    1bd2:	2a 88       	ldd	r2, Y+18	; 0x12
    1bd4:	39 88       	ldd	r3, Y+17	; 0x11
    1bd6:	48 88       	ldd	r4, Y+16	; 0x10
    1bd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bda:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bde:	8c 84       	ldd	r8, Y+12	; 0x0c
    1be0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1be2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1be4:	b9 84       	ldd	r11, Y+9	; 0x09
    1be6:	c8 84       	ldd	r12, Y+8	; 0x08
    1be8:	df 80       	ldd	r13, Y+7	; 0x07
    1bea:	ee 80       	ldd	r14, Y+6	; 0x06
    1bec:	fd 80       	ldd	r15, Y+5	; 0x05
    1bee:	0c 81       	ldd	r16, Y+4	; 0x04
    1bf0:	1b 81       	ldd	r17, Y+3	; 0x03
    1bf2:	aa 81       	ldd	r26, Y+2	; 0x02
    1bf4:	b9 81       	ldd	r27, Y+1	; 0x01
    1bf6:	ce 0f       	add	r28, r30
    1bf8:	d1 1d       	adc	r29, r1
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	ed 01       	movw	r28, r26
    1c06:	08 95       	ret

00001c08 <__umulhisi3>:
    1c08:	a2 9f       	mul	r26, r18
    1c0a:	b0 01       	movw	r22, r0
    1c0c:	b3 9f       	mul	r27, r19
    1c0e:	c0 01       	movw	r24, r0
    1c10:	a3 9f       	mul	r26, r19
    1c12:	70 0d       	add	r23, r0
    1c14:	81 1d       	adc	r24, r1
    1c16:	11 24       	eor	r1, r1
    1c18:	91 1d       	adc	r25, r1
    1c1a:	b2 9f       	mul	r27, r18
    1c1c:	70 0d       	add	r23, r0
    1c1e:	81 1d       	adc	r24, r1
    1c20:	11 24       	eor	r1, r1
    1c22:	91 1d       	adc	r25, r1
    1c24:	08 95       	ret

00001c26 <_exit>:
    1c26:	f8 94       	cli

00001c28 <__stop_program>:
    1c28:	ff cf       	rjmp	.-2      	; 0x1c28 <__stop_program>
