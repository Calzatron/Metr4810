
Project_0_1_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00001a5a  00001aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  00800154  00800154  00001b42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e6  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000688  00000000  00000000  00002eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa2  00000000  00000000  0000353a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cb  00000000  00000000  00004314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000097e  00000000  00000000  000047df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000515d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_1>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__vector_16>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      50:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_20>
      54:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_21>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	ldd	r0, Z+32	; 0x20
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <main+0xa8>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff26>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <sonic+0xec>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__trampolines_end+0x1c>
     108:	ba a5       	ldd	r27, Y+42	; 0x2a
     10a:	6f a5       	ldd	r22, Y+47	; 0x2f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__trampolines_end+0x60>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <__vector_20+0x54>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <.do_clear_bss_loop>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13e>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__trampolines_end+0xa8>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <uart_put_char+0x2e>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	ea e5       	ldi	r30, 0x5A	; 90
     18a:	fa e1       	ldi	r31, 0x1A	; 26
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a4 35       	cpi	r26, 0x54	; 84
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	22 e0       	ldi	r18, 0x02	; 2
     19a:	a4 e5       	ldi	r26, 0x54	; 84
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	ac 37       	cpi	r26, 0x7C	; 124
     1a4:	b2 07       	cpc	r27, r18
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 97 04 	call	0x92e	; 0x92e <main>
     1ac:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     1b4:	cf 93       	push	r28
     1b6:	c8 2f       	mov	r28, r24
     1b8:	8a 30       	cpi	r24, 0x0A	; 10
     1ba:	19 f4       	brne	.+6      	; 0x1c2 <uart_put_char+0xe>
     1bc:	8d e0       	ldi	r24, 0x0D	; 13
     1be:	0e 94 da 00 	call	0x1b4	; 0x1b4 <uart_put_char>
     1c2:	9f b7       	in	r25, 0x3f	; 63
     1c4:	90 78       	andi	r25, 0x80	; 128
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <uart_put_char+0x18>
     1c8:	99 23       	and	r25, r25
     1ca:	29 f1       	breq	.+74     	; 0x216 <uart_put_char+0x62>
     1cc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     1d0:	8f 3f       	cpi	r24, 0xFF	; 255
     1d2:	d1 f3       	breq	.-12     	; 0x1c8 <uart_put_char+0x14>
     1d4:	f8 94       	cli
     1d6:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <out_insert_pos>
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	8e 0f       	add	r24, r30
     1de:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <out_insert_pos>
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	e0 5a       	subi	r30, 0xA0	; 160
     1e6:	fe 4f       	sbci	r31, 0xFE	; 254
     1e8:	c0 83       	st	Z, r28
     1ea:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     1ee:	8f 5f       	subi	r24, 0xFF	; 255
     1f0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <bytes_in_out_buffer>
     1f4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <out_insert_pos>
     1f8:	8f 3f       	cpi	r24, 0xFF	; 255
     1fa:	11 f4       	brne	.+4      	; 0x200 <uart_put_char+0x4c>
     1fc:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <out_insert_pos>
     200:	e1 ec       	ldi	r30, 0xC1	; 193
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	80 62       	ori	r24, 0x20	; 32
     208:	80 83       	st	Z, r24
     20a:	99 23       	and	r25, r25
     20c:	39 f0       	breq	.+14     	; 0x21c <uart_put_char+0x68>
     20e:	78 94       	sei
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	05 c0       	rjmp	.+10     	; 0x220 <uart_put_char+0x6c>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 c0       	rjmp	.+4      	; 0x220 <uart_put_char+0x6c>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <uart_get_char>:
     224:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     228:	88 23       	and	r24, r24
     22a:	e1 f3       	breq	.-8      	; 0x224 <uart_get_char>
     22c:	2f b7       	in	r18, 0x3f	; 63
     22e:	20 78       	andi	r18, 0x80	; 128
     230:	f8 94       	cli
     232:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <input_insert_pos>
     236:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <bytes_in_input_buffer>
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	83 1b       	sub	r24, r19
     23e:	91 09       	sbc	r25, r1
     240:	5a f4       	brpl	.+22     	; 0x258 <uart_get_char+0x34>
     242:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <input_insert_pos>
     246:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	e8 1b       	sub	r30, r24
     24e:	f1 09       	sbc	r31, r1
     250:	e0 59       	subi	r30, 0x90	; 144
     252:	fd 4f       	sbci	r31, 0xFD	; 253
     254:	80 81       	ld	r24, Z
     256:	0a c0       	rjmp	.+20     	; 0x26c <uart_get_char+0x48>
     258:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <input_insert_pos>
     25c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	e8 1b       	sub	r30, r24
     264:	f1 09       	sbc	r31, r1
     266:	e0 5a       	subi	r30, 0xA0	; 160
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	80 81       	ld	r24, Z
     26c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <bytes_in_input_buffer>
     270:	91 50       	subi	r25, 0x01	; 1
     272:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <bytes_in_input_buffer>
     276:	22 23       	and	r18, r18
     278:	09 f0       	breq	.+2      	; 0x27c <uart_get_char+0x58>
     27a:	78 94       	sei
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	08 95       	ret

00000280 <init_serial_stdio>:
     280:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <out_insert_pos>
     284:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <bytes_in_out_buffer>
     288:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <input_insert_pos>
     28c:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <bytes_in_input_buffer>
     290:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <input_overrun>
     294:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <__data_end>
     298:	dc 01       	movw	r26, r24
     29a:	cb 01       	movw	r24, r22
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	aa 1f       	adc	r26, r26
     2a2:	bb 1f       	adc	r27, r27
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	aa 1f       	adc	r26, r26
     2aa:	bb 1f       	adc	r27, r27
     2ac:	9c 01       	movw	r18, r24
     2ae:	ad 01       	movw	r20, r26
     2b0:	22 0f       	add	r18, r18
     2b2:	33 1f       	adc	r19, r19
     2b4:	44 1f       	adc	r20, r20
     2b6:	55 1f       	adc	r21, r21
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	72 e1       	ldi	r23, 0x12	; 18
     2bc:	8a e7       	ldi	r24, 0x7A	; 122
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 a9 07 	call	0xf52	; 0xf52 <__divmodsi4>
     2c4:	ba 01       	movw	r22, r20
     2c6:	a9 01       	movw	r20, r18
     2c8:	4f 5f       	subi	r20, 0xFF	; 255
     2ca:	5f 4f       	sbci	r21, 0xFF	; 255
     2cc:	6f 4f       	sbci	r22, 0xFF	; 255
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	db 01       	movw	r26, r22
     2d2:	ca 01       	movw	r24, r20
     2d4:	1a f4       	brpl	.+6      	; 0x2dc <init_serial_stdio+0x5c>
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	a1 1d       	adc	r26, r1
     2da:	b1 1d       	adc	r27, r1
     2dc:	b5 95       	asr	r27
     2de:	a7 95       	ror	r26
     2e0:	97 95       	ror	r25
     2e2:	87 95       	ror	r24
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2ee:	e1 ec       	ldi	r30, 0xC1	; 193
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	88 e1       	ldi	r24, 0x18	; 24
     2f4:	80 83       	st	Z, r24
     2f6:	80 81       	ld	r24, Z
     2f8:	80 68       	ori	r24, 0x80	; 128
     2fa:	80 83       	st	Z, r24
     2fc:	e6 e7       	ldi	r30, 0x76	; 118
     2fe:	f2 e0       	ldi	r31, 0x02	; 2
     300:	8a e0       	ldi	r24, 0x0A	; 10
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	93 83       	std	Z+3, r25	; 0x03
     306:	82 83       	std	Z+2, r24	; 0x02
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	08 95       	ret

0000030e <serial_input_available>:
     30e:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <bytes_in_input_buffer>
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	91 11       	cpse	r25, r1
     316:	01 c0       	rjmp	.+2      	; 0x31a <serial_input_available+0xc>
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	08 95       	ret

0000031c <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	2f 93       	push	r18
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	ef 93       	push	r30
     32e:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     330:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     334:	88 23       	and	r24, r24
     336:	29 f1       	breq	.+74     	; 0x382 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     338:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <out_insert_pos>
     33c:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <bytes_in_out_buffer>
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	82 1b       	sub	r24, r18
     344:	91 09       	sbc	r25, r1
     346:	5a f4       	brpl	.+22     	; 0x35e <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     348:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <out_insert_pos>
     34c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	e8 1b       	sub	r30, r24
     354:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     356:	e1 5a       	subi	r30, 0xA1	; 161
     358:	fd 4f       	sbci	r31, 0xFD	; 253
     35a:	90 81       	ld	r25, Z
     35c:	0a c0       	rjmp	.+20     	; 0x372 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     35e:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <out_insert_pos>
     362:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	e8 1b       	sub	r30, r24
     36a:	f1 09       	sbc	r31, r1
     36c:	e0 5a       	subi	r30, 0xA0	; 160
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     372:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     376:	81 50       	subi	r24, 0x01	; 1
     378:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     37c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     380:	05 c0       	rjmp	.+10     	; 0x38c <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     382:	e1 ec       	ldi	r30, 0xC1	; 193
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	8f 7d       	andi	r24, 0xDF	; 223
     38a:	80 83       	st	Z, r24
	}
}
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	9f 91       	pop	r25
     392:	8f 91       	pop	r24
     394:	2f 91       	pop	r18
     396:	0f 90       	pop	r0
     398:	0f be       	out	0x3f, r0	; 63
     39a:	0f 90       	pop	r0
     39c:	1f 90       	pop	r1
     39e:	18 95       	reti

000003a0 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     3a0:	1f 92       	push	r1
     3a2:	0f 92       	push	r0
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	0f 92       	push	r0
     3a8:	11 24       	eor	r1, r1
     3aa:	2f 93       	push	r18
     3ac:	3f 93       	push	r19
     3ae:	4f 93       	push	r20
     3b0:	5f 93       	push	r21
     3b2:	6f 93       	push	r22
     3b4:	7f 93       	push	r23
     3b6:	8f 93       	push	r24
     3b8:	9f 93       	push	r25
     3ba:	af 93       	push	r26
     3bc:	bf 93       	push	r27
     3be:	cf 93       	push	r28
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     3c4:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     3c8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     3cc:	88 23       	and	r24, r24
     3ce:	49 f0       	breq	.+18     	; 0x3e2 <__vector_20+0x42>
     3d0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <bytes_in_out_buffer>
     3d4:	8f 3f       	cpi	r24, 0xFF	; 255
     3d6:	29 f0       	breq	.+10     	; 0x3e2 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	8c 2f       	mov	r24, r28
     3de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     3e2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     3e6:	80 31       	cpi	r24, 0x10	; 16
     3e8:	20 f0       	brcs	.+8      	; 0x3f2 <__vector_20+0x52>
		input_overrun = 1;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <input_overrun>
     3f0:	18 c0       	rjmp	.+48     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     3f2:	cd 30       	cpi	r28, 0x0D	; 13
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <__vector_20+0x58>
			c = '\n';
     3f6:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     3f8:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <input_insert_pos>
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	8e 0f       	add	r24, r30
     400:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <input_insert_pos>
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	e0 5a       	subi	r30, 0xA0	; 160
     408:	fd 4f       	sbci	r31, 0xFD	; 253
     40a:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     40c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <bytes_in_input_buffer>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     416:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <input_insert_pos>
     41a:	80 31       	cpi	r24, 0x10	; 16
     41c:	11 f4       	brne	.+4      	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     41e:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <input_insert_pos>
		}
	}
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	cf 91       	pop	r28
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	7f 91       	pop	r23
     432:	6f 91       	pop	r22
     434:	5f 91       	pop	r21
     436:	4f 91       	pop	r20
     438:	3f 91       	pop	r19
     43a:	2f 91       	pop	r18
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
     440:	0f 90       	pop	r0
     442:	1f 90       	pop	r1
     444:	18 95       	reti

00000446 <__vector_1>:



 ISR(INT0_vect)//interrupt service routine when there is a change in logic level

 {
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31

	 if (i==1)//when logic from HIGH to LOW
     458:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <i>
     45c:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <i+0x1>
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	81 f4       	brne	.+32     	; 0x484 <__vector_1+0x3e>

	 {

		 TCCR1B=0;//disabling counter
     464:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

		 pulse=TCNT1;//count memory is updated to integer
     468:	e4 e8       	ldi	r30, 0x84	; 132
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <pulse+0x1>
     474:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <pulse>

		 TCNT1=0;//resetting the counter memory
     478:	11 82       	std	Z+1, r1	; 0x01
     47a:	10 82       	st	Z, r1

		 i=0;
     47c:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <i+0x1>
     480:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <i>

	 }

	 if (i==0){//when logic change from LOW to HIGH
     484:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <i>
     488:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <i+0x1>
     48c:	89 2b       	or	r24, r25
     48e:	59 f4       	brne	.+22     	; 0x4a6 <__vector_1+0x60>

		 TCCR1B|=(1<<CS10);//enabling counter
     490:	e1 e8       	ldi	r30, 0x81	; 129
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	81 60       	ori	r24, 0x01	; 1
     498:	80 83       	st	Z, r24

		 i=1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <i+0x1>
     4a2:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <i>

	 }

     4a6:	ff 91       	pop	r31
     4a8:	ef 91       	pop	r30
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <pwm_initialiser>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
     4b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 0;
     4bc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
     4c0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	DDRD |= (1<<PORTD7)|(1<<PORTD6);
     4c4:	8a b1       	in	r24, 0x0a	; 10
     4c6:	80 6c       	ori	r24, 0xC0	; 192
     4c8:	8a b9       	out	0x0a, r24	; 10
	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
     4ca:	e0 eb       	ldi	r30, 0xB0	; 176
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	83 6a       	ori	r24, 0xA3	; 163
     4d2:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
     4d4:	e1 eb       	ldi	r30, 0xB1	; 177
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	81 60       	ori	r24, 0x01	; 1
     4dc:	80 83       	st	Z, r24
     4de:	08 95       	ret

000004e0 <makeInfo>:
	}
}

info* makeInfo(void){
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     4e0:	8c e3       	ldi	r24, 0x3C	; 60
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 0a 08 	call	0x1014	; 0x1014 <malloc>
	return info_ptr;
}
     4e8:	08 95       	ret

000004ea <custom_delay>:
	fputs("Float ready\n", stdout);
	
	
}

void custom_delay(uint32_t ticks){
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	6b 01       	movw	r12, r22
     4f4:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt0 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt0_ticks();
     4f6:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
	while((current_time + ticks) > get_tcnt0_ticks()){
     4fa:	c6 0e       	add	r12, r22
     4fc:	d7 1e       	adc	r13, r23
     4fe:	e8 1e       	adc	r14, r24
     500:	f9 1e       	adc	r15, r25
     502:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
     506:	6c 15       	cp	r22, r12
     508:	7d 05       	cpc	r23, r13
     50a:	8e 05       	cpc	r24, r14
     50c:	9f 05       	cpc	r25, r15
     50e:	c8 f3       	brcs	.-14     	; 0x502 <custom_delay+0x18>
		;
	}
}
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	08 95       	ret

0000051a <initialise>:
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}


void initialise(info* info_ptr){
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
	
	/* sensor pins	*/
	DDRA = (1<<TRIG0)|(1<<TRIG1)|(1<<PORTA5);
     522:	85 e2       	ldi	r24, 0x25	; 37
     524:	81 b9       	out	0x01, r24	; 1
	DDRA &= ~((1<<ECHO0)|(1<<ECHO1));
     526:	81 b1       	in	r24, 0x01	; 1
     528:	85 7f       	andi	r24, 0xF5	; 245
     52a:	81 b9       	out	0x01, r24	; 1

	/* transmission pins */
	DDRD |= (1<<PORTD1)|(1<<PORTD5);
     52c:	8a b1       	in	r24, 0x0a	; 10
     52e:	82 62       	ori	r24, 0x22	; 34
     530:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
     532:	50 98       	cbi	0x0a, 0	; 10
	PORTA |= (1<<PORTA5);
     534:	15 9a       	sbi	0x02, 5	; 2
	/* initialise timers / pwm */
	pwm_initialiser();				/* initially OCR2A = 0 */
     536:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <pwm_initialiser>
	init_tcnt0(!FAST);
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 71 05 	call	0xae2	; 0xae2 <init_tcnt0>
	init_serial_stdio(9600,0);
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	60 e8       	ldi	r22, 0x80	; 128
     544:	75 e2       	ldi	r23, 0x25	; 37
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 40 01 	call	0x280	; 0x280 <init_serial_stdio>
	//EICRA|=(1<<ISC00);
	//TCCR1A = 0;


	/* set Global Interrupt Enable flag */
	srand(get_tcnt0_ticks());
     54e:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
     552:	cb 01       	movw	r24, r22
     554:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <srand>
	sei();
     558:	78 94       	sei

	custom_delay(100);
     55a:	64 e6       	ldi	r22, 0x64	; 100
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 75 02 	call	0x4ea	; 0x4ea <custom_delay>

	/* wait for communication to start from host */
	custom_delay(100);
     566:	64 e6       	ldi	r22, 0x64	; 100
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 75 02 	call	0x4ea	; 0x4ea <custom_delay>
	uint8_t check = 0;
     572:	c0 e0       	ldi	r28, 0x00	; 0
	while (check < 6){
		if (serial_input_available()){
			char in = fgetc(stdin);
     574:	06 e7       	ldi	r16, 0x76	; 118
     576:	12 e0       	ldi	r17, 0x02	; 2

	/* wait for communication to start from host */
	custom_delay(100);
	uint8_t check = 0;
	while (check < 6){
		if (serial_input_available()){
     578:	0e 94 87 01 	call	0x30e	; 0x30e <serial_input_available>
     57c:	88 23       	and	r24, r24
     57e:	91 f0       	breq	.+36     	; 0x5a4 <initialise+0x8a>
			char in = fgetc(stdin);
     580:	f8 01       	movw	r30, r16
     582:	80 81       	ld	r24, Z
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	0e 94 b8 09 	call	0x1370	; 0x1370 <fgetc>
     58a:	d8 2f       	mov	r29, r24
			fputc(in, stdout);
     58c:	f8 01       	movw	r30, r16
     58e:	62 81       	ldd	r22, Z+2	; 0x02
     590:	73 81       	ldd	r23, Z+3	; 0x03
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 f6 09 	call	0x13ec	; 0x13ec <fputc>
			if (in == '\n'){
     598:	da 30       	cpi	r29, 0x0A	; 10
     59a:	31 f0       	breq	.+12     	; 0x5a8 <initialise+0x8e>
				check = 10;
				break;
			}
			++check;
     59c:	cf 5f       	subi	r28, 0xFF	; 255
	custom_delay(100);

	/* wait for communication to start from host */
	custom_delay(100);
	uint8_t check = 0;
	while (check < 6){
     59e:	c6 30       	cpi	r28, 0x06	; 6
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <initialise+0x8e>
     5a2:	ea cf       	rjmp	.-44     	; 0x578 <initialise+0x5e>
     5a4:	c6 30       	cpi	r28, 0x06	; 6
     5a6:	40 f3       	brcs	.-48     	; 0x578 <initialise+0x5e>
				break;
			}
			++check;
		}
	}
	custom_delay(1000);
     5a8:	68 ee       	ldi	r22, 0xE8	; 232
     5aa:	73 e0       	ldi	r23, 0x03	; 3
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 75 02 	call	0x4ea	; 0x4ea <custom_delay>
	fputs("Float ready\n", stdout);
     5b4:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <__iob+0x2>
     5b8:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <__iob+0x3>
     5bc:	4c e0       	ldi	r20, 0x0C	; 12
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	88 e1       	ldi	r24, 0x18	; 24
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <fwrite>
	
	
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	08 95       	ret

000005d6 <sonic>:
		sei();
	}
}


uint8_t sonic(info* info_ptr){
     5d6:	7f 92       	push	r7
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	8c 01       	movw	r16, r24
	uint32_t duration;
	double distance;
	uint8_t returnValue = 0;

	// sensor 0 first
	PORTA &= ~(1<<TRIG0);
     5f2:	10 98       	cbi	0x02, 0	; 2
	custom_delay(400);
     5f4:	60 e9       	ldi	r22, 0x90	; 144
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 75 02 	call	0x4ea	; 0x4ea <custom_delay>
	PORTA |= (1<<TRIG0);
     600:	10 9a       	sbi	0x02, 0	; 2
	custom_delay(50);
     602:	62 e3       	ldi	r22, 0x32	; 50
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 75 02 	call	0x4ea	; 0x4ea <custom_delay>
	PORTA &= ~(1<<TRIG0);
     60e:	10 98       	cbi	0x02, 0	; 2
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	uint32_t currentTime = get_tcnt0_ticks();
     610:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
uint8_t sonic(info* info_ptr){
	/* sends the sensor readings through serial, returns 0 on successfully 
	*  retrieving data from sensor */
	uint32_t duration;
	double distance;
	uint8_t returnValue = 0;
     614:	c0 e0       	ldi	r28, 0x00	; 0
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	uint32_t currentTime = get_tcnt0_ticks();
	uint32_t delay = 800;
	while ((PINA & (1<<ECHO0)) == 0x00){
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
     616:	6b 01       	movw	r12, r22
     618:	7c 01       	movw	r14, r24
     61a:	20 e2       	ldi	r18, 0x20	; 32
     61c:	c2 0e       	add	r12, r18
     61e:	23 e0       	ldi	r18, 0x03	; 3
     620:	d2 1e       	adc	r13, r18
     622:	e1 1c       	adc	r14, r1
     624:	f1 1c       	adc	r15, r1
			returnValue = 1;
     626:	d1 e0       	ldi	r29, 0x01	; 1
	PORTA &= ~(1<<TRIG0);
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	uint32_t currentTime = get_tcnt0_ticks();
	uint32_t delay = 800;
	while ((PINA & (1<<ECHO0)) == 0x00){
     628:	08 c0       	rjmp	.+16     	; 0x63a <sonic+0x64>
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
     62a:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
     62e:	c6 16       	cp	r12, r22
     630:	d7 06       	cpc	r13, r23
     632:	e8 06       	cpc	r14, r24
     634:	f9 06       	cpc	r15, r25
     636:	08 f4       	brcc	.+2      	; 0x63a <sonic+0x64>
			returnValue = 1;
     638:	cd 2f       	mov	r28, r29
	PORTA &= ~(1<<TRIG0);
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	uint32_t currentTime = get_tcnt0_ticks();
	uint32_t delay = 800;
	while ((PINA & (1<<ECHO0)) == 0x00){
     63a:	01 9b       	sbis	0x00, 1	; 0
     63c:	f6 cf       	rjmp	.-20     	; 0x62a <sonic+0x54>
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
			returnValue = 1;
		}
	}
	uint32_t start = get_tcnt0_ticks();
     63e:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
     642:	4b 01       	movw	r8, r22
     644:	5c 01       	movw	r10, r24
	//uint16_t pulse = get_pulse() * 2 / 100;
	while ((PINA & (1<<ECHO0)) && !(returnValue)){
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
			returnValue = 1;
     646:	6b 01       	movw	r12, r22
     648:	7c 01       	movw	r14, r24
     64a:	80 e2       	ldi	r24, 0x20	; 32
     64c:	c8 0e       	add	r12, r24
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	d8 1e       	adc	r13, r24
     652:	e1 1c       	adc	r14, r1
     654:	f1 1c       	adc	r15, r1
     656:	d1 e0       	ldi	r29, 0x01	; 1
     658:	71 2c       	mov	r7, r1
			returnValue = 1;
		}
	}
	uint32_t start = get_tcnt0_ticks();
	//uint16_t pulse = get_pulse() * 2 / 100;
	while ((PINA & (1<<ECHO0)) && !(returnValue)){
     65a:	09 c0       	rjmp	.+18     	; 0x66e <sonic+0x98>
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
     65c:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
			returnValue = 1;
     660:	cd 2f       	mov	r28, r29
     662:	c6 16       	cp	r12, r22
     664:	d7 06       	cpc	r13, r23
     666:	e8 06       	cpc	r14, r24
     668:	f9 06       	cpc	r15, r25
     66a:	08 f0       	brcs	.+2      	; 0x66e <sonic+0x98>
     66c:	c7 2d       	mov	r28, r7
			returnValue = 1;
		}
	}
	uint32_t start = get_tcnt0_ticks();
	//uint16_t pulse = get_pulse() * 2 / 100;
	while ((PINA & (1<<ECHO0)) && !(returnValue)){
     66e:	01 9b       	sbis	0x00, 1	; 0
     670:	03 c0       	rjmp	.+6      	; 0x678 <sonic+0xa2>
     672:	cc 23       	and	r28, r28
     674:	99 f3       	breq	.-26     	; 0x65c <sonic+0x86>
     676:	1b c0       	rjmp	.+54     	; 0x6ae <sonic+0xd8>
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
			returnValue = 1;
		}
	}
	if (!returnValue){
     678:	c1 11       	cpse	r28, r1
     67a:	19 c0       	rjmp	.+50     	; 0x6ae <sonic+0xd8>
		duration = (get_tcnt0_ticks() - start);
     67c:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
		//distance = pulse;
		//char buffer[10];
		//dtostrf(distance, 3, 5, buffer); 
		//ltoa(pulse, buffer, 10); fputs(buffer, stdout); fputc('\n', stdout);

		info_ptr->sonicD0 = distance;
     680:	68 19       	sub	r22, r8
     682:	79 09       	sbc	r23, r9
     684:	8a 09       	sbc	r24, r10
     686:	9b 09       	sbc	r25, r11
     688:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatunsisf>
     68c:	2a e9       	ldi	r18, 0x9A	; 154
     68e:	39 e9       	ldi	r19, 0x99	; 153
     690:	49 e5       	ldi	r20, 0x59	; 89
     692:	50 e4       	ldi	r21, 0x40	; 64
     694:	0e 94 3c 07 	call	0xe78	; 0xe78 <__mulsf3>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	5f e3       	ldi	r21, 0x3F	; 63
     6a0:	0e 94 3c 07 	call	0xe78	; 0xe78 <__mulsf3>
     6a4:	f8 01       	movw	r30, r16
     6a6:	64 ab       	std	Z+52, r22	; 0x34
     6a8:	75 ab       	std	Z+53, r23	; 0x35
     6aa:	86 ab       	std	Z+54, r24	; 0x36
     6ac:	97 ab       	std	Z+55, r25	; 0x37
	}
	
	// sensor 1 now
	PORTA &= ~(1<<TRIG1);
     6ae:	12 98       	cbi	0x02, 2	; 2
	custom_delay(400);
     6b0:	60 e9       	ldi	r22, 0x90	; 144
     6b2:	71 e0       	ldi	r23, 0x01	; 1
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 75 02 	call	0x4ea	; 0x4ea <custom_delay>
	PORTA |= (1<<TRIG1);
     6bc:	12 9a       	sbi	0x02, 2	; 2
	custom_delay(50);
     6be:	62 e3       	ldi	r22, 0x32	; 50
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 75 02 	call	0x4ea	; 0x4ea <custom_delay>
	PORTA &= ~(1<<TRIG1);
     6ca:	12 98       	cbi	0x02, 2	; 2
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	currentTime = get_tcnt0_ticks();
     6cc:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
	while ((PINA & (1<<ECHO1)) == 0x00){
		
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
     6d0:	6b 01       	movw	r12, r22
     6d2:	7c 01       	movw	r14, r24
     6d4:	f0 e2       	ldi	r31, 0x20	; 32
     6d6:	cf 0e       	add	r12, r31
     6d8:	f3 e0       	ldi	r31, 0x03	; 3
     6da:	df 1e       	adc	r13, r31
     6dc:	e1 1c       	adc	r14, r1
     6de:	f1 1c       	adc	r15, r1
			returnValue = 2;
     6e0:	d2 e0       	ldi	r29, 0x02	; 2
	custom_delay(50);
	PORTA &= ~(1<<TRIG1);
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	currentTime = get_tcnt0_ticks();
	while ((PINA & (1<<ECHO1)) == 0x00){
     6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <sonic+0x11e>
		
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
     6e4:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
     6e8:	c6 16       	cp	r12, r22
     6ea:	d7 06       	cpc	r13, r23
     6ec:	e8 06       	cpc	r14, r24
     6ee:	f9 06       	cpc	r15, r25
     6f0:	08 f4       	brcc	.+2      	; 0x6f4 <sonic+0x11e>
			returnValue = 2;
     6f2:	cd 2f       	mov	r28, r29
	custom_delay(50);
	PORTA &= ~(1<<TRIG1);
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	currentTime = get_tcnt0_ticks();
	while ((PINA & (1<<ECHO1)) == 0x00){
     6f4:	03 9b       	sbis	0x00, 3	; 0
     6f6:	f6 cf       	rjmp	.-20     	; 0x6e4 <sonic+0x10e>
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
			returnValue = 2;
		}
	}
	start = get_tcnt0_ticks();
     6f8:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
     6fc:	4b 01       	movw	r8, r22
     6fe:	5c 01       	movw	r10, r24
	while ((PINA & (1<<ECHO1)) && (returnValue != 2)){
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
     700:	6b 01       	movw	r12, r22
     702:	7c 01       	movw	r14, r24
     704:	20 e2       	ldi	r18, 0x20	; 32
     706:	c2 0e       	add	r12, r18
     708:	23 e0       	ldi	r18, 0x03	; 3
     70a:	d2 1e       	adc	r13, r18
     70c:	e1 1c       	adc	r14, r1
     70e:	f1 1c       	adc	r15, r1
			returnValue = 2;
     710:	d2 e0       	ldi	r29, 0x02	; 2
		if (currentTime + delay < get_tcnt0_ticks()){
			returnValue = 2;
		}
	}
	start = get_tcnt0_ticks();
	while ((PINA & (1<<ECHO1)) && (returnValue != 2)){
     712:	08 c0       	rjmp	.+16     	; 0x724 <sonic+0x14e>
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
     714:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
     718:	c6 16       	cp	r12, r22
     71a:	d7 06       	cpc	r13, r23
     71c:	e8 06       	cpc	r14, r24
     71e:	f9 06       	cpc	r15, r25
     720:	08 f4       	brcc	.+2      	; 0x724 <sonic+0x14e>
			returnValue = 2;
     722:	cd 2f       	mov	r28, r29
		if (currentTime + delay < get_tcnt0_ticks()){
			returnValue = 2;
		}
	}
	start = get_tcnt0_ticks();
	while ((PINA & (1<<ECHO1)) && (returnValue != 2)){
     724:	03 9b       	sbis	0x00, 3	; 0
     726:	03 c0       	rjmp	.+6      	; 0x72e <sonic+0x158>
     728:	c2 30       	cpi	r28, 0x02	; 2
     72a:	a1 f7       	brne	.-24     	; 0x714 <sonic+0x13e>
     72c:	1b c0       	rjmp	.+54     	; 0x764 <sonic+0x18e>
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
			returnValue = 2;
		}
	}
	if (returnValue != 2){
     72e:	c2 30       	cpi	r28, 0x02	; 2
     730:	c9 f0       	breq	.+50     	; 0x764 <sonic+0x18e>
		duration = (get_tcnt0_ticks() - start);
     732:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tcnt0_ticks>
		distance = duration*3.4/2;
		//output
		//char buffer[10];
		//dtostrf(distance, 3, 5, buffer); fputs(buffer, stdout); fputc('\n', stdout);
		//ltoa(pulse, buffer, 10); fputs(buffer, stdout); fputc('\n', stdout);
		info_ptr->sonicD1 = distance;
     736:	68 19       	sub	r22, r8
     738:	79 09       	sbc	r23, r9
     73a:	8a 09       	sbc	r24, r10
     73c:	9b 09       	sbc	r25, r11
     73e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatunsisf>
     742:	2a e9       	ldi	r18, 0x9A	; 154
     744:	39 e9       	ldi	r19, 0x99	; 153
     746:	49 e5       	ldi	r20, 0x59	; 89
     748:	50 e4       	ldi	r21, 0x40	; 64
     74a:	0e 94 3c 07 	call	0xe78	; 0xe78 <__mulsf3>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	5f e3       	ldi	r21, 0x3F	; 63
     756:	0e 94 3c 07 	call	0xe78	; 0xe78 <__mulsf3>
     75a:	f8 01       	movw	r30, r16
     75c:	60 af       	std	Z+56, r22	; 0x38
     75e:	71 af       	std	Z+57, r23	; 0x39
     760:	82 af       	std	Z+58, r24	; 0x3a
     762:	93 af       	std	Z+59, r25	; 0x3b
	}
	// all succeeded
	return 0;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	bf 90       	pop	r11
     778:	af 90       	pop	r10
     77a:	9f 90       	pop	r9
     77c:	8f 90       	pop	r8
     77e:	7f 90       	pop	r7
     780:	08 95       	ret

00000782 <do_sonic>:
	}
}



void do_sonic(info* info_ptr){
     782:	2f 92       	push	r2
     784:	3f 92       	push	r3
     786:	4f 92       	push	r4
     788:	5f 92       	push	r5
     78a:	6f 92       	push	r6
     78c:	7f 92       	push	r7
     78e:	8f 92       	push	r8
     790:	9f 92       	push	r9
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	6b 97       	sbiw	r28, 0x1b	; 27
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	8c 01       	movw	r16, r24
	/* performs moving average filter on sensor data
	*  updates stored values in struct, 0 if unsuccessful */
	
	/*	speed up clock for sensor readings */
	uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
     7b8:	ff b6       	in	r15, 0x3f	; 63
	cli();
     7ba:	f8 94       	cli
	init_tcnt0(FAST);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 71 05 	call	0xae2	; 0xae2 <init_tcnt0>
	if(interrupts_on) {
     7c2:	ff 20       	and	r15, r15
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <do_sonic+0x46>
     7c6:	8a c0       	rjmp	.+276    	; 0x8dc <do_sonic+0x15a>
		sei();
     7c8:	78 94       	sei
     7ca:	88 c0       	rjmp	.+272    	; 0x8dc <do_sonic+0x15a>
	double sonicDist0[3];
	double sonicDist1[3];
	uint8_t check[3];
	for (int i = 0; i < 3; i++){

		check[i] = sonic(info_ptr);
     7cc:	c8 01       	movw	r24, r16
     7ce:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <sonic>
     7d2:	f1 01       	movw	r30, r2
     7d4:	81 93       	st	Z+, r24
     7d6:	1f 01       	movw	r2, r30
		sonicDist0[i] = info_ptr->sonicD0;
     7d8:	f8 01       	movw	r30, r16
     7da:	84 a9       	ldd	r24, Z+52	; 0x34
     7dc:	95 a9       	ldd	r25, Z+53	; 0x35
     7de:	a6 a9       	ldd	r26, Z+54	; 0x36
     7e0:	b7 a9       	ldd	r27, Z+55	; 0x37
     7e2:	f5 01       	movw	r30, r10
     7e4:	81 93       	st	Z+, r24
     7e6:	91 93       	st	Z+, r25
     7e8:	a1 93       	st	Z+, r26
     7ea:	b1 93       	st	Z+, r27
     7ec:	5f 01       	movw	r10, r30
		sonicDist1[i] = info_ptr->sonicD1;
     7ee:	f8 01       	movw	r30, r16
     7f0:	80 ad       	ldd	r24, Z+56	; 0x38
     7f2:	91 ad       	ldd	r25, Z+57	; 0x39
     7f4:	a2 ad       	ldd	r26, Z+58	; 0x3a
     7f6:	b3 ad       	ldd	r27, Z+59	; 0x3b
     7f8:	f2 01       	movw	r30, r4
     7fa:	81 93       	st	Z+, r24
     7fc:	91 93       	st	Z+, r25
     7fe:	a1 93       	st	Z+, r26
     800:	b1 93       	st	Z+, r27
     802:	2f 01       	movw	r4, r30
		sei();
	}
	double sonicDist0[3];
	double sonicDist1[3];
	uint8_t check[3];
	for (int i = 0; i < 3; i++){
     804:	a8 14       	cp	r10, r8
     806:	b9 04       	cpc	r11, r9
     808:	09 f7       	brne	.-62     	; 0x7cc <do_sonic+0x4a>
		check[i] = sonic(info_ptr);
		sonicDist0[i] = info_ptr->sonicD0;
		sonicDist1[i] = info_ptr->sonicD1;

	}
	info_ptr->sonicD0 = 0;
     80a:	f8 01       	movw	r30, r16
     80c:	14 aa       	std	Z+52, r1	; 0x34
     80e:	15 aa       	std	Z+53, r1	; 0x35
     810:	16 aa       	std	Z+54, r1	; 0x36
     812:	17 aa       	std	Z+55, r1	; 0x37
	info_ptr->sonicD1 = 0;
     814:	10 ae       	std	Z+56, r1	; 0x38
     816:	11 ae       	std	Z+57, r1	; 0x39
     818:	12 ae       	std	Z+58, r1	; 0x3a
     81a:	13 ae       	std	Z+59, r1	; 0x3b
	uint8_t count = 0;
     81c:	b1 2c       	mov	r11, r1
	for (int j = 0; j < 3; j++){
		if(!check[j]){
     81e:	f3 01       	movw	r30, r6
     820:	81 91       	ld	r24, Z+
     822:	3f 01       	movw	r6, r30
     824:	81 11       	cpse	r24, r1
     826:	23 c0       	rjmp	.+70     	; 0x86e <do_sonic+0xec>
			info_ptr->sonicD0 += sonicDist0[j];
     828:	f7 01       	movw	r30, r14
     82a:	20 81       	ld	r18, Z
     82c:	31 81       	ldd	r19, Z+1	; 0x01
     82e:	42 81       	ldd	r20, Z+2	; 0x02
     830:	53 81       	ldd	r21, Z+3	; 0x03
     832:	f8 01       	movw	r30, r16
     834:	64 a9       	ldd	r22, Z+52	; 0x34
     836:	75 a9       	ldd	r23, Z+53	; 0x35
     838:	86 a9       	ldd	r24, Z+54	; 0x36
     83a:	97 a9       	ldd	r25, Z+55	; 0x37
     83c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__addsf3>
     840:	f8 01       	movw	r30, r16
     842:	64 ab       	std	Z+52, r22	; 0x34
     844:	75 ab       	std	Z+53, r23	; 0x35
     846:	86 ab       	std	Z+54, r24	; 0x36
     848:	97 ab       	std	Z+55, r25	; 0x37
			info_ptr->sonicD1 += sonicDist1[j];
     84a:	f6 01       	movw	r30, r12
     84c:	20 81       	ld	r18, Z
     84e:	31 81       	ldd	r19, Z+1	; 0x01
     850:	42 81       	ldd	r20, Z+2	; 0x02
     852:	53 81       	ldd	r21, Z+3	; 0x03
     854:	f8 01       	movw	r30, r16
     856:	60 ad       	ldd	r22, Z+56	; 0x38
     858:	71 ad       	ldd	r23, Z+57	; 0x39
     85a:	82 ad       	ldd	r24, Z+58	; 0x3a
     85c:	93 ad       	ldd	r25, Z+59	; 0x3b
     85e:	0e 94 d0 05 	call	0xba0	; 0xba0 <__addsf3>
     862:	f8 01       	movw	r30, r16
     864:	60 af       	std	Z+56, r22	; 0x38
     866:	71 af       	std	Z+57, r23	; 0x39
     868:	82 af       	std	Z+58, r24	; 0x3a
     86a:	93 af       	std	Z+59, r25	; 0x3b
			++count;
     86c:	b3 94       	inc	r11
     86e:	f4 e0       	ldi	r31, 0x04	; 4
     870:	ef 0e       	add	r14, r31
     872:	f1 1c       	adc	r15, r1
     874:	84 e0       	ldi	r24, 0x04	; 4
     876:	c8 0e       	add	r12, r24
     878:	d1 1c       	adc	r13, r1

	}
	info_ptr->sonicD0 = 0;
	info_ptr->sonicD1 = 0;
	uint8_t count = 0;
	for (int j = 0; j < 3; j++){
     87a:	e8 14       	cp	r14, r8
     87c:	f9 04       	cpc	r15, r9
     87e:	79 f6       	brne	.-98     	; 0x81e <do_sonic+0x9c>
			info_ptr->sonicD0 += sonicDist0[j];
			info_ptr->sonicD1 += sonicDist1[j];
			++count;
		}
	}
	if (count > 0){
     880:	bb 20       	and	r11, r11
     882:	19 f1       	breq	.+70     	; 0x8ca <do_sonic+0x148>
		info_ptr->sonicD0 = info_ptr->sonicD0/count;
     884:	6b 2d       	mov	r22, r11
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 b0 06 	call	0xd60	; 0xd60 <__floatsisf>
     890:	6b 01       	movw	r12, r22
     892:	7c 01       	movw	r14, r24
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24
     898:	f8 01       	movw	r30, r16
     89a:	64 a9       	ldd	r22, Z+52	; 0x34
     89c:	75 a9       	ldd	r23, Z+53	; 0x35
     89e:	86 a9       	ldd	r24, Z+54	; 0x36
     8a0:	97 a9       	ldd	r25, Z+55	; 0x37
     8a2:	0e 94 3c 06 	call	0xc78	; 0xc78 <__divsf3>
     8a6:	f8 01       	movw	r30, r16
     8a8:	64 ab       	std	Z+52, r22	; 0x34
     8aa:	75 ab       	std	Z+53, r23	; 0x35
     8ac:	86 ab       	std	Z+54, r24	; 0x36
     8ae:	97 ab       	std	Z+55, r25	; 0x37
		info_ptr->sonicD1 = info_ptr->sonicD1/count;
     8b0:	a7 01       	movw	r20, r14
     8b2:	96 01       	movw	r18, r12
     8b4:	60 ad       	ldd	r22, Z+56	; 0x38
     8b6:	71 ad       	ldd	r23, Z+57	; 0x39
     8b8:	82 ad       	ldd	r24, Z+58	; 0x3a
     8ba:	93 ad       	ldd	r25, Z+59	; 0x3b
     8bc:	0e 94 3c 06 	call	0xc78	; 0xc78 <__divsf3>
     8c0:	f8 01       	movw	r30, r16
     8c2:	60 af       	std	Z+56, r22	; 0x38
     8c4:	71 af       	std	Z+57, r23	; 0x39
     8c6:	82 af       	std	Z+58, r24	; 0x3a
     8c8:	93 af       	std	Z+59, r25	; 0x3b
	}
		
	/*	continue normal operation */
	interrupts_on = bit_is_set(SREG, SREG_I);
     8ca:	1f b7       	in	r17, 0x3f	; 63
	cli();
     8cc:	f8 94       	cli
	init_tcnt0(!FAST);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 71 05 	call	0xae2	; 0xae2 <init_tcnt0>
	if(interrupts_on) {
     8d4:	11 23       	and	r17, r17
     8d6:	94 f4       	brge	.+36     	; 0x8fc <do_sonic+0x17a>
		sei();
     8d8:	78 94       	sei
	}
}
     8da:	10 c0       	rjmp	.+32     	; 0x8fc <do_sonic+0x17a>
     8dc:	3e 01       	movw	r6, r28
     8de:	f9 e1       	ldi	r31, 0x19	; 25
     8e0:	6f 0e       	add	r6, r31
     8e2:	71 1c       	adc	r7, r1
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	7c 01       	movw	r14, r24
     8ea:	6e 01       	movw	r12, r28
     8ec:	9d e0       	ldi	r25, 0x0D	; 13
     8ee:	c9 0e       	add	r12, r25
     8f0:	d1 1c       	adc	r13, r1
     8f2:	46 01       	movw	r8, r12
	}
}



void do_sonic(info* info_ptr){
     8f4:	26 01       	movw	r4, r12
     8f6:	57 01       	movw	r10, r14
     8f8:	13 01       	movw	r2, r6
     8fa:	68 cf       	rjmp	.-304    	; 0x7cc <do_sonic+0x4a>
	cli();
	init_tcnt0(!FAST);
	if(interrupts_on) {
		sei();
	}
}
     8fc:	6b 96       	adiw	r28, 0x1b	; 27
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	9f 90       	pop	r9
     91e:	8f 90       	pop	r8
     920:	7f 90       	pop	r7
     922:	6f 90       	pop	r6
     924:	5f 90       	pop	r5
     926:	4f 90       	pop	r4
     928:	3f 90       	pop	r3
     92a:	2f 90       	pop	r2
     92c:	08 95       	ret

0000092e <main>:
uint8_t sonic(info* info_ptr);


/* functional code	*/
int main(void)
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	c6 54       	subi	r28, 0x46	; 70
     938:	d1 09       	sbc	r29, r1
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61

	info* info_ptr = makeInfo();
     944:	0e 94 70 02 	call	0x4e0	; 0x4e0 <makeInfo>
     948:	4c 01       	movw	r8, r24
	initialise(info_ptr);
     94a:	0e 94 8d 02 	call	0x51a	; 0x51a <initialise>
	//uint16_t count = 0;
	while(1){
		if (serial_input_available()){
			char buffer[20];
			char in = fgetc(stdin);
     94e:	0f 2e       	mov	r0, r31
     950:	f6 e7       	ldi	r31, 0x76	; 118
     952:	cf 2e       	mov	r12, r31
     954:	f2 e0       	ldi	r31, 0x02	; 2
     956:	df 2e       	mov	r13, r31
     958:	f0 2d       	mov	r31, r0
				PORTC &= ~(1<<PORTC0);
				sprintf(buffer, "lowering\n");
			} else if (in == ' '){
				/*	stop operation	*/
				PORTC = 0x00;
				OCR2A = 0;
     95a:	0f 2e       	mov	r0, r31
     95c:	f3 eb       	ldi	r31, 0xB3	; 179
     95e:	af 2e       	mov	r10, r31
     960:	b1 2c       	mov	r11, r1
     962:	f0 2d       	mov	r31, r0
				PORTC &= ~(1<<PORTC1);
				OCR2A = 250;
				sprintf(buffer, "lifting\n");
			} else if (in == '_'){
				/*	winch down	*/
				OCR2A = 250;
     964:	0f 2e       	mov	r0, r31
     966:	fa ef       	ldi	r31, 0xFA	; 250
     968:	ef 2e       	mov	r14, r31
     96a:	f0 2d       	mov	r31, r0

	info* info_ptr = makeInfo();
	initialise(info_ptr);
	//uint16_t count = 0;
	while(1){
		if (serial_input_available()){
     96c:	0e 94 87 01 	call	0x30e	; 0x30e <serial_input_available>
     970:	88 23       	and	r24, r24
     972:	e1 f3       	breq	.-8      	; 0x96c <main+0x3e>
			char buffer[20];
			char in = fgetc(stdin);
     974:	f6 01       	movw	r30, r12
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	0e 94 b8 09 	call	0x1370	; 0x1370 <fgetc>
     97e:	f8 2e       	mov	r15, r24
			if (in == '+'){
     980:	8b 32       	cpi	r24, 0x2B	; 43
     982:	71 f4       	brne	.+28     	; 0x9a0 <main+0x72>
				/*	winch up	*/
				PORTC |= (1<<PORTC0);
     984:	40 9a       	sbi	0x08, 0	; 8
				PORTC &= ~(1<<PORTC1);
     986:	41 98       	cbi	0x08, 1	; 8
				OCR2A = 250;
     988:	f5 01       	movw	r30, r10
     98a:	e0 82       	st	Z, r14
				sprintf(buffer, "lifting\n");
     98c:	89 e0       	ldi	r24, 0x09	; 9
     98e:	e5 e2       	ldi	r30, 0x25	; 37
     990:	f1 e0       	ldi	r31, 0x01	; 1
     992:	de 01       	movw	r26, r28
     994:	99 96       	adiw	r26, 0x29	; 41
     996:	01 90       	ld	r0, Z+
     998:	0d 92       	st	X+, r0
     99a:	8a 95       	dec	r24
     99c:	e1 f7       	brne	.-8      	; 0x996 <main+0x68>
     99e:	96 c0       	rjmp	.+300    	; 0xacc <main+0x19e>
			} else if (in == '_'){
     9a0:	8f 35       	cpi	r24, 0x5F	; 95
     9a2:	29 f4       	brne	.+10     	; 0x9ae <main+0x80>
				/*	winch down	*/
				OCR2A = 250;
     9a4:	f5 01       	movw	r30, r10
     9a6:	e0 82       	st	Z, r14
				PORTC |= (1<<PORTC1);
     9a8:	41 9a       	sbi	0x08, 1	; 8
				PORTC &= ~(1<<PORTC0);
     9aa:	40 98       	cbi	0x08, 0	; 8
     9ac:	df cf       	rjmp	.-66     	; 0x96c <main+0x3e>
				sprintf(buffer, "lowering\n");
			} else if (in == ' '){
     9ae:	80 32       	cpi	r24, 0x20	; 32
     9b0:	21 f4       	brne	.+8      	; 0x9ba <main+0x8c>
				/*	stop operation	*/
				PORTC = 0x00;
     9b2:	18 b8       	out	0x08, r1	; 8
				OCR2A = 0;
     9b4:	f5 01       	movw	r30, r10
     9b6:	10 82       	st	Z, r1
     9b8:	89 c0       	rjmp	.+274    	; 0xacc <main+0x19e>
				//fputc('?', stdout);
			} else if (in == '?'){
     9ba:	8f 33       	cpi	r24, 0x3F	; 63
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <main+0x92>
     9be:	78 c0       	rjmp	.+240    	; 0xab0 <main+0x182>
				sprintf(buffer, "sensing\n");
     9c0:	89 e0       	ldi	r24, 0x09	; 9
     9c2:	ee e2       	ldi	r30, 0x2E	; 46
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	de 01       	movw	r26, r28
     9c8:	99 96       	adiw	r26, 0x29	; 41
     9ca:	01 90       	ld	r0, Z+
     9cc:	0d 92       	st	X+, r0
     9ce:	8a 95       	dec	r24
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <main+0x9c>
				do_sonic(info_ptr);
     9d2:	c4 01       	movw	r24, r8
     9d4:	0e 94 c1 03 	call	0x782	; 0x782 <do_sonic>
				char buffer0[20];
				dtostrf(info_ptr->sonicD0, 3, 5, buffer0); fputs("Sensor0: ", stdout); fputs(buffer0, stdout); fputc('	', stdout);
     9d8:	f4 01       	movw	r30, r8
     9da:	64 a9       	ldd	r22, Z+52	; 0x34
     9dc:	75 a9       	ldd	r23, Z+53	; 0x35
     9de:	86 a9       	ldd	r24, Z+54	; 0x36
     9e0:	97 a9       	ldd	r25, Z+55	; 0x37
     9e2:	8e 01       	movw	r16, r28
     9e4:	0b 5e       	subi	r16, 0xEB	; 235
     9e6:	1f 4f       	sbci	r17, 0xFF	; 255
     9e8:	25 e0       	ldi	r18, 0x05	; 5
     9ea:	43 e0       	ldi	r20, 0x03	; 3
     9ec:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <dtostrf>
     9f0:	f6 01       	movw	r30, r12
     9f2:	22 81       	ldd	r18, Z+2	; 0x02
     9f4:	33 81       	ldd	r19, Z+3	; 0x03
     9f6:	49 e0       	ldi	r20, 0x09	; 9
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	87 e3       	ldi	r24, 0x37	; 55
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <fwrite>
     a06:	f6 01       	movw	r30, r12
     a08:	62 81       	ldd	r22, Z+2	; 0x02
     a0a:	73 81       	ldd	r23, Z+3	; 0x03
     a0c:	c8 01       	movw	r24, r16
     a0e:	0e 94 32 0a 	call	0x1464	; 0x1464 <fputs>
     a12:	f6 01       	movw	r30, r12
     a14:	62 81       	ldd	r22, Z+2	; 0x02
     a16:	73 81       	ldd	r23, Z+3	; 0x03
     a18:	89 e0       	ldi	r24, 0x09	; 9
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <fputc>
				char buffer1[20];
				dtostrf(info_ptr->sonicD1, 3, 5, buffer1); fputs("Sensor1: ", stdout); fputs(buffer1, stdout); fputc('	', stdout);
     a20:	f4 01       	movw	r30, r8
     a22:	60 ad       	ldd	r22, Z+56	; 0x38
     a24:	71 ad       	ldd	r23, Z+57	; 0x39
     a26:	82 ad       	ldd	r24, Z+58	; 0x3a
     a28:	93 ad       	ldd	r25, Z+59	; 0x3b
     a2a:	04 51       	subi	r16, 0x14	; 20
     a2c:	11 09       	sbc	r17, r1
     a2e:	25 e0       	ldi	r18, 0x05	; 5
     a30:	43 e0       	ldi	r20, 0x03	; 3
     a32:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <dtostrf>
     a36:	f6 01       	movw	r30, r12
     a38:	22 81       	ldd	r18, Z+2	; 0x02
     a3a:	33 81       	ldd	r19, Z+3	; 0x03
     a3c:	49 e0       	ldi	r20, 0x09	; 9
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	81 e4       	ldi	r24, 0x41	; 65
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <fwrite>
     a4c:	f6 01       	movw	r30, r12
     a4e:	62 81       	ldd	r22, Z+2	; 0x02
     a50:	73 81       	ldd	r23, Z+3	; 0x03
     a52:	c8 01       	movw	r24, r16
     a54:	0e 94 32 0a 	call	0x1464	; 0x1464 <fputs>
     a58:	f6 01       	movw	r30, r12
     a5a:	62 81       	ldd	r22, Z+2	; 0x02
     a5c:	73 81       	ldd	r23, Z+3	; 0x03
     a5e:	89 e0       	ldi	r24, 0x09	; 9
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 f6 09 	call	0x13ec	; 0x13ec <fputc>
				char buffer3[10];
				uint8_t timer = OCR0A;
     a66:	17 b5       	in	r17, 0x27	; 39
				fputs("timer: ", stdout);
     a68:	f6 01       	movw	r30, r12
     a6a:	22 81       	ldd	r18, Z+2	; 0x02
     a6c:	33 81       	ldd	r19, Z+3	; 0x03
     a6e:	47 e0       	ldi	r20, 0x07	; 7
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	8b e4       	ldi	r24, 0x4B	; 75
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <fwrite>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     a7e:	61 2f       	mov	r22, r17
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	2a e0       	ldi	r18, 0x0A	; 10
     a88:	ae 01       	movw	r20, r28
     a8a:	43 5c       	subi	r20, 0xC3	; 195
     a8c:	5f 4f       	sbci	r21, 0xFF	; 255
     a8e:	0e 94 87 09 	call	0x130e	; 0x130e <__ltoa_ncheck>
				ltoa(timer, buffer3, 10); fputs(buffer3, stdout); fputc('\n',stdout);				
     a92:	f6 01       	movw	r30, r12
     a94:	62 81       	ldd	r22, Z+2	; 0x02
     a96:	73 81       	ldd	r23, Z+3	; 0x03
     a98:	ce 01       	movw	r24, r28
     a9a:	cd 96       	adiw	r24, 0x3d	; 61
     a9c:	0e 94 32 0a 	call	0x1464	; 0x1464 <fputs>
     aa0:	f6 01       	movw	r30, r12
     aa2:	62 81       	ldd	r22, Z+2	; 0x02
     aa4:	73 81       	ldd	r23, Z+3	; 0x03
     aa6:	8a e0       	ldi	r24, 0x0A	; 10
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 f6 09 	call	0x13ec	; 0x13ec <fputc>
     aae:	0e c0       	rjmp	.+28     	; 0xacc <main+0x19e>
			} else if (in == 'H'){
     ab0:	88 34       	cpi	r24, 0x48	; 72
     ab2:	a1 f4       	brne	.+40     	; 0xadc <main+0x1ae>
				PORTA &= ~(1<<PORTA5);
     ab4:	15 98       	cbi	0x02, 5	; 2
				custom_delay(1000);
     ab6:	68 ee       	ldi	r22, 0xE8	; 232
     ab8:	73 e0       	ldi	r23, 0x03	; 3
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 75 02 	call	0x4ea	; 0x4ea <custom_delay>
				PORTA |= (1<<PORTA5);
     ac2:	15 9a       	sbi	0x02, 5	; 2
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <main+0x19e>
			//if (buffer[0] > 1){
				//fputs(buffer, stdout);
				//custom_delay(100);
			//}
			/*	echo characters back to terminal	*/
			if ((in != '_') && (in != '=') && (in != 'S')){
     ac6:	83 35       	cpi	r24, 0x53	; 83
     ac8:	09 f4       	brne	.+2      	; 0xacc <main+0x19e>
     aca:	50 cf       	rjmp	.-352    	; 0x96c <main+0x3e>
				fputc(in, stdout);
     acc:	f6 01       	movw	r30, r12
     ace:	62 81       	ldd	r22, Z+2	; 0x02
     ad0:	73 81       	ldd	r23, Z+3	; 0x03
     ad2:	8f 2d       	mov	r24, r15
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <fputc>
     ada:	48 cf       	rjmp	.-368    	; 0x96c <main+0x3e>
			//if (buffer[0] > 1){
				//fputs(buffer, stdout);
				//custom_delay(100);
			//}
			/*	echo characters back to terminal	*/
			if ((in != '_') && (in != '=') && (in != 'S')){
     adc:	8d 33       	cpi	r24, 0x3D	; 61
     ade:	99 f7       	brne	.-26     	; 0xac6 <main+0x198>
     ae0:	45 cf       	rjmp	.-374    	; 0x96c <main+0x3e>

00000ae2 <init_tcnt0>:
	 uint8_t return_value = Button_on;
	 if(interrupts_on){
		 sei();
	 }
	 return return_value;
 }
     ae2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Button_on>
     ae6:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tcnt0_ticks>
     aea:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <tcnt0_ticks+0x1>
     aee:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <tcnt0_ticks+0x2>
     af2:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <tcnt0_ticks+0x3>
     af6:	16 bc       	out	0x26, r1	; 38
     af8:	88 23       	and	r24, r24
     afa:	39 f0       	breq	.+14     	; 0xb0a <init_tcnt0+0x28>
     afc:	8f e4       	ldi	r24, 0x4F	; 79
     afe:	87 bd       	out	0x27, r24	; 39
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	84 bd       	out	0x24, r24	; 36
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	85 bd       	out	0x25, r24	; 37
     b08:	06 c0       	rjmp	.+12     	; 0xb16 <init_tcnt0+0x34>
     b0a:	8c e7       	ldi	r24, 0x7C	; 124
     b0c:	87 bd       	out	0x27, r24	; 39
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	84 bd       	out	0x24, r24	; 36
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	85 bd       	out	0x25, r24	; 37
     b16:	ee e6       	ldi	r30, 0x6E	; 110
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	82 60       	ori	r24, 0x02	; 2
     b1e:	80 83       	st	Z, r24
     b20:	85 b3       	in	r24, 0x15	; 21
     b22:	82 70       	andi	r24, 0x02	; 2
     b24:	85 bb       	out	0x15, r24	; 21
     b26:	08 95       	ret

00000b28 <get_tcnt0_ticks>:
     b28:	2f b7       	in	r18, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <tcnt0_ticks>
     b30:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <tcnt0_ticks+0x1>
     b34:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <tcnt0_ticks+0x2>
     b38:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <tcnt0_ticks+0x3>
     b3c:	22 23       	and	r18, r18
     b3e:	0c f4       	brge	.+2      	; 0xb42 <get_tcnt0_ticks+0x1a>
     b40:	78 94       	sei
     b42:	08 95       	ret

00000b44 <__vector_16>:



 ISR(TIMER0_COMPA_vect) {
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 tcnt0_ticks++;
     b56:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <tcnt0_ticks>
     b5a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <tcnt0_ticks+0x1>
     b5e:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <tcnt0_ticks+0x2>
     b62:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <tcnt0_ticks+0x3>
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	a1 1d       	adc	r26, r1
     b6a:	b1 1d       	adc	r27, r1
     b6c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <tcnt0_ticks>
     b70:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <tcnt0_ticks+0x1>
     b74:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <tcnt0_ticks+0x2>
     b78:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <tcnt0_ticks+0x3>
	 uint8_t temp = PIND & (1<<PORTD7);
	 if (temp != 0x00){
     b7c:	4f 9b       	sbis	0x09, 7	; 9
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__vector_16+0x44>
		 Button_on = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Button_on>
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <__vector_16+0x48>
		 } else {
		 Button_on = 0;
     b88:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Button_on>
	 }
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__subsf3>:
     b9e:	50 58       	subi	r21, 0x80	; 128

00000ba0 <__addsf3>:
     ba0:	bb 27       	eor	r27, r27
     ba2:	aa 27       	eor	r26, r26
     ba4:	0e 94 e7 05 	call	0xbce	; 0xbce <__addsf3x>
     ba8:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__fp_round>
     bac:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_pscA>
     bb0:	38 f0       	brcs	.+14     	; 0xbc0 <__addsf3+0x20>
     bb2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fp_pscB>
     bb6:	20 f0       	brcs	.+8      	; 0xbc0 <__addsf3+0x20>
     bb8:	39 f4       	brne	.+14     	; 0xbc8 <__addsf3+0x28>
     bba:	9f 3f       	cpi	r25, 0xFF	; 255
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <__addsf3+0x24>
     bbe:	26 f4       	brtc	.+8      	; 0xbc8 <__addsf3+0x28>
     bc0:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_nan>
     bc4:	0e f4       	brtc	.+2      	; 0xbc8 <__addsf3+0x28>
     bc6:	e0 95       	com	r30
     bc8:	e7 fb       	bst	r30, 7
     bca:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_inf>

00000bce <__addsf3x>:
     bce:	e9 2f       	mov	r30, r25
     bd0:	0e 94 13 07 	call	0xe26	; 0xe26 <__fp_split3>
     bd4:	58 f3       	brcs	.-42     	; 0xbac <__addsf3+0xc>
     bd6:	ba 17       	cp	r27, r26
     bd8:	62 07       	cpc	r22, r18
     bda:	73 07       	cpc	r23, r19
     bdc:	84 07       	cpc	r24, r20
     bde:	95 07       	cpc	r25, r21
     be0:	20 f0       	brcs	.+8      	; 0xbea <__addsf3x+0x1c>
     be2:	79 f4       	brne	.+30     	; 0xc02 <__addsf3x+0x34>
     be4:	a6 f5       	brtc	.+104    	; 0xc4e <__addsf3x+0x80>
     be6:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_zero>
     bea:	0e f4       	brtc	.+2      	; 0xbee <__addsf3x+0x20>
     bec:	e0 95       	com	r30
     bee:	0b 2e       	mov	r0, r27
     bf0:	ba 2f       	mov	r27, r26
     bf2:	a0 2d       	mov	r26, r0
     bf4:	0b 01       	movw	r0, r22
     bf6:	b9 01       	movw	r22, r18
     bf8:	90 01       	movw	r18, r0
     bfa:	0c 01       	movw	r0, r24
     bfc:	ca 01       	movw	r24, r20
     bfe:	a0 01       	movw	r20, r0
     c00:	11 24       	eor	r1, r1
     c02:	ff 27       	eor	r31, r31
     c04:	59 1b       	sub	r21, r25
     c06:	99 f0       	breq	.+38     	; 0xc2e <__addsf3x+0x60>
     c08:	59 3f       	cpi	r21, 0xF9	; 249
     c0a:	50 f4       	brcc	.+20     	; 0xc20 <__addsf3x+0x52>
     c0c:	50 3e       	cpi	r21, 0xE0	; 224
     c0e:	68 f1       	brcs	.+90     	; 0xc6a <__addsf3x+0x9c>
     c10:	1a 16       	cp	r1, r26
     c12:	f0 40       	sbci	r31, 0x00	; 0
     c14:	a2 2f       	mov	r26, r18
     c16:	23 2f       	mov	r18, r19
     c18:	34 2f       	mov	r19, r20
     c1a:	44 27       	eor	r20, r20
     c1c:	58 5f       	subi	r21, 0xF8	; 248
     c1e:	f3 cf       	rjmp	.-26     	; 0xc06 <__addsf3x+0x38>
     c20:	46 95       	lsr	r20
     c22:	37 95       	ror	r19
     c24:	27 95       	ror	r18
     c26:	a7 95       	ror	r26
     c28:	f0 40       	sbci	r31, 0x00	; 0
     c2a:	53 95       	inc	r21
     c2c:	c9 f7       	brne	.-14     	; 0xc20 <__addsf3x+0x52>
     c2e:	7e f4       	brtc	.+30     	; 0xc4e <__addsf3x+0x80>
     c30:	1f 16       	cp	r1, r31
     c32:	ba 0b       	sbc	r27, r26
     c34:	62 0b       	sbc	r22, r18
     c36:	73 0b       	sbc	r23, r19
     c38:	84 0b       	sbc	r24, r20
     c3a:	ba f0       	brmi	.+46     	; 0xc6a <__addsf3x+0x9c>
     c3c:	91 50       	subi	r25, 0x01	; 1
     c3e:	a1 f0       	breq	.+40     	; 0xc68 <__addsf3x+0x9a>
     c40:	ff 0f       	add	r31, r31
     c42:	bb 1f       	adc	r27, r27
     c44:	66 1f       	adc	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	c2 f7       	brpl	.-16     	; 0xc3c <__addsf3x+0x6e>
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <__addsf3x+0x9c>
     c4e:	ba 0f       	add	r27, r26
     c50:	62 1f       	adc	r22, r18
     c52:	73 1f       	adc	r23, r19
     c54:	84 1f       	adc	r24, r20
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__addsf3x+0x9c>
     c58:	87 95       	ror	r24
     c5a:	77 95       	ror	r23
     c5c:	67 95       	ror	r22
     c5e:	b7 95       	ror	r27
     c60:	f7 95       	ror	r31
     c62:	9e 3f       	cpi	r25, 0xFE	; 254
     c64:	08 f0       	brcs	.+2      	; 0xc68 <__addsf3x+0x9a>
     c66:	b0 cf       	rjmp	.-160    	; 0xbc8 <__addsf3+0x28>
     c68:	93 95       	inc	r25
     c6a:	88 0f       	add	r24, r24
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <__addsf3x+0xa2>
     c6e:	99 27       	eor	r25, r25
     c70:	ee 0f       	add	r30, r30
     c72:	97 95       	ror	r25
     c74:	87 95       	ror	r24
     c76:	08 95       	ret

00000c78 <__divsf3>:
     c78:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3x>
     c7c:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__fp_round>
     c80:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fp_pscB>
     c84:	58 f0       	brcs	.+22     	; 0xc9c <__divsf3+0x24>
     c86:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_pscA>
     c8a:	40 f0       	brcs	.+16     	; 0xc9c <__divsf3+0x24>
     c8c:	29 f4       	brne	.+10     	; 0xc98 <__divsf3+0x20>
     c8e:	5f 3f       	cpi	r21, 0xFF	; 255
     c90:	29 f0       	breq	.+10     	; 0xc9c <__divsf3+0x24>
     c92:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_inf>
     c96:	51 11       	cpse	r21, r1
     c98:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_szero>
     c9c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_nan>

00000ca0 <__divsf3x>:
     ca0:	0e 94 13 07 	call	0xe26	; 0xe26 <__fp_split3>
     ca4:	68 f3       	brcs	.-38     	; 0xc80 <__divsf3+0x8>

00000ca6 <__divsf3_pse>:
     ca6:	99 23       	and	r25, r25
     ca8:	b1 f3       	breq	.-20     	; 0xc96 <__divsf3+0x1e>
     caa:	55 23       	and	r21, r21
     cac:	91 f3       	breq	.-28     	; 0xc92 <__divsf3+0x1a>
     cae:	95 1b       	sub	r25, r21
     cb0:	55 0b       	sbc	r21, r21
     cb2:	bb 27       	eor	r27, r27
     cb4:	aa 27       	eor	r26, r26
     cb6:	62 17       	cp	r22, r18
     cb8:	73 07       	cpc	r23, r19
     cba:	84 07       	cpc	r24, r20
     cbc:	38 f0       	brcs	.+14     	; 0xccc <__divsf3_pse+0x26>
     cbe:	9f 5f       	subi	r25, 0xFF	; 255
     cc0:	5f 4f       	sbci	r21, 0xFF	; 255
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	44 1f       	adc	r20, r20
     cc8:	aa 1f       	adc	r26, r26
     cca:	a9 f3       	breq	.-22     	; 0xcb6 <__divsf3_pse+0x10>
     ccc:	35 d0       	rcall	.+106    	; 0xd38 <__divsf3_pse+0x92>
     cce:	0e 2e       	mov	r0, r30
     cd0:	3a f0       	brmi	.+14     	; 0xce0 <__divsf3_pse+0x3a>
     cd2:	e0 e8       	ldi	r30, 0x80	; 128
     cd4:	32 d0       	rcall	.+100    	; 0xd3a <__divsf3_pse+0x94>
     cd6:	91 50       	subi	r25, 0x01	; 1
     cd8:	50 40       	sbci	r21, 0x00	; 0
     cda:	e6 95       	lsr	r30
     cdc:	00 1c       	adc	r0, r0
     cde:	ca f7       	brpl	.-14     	; 0xcd2 <__divsf3_pse+0x2c>
     ce0:	2b d0       	rcall	.+86     	; 0xd38 <__divsf3_pse+0x92>
     ce2:	fe 2f       	mov	r31, r30
     ce4:	29 d0       	rcall	.+82     	; 0xd38 <__divsf3_pse+0x92>
     ce6:	66 0f       	add	r22, r22
     ce8:	77 1f       	adc	r23, r23
     cea:	88 1f       	adc	r24, r24
     cec:	bb 1f       	adc	r27, r27
     cee:	26 17       	cp	r18, r22
     cf0:	37 07       	cpc	r19, r23
     cf2:	48 07       	cpc	r20, r24
     cf4:	ab 07       	cpc	r26, r27
     cf6:	b0 e8       	ldi	r27, 0x80	; 128
     cf8:	09 f0       	breq	.+2      	; 0xcfc <__divsf3_pse+0x56>
     cfa:	bb 0b       	sbc	r27, r27
     cfc:	80 2d       	mov	r24, r0
     cfe:	bf 01       	movw	r22, r30
     d00:	ff 27       	eor	r31, r31
     d02:	93 58       	subi	r25, 0x83	; 131
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	3a f0       	brmi	.+14     	; 0xd16 <__divsf3_pse+0x70>
     d08:	9e 3f       	cpi	r25, 0xFE	; 254
     d0a:	51 05       	cpc	r21, r1
     d0c:	78 f0       	brcs	.+30     	; 0xd2c <__divsf3_pse+0x86>
     d0e:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_inf>
     d12:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_szero>
     d16:	5f 3f       	cpi	r21, 0xFF	; 255
     d18:	e4 f3       	brlt	.-8      	; 0xd12 <__divsf3_pse+0x6c>
     d1a:	98 3e       	cpi	r25, 0xE8	; 232
     d1c:	d4 f3       	brlt	.-12     	; 0xd12 <__divsf3_pse+0x6c>
     d1e:	86 95       	lsr	r24
     d20:	77 95       	ror	r23
     d22:	67 95       	ror	r22
     d24:	b7 95       	ror	r27
     d26:	f7 95       	ror	r31
     d28:	9f 5f       	subi	r25, 0xFF	; 255
     d2a:	c9 f7       	brne	.-14     	; 0xd1e <__divsf3_pse+0x78>
     d2c:	88 0f       	add	r24, r24
     d2e:	91 1d       	adc	r25, r1
     d30:	96 95       	lsr	r25
     d32:	87 95       	ror	r24
     d34:	97 f9       	bld	r25, 7
     d36:	08 95       	ret
     d38:	e1 e0       	ldi	r30, 0x01	; 1
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	bb 1f       	adc	r27, r27
     d42:	62 17       	cp	r22, r18
     d44:	73 07       	cpc	r23, r19
     d46:	84 07       	cpc	r24, r20
     d48:	ba 07       	cpc	r27, r26
     d4a:	20 f0       	brcs	.+8      	; 0xd54 <__divsf3_pse+0xae>
     d4c:	62 1b       	sub	r22, r18
     d4e:	73 0b       	sbc	r23, r19
     d50:	84 0b       	sbc	r24, r20
     d52:	ba 0b       	sbc	r27, r26
     d54:	ee 1f       	adc	r30, r30
     d56:	88 f7       	brcc	.-30     	; 0xd3a <__divsf3_pse+0x94>
     d58:	e0 95       	com	r30
     d5a:	08 95       	ret

00000d5c <__floatunsisf>:
     d5c:	e8 94       	clt
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <__floatsisf+0x12>

00000d60 <__floatsisf>:
     d60:	97 fb       	bst	r25, 7
     d62:	3e f4       	brtc	.+14     	; 0xd72 <__floatsisf+0x12>
     d64:	90 95       	com	r25
     d66:	80 95       	com	r24
     d68:	70 95       	com	r23
     d6a:	61 95       	neg	r22
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	8f 4f       	sbci	r24, 0xFF	; 255
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	99 23       	and	r25, r25
     d74:	a9 f0       	breq	.+42     	; 0xda0 <__floatsisf+0x40>
     d76:	f9 2f       	mov	r31, r25
     d78:	96 e9       	ldi	r25, 0x96	; 150
     d7a:	bb 27       	eor	r27, r27
     d7c:	93 95       	inc	r25
     d7e:	f6 95       	lsr	r31
     d80:	87 95       	ror	r24
     d82:	77 95       	ror	r23
     d84:	67 95       	ror	r22
     d86:	b7 95       	ror	r27
     d88:	f1 11       	cpse	r31, r1
     d8a:	f8 cf       	rjmp	.-16     	; 0xd7c <__floatsisf+0x1c>
     d8c:	fa f4       	brpl	.+62     	; 0xdcc <__floatsisf+0x6c>
     d8e:	bb 0f       	add	r27, r27
     d90:	11 f4       	brne	.+4      	; 0xd96 <__floatsisf+0x36>
     d92:	60 ff       	sbrs	r22, 0
     d94:	1b c0       	rjmp	.+54     	; 0xdcc <__floatsisf+0x6c>
     d96:	6f 5f       	subi	r22, 0xFF	; 255
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	8f 4f       	sbci	r24, 0xFF	; 255
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	16 c0       	rjmp	.+44     	; 0xdcc <__floatsisf+0x6c>
     da0:	88 23       	and	r24, r24
     da2:	11 f0       	breq	.+4      	; 0xda8 <__floatsisf+0x48>
     da4:	96 e9       	ldi	r25, 0x96	; 150
     da6:	11 c0       	rjmp	.+34     	; 0xdca <__floatsisf+0x6a>
     da8:	77 23       	and	r23, r23
     daa:	21 f0       	breq	.+8      	; 0xdb4 <__floatsisf+0x54>
     dac:	9e e8       	ldi	r25, 0x8E	; 142
     dae:	87 2f       	mov	r24, r23
     db0:	76 2f       	mov	r23, r22
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <__floatsisf+0x5e>
     db4:	66 23       	and	r22, r22
     db6:	71 f0       	breq	.+28     	; 0xdd4 <__floatsisf+0x74>
     db8:	96 e8       	ldi	r25, 0x86	; 134
     dba:	86 2f       	mov	r24, r22
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	2a f0       	brmi	.+10     	; 0xdcc <__floatsisf+0x6c>
     dc2:	9a 95       	dec	r25
     dc4:	66 0f       	add	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	88 1f       	adc	r24, r24
     dca:	da f7       	brpl	.-10     	; 0xdc2 <__floatsisf+0x62>
     dcc:	88 0f       	add	r24, r24
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	97 f9       	bld	r25, 7
     dd4:	08 95       	ret

00000dd6 <__fp_inf>:
     dd6:	97 f9       	bld	r25, 7
     dd8:	9f 67       	ori	r25, 0x7F	; 127
     dda:	80 e8       	ldi	r24, 0x80	; 128
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	08 95       	ret

00000de2 <__fp_nan>:
     de2:	9f ef       	ldi	r25, 0xFF	; 255
     de4:	80 ec       	ldi	r24, 0xC0	; 192
     de6:	08 95       	ret

00000de8 <__fp_pscA>:
     de8:	00 24       	eor	r0, r0
     dea:	0a 94       	dec	r0
     dec:	16 16       	cp	r1, r22
     dee:	17 06       	cpc	r1, r23
     df0:	18 06       	cpc	r1, r24
     df2:	09 06       	cpc	r0, r25
     df4:	08 95       	ret

00000df6 <__fp_pscB>:
     df6:	00 24       	eor	r0, r0
     df8:	0a 94       	dec	r0
     dfa:	12 16       	cp	r1, r18
     dfc:	13 06       	cpc	r1, r19
     dfe:	14 06       	cpc	r1, r20
     e00:	05 06       	cpc	r0, r21
     e02:	08 95       	ret

00000e04 <__fp_round>:
     e04:	09 2e       	mov	r0, r25
     e06:	03 94       	inc	r0
     e08:	00 0c       	add	r0, r0
     e0a:	11 f4       	brne	.+4      	; 0xe10 <__fp_round+0xc>
     e0c:	88 23       	and	r24, r24
     e0e:	52 f0       	brmi	.+20     	; 0xe24 <__fp_round+0x20>
     e10:	bb 0f       	add	r27, r27
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fp_round+0x20>
     e14:	bf 2b       	or	r27, r31
     e16:	11 f4       	brne	.+4      	; 0xe1c <__fp_round+0x18>
     e18:	60 ff       	sbrs	r22, 0
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <__fp_round+0x20>
     e1c:	6f 5f       	subi	r22, 0xFF	; 255
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	8f 4f       	sbci	r24, 0xFF	; 255
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	08 95       	ret

00000e26 <__fp_split3>:
     e26:	57 fd       	sbrc	r21, 7
     e28:	90 58       	subi	r25, 0x80	; 128
     e2a:	44 0f       	add	r20, r20
     e2c:	55 1f       	adc	r21, r21
     e2e:	59 f0       	breq	.+22     	; 0xe46 <__fp_splitA+0x10>
     e30:	5f 3f       	cpi	r21, 0xFF	; 255
     e32:	71 f0       	breq	.+28     	; 0xe50 <__fp_splitA+0x1a>
     e34:	47 95       	ror	r20

00000e36 <__fp_splitA>:
     e36:	88 0f       	add	r24, r24
     e38:	97 fb       	bst	r25, 7
     e3a:	99 1f       	adc	r25, r25
     e3c:	61 f0       	breq	.+24     	; 0xe56 <__fp_splitA+0x20>
     e3e:	9f 3f       	cpi	r25, 0xFF	; 255
     e40:	79 f0       	breq	.+30     	; 0xe60 <__fp_splitA+0x2a>
     e42:	87 95       	ror	r24
     e44:	08 95       	ret
     e46:	12 16       	cp	r1, r18
     e48:	13 06       	cpc	r1, r19
     e4a:	14 06       	cpc	r1, r20
     e4c:	55 1f       	adc	r21, r21
     e4e:	f2 cf       	rjmp	.-28     	; 0xe34 <__fp_split3+0xe>
     e50:	46 95       	lsr	r20
     e52:	f1 df       	rcall	.-30     	; 0xe36 <__fp_splitA>
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <__fp_splitA+0x30>
     e56:	16 16       	cp	r1, r22
     e58:	17 06       	cpc	r1, r23
     e5a:	18 06       	cpc	r1, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	f1 cf       	rjmp	.-30     	; 0xe42 <__fp_splitA+0xc>
     e60:	86 95       	lsr	r24
     e62:	71 05       	cpc	r23, r1
     e64:	61 05       	cpc	r22, r1
     e66:	08 94       	sec
     e68:	08 95       	ret

00000e6a <__fp_zero>:
     e6a:	e8 94       	clt

00000e6c <__fp_szero>:
     e6c:	bb 27       	eor	r27, r27
     e6e:	66 27       	eor	r22, r22
     e70:	77 27       	eor	r23, r23
     e72:	cb 01       	movw	r24, r22
     e74:	97 f9       	bld	r25, 7
     e76:	08 95       	ret

00000e78 <__mulsf3>:
     e78:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__mulsf3x>
     e7c:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__fp_round>
     e80:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_pscA>
     e84:	38 f0       	brcs	.+14     	; 0xe94 <__mulsf3+0x1c>
     e86:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fp_pscB>
     e8a:	20 f0       	brcs	.+8      	; 0xe94 <__mulsf3+0x1c>
     e8c:	95 23       	and	r25, r21
     e8e:	11 f0       	breq	.+4      	; 0xe94 <__mulsf3+0x1c>
     e90:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_inf>
     e94:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_nan>
     e98:	11 24       	eor	r1, r1
     e9a:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_szero>

00000e9e <__mulsf3x>:
     e9e:	0e 94 13 07 	call	0xe26	; 0xe26 <__fp_split3>
     ea2:	70 f3       	brcs	.-36     	; 0xe80 <__mulsf3+0x8>

00000ea4 <__mulsf3_pse>:
     ea4:	95 9f       	mul	r25, r21
     ea6:	c1 f3       	breq	.-16     	; 0xe98 <__mulsf3+0x20>
     ea8:	95 0f       	add	r25, r21
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	55 1f       	adc	r21, r21
     eae:	62 9f       	mul	r22, r18
     eb0:	f0 01       	movw	r30, r0
     eb2:	72 9f       	mul	r23, r18
     eb4:	bb 27       	eor	r27, r27
     eb6:	f0 0d       	add	r31, r0
     eb8:	b1 1d       	adc	r27, r1
     eba:	63 9f       	mul	r22, r19
     ebc:	aa 27       	eor	r26, r26
     ebe:	f0 0d       	add	r31, r0
     ec0:	b1 1d       	adc	r27, r1
     ec2:	aa 1f       	adc	r26, r26
     ec4:	64 9f       	mul	r22, r20
     ec6:	66 27       	eor	r22, r22
     ec8:	b0 0d       	add	r27, r0
     eca:	a1 1d       	adc	r26, r1
     ecc:	66 1f       	adc	r22, r22
     ece:	82 9f       	mul	r24, r18
     ed0:	22 27       	eor	r18, r18
     ed2:	b0 0d       	add	r27, r0
     ed4:	a1 1d       	adc	r26, r1
     ed6:	62 1f       	adc	r22, r18
     ed8:	73 9f       	mul	r23, r19
     eda:	b0 0d       	add	r27, r0
     edc:	a1 1d       	adc	r26, r1
     ede:	62 1f       	adc	r22, r18
     ee0:	83 9f       	mul	r24, r19
     ee2:	a0 0d       	add	r26, r0
     ee4:	61 1d       	adc	r22, r1
     ee6:	22 1f       	adc	r18, r18
     ee8:	74 9f       	mul	r23, r20
     eea:	33 27       	eor	r19, r19
     eec:	a0 0d       	add	r26, r0
     eee:	61 1d       	adc	r22, r1
     ef0:	23 1f       	adc	r18, r19
     ef2:	84 9f       	mul	r24, r20
     ef4:	60 0d       	add	r22, r0
     ef6:	21 1d       	adc	r18, r1
     ef8:	82 2f       	mov	r24, r18
     efa:	76 2f       	mov	r23, r22
     efc:	6a 2f       	mov	r22, r26
     efe:	11 24       	eor	r1, r1
     f00:	9f 57       	subi	r25, 0x7F	; 127
     f02:	50 40       	sbci	r21, 0x00	; 0
     f04:	9a f0       	brmi	.+38     	; 0xf2c <__mulsf3_pse+0x88>
     f06:	f1 f0       	breq	.+60     	; 0xf44 <__mulsf3_pse+0xa0>
     f08:	88 23       	and	r24, r24
     f0a:	4a f0       	brmi	.+18     	; 0xf1e <__mulsf3_pse+0x7a>
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	bb 1f       	adc	r27, r27
     f12:	66 1f       	adc	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	88 1f       	adc	r24, r24
     f18:	91 50       	subi	r25, 0x01	; 1
     f1a:	50 40       	sbci	r21, 0x00	; 0
     f1c:	a9 f7       	brne	.-22     	; 0xf08 <__mulsf3_pse+0x64>
     f1e:	9e 3f       	cpi	r25, 0xFE	; 254
     f20:	51 05       	cpc	r21, r1
     f22:	80 f0       	brcs	.+32     	; 0xf44 <__mulsf3_pse+0xa0>
     f24:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_inf>
     f28:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_szero>
     f2c:	5f 3f       	cpi	r21, 0xFF	; 255
     f2e:	e4 f3       	brlt	.-8      	; 0xf28 <__mulsf3_pse+0x84>
     f30:	98 3e       	cpi	r25, 0xE8	; 232
     f32:	d4 f3       	brlt	.-12     	; 0xf28 <__mulsf3_pse+0x84>
     f34:	86 95       	lsr	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	b7 95       	ror	r27
     f3c:	f7 95       	ror	r31
     f3e:	e7 95       	ror	r30
     f40:	9f 5f       	subi	r25, 0xFF	; 255
     f42:	c1 f7       	brne	.-16     	; 0xf34 <__mulsf3_pse+0x90>
     f44:	fe 2b       	or	r31, r30
     f46:	88 0f       	add	r24, r24
     f48:	91 1d       	adc	r25, r1
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	97 f9       	bld	r25, 7
     f50:	08 95       	ret

00000f52 <__divmodsi4>:
     f52:	05 2e       	mov	r0, r21
     f54:	97 fb       	bst	r25, 7
     f56:	1e f4       	brtc	.+6      	; 0xf5e <__divmodsi4+0xc>
     f58:	00 94       	com	r0
     f5a:	0e 94 c0 07 	call	0xf80	; 0xf80 <__negsi2>
     f5e:	57 fd       	sbrc	r21, 7
     f60:	07 d0       	rcall	.+14     	; 0xf70 <__divmodsi4_neg2>
     f62:	0e 94 c8 07 	call	0xf90	; 0xf90 <__udivmodsi4>
     f66:	07 fc       	sbrc	r0, 7
     f68:	03 d0       	rcall	.+6      	; 0xf70 <__divmodsi4_neg2>
     f6a:	4e f4       	brtc	.+18     	; 0xf7e <__divmodsi4_exit>
     f6c:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__negsi2>

00000f70 <__divmodsi4_neg2>:
     f70:	50 95       	com	r21
     f72:	40 95       	com	r20
     f74:	30 95       	com	r19
     f76:	21 95       	neg	r18
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	4f 4f       	sbci	r20, 0xFF	; 255
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f7e <__divmodsi4_exit>:
     f7e:	08 95       	ret

00000f80 <__negsi2>:
     f80:	90 95       	com	r25
     f82:	80 95       	com	r24
     f84:	70 95       	com	r23
     f86:	61 95       	neg	r22
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	08 95       	ret

00000f90 <__udivmodsi4>:
     f90:	a1 e2       	ldi	r26, 0x21	; 33
     f92:	1a 2e       	mov	r1, r26
     f94:	aa 1b       	sub	r26, r26
     f96:	bb 1b       	sub	r27, r27
     f98:	fd 01       	movw	r30, r26
     f9a:	0d c0       	rjmp	.+26     	; 0xfb6 <__udivmodsi4_ep>

00000f9c <__udivmodsi4_loop>:
     f9c:	aa 1f       	adc	r26, r26
     f9e:	bb 1f       	adc	r27, r27
     fa0:	ee 1f       	adc	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	a2 17       	cp	r26, r18
     fa6:	b3 07       	cpc	r27, r19
     fa8:	e4 07       	cpc	r30, r20
     faa:	f5 07       	cpc	r31, r21
     fac:	20 f0       	brcs	.+8      	; 0xfb6 <__udivmodsi4_ep>
     fae:	a2 1b       	sub	r26, r18
     fb0:	b3 0b       	sbc	r27, r19
     fb2:	e4 0b       	sbc	r30, r20
     fb4:	f5 0b       	sbc	r31, r21

00000fb6 <__udivmodsi4_ep>:
     fb6:	66 1f       	adc	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	1a 94       	dec	r1
     fc0:	69 f7       	brne	.-38     	; 0xf9c <__udivmodsi4_loop>
     fc2:	60 95       	com	r22
     fc4:	70 95       	com	r23
     fc6:	80 95       	com	r24
     fc8:	90 95       	com	r25
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
     fce:	bd 01       	movw	r22, r26
     fd0:	cf 01       	movw	r24, r30
     fd2:	08 95       	ret

00000fd4 <dtostrf>:
     fd4:	ef 92       	push	r14
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	e8 01       	movw	r28, r16
     fe0:	47 fd       	sbrc	r20, 7
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <dtostrf+0x14>
     fe4:	34 e0       	ldi	r19, 0x04	; 4
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <dtostrf+0x16>
     fe8:	34 e1       	ldi	r19, 0x14	; 20
     fea:	04 2e       	mov	r0, r20
     fec:	00 0c       	add	r0, r0
     fee:	55 0b       	sbc	r21, r21
     ff0:	57 ff       	sbrs	r21, 7
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <dtostrf+0x26>
     ff4:	51 95       	neg	r21
     ff6:	41 95       	neg	r20
     ff8:	51 09       	sbc	r21, r1
     ffa:	e3 2e       	mov	r14, r19
     ffc:	02 2f       	mov	r16, r18
     ffe:	24 2f       	mov	r18, r20
    1000:	ae 01       	movw	r20, r28
    1002:	0e 94 90 0a 	call	0x1520	; 0x1520 <dtoa_prf>
    1006:	ce 01       	movw	r24, r28
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ef 90       	pop	r14
    1012:	08 95       	ret

00001014 <malloc>:
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	91 05       	cpc	r25, r1
    1020:	10 f4       	brcc	.+4      	; 0x1026 <malloc+0x12>
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__flp>
    102a:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <__flp+0x1>
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	30 97       	sbiw	r30, 0x00	; 0
    1038:	19 f1       	breq	.+70     	; 0x1080 <malloc+0x6c>
    103a:	40 81       	ld	r20, Z
    103c:	51 81       	ldd	r21, Z+1	; 0x01
    103e:	02 81       	ldd	r16, Z+2	; 0x02
    1040:	13 81       	ldd	r17, Z+3	; 0x03
    1042:	48 17       	cp	r20, r24
    1044:	59 07       	cpc	r21, r25
    1046:	c8 f0       	brcs	.+50     	; 0x107a <malloc+0x66>
    1048:	84 17       	cp	r24, r20
    104a:	95 07       	cpc	r25, r21
    104c:	69 f4       	brne	.+26     	; 0x1068 <malloc+0x54>
    104e:	10 97       	sbiw	r26, 0x00	; 0
    1050:	31 f0       	breq	.+12     	; 0x105e <malloc+0x4a>
    1052:	12 96       	adiw	r26, 0x02	; 2
    1054:	0c 93       	st	X, r16
    1056:	12 97       	sbiw	r26, 0x02	; 2
    1058:	13 96       	adiw	r26, 0x03	; 3
    105a:	1c 93       	st	X, r17
    105c:	27 c0       	rjmp	.+78     	; 0x10ac <malloc+0x98>
    105e:	00 93 74 02 	sts	0x0274, r16	; 0x800274 <__flp>
    1062:	10 93 75 02 	sts	0x0275, r17	; 0x800275 <__flp+0x1>
    1066:	22 c0       	rjmp	.+68     	; 0x10ac <malloc+0x98>
    1068:	21 15       	cp	r18, r1
    106a:	31 05       	cpc	r19, r1
    106c:	19 f0       	breq	.+6      	; 0x1074 <malloc+0x60>
    106e:	42 17       	cp	r20, r18
    1070:	53 07       	cpc	r21, r19
    1072:	18 f4       	brcc	.+6      	; 0x107a <malloc+0x66>
    1074:	9a 01       	movw	r18, r20
    1076:	bd 01       	movw	r22, r26
    1078:	ef 01       	movw	r28, r30
    107a:	df 01       	movw	r26, r30
    107c:	f8 01       	movw	r30, r16
    107e:	db cf       	rjmp	.-74     	; 0x1036 <malloc+0x22>
    1080:	21 15       	cp	r18, r1
    1082:	31 05       	cpc	r19, r1
    1084:	f9 f0       	breq	.+62     	; 0x10c4 <malloc+0xb0>
    1086:	28 1b       	sub	r18, r24
    1088:	39 0b       	sbc	r19, r25
    108a:	24 30       	cpi	r18, 0x04	; 4
    108c:	31 05       	cpc	r19, r1
    108e:	80 f4       	brcc	.+32     	; 0x10b0 <malloc+0x9c>
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	9b 81       	ldd	r25, Y+3	; 0x03
    1094:	61 15       	cp	r22, r1
    1096:	71 05       	cpc	r23, r1
    1098:	21 f0       	breq	.+8      	; 0x10a2 <malloc+0x8e>
    109a:	fb 01       	movw	r30, r22
    109c:	93 83       	std	Z+3, r25	; 0x03
    109e:	82 83       	std	Z+2, r24	; 0x02
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <malloc+0x96>
    10a2:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__flp+0x1>
    10a6:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__flp>
    10aa:	fe 01       	movw	r30, r28
    10ac:	32 96       	adiw	r30, 0x02	; 2
    10ae:	44 c0       	rjmp	.+136    	; 0x1138 <malloc+0x124>
    10b0:	fe 01       	movw	r30, r28
    10b2:	e2 0f       	add	r30, r18
    10b4:	f3 1f       	adc	r31, r19
    10b6:	81 93       	st	Z+, r24
    10b8:	91 93       	st	Z+, r25
    10ba:	22 50       	subi	r18, 0x02	; 2
    10bc:	31 09       	sbc	r19, r1
    10be:	39 83       	std	Y+1, r19	; 0x01
    10c0:	28 83       	st	Y, r18
    10c2:	3a c0       	rjmp	.+116    	; 0x1138 <malloc+0x124>
    10c4:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
    10c8:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
    10cc:	23 2b       	or	r18, r19
    10ce:	41 f4       	brne	.+16     	; 0x10e0 <malloc+0xcc>
    10d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    10d4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    10d8:	30 93 73 02 	sts	0x0273, r19	; 0x800273 <__brkval+0x1>
    10dc:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <__brkval>
    10e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    10e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    10e8:	21 15       	cp	r18, r1
    10ea:	31 05       	cpc	r19, r1
    10ec:	41 f4       	brne	.+16     	; 0x10fe <malloc+0xea>
    10ee:	2d b7       	in	r18, 0x3d	; 61
    10f0:	3e b7       	in	r19, 0x3e	; 62
    10f2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    10f6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    10fa:	24 1b       	sub	r18, r20
    10fc:	35 0b       	sbc	r19, r21
    10fe:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <__brkval>
    1102:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <__brkval+0x1>
    1106:	e2 17       	cp	r30, r18
    1108:	f3 07       	cpc	r31, r19
    110a:	a0 f4       	brcc	.+40     	; 0x1134 <malloc+0x120>
    110c:	2e 1b       	sub	r18, r30
    110e:	3f 0b       	sbc	r19, r31
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	78 f0       	brcs	.+30     	; 0x1134 <malloc+0x120>
    1116:	ac 01       	movw	r20, r24
    1118:	4e 5f       	subi	r20, 0xFE	; 254
    111a:	5f 4f       	sbci	r21, 0xFF	; 255
    111c:	24 17       	cp	r18, r20
    111e:	35 07       	cpc	r19, r21
    1120:	48 f0       	brcs	.+18     	; 0x1134 <malloc+0x120>
    1122:	4e 0f       	add	r20, r30
    1124:	5f 1f       	adc	r21, r31
    1126:	50 93 73 02 	sts	0x0273, r21	; 0x800273 <__brkval+0x1>
    112a:	40 93 72 02 	sts	0x0272, r20	; 0x800272 <__brkval>
    112e:	81 93       	st	Z+, r24
    1130:	91 93       	st	Z+, r25
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <malloc+0x124>
    1134:	e0 e0       	ldi	r30, 0x00	; 0
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	cf 01       	movw	r24, r30
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	08 95       	ret

00001144 <free>:
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	09 f4       	brne	.+2      	; 0x114e <free+0xa>
    114c:	81 c0       	rjmp	.+258    	; 0x1250 <free+0x10c>
    114e:	fc 01       	movw	r30, r24
    1150:	32 97       	sbiw	r30, 0x02	; 2
    1152:	13 82       	std	Z+3, r1	; 0x03
    1154:	12 82       	std	Z+2, r1	; 0x02
    1156:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <__flp>
    115a:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <__flp+0x1>
    115e:	10 97       	sbiw	r26, 0x00	; 0
    1160:	81 f4       	brne	.+32     	; 0x1182 <free+0x3e>
    1162:	20 81       	ld	r18, Z
    1164:	31 81       	ldd	r19, Z+1	; 0x01
    1166:	82 0f       	add	r24, r18
    1168:	93 1f       	adc	r25, r19
    116a:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
    116e:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	51 f5       	brne	.+84     	; 0x11cc <free+0x88>
    1178:	f0 93 73 02 	sts	0x0273, r31	; 0x800273 <__brkval+0x1>
    117c:	e0 93 72 02 	sts	0x0272, r30	; 0x800272 <__brkval>
    1180:	67 c0       	rjmp	.+206    	; 0x1250 <free+0x10c>
    1182:	ed 01       	movw	r28, r26
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	ce 17       	cp	r28, r30
    118a:	df 07       	cpc	r29, r31
    118c:	40 f4       	brcc	.+16     	; 0x119e <free+0x5a>
    118e:	4a 81       	ldd	r20, Y+2	; 0x02
    1190:	5b 81       	ldd	r21, Y+3	; 0x03
    1192:	9e 01       	movw	r18, r28
    1194:	41 15       	cp	r20, r1
    1196:	51 05       	cpc	r21, r1
    1198:	f1 f0       	breq	.+60     	; 0x11d6 <free+0x92>
    119a:	ea 01       	movw	r28, r20
    119c:	f5 cf       	rjmp	.-22     	; 0x1188 <free+0x44>
    119e:	d3 83       	std	Z+3, r29	; 0x03
    11a0:	c2 83       	std	Z+2, r28	; 0x02
    11a2:	40 81       	ld	r20, Z
    11a4:	51 81       	ldd	r21, Z+1	; 0x01
    11a6:	84 0f       	add	r24, r20
    11a8:	95 1f       	adc	r25, r21
    11aa:	c8 17       	cp	r28, r24
    11ac:	d9 07       	cpc	r29, r25
    11ae:	59 f4       	brne	.+22     	; 0x11c6 <free+0x82>
    11b0:	88 81       	ld	r24, Y
    11b2:	99 81       	ldd	r25, Y+1	; 0x01
    11b4:	84 0f       	add	r24, r20
    11b6:	95 1f       	adc	r25, r21
    11b8:	02 96       	adiw	r24, 0x02	; 2
    11ba:	91 83       	std	Z+1, r25	; 0x01
    11bc:	80 83       	st	Z, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	9b 81       	ldd	r25, Y+3	; 0x03
    11c2:	93 83       	std	Z+3, r25	; 0x03
    11c4:	82 83       	std	Z+2, r24	; 0x02
    11c6:	21 15       	cp	r18, r1
    11c8:	31 05       	cpc	r19, r1
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <free+0x92>
    11cc:	f0 93 75 02 	sts	0x0275, r31	; 0x800275 <__flp+0x1>
    11d0:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <__flp>
    11d4:	3d c0       	rjmp	.+122    	; 0x1250 <free+0x10c>
    11d6:	e9 01       	movw	r28, r18
    11d8:	fb 83       	std	Y+3, r31	; 0x03
    11da:	ea 83       	std	Y+2, r30	; 0x02
    11dc:	49 91       	ld	r20, Y+
    11de:	59 91       	ld	r21, Y+
    11e0:	c4 0f       	add	r28, r20
    11e2:	d5 1f       	adc	r29, r21
    11e4:	ec 17       	cp	r30, r28
    11e6:	fd 07       	cpc	r31, r29
    11e8:	61 f4       	brne	.+24     	; 0x1202 <free+0xbe>
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	84 0f       	add	r24, r20
    11f0:	95 1f       	adc	r25, r21
    11f2:	02 96       	adiw	r24, 0x02	; 2
    11f4:	e9 01       	movw	r28, r18
    11f6:	99 83       	std	Y+1, r25	; 0x01
    11f8:	88 83       	st	Y, r24
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	93 81       	ldd	r25, Z+3	; 0x03
    11fe:	9b 83       	std	Y+3, r25	; 0x03
    1200:	8a 83       	std	Y+2, r24	; 0x02
    1202:	e0 e0       	ldi	r30, 0x00	; 0
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	12 96       	adiw	r26, 0x02	; 2
    1208:	8d 91       	ld	r24, X+
    120a:	9c 91       	ld	r25, X
    120c:	13 97       	sbiw	r26, 0x03	; 3
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	19 f0       	breq	.+6      	; 0x1218 <free+0xd4>
    1212:	fd 01       	movw	r30, r26
    1214:	dc 01       	movw	r26, r24
    1216:	f7 cf       	rjmp	.-18     	; 0x1206 <free+0xc2>
    1218:	8d 91       	ld	r24, X+
    121a:	9c 91       	ld	r25, X
    121c:	11 97       	sbiw	r26, 0x01	; 1
    121e:	9d 01       	movw	r18, r26
    1220:	2e 5f       	subi	r18, 0xFE	; 254
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	82 0f       	add	r24, r18
    1226:	93 1f       	adc	r25, r19
    1228:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
    122c:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
    1230:	28 17       	cp	r18, r24
    1232:	39 07       	cpc	r19, r25
    1234:	69 f4       	brne	.+26     	; 0x1250 <free+0x10c>
    1236:	30 97       	sbiw	r30, 0x00	; 0
    1238:	29 f4       	brne	.+10     	; 0x1244 <free+0x100>
    123a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <__flp+0x1>
    123e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__flp>
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <free+0x104>
    1244:	13 82       	std	Z+3, r1	; 0x03
    1246:	12 82       	std	Z+2, r1	; 0x02
    1248:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <__brkval+0x1>
    124c:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <__brkval>
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	08 95       	ret

00001256 <do_rand>:
    1256:	8f 92       	push	r8
    1258:	9f 92       	push	r9
    125a:	af 92       	push	r10
    125c:	bf 92       	push	r11
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	ec 01       	movw	r28, r24
    126c:	68 81       	ld	r22, Y
    126e:	79 81       	ldd	r23, Y+1	; 0x01
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	9b 81       	ldd	r25, Y+3	; 0x03
    1274:	61 15       	cp	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	81 05       	cpc	r24, r1
    127a:	91 05       	cpc	r25, r1
    127c:	21 f4       	brne	.+8      	; 0x1286 <do_rand+0x30>
    127e:	64 e2       	ldi	r22, 0x24	; 36
    1280:	79 ed       	ldi	r23, 0xD9	; 217
    1282:	8b e5       	ldi	r24, 0x5B	; 91
    1284:	97 e0       	ldi	r25, 0x07	; 7
    1286:	2d e1       	ldi	r18, 0x1D	; 29
    1288:	33 ef       	ldi	r19, 0xF3	; 243
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__divmodsi4>
    1292:	49 01       	movw	r8, r18
    1294:	5a 01       	movw	r10, r20
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	a7 ea       	ldi	r26, 0xA7	; 167
    129c:	b1 e4       	ldi	r27, 0x41	; 65
    129e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__muluhisi3>
    12a2:	6b 01       	movw	r12, r22
    12a4:	7c 01       	movw	r14, r24
    12a6:	ac ee       	ldi	r26, 0xEC	; 236
    12a8:	b4 ef       	ldi	r27, 0xF4	; 244
    12aa:	a5 01       	movw	r20, r10
    12ac:	94 01       	movw	r18, r8
    12ae:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__mulohisi3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	8c 0d       	add	r24, r12
    12b8:	9d 1d       	adc	r25, r13
    12ba:	ae 1d       	adc	r26, r14
    12bc:	bf 1d       	adc	r27, r15
    12be:	b7 ff       	sbrs	r27, 7
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <do_rand+0x72>
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	a1 09       	sbc	r26, r1
    12c6:	b0 48       	sbci	r27, 0x80	; 128
    12c8:	88 83       	st	Y, r24
    12ca:	99 83       	std	Y+1, r25	; 0x01
    12cc:	aa 83       	std	Y+2, r26	; 0x02
    12ce:	bb 83       	std	Y+3, r27	; 0x03
    12d0:	9f 77       	andi	r25, 0x7F	; 127
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	bf 90       	pop	r11
    12e0:	af 90       	pop	r10
    12e2:	9f 90       	pop	r9
    12e4:	8f 90       	pop	r8
    12e6:	08 95       	ret

000012e8 <rand_r>:
    12e8:	0e 94 2b 09 	call	0x1256	; 0x1256 <do_rand>
    12ec:	08 95       	ret

000012ee <rand>:
    12ee:	86 e0       	ldi	r24, 0x06	; 6
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 2b 09 	call	0x1256	; 0x1256 <do_rand>
    12f6:	08 95       	ret

000012f8 <srand>:
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1300:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1304:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1308:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    130c:	08 95       	ret

0000130e <__ltoa_ncheck>:
    130e:	bb 27       	eor	r27, r27
    1310:	2a 30       	cpi	r18, 0x0A	; 10
    1312:	51 f4       	brne	.+20     	; 0x1328 <__ltoa_ncheck+0x1a>
    1314:	99 23       	and	r25, r25
    1316:	42 f4       	brpl	.+16     	; 0x1328 <__ltoa_ncheck+0x1a>
    1318:	bd e2       	ldi	r27, 0x2D	; 45
    131a:	90 95       	com	r25
    131c:	80 95       	com	r24
    131e:	70 95       	com	r23
    1320:	61 95       	neg	r22
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 4f       	sbci	r24, 0xFF	; 255
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	0c 94 97 09 	jmp	0x132e	; 0x132e <__ultoa_common>

0000132c <__ultoa_ncheck>:
    132c:	bb 27       	eor	r27, r27

0000132e <__ultoa_common>:
    132e:	fa 01       	movw	r30, r20
    1330:	a6 2f       	mov	r26, r22
    1332:	62 17       	cp	r22, r18
    1334:	71 05       	cpc	r23, r1
    1336:	81 05       	cpc	r24, r1
    1338:	91 05       	cpc	r25, r1
    133a:	33 0b       	sbc	r19, r19
    133c:	30 fb       	bst	r19, 0
    133e:	66 f0       	brts	.+24     	; 0x1358 <__ultoa_common+0x2a>
    1340:	aa 27       	eor	r26, r26
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	aa 1f       	adc	r26, r26
    134c:	a2 17       	cp	r26, r18
    134e:	10 f0       	brcs	.+4      	; 0x1354 <__ultoa_common+0x26>
    1350:	a2 1b       	sub	r26, r18
    1352:	63 95       	inc	r22
    1354:	38 50       	subi	r19, 0x08	; 8
    1356:	a9 f7       	brne	.-22     	; 0x1342 <__ultoa_common+0x14>
    1358:	a0 5d       	subi	r26, 0xD0	; 208
    135a:	aa 33       	cpi	r26, 0x3A	; 58
    135c:	08 f0       	brcs	.+2      	; 0x1360 <__ultoa_common+0x32>
    135e:	a9 5d       	subi	r26, 0xD9	; 217
    1360:	a1 93       	st	Z+, r26
    1362:	36 f7       	brtc	.-52     	; 0x1330 <__ultoa_common+0x2>
    1364:	b1 11       	cpse	r27, r1
    1366:	b1 93       	st	Z+, r27
    1368:	10 82       	st	Z, r1
    136a:	ca 01       	movw	r24, r20
    136c:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <strrev>

00001370 <fgetc>:
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ec 01       	movw	r28, r24
    1376:	2b 81       	ldd	r18, Y+3	; 0x03
    1378:	20 ff       	sbrs	r18, 0
    137a:	33 c0       	rjmp	.+102    	; 0x13e2 <fgetc+0x72>
    137c:	26 ff       	sbrs	r18, 6
    137e:	0a c0       	rjmp	.+20     	; 0x1394 <fgetc+0x24>
    1380:	2f 7b       	andi	r18, 0xBF	; 191
    1382:	2b 83       	std	Y+3, r18	; 0x03
    1384:	8e 81       	ldd	r24, Y+6	; 0x06
    1386:	9f 81       	ldd	r25, Y+7	; 0x07
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	9f 83       	std	Y+7, r25	; 0x07
    138c:	8e 83       	std	Y+6, r24	; 0x06
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	29 c0       	rjmp	.+82     	; 0x13e6 <fgetc+0x76>
    1394:	22 ff       	sbrs	r18, 2
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <fgetc+0x46>
    1398:	e8 81       	ld	r30, Y
    139a:	f9 81       	ldd	r31, Y+1	; 0x01
    139c:	80 81       	ld	r24, Z
    139e:	08 2e       	mov	r0, r24
    13a0:	00 0c       	add	r0, r0
    13a2:	99 0b       	sbc	r25, r25
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	19 f4       	brne	.+6      	; 0x13ae <fgetc+0x3e>
    13a8:	20 62       	ori	r18, 0x20	; 32
    13aa:	2b 83       	std	Y+3, r18	; 0x03
    13ac:	1a c0       	rjmp	.+52     	; 0x13e2 <fgetc+0x72>
    13ae:	31 96       	adiw	r30, 0x01	; 1
    13b0:	f9 83       	std	Y+1, r31	; 0x01
    13b2:	e8 83       	st	Y, r30
    13b4:	0e c0       	rjmp	.+28     	; 0x13d2 <fgetc+0x62>
    13b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    13b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    13ba:	09 95       	icall
    13bc:	97 ff       	sbrs	r25, 7
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <fgetc+0x62>
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	11 f0       	breq	.+4      	; 0x13ca <fgetc+0x5a>
    13c6:	80 e2       	ldi	r24, 0x20	; 32
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <fgetc+0x5c>
    13ca:	80 e1       	ldi	r24, 0x10	; 16
    13cc:	82 2b       	or	r24, r18
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <fgetc+0x72>
    13d2:	2e 81       	ldd	r18, Y+6	; 0x06
    13d4:	3f 81       	ldd	r19, Y+7	; 0x07
    13d6:	2f 5f       	subi	r18, 0xFF	; 255
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	3f 83       	std	Y+7, r19	; 0x07
    13dc:	2e 83       	std	Y+6, r18	; 0x06
    13de:	99 27       	eor	r25, r25
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <fgetc+0x76>
    13e2:	8f ef       	ldi	r24, 0xFF	; 255
    13e4:	9f ef       	ldi	r25, 0xFF	; 255
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <fputc>:
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	fb 01       	movw	r30, r22
    13f6:	23 81       	ldd	r18, Z+3	; 0x03
    13f8:	21 fd       	sbrc	r18, 1
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <fputc+0x16>
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	9f ef       	ldi	r25, 0xFF	; 255
    1400:	2c c0       	rjmp	.+88     	; 0x145a <fputc+0x6e>
    1402:	22 ff       	sbrs	r18, 2
    1404:	16 c0       	rjmp	.+44     	; 0x1432 <fputc+0x46>
    1406:	46 81       	ldd	r20, Z+6	; 0x06
    1408:	57 81       	ldd	r21, Z+7	; 0x07
    140a:	24 81       	ldd	r18, Z+4	; 0x04
    140c:	35 81       	ldd	r19, Z+5	; 0x05
    140e:	42 17       	cp	r20, r18
    1410:	53 07       	cpc	r21, r19
    1412:	44 f4       	brge	.+16     	; 0x1424 <fputc+0x38>
    1414:	a0 81       	ld	r26, Z
    1416:	b1 81       	ldd	r27, Z+1	; 0x01
    1418:	9d 01       	movw	r18, r26
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	31 83       	std	Z+1, r19	; 0x01
    1420:	20 83       	st	Z, r18
    1422:	8c 93       	st	X, r24
    1424:	26 81       	ldd	r18, Z+6	; 0x06
    1426:	37 81       	ldd	r19, Z+7	; 0x07
    1428:	2f 5f       	subi	r18, 0xFF	; 255
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	37 83       	std	Z+7, r19	; 0x07
    142e:	26 83       	std	Z+6, r18	; 0x06
    1430:	14 c0       	rjmp	.+40     	; 0x145a <fputc+0x6e>
    1432:	8b 01       	movw	r16, r22
    1434:	ec 01       	movw	r28, r24
    1436:	fb 01       	movw	r30, r22
    1438:	00 84       	ldd	r0, Z+8	; 0x08
    143a:	f1 85       	ldd	r31, Z+9	; 0x09
    143c:	e0 2d       	mov	r30, r0
    143e:	09 95       	icall
    1440:	89 2b       	or	r24, r25
    1442:	e1 f6       	brne	.-72     	; 0x13fc <fputc+0x10>
    1444:	d8 01       	movw	r26, r16
    1446:	16 96       	adiw	r26, 0x06	; 6
    1448:	8d 91       	ld	r24, X+
    144a:	9c 91       	ld	r25, X
    144c:	17 97       	sbiw	r26, 0x07	; 7
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	17 96       	adiw	r26, 0x07	; 7
    1452:	9c 93       	st	X, r25
    1454:	8e 93       	st	-X, r24
    1456:	16 97       	sbiw	r26, 0x06	; 6
    1458:	ce 01       	movw	r24, r28
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret

00001464 <fputs>:
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	db 01       	movw	r26, r22
    1472:	13 96       	adiw	r26, 0x03	; 3
    1474:	2c 91       	ld	r18, X
    1476:	21 ff       	sbrs	r18, 1
    1478:	18 c0       	rjmp	.+48     	; 0x14aa <fputs+0x46>
    147a:	8b 01       	movw	r16, r22
    147c:	7c 01       	movw	r14, r24
    147e:	d0 e0       	ldi	r29, 0x00	; 0
    1480:	c0 e0       	ldi	r28, 0x00	; 0
    1482:	f7 01       	movw	r30, r14
    1484:	81 91       	ld	r24, Z+
    1486:	7f 01       	movw	r14, r30
    1488:	88 23       	and	r24, r24
    148a:	61 f0       	breq	.+24     	; 0x14a4 <fputs+0x40>
    148c:	d8 01       	movw	r26, r16
    148e:	18 96       	adiw	r26, 0x08	; 8
    1490:	ed 91       	ld	r30, X+
    1492:	fc 91       	ld	r31, X
    1494:	19 97       	sbiw	r26, 0x09	; 9
    1496:	b8 01       	movw	r22, r16
    1498:	09 95       	icall
    149a:	89 2b       	or	r24, r25
    149c:	91 f3       	breq	.-28     	; 0x1482 <fputs+0x1e>
    149e:	df ef       	ldi	r29, 0xFF	; 255
    14a0:	cf ef       	ldi	r28, 0xFF	; 255
    14a2:	ef cf       	rjmp	.-34     	; 0x1482 <fputs+0x1e>
    14a4:	8d 2f       	mov	r24, r29
    14a6:	9c 2f       	mov	r25, r28
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <fputs+0x4a>
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	9f ef       	ldi	r25, 0xFF	; 255
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	e6 e0       	ldi	r30, 0x06	; 6
    14b4:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__epilogue_restores__+0x18>

000014b8 <fwrite>:
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e2 e6       	ldi	r30, 0x62	; 98
    14be:	fa e0       	ldi	r31, 0x0A	; 10
    14c0:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__prologue_saves__+0xc>
    14c4:	5b 01       	movw	r10, r22
    14c6:	4a 01       	movw	r8, r20
    14c8:	79 01       	movw	r14, r18
    14ca:	d9 01       	movw	r26, r18
    14cc:	13 96       	adiw	r26, 0x03	; 3
    14ce:	2c 91       	ld	r18, X
    14d0:	21 ff       	sbrs	r18, 1
    14d2:	1d c0       	rjmp	.+58     	; 0x150e <fwrite+0x56>
    14d4:	c0 e0       	ldi	r28, 0x00	; 0
    14d6:	d0 e0       	ldi	r29, 0x00	; 0
    14d8:	c8 15       	cp	r28, r8
    14da:	d9 05       	cpc	r29, r9
    14dc:	d9 f0       	breq	.+54     	; 0x1514 <fwrite+0x5c>
    14de:	8c 01       	movw	r16, r24
    14e0:	6c 01       	movw	r12, r24
    14e2:	ca 0c       	add	r12, r10
    14e4:	db 1c       	adc	r13, r11
    14e6:	c8 01       	movw	r24, r16
    14e8:	0c 15       	cp	r16, r12
    14ea:	1d 05       	cpc	r17, r13
    14ec:	71 f0       	breq	.+28     	; 0x150a <fwrite+0x52>
    14ee:	0f 5f       	subi	r16, 0xFF	; 255
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	d7 01       	movw	r26, r14
    14f4:	18 96       	adiw	r26, 0x08	; 8
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	19 97       	sbiw	r26, 0x09	; 9
    14fc:	b7 01       	movw	r22, r14
    14fe:	dc 01       	movw	r26, r24
    1500:	8c 91       	ld	r24, X
    1502:	09 95       	icall
    1504:	89 2b       	or	r24, r25
    1506:	79 f3       	breq	.-34     	; 0x14e6 <fwrite+0x2e>
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <fwrite+0x5c>
    150a:	21 96       	adiw	r28, 0x01	; 1
    150c:	e5 cf       	rjmp	.-54     	; 0x14d8 <fwrite+0x20>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <fwrite+0x5e>
    1514:	ce 01       	movw	r24, r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	ec e0       	ldi	r30, 0x0C	; 12
    151c:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__epilogue_restores__+0xc>

00001520 <dtoa_prf>:
    1520:	a9 e0       	ldi	r26, 0x09	; 9
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e6 e9       	ldi	r30, 0x96	; 150
    1526:	fa e0       	ldi	r31, 0x0A	; 10
    1528:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__prologue_saves__+0xc>
    152c:	6a 01       	movw	r12, r20
    152e:	12 2f       	mov	r17, r18
    1530:	b0 2e       	mov	r11, r16
    1532:	2b e3       	ldi	r18, 0x3B	; 59
    1534:	20 17       	cp	r18, r16
    1536:	20 f0       	brcs	.+8      	; 0x1540 <dtoa_prf+0x20>
    1538:	ff 24       	eor	r15, r15
    153a:	f3 94       	inc	r15
    153c:	f0 0e       	add	r15, r16
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <dtoa_prf+0x24>
    1540:	2c e3       	ldi	r18, 0x3C	; 60
    1542:	f2 2e       	mov	r15, r18
    1544:	0f 2d       	mov	r16, r15
    1546:	27 e0       	ldi	r18, 0x07	; 7
    1548:	ae 01       	movw	r20, r28
    154a:	4f 5f       	subi	r20, 0xFF	; 255
    154c:	5f 4f       	sbci	r21, 0xFF	; 255
    154e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__ftoa_engine>
    1552:	bc 01       	movw	r22, r24
    1554:	49 81       	ldd	r20, Y+1	; 0x01
    1556:	84 2f       	mov	r24, r20
    1558:	89 70       	andi	r24, 0x09	; 9
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	31 f0       	breq	.+12     	; 0x156a <dtoa_prf+0x4a>
    155e:	e1 fc       	sbrc	r14, 1
    1560:	06 c0       	rjmp	.+12     	; 0x156e <dtoa_prf+0x4e>
    1562:	e0 fe       	sbrs	r14, 0
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <dtoa_prf+0x52>
    1566:	90 e2       	ldi	r25, 0x20	; 32
    1568:	05 c0       	rjmp	.+10     	; 0x1574 <dtoa_prf+0x54>
    156a:	9d e2       	ldi	r25, 0x2D	; 45
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <dtoa_prf+0x54>
    156e:	9b e2       	ldi	r25, 0x2B	; 43
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <dtoa_prf+0x54>
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	5e 2d       	mov	r21, r14
    1576:	50 71       	andi	r21, 0x10	; 16
    1578:	43 ff       	sbrs	r20, 3
    157a:	3c c0       	rjmp	.+120    	; 0x15f4 <dtoa_prf+0xd4>
    157c:	91 11       	cpse	r25, r1
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <dtoa_prf+0x64>
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <dtoa_prf+0x66>
    1584:	84 e0       	ldi	r24, 0x04	; 4
    1586:	81 17       	cp	r24, r17
    1588:	18 f4       	brcc	.+6      	; 0x1590 <dtoa_prf+0x70>
    158a:	21 2f       	mov	r18, r17
    158c:	28 1b       	sub	r18, r24
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <dtoa_prf+0x72>
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	51 11       	cpse	r21, r1
    1594:	0b c0       	rjmp	.+22     	; 0x15ac <dtoa_prf+0x8c>
    1596:	f6 01       	movw	r30, r12
    1598:	82 2f       	mov	r24, r18
    159a:	30 e2       	ldi	r19, 0x20	; 32
    159c:	88 23       	and	r24, r24
    159e:	19 f0       	breq	.+6      	; 0x15a6 <dtoa_prf+0x86>
    15a0:	31 93       	st	Z+, r19
    15a2:	81 50       	subi	r24, 0x01	; 1
    15a4:	fb cf       	rjmp	.-10     	; 0x159c <dtoa_prf+0x7c>
    15a6:	c2 0e       	add	r12, r18
    15a8:	d1 1c       	adc	r13, r1
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	99 23       	and	r25, r25
    15ae:	29 f0       	breq	.+10     	; 0x15ba <dtoa_prf+0x9a>
    15b0:	d6 01       	movw	r26, r12
    15b2:	9c 93       	st	X, r25
    15b4:	f6 01       	movw	r30, r12
    15b6:	31 96       	adiw	r30, 0x01	; 1
    15b8:	6f 01       	movw	r12, r30
    15ba:	c6 01       	movw	r24, r12
    15bc:	03 96       	adiw	r24, 0x03	; 3
    15be:	e2 fe       	sbrs	r14, 2
    15c0:	0a c0       	rjmp	.+20     	; 0x15d6 <dtoa_prf+0xb6>
    15c2:	3e e4       	ldi	r19, 0x4E	; 78
    15c4:	d6 01       	movw	r26, r12
    15c6:	3c 93       	st	X, r19
    15c8:	41 e4       	ldi	r20, 0x41	; 65
    15ca:	11 96       	adiw	r26, 0x01	; 1
    15cc:	4c 93       	st	X, r20
    15ce:	11 97       	sbiw	r26, 0x01	; 1
    15d0:	12 96       	adiw	r26, 0x02	; 2
    15d2:	3c 93       	st	X, r19
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <dtoa_prf+0xc2>
    15d6:	3e e6       	ldi	r19, 0x6E	; 110
    15d8:	f6 01       	movw	r30, r12
    15da:	30 83       	st	Z, r19
    15dc:	41 e6       	ldi	r20, 0x61	; 97
    15de:	41 83       	std	Z+1, r20	; 0x01
    15e0:	32 83       	std	Z+2, r19	; 0x02
    15e2:	fc 01       	movw	r30, r24
    15e4:	32 2f       	mov	r19, r18
    15e6:	40 e2       	ldi	r20, 0x20	; 32
    15e8:	33 23       	and	r19, r19
    15ea:	09 f4       	brne	.+2      	; 0x15ee <dtoa_prf+0xce>
    15ec:	42 c0       	rjmp	.+132    	; 0x1672 <dtoa_prf+0x152>
    15ee:	41 93       	st	Z+, r20
    15f0:	31 50       	subi	r19, 0x01	; 1
    15f2:	fa cf       	rjmp	.-12     	; 0x15e8 <dtoa_prf+0xc8>
    15f4:	42 ff       	sbrs	r20, 2
    15f6:	44 c0       	rjmp	.+136    	; 0x1680 <dtoa_prf+0x160>
    15f8:	91 11       	cpse	r25, r1
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <dtoa_prf+0xe0>
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <dtoa_prf+0xe2>
    1600:	84 e0       	ldi	r24, 0x04	; 4
    1602:	81 17       	cp	r24, r17
    1604:	18 f4       	brcc	.+6      	; 0x160c <dtoa_prf+0xec>
    1606:	21 2f       	mov	r18, r17
    1608:	28 1b       	sub	r18, r24
    160a:	01 c0       	rjmp	.+2      	; 0x160e <dtoa_prf+0xee>
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	51 11       	cpse	r21, r1
    1610:	0b c0       	rjmp	.+22     	; 0x1628 <dtoa_prf+0x108>
    1612:	f6 01       	movw	r30, r12
    1614:	82 2f       	mov	r24, r18
    1616:	30 e2       	ldi	r19, 0x20	; 32
    1618:	88 23       	and	r24, r24
    161a:	19 f0       	breq	.+6      	; 0x1622 <dtoa_prf+0x102>
    161c:	31 93       	st	Z+, r19
    161e:	81 50       	subi	r24, 0x01	; 1
    1620:	fb cf       	rjmp	.-10     	; 0x1618 <dtoa_prf+0xf8>
    1622:	c2 0e       	add	r12, r18
    1624:	d1 1c       	adc	r13, r1
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	99 23       	and	r25, r25
    162a:	29 f0       	breq	.+10     	; 0x1636 <dtoa_prf+0x116>
    162c:	d6 01       	movw	r26, r12
    162e:	9c 93       	st	X, r25
    1630:	f6 01       	movw	r30, r12
    1632:	31 96       	adiw	r30, 0x01	; 1
    1634:	6f 01       	movw	r12, r30
    1636:	c6 01       	movw	r24, r12
    1638:	03 96       	adiw	r24, 0x03	; 3
    163a:	e2 fe       	sbrs	r14, 2
    163c:	0b c0       	rjmp	.+22     	; 0x1654 <dtoa_prf+0x134>
    163e:	39 e4       	ldi	r19, 0x49	; 73
    1640:	d6 01       	movw	r26, r12
    1642:	3c 93       	st	X, r19
    1644:	3e e4       	ldi	r19, 0x4E	; 78
    1646:	11 96       	adiw	r26, 0x01	; 1
    1648:	3c 93       	st	X, r19
    164a:	11 97       	sbiw	r26, 0x01	; 1
    164c:	36 e4       	ldi	r19, 0x46	; 70
    164e:	12 96       	adiw	r26, 0x02	; 2
    1650:	3c 93       	st	X, r19
    1652:	07 c0       	rjmp	.+14     	; 0x1662 <dtoa_prf+0x142>
    1654:	39 e6       	ldi	r19, 0x69	; 105
    1656:	f6 01       	movw	r30, r12
    1658:	30 83       	st	Z, r19
    165a:	3e e6       	ldi	r19, 0x6E	; 110
    165c:	31 83       	std	Z+1, r19	; 0x01
    165e:	36 e6       	ldi	r19, 0x66	; 102
    1660:	32 83       	std	Z+2, r19	; 0x02
    1662:	fc 01       	movw	r30, r24
    1664:	32 2f       	mov	r19, r18
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	33 23       	and	r19, r19
    166a:	19 f0       	breq	.+6      	; 0x1672 <dtoa_prf+0x152>
    166c:	41 93       	st	Z+, r20
    166e:	31 50       	subi	r19, 0x01	; 1
    1670:	fb cf       	rjmp	.-10     	; 0x1668 <dtoa_prf+0x148>
    1672:	fc 01       	movw	r30, r24
    1674:	e2 0f       	add	r30, r18
    1676:	f1 1d       	adc	r31, r1
    1678:	10 82       	st	Z, r1
    167a:	8e ef       	ldi	r24, 0xFE	; 254
    167c:	9f ef       	ldi	r25, 0xFF	; 255
    167e:	a6 c0       	rjmp	.+332    	; 0x17cc <dtoa_prf+0x2ac>
    1680:	21 e0       	ldi	r18, 0x01	; 1
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	91 11       	cpse	r25, r1
    1686:	02 c0       	rjmp	.+4      	; 0x168c <dtoa_prf+0x16c>
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	16 16       	cp	r1, r22
    168e:	17 06       	cpc	r1, r23
    1690:	1c f4       	brge	.+6      	; 0x1698 <dtoa_prf+0x178>
    1692:	fb 01       	movw	r30, r22
    1694:	31 96       	adiw	r30, 0x01	; 1
    1696:	02 c0       	rjmp	.+4      	; 0x169c <dtoa_prf+0x17c>
    1698:	e1 e0       	ldi	r30, 0x01	; 1
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	2e 0f       	add	r18, r30
    169e:	3f 1f       	adc	r19, r31
    16a0:	bb 20       	and	r11, r11
    16a2:	21 f0       	breq	.+8      	; 0x16ac <dtoa_prf+0x18c>
    16a4:	eb 2d       	mov	r30, r11
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	31 96       	adiw	r30, 0x01	; 1
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <dtoa_prf+0x190>
    16ac:	e0 e0       	ldi	r30, 0x00	; 0
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	2e 0f       	add	r18, r30
    16b2:	3f 1f       	adc	r19, r31
    16b4:	e1 2f       	mov	r30, r17
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	2e 17       	cp	r18, r30
    16ba:	3f 07       	cpc	r19, r31
    16bc:	1c f4       	brge	.+6      	; 0x16c4 <dtoa_prf+0x1a4>
    16be:	12 1b       	sub	r17, r18
    16c0:	21 2f       	mov	r18, r17
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <dtoa_prf+0x1a6>
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	8e 2d       	mov	r24, r14
    16c8:	88 71       	andi	r24, 0x18	; 24
    16ca:	59 f4       	brne	.+22     	; 0x16e2 <dtoa_prf+0x1c2>
    16cc:	f6 01       	movw	r30, r12
    16ce:	82 2f       	mov	r24, r18
    16d0:	30 e2       	ldi	r19, 0x20	; 32
    16d2:	88 23       	and	r24, r24
    16d4:	19 f0       	breq	.+6      	; 0x16dc <dtoa_prf+0x1bc>
    16d6:	31 93       	st	Z+, r19
    16d8:	81 50       	subi	r24, 0x01	; 1
    16da:	fb cf       	rjmp	.-10     	; 0x16d2 <dtoa_prf+0x1b2>
    16dc:	c2 0e       	add	r12, r18
    16de:	d1 1c       	adc	r13, r1
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	99 23       	and	r25, r25
    16e4:	29 f0       	breq	.+10     	; 0x16f0 <dtoa_prf+0x1d0>
    16e6:	d6 01       	movw	r26, r12
    16e8:	9c 93       	st	X, r25
    16ea:	f6 01       	movw	r30, r12
    16ec:	31 96       	adiw	r30, 0x01	; 1
    16ee:	6f 01       	movw	r12, r30
    16f0:	51 11       	cpse	r21, r1
    16f2:	0b c0       	rjmp	.+22     	; 0x170a <dtoa_prf+0x1ea>
    16f4:	f6 01       	movw	r30, r12
    16f6:	82 2f       	mov	r24, r18
    16f8:	90 e3       	ldi	r25, 0x30	; 48
    16fa:	88 23       	and	r24, r24
    16fc:	19 f0       	breq	.+6      	; 0x1704 <dtoa_prf+0x1e4>
    16fe:	91 93       	st	Z+, r25
    1700:	81 50       	subi	r24, 0x01	; 1
    1702:	fb cf       	rjmp	.-10     	; 0x16fa <dtoa_prf+0x1da>
    1704:	c2 0e       	add	r12, r18
    1706:	d1 1c       	adc	r13, r1
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	0f 2d       	mov	r16, r15
    170c:	06 0f       	add	r16, r22
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	34 2f       	mov	r19, r20
    1712:	30 71       	andi	r19, 0x10	; 16
    1714:	44 ff       	sbrs	r20, 4
    1716:	03 c0       	rjmp	.+6      	; 0x171e <dtoa_prf+0x1fe>
    1718:	91 33       	cpi	r25, 0x31	; 49
    171a:	09 f4       	brne	.+2      	; 0x171e <dtoa_prf+0x1fe>
    171c:	01 50       	subi	r16, 0x01	; 1
    171e:	10 16       	cp	r1, r16
    1720:	24 f4       	brge	.+8      	; 0x172a <dtoa_prf+0x20a>
    1722:	09 30       	cpi	r16, 0x09	; 9
    1724:	18 f0       	brcs	.+6      	; 0x172c <dtoa_prf+0x20c>
    1726:	08 e0       	ldi	r16, 0x08	; 8
    1728:	01 c0       	rjmp	.+2      	; 0x172c <dtoa_prf+0x20c>
    172a:	01 e0       	ldi	r16, 0x01	; 1
    172c:	ab 01       	movw	r20, r22
    172e:	77 ff       	sbrs	r23, 7
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <dtoa_prf+0x216>
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	fb 01       	movw	r30, r22
    1738:	e4 1b       	sub	r30, r20
    173a:	f5 0b       	sbc	r31, r21
    173c:	a1 e0       	ldi	r26, 0x01	; 1
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ac 0f       	add	r26, r28
    1742:	bd 1f       	adc	r27, r29
    1744:	ea 0f       	add	r30, r26
    1746:	fb 1f       	adc	r31, r27
    1748:	8e e2       	ldi	r24, 0x2E	; 46
    174a:	a8 2e       	mov	r10, r24
    174c:	4b 01       	movw	r8, r22
    174e:	80 1a       	sub	r8, r16
    1750:	91 08       	sbc	r9, r1
    1752:	0b 2d       	mov	r16, r11
    1754:	10 e0       	ldi	r17, 0x00	; 0
    1756:	11 95       	neg	r17
    1758:	01 95       	neg	r16
    175a:	11 09       	sbc	r17, r1
    175c:	4f 3f       	cpi	r20, 0xFF	; 255
    175e:	bf ef       	ldi	r27, 0xFF	; 255
    1760:	5b 07       	cpc	r21, r27
    1762:	21 f4       	brne	.+8      	; 0x176c <dtoa_prf+0x24c>
    1764:	d6 01       	movw	r26, r12
    1766:	ac 92       	st	X, r10
    1768:	11 96       	adiw	r26, 0x01	; 1
    176a:	6d 01       	movw	r12, r26
    176c:	64 17       	cp	r22, r20
    176e:	75 07       	cpc	r23, r21
    1770:	2c f0       	brlt	.+10     	; 0x177c <dtoa_prf+0x25c>
    1772:	84 16       	cp	r8, r20
    1774:	95 06       	cpc	r9, r21
    1776:	14 f4       	brge	.+4      	; 0x177c <dtoa_prf+0x25c>
    1778:	81 81       	ldd	r24, Z+1	; 0x01
    177a:	01 c0       	rjmp	.+2      	; 0x177e <dtoa_prf+0x25e>
    177c:	80 e3       	ldi	r24, 0x30	; 48
    177e:	41 50       	subi	r20, 0x01	; 1
    1780:	51 09       	sbc	r21, r1
    1782:	31 96       	adiw	r30, 0x01	; 1
    1784:	d6 01       	movw	r26, r12
    1786:	11 96       	adiw	r26, 0x01	; 1
    1788:	7d 01       	movw	r14, r26
    178a:	40 17       	cp	r20, r16
    178c:	51 07       	cpc	r21, r17
    178e:	24 f0       	brlt	.+8      	; 0x1798 <dtoa_prf+0x278>
    1790:	d6 01       	movw	r26, r12
    1792:	8c 93       	st	X, r24
    1794:	67 01       	movw	r12, r14
    1796:	e2 cf       	rjmp	.-60     	; 0x175c <dtoa_prf+0x23c>
    1798:	64 17       	cp	r22, r20
    179a:	75 07       	cpc	r23, r21
    179c:	39 f4       	brne	.+14     	; 0x17ac <dtoa_prf+0x28c>
    179e:	96 33       	cpi	r25, 0x36	; 54
    17a0:	20 f4       	brcc	.+8      	; 0x17aa <dtoa_prf+0x28a>
    17a2:	95 33       	cpi	r25, 0x35	; 53
    17a4:	19 f4       	brne	.+6      	; 0x17ac <dtoa_prf+0x28c>
    17a6:	31 11       	cpse	r19, r1
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <dtoa_prf+0x28c>
    17aa:	81 e3       	ldi	r24, 0x31	; 49
    17ac:	f6 01       	movw	r30, r12
    17ae:	80 83       	st	Z, r24
    17b0:	f7 01       	movw	r30, r14
    17b2:	82 2f       	mov	r24, r18
    17b4:	90 e2       	ldi	r25, 0x20	; 32
    17b6:	88 23       	and	r24, r24
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <dtoa_prf+0x2a0>
    17ba:	91 93       	st	Z+, r25
    17bc:	81 50       	subi	r24, 0x01	; 1
    17be:	fb cf       	rjmp	.-10     	; 0x17b6 <dtoa_prf+0x296>
    17c0:	f7 01       	movw	r30, r14
    17c2:	e2 0f       	add	r30, r18
    17c4:	f1 1d       	adc	r31, r1
    17c6:	10 82       	st	Z, r1
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	29 96       	adiw	r28, 0x09	; 9
    17ce:	ec e0       	ldi	r30, 0x0C	; 12
    17d0:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__epilogue_restores__+0xc>

000017d4 <__ftoa_engine>:
    17d4:	28 30       	cpi	r18, 0x08	; 8
    17d6:	08 f0       	brcs	.+2      	; 0x17da <__ftoa_engine+0x6>
    17d8:	27 e0       	ldi	r18, 0x07	; 7
    17da:	33 27       	eor	r19, r19
    17dc:	da 01       	movw	r26, r20
    17de:	99 0f       	add	r25, r25
    17e0:	31 1d       	adc	r19, r1
    17e2:	87 fd       	sbrc	r24, 7
    17e4:	91 60       	ori	r25, 0x01	; 1
    17e6:	00 96       	adiw	r24, 0x00	; 0
    17e8:	61 05       	cpc	r22, r1
    17ea:	71 05       	cpc	r23, r1
    17ec:	39 f4       	brne	.+14     	; 0x17fc <__ftoa_engine+0x28>
    17ee:	32 60       	ori	r19, 0x02	; 2
    17f0:	2e 5f       	subi	r18, 0xFE	; 254
    17f2:	3d 93       	st	X+, r19
    17f4:	30 e3       	ldi	r19, 0x30	; 48
    17f6:	2a 95       	dec	r18
    17f8:	e1 f7       	brne	.-8      	; 0x17f2 <__ftoa_engine+0x1e>
    17fa:	08 95       	ret
    17fc:	9f 3f       	cpi	r25, 0xFF	; 255
    17fe:	30 f0       	brcs	.+12     	; 0x180c <__ftoa_engine+0x38>
    1800:	80 38       	cpi	r24, 0x80	; 128
    1802:	71 05       	cpc	r23, r1
    1804:	61 05       	cpc	r22, r1
    1806:	09 f0       	breq	.+2      	; 0x180a <__ftoa_engine+0x36>
    1808:	3c 5f       	subi	r19, 0xFC	; 252
    180a:	3c 5f       	subi	r19, 0xFC	; 252
    180c:	3d 93       	st	X+, r19
    180e:	91 30       	cpi	r25, 0x01	; 1
    1810:	08 f0       	brcs	.+2      	; 0x1814 <__ftoa_engine+0x40>
    1812:	80 68       	ori	r24, 0x80	; 128
    1814:	91 1d       	adc	r25, r1
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	1f 93       	push	r17
    181c:	0f 93       	push	r16
    181e:	ff 92       	push	r15
    1820:	ef 92       	push	r14
    1822:	19 2f       	mov	r17, r25
    1824:	98 7f       	andi	r25, 0xF8	; 248
    1826:	96 95       	lsr	r25
    1828:	e9 2f       	mov	r30, r25
    182a:	96 95       	lsr	r25
    182c:	96 95       	lsr	r25
    182e:	e9 0f       	add	r30, r25
    1830:	ff 27       	eor	r31, r31
    1832:	ea 52       	subi	r30, 0x2A	; 42
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	99 27       	eor	r25, r25
    1838:	33 27       	eor	r19, r19
    183a:	ee 24       	eor	r14, r14
    183c:	ff 24       	eor	r15, r15
    183e:	a7 01       	movw	r20, r14
    1840:	e7 01       	movw	r28, r14
    1842:	05 90       	lpm	r0, Z+
    1844:	08 94       	sec
    1846:	07 94       	ror	r0
    1848:	28 f4       	brcc	.+10     	; 0x1854 <__ftoa_engine+0x80>
    184a:	36 0f       	add	r19, r22
    184c:	e7 1e       	adc	r14, r23
    184e:	f8 1e       	adc	r15, r24
    1850:	49 1f       	adc	r20, r25
    1852:	51 1d       	adc	r21, r1
    1854:	66 0f       	add	r22, r22
    1856:	77 1f       	adc	r23, r23
    1858:	88 1f       	adc	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	06 94       	lsr	r0
    185e:	a1 f7       	brne	.-24     	; 0x1848 <__ftoa_engine+0x74>
    1860:	05 90       	lpm	r0, Z+
    1862:	07 94       	ror	r0
    1864:	28 f4       	brcc	.+10     	; 0x1870 <__ftoa_engine+0x9c>
    1866:	e7 0e       	add	r14, r23
    1868:	f8 1e       	adc	r15, r24
    186a:	49 1f       	adc	r20, r25
    186c:	56 1f       	adc	r21, r22
    186e:	c1 1d       	adc	r28, r1
    1870:	77 0f       	add	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	66 1f       	adc	r22, r22
    1878:	06 94       	lsr	r0
    187a:	a1 f7       	brne	.-24     	; 0x1864 <__ftoa_engine+0x90>
    187c:	05 90       	lpm	r0, Z+
    187e:	07 94       	ror	r0
    1880:	28 f4       	brcc	.+10     	; 0x188c <__ftoa_engine+0xb8>
    1882:	f8 0e       	add	r15, r24
    1884:	49 1f       	adc	r20, r25
    1886:	56 1f       	adc	r21, r22
    1888:	c7 1f       	adc	r28, r23
    188a:	d1 1d       	adc	r29, r1
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	66 1f       	adc	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	06 94       	lsr	r0
    1896:	a1 f7       	brne	.-24     	; 0x1880 <__ftoa_engine+0xac>
    1898:	05 90       	lpm	r0, Z+
    189a:	07 94       	ror	r0
    189c:	20 f4       	brcc	.+8      	; 0x18a6 <__ftoa_engine+0xd2>
    189e:	49 0f       	add	r20, r25
    18a0:	56 1f       	adc	r21, r22
    18a2:	c7 1f       	adc	r28, r23
    18a4:	d8 1f       	adc	r29, r24
    18a6:	99 0f       	add	r25, r25
    18a8:	66 1f       	adc	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	06 94       	lsr	r0
    18b0:	a9 f7       	brne	.-22     	; 0x189c <__ftoa_engine+0xc8>
    18b2:	84 91       	lpm	r24, Z
    18b4:	10 95       	com	r17
    18b6:	17 70       	andi	r17, 0x07	; 7
    18b8:	41 f0       	breq	.+16     	; 0x18ca <__ftoa_engine+0xf6>
    18ba:	d6 95       	lsr	r29
    18bc:	c7 95       	ror	r28
    18be:	57 95       	ror	r21
    18c0:	47 95       	ror	r20
    18c2:	f7 94       	ror	r15
    18c4:	e7 94       	ror	r14
    18c6:	1a 95       	dec	r17
    18c8:	c1 f7       	brne	.-16     	; 0x18ba <__ftoa_engine+0xe6>
    18ca:	ec e7       	ldi	r30, 0x7C	; 124
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	68 94       	set
    18d0:	15 90       	lpm	r1, Z+
    18d2:	15 91       	lpm	r17, Z+
    18d4:	35 91       	lpm	r19, Z+
    18d6:	65 91       	lpm	r22, Z+
    18d8:	95 91       	lpm	r25, Z+
    18da:	05 90       	lpm	r0, Z+
    18dc:	7f e2       	ldi	r23, 0x2F	; 47
    18de:	73 95       	inc	r23
    18e0:	e1 18       	sub	r14, r1
    18e2:	f1 0a       	sbc	r15, r17
    18e4:	43 0b       	sbc	r20, r19
    18e6:	56 0b       	sbc	r21, r22
    18e8:	c9 0b       	sbc	r28, r25
    18ea:	d0 09       	sbc	r29, r0
    18ec:	c0 f7       	brcc	.-16     	; 0x18de <__ftoa_engine+0x10a>
    18ee:	e1 0c       	add	r14, r1
    18f0:	f1 1e       	adc	r15, r17
    18f2:	43 1f       	adc	r20, r19
    18f4:	56 1f       	adc	r21, r22
    18f6:	c9 1f       	adc	r28, r25
    18f8:	d0 1d       	adc	r29, r0
    18fa:	7e f4       	brtc	.+30     	; 0x191a <__ftoa_engine+0x146>
    18fc:	70 33       	cpi	r23, 0x30	; 48
    18fe:	11 f4       	brne	.+4      	; 0x1904 <__ftoa_engine+0x130>
    1900:	8a 95       	dec	r24
    1902:	e6 cf       	rjmp	.-52     	; 0x18d0 <__ftoa_engine+0xfc>
    1904:	e8 94       	clt
    1906:	01 50       	subi	r16, 0x01	; 1
    1908:	30 f0       	brcs	.+12     	; 0x1916 <__ftoa_engine+0x142>
    190a:	08 0f       	add	r16, r24
    190c:	0a f4       	brpl	.+2      	; 0x1910 <__ftoa_engine+0x13c>
    190e:	00 27       	eor	r16, r16
    1910:	02 17       	cp	r16, r18
    1912:	08 f4       	brcc	.+2      	; 0x1916 <__ftoa_engine+0x142>
    1914:	20 2f       	mov	r18, r16
    1916:	23 95       	inc	r18
    1918:	02 2f       	mov	r16, r18
    191a:	7a 33       	cpi	r23, 0x3A	; 58
    191c:	28 f0       	brcs	.+10     	; 0x1928 <__ftoa_engine+0x154>
    191e:	79 e3       	ldi	r23, 0x39	; 57
    1920:	7d 93       	st	X+, r23
    1922:	2a 95       	dec	r18
    1924:	e9 f7       	brne	.-6      	; 0x1920 <__ftoa_engine+0x14c>
    1926:	10 c0       	rjmp	.+32     	; 0x1948 <__ftoa_engine+0x174>
    1928:	7d 93       	st	X+, r23
    192a:	2a 95       	dec	r18
    192c:	89 f6       	brne	.-94     	; 0x18d0 <__ftoa_engine+0xfc>
    192e:	06 94       	lsr	r0
    1930:	97 95       	ror	r25
    1932:	67 95       	ror	r22
    1934:	37 95       	ror	r19
    1936:	17 95       	ror	r17
    1938:	17 94       	ror	r1
    193a:	e1 18       	sub	r14, r1
    193c:	f1 0a       	sbc	r15, r17
    193e:	43 0b       	sbc	r20, r19
    1940:	56 0b       	sbc	r21, r22
    1942:	c9 0b       	sbc	r28, r25
    1944:	d0 09       	sbc	r29, r0
    1946:	98 f0       	brcs	.+38     	; 0x196e <__ftoa_engine+0x19a>
    1948:	23 95       	inc	r18
    194a:	7e 91       	ld	r23, -X
    194c:	73 95       	inc	r23
    194e:	7a 33       	cpi	r23, 0x3A	; 58
    1950:	08 f0       	brcs	.+2      	; 0x1954 <__ftoa_engine+0x180>
    1952:	70 e3       	ldi	r23, 0x30	; 48
    1954:	7c 93       	st	X, r23
    1956:	20 13       	cpse	r18, r16
    1958:	b8 f7       	brcc	.-18     	; 0x1948 <__ftoa_engine+0x174>
    195a:	7e 91       	ld	r23, -X
    195c:	70 61       	ori	r23, 0x10	; 16
    195e:	7d 93       	st	X+, r23
    1960:	30 f0       	brcs	.+12     	; 0x196e <__ftoa_engine+0x19a>
    1962:	83 95       	inc	r24
    1964:	71 e3       	ldi	r23, 0x31	; 49
    1966:	7d 93       	st	X+, r23
    1968:	70 e3       	ldi	r23, 0x30	; 48
    196a:	2a 95       	dec	r18
    196c:	e1 f7       	brne	.-8      	; 0x1966 <__ftoa_engine+0x192>
    196e:	11 24       	eor	r1, r1
    1970:	ef 90       	pop	r14
    1972:	ff 90       	pop	r15
    1974:	0f 91       	pop	r16
    1976:	1f 91       	pop	r17
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	99 27       	eor	r25, r25
    197e:	87 fd       	sbrc	r24, 7
    1980:	90 95       	com	r25
    1982:	08 95       	ret

00001984 <strrev>:
    1984:	dc 01       	movw	r26, r24
    1986:	fc 01       	movw	r30, r24
    1988:	67 2f       	mov	r22, r23
    198a:	71 91       	ld	r23, Z+
    198c:	77 23       	and	r23, r23
    198e:	e1 f7       	brne	.-8      	; 0x1988 <strrev+0x4>
    1990:	32 97       	sbiw	r30, 0x02	; 2
    1992:	04 c0       	rjmp	.+8      	; 0x199c <strrev+0x18>
    1994:	7c 91       	ld	r23, X
    1996:	6d 93       	st	X+, r22
    1998:	70 83       	st	Z, r23
    199a:	62 91       	ld	r22, -Z
    199c:	ae 17       	cp	r26, r30
    199e:	bf 07       	cpc	r27, r31
    19a0:	c8 f3       	brcs	.-14     	; 0x1994 <strrev+0x10>
    19a2:	08 95       	ret

000019a4 <__muluhisi3>:
    19a4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__umulhisi3>
    19a8:	a5 9f       	mul	r26, r21
    19aa:	90 0d       	add	r25, r0
    19ac:	b4 9f       	mul	r27, r20
    19ae:	90 0d       	add	r25, r0
    19b0:	a4 9f       	mul	r26, r20
    19b2:	80 0d       	add	r24, r0
    19b4:	91 1d       	adc	r25, r1
    19b6:	11 24       	eor	r1, r1
    19b8:	08 95       	ret

000019ba <__mulshisi3>:
    19ba:	b7 ff       	sbrs	r27, 7
    19bc:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__muluhisi3>

000019c0 <__mulohisi3>:
    19c0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__muluhisi3>
    19c4:	82 1b       	sub	r24, r18
    19c6:	93 0b       	sbc	r25, r19
    19c8:	08 95       	ret

000019ca <__prologue_saves__>:
    19ca:	2f 92       	push	r2
    19cc:	3f 92       	push	r3
    19ce:	4f 92       	push	r4
    19d0:	5f 92       	push	r5
    19d2:	6f 92       	push	r6
    19d4:	7f 92       	push	r7
    19d6:	8f 92       	push	r8
    19d8:	9f 92       	push	r9
    19da:	af 92       	push	r10
    19dc:	bf 92       	push	r11
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	ca 1b       	sub	r28, r26
    19f4:	db 0b       	sbc	r29, r27
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	09 94       	ijmp

00001a02 <__epilogue_restores__>:
    1a02:	2a 88       	ldd	r2, Y+18	; 0x12
    1a04:	39 88       	ldd	r3, Y+17	; 0x11
    1a06:	48 88       	ldd	r4, Y+16	; 0x10
    1a08:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a10:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a12:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a14:	b9 84       	ldd	r11, Y+9	; 0x09
    1a16:	c8 84       	ldd	r12, Y+8	; 0x08
    1a18:	df 80       	ldd	r13, Y+7	; 0x07
    1a1a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a1c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a1e:	0c 81       	ldd	r16, Y+4	; 0x04
    1a20:	1b 81       	ldd	r17, Y+3	; 0x03
    1a22:	aa 81       	ldd	r26, Y+2	; 0x02
    1a24:	b9 81       	ldd	r27, Y+1	; 0x01
    1a26:	ce 0f       	add	r28, r30
    1a28:	d1 1d       	adc	r29, r1
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	ed 01       	movw	r28, r26
    1a36:	08 95       	ret

00001a38 <__umulhisi3>:
    1a38:	a2 9f       	mul	r26, r18
    1a3a:	b0 01       	movw	r22, r0
    1a3c:	b3 9f       	mul	r27, r19
    1a3e:	c0 01       	movw	r24, r0
    1a40:	a3 9f       	mul	r26, r19
    1a42:	70 0d       	add	r23, r0
    1a44:	81 1d       	adc	r24, r1
    1a46:	11 24       	eor	r1, r1
    1a48:	91 1d       	adc	r25, r1
    1a4a:	b2 9f       	mul	r27, r18
    1a4c:	70 0d       	add	r23, r0
    1a4e:	81 1d       	adc	r24, r1
    1a50:	11 24       	eor	r1, r1
    1a52:	91 1d       	adc	r25, r1
    1a54:	08 95       	ret

00001a56 <_exit>:
    1a56:	f8 94       	cli

00001a58 <__stop_program>:
    1a58:	ff cf       	rjmp	.-2      	; 0x1a58 <__stop_program>
