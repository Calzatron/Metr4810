
Project_0_1_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000bb2  00000c46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  0080012e  0080012e  00000c74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001007  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d4  00000000  00000000  00001e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000992  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00002e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00003180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f0  00000000  00000000  000035e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003dd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_20>
  54:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 eb       	ldi	r30, 0xB2	; 178
  90:	fb e0       	ldi	r31, 0x0B	; 11
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 32       	cpi	r26, 0x2E	; 46
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	ae e2       	ldi	r26, 0x2E	; 46
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 35       	cpi	r26, 0x56	; 86
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 67 02 	call	0x4ce	; 0x4ce <main>
  b2:	0c 94 d7 05 	jmp	0xbae	; 0xbae <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
  be:	8a 30       	cpi	r24, 0x0A	; 10
  c0:	19 f4       	brne	.+6      	; 0xc8 <uart_put_char+0xe>
  c2:	8d e0       	ldi	r24, 0x0D	; 13
  c4:	0e 94 5d 00 	call	0xba	; 0xba <uart_put_char>
  c8:	2f b7       	in	r18, 0x3f	; 63
  ca:	20 78       	andi	r18, 0x80	; 128
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <uart_put_char+0x18>
  ce:	22 23       	and	r18, r18
  d0:	29 f1       	breq	.+74     	; 0x11c <uart_put_char+0x62>
  d2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <bytes_in_out_buffer>
  d6:	9f 3f       	cpi	r25, 0xFF	; 255
  d8:	d1 f3       	breq	.-12     	; 0xce <uart_put_char+0x14>
  da:	f8 94       	cli
  dc:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <out_insert_pos>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8e 0f       	add	r24, r30
  e4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <out_insert_pos>
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e6 5c       	subi	r30, 0xC6	; 198
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	c0 83       	st	Z, r28
  f0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bytes_in_out_buffer>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <bytes_in_out_buffer>
  fa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <out_insert_pos>
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	11 f4       	brne	.+4      	; 0x106 <uart_put_char+0x4c>
 102:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <out_insert_pos>
 106:	e1 ec       	ldi	r30, 0xC1	; 193
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	80 83       	st	Z, r24
 110:	22 23       	and	r18, r18
 112:	39 f0       	breq	.+14     	; 0x122 <uart_put_char+0x68>
 114:	78 94       	sei
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	05 c0       	rjmp	.+10     	; 0x126 <uart_put_char+0x6c>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <uart_put_char+0x6c>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <uart_get_char>:
 12a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <bytes_in_input_buffer>
 12e:	88 23       	and	r24, r24
 130:	e1 f3       	breq	.-8      	; 0x12a <uart_get_char>
 132:	2f b7       	in	r18, 0x3f	; 63
 134:	20 78       	andi	r18, 0x80	; 128
 136:	f8 94       	cli
 138:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <input_insert_pos>
 13c:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <bytes_in_input_buffer>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	83 1b       	sub	r24, r19
 144:	91 09       	sbc	r25, r1
 146:	5a f4       	brpl	.+22     	; 0x15e <uart_get_char+0x34>
 148:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <input_insert_pos>
 14c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <bytes_in_input_buffer>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e8 1b       	sub	r30, r24
 154:	f1 09       	sbc	r31, r1
 156:	e6 5b       	subi	r30, 0xB6	; 182
 158:	fd 4f       	sbci	r31, 0xFD	; 253
 15a:	80 81       	ld	r24, Z
 15c:	0a c0       	rjmp	.+20     	; 0x172 <uart_get_char+0x48>
 15e:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <input_insert_pos>
 162:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <bytes_in_input_buffer>
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	e8 1b       	sub	r30, r24
 16a:	f1 09       	sbc	r31, r1
 16c:	e6 5c       	subi	r30, 0xC6	; 198
 16e:	fd 4f       	sbci	r31, 0xFD	; 253
 170:	80 81       	ld	r24, Z
 172:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <bytes_in_input_buffer>
 176:	91 50       	subi	r25, 0x01	; 1
 178:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <bytes_in_input_buffer>
 17c:	22 23       	and	r18, r18
 17e:	09 f0       	breq	.+2      	; 0x182 <uart_get_char+0x58>
 180:	78 94       	sei
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret

00000186 <init_serial_stdio>:
 186:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <out_insert_pos>
 18a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <bytes_in_out_buffer>
 18e:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <input_insert_pos>
 192:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <bytes_in_input_buffer>
 196:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <input_overrun>
 19a:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <__data_end>
 19e:	dc 01       	movw	r26, r24
 1a0:	cb 01       	movw	r24, r22
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	aa 1f       	adc	r26, r26
 1a8:	bb 1f       	adc	r27, r27
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	9c 01       	movw	r18, r24
 1b4:	ad 01       	movw	r20, r26
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	44 1f       	adc	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	72 e1       	ldi	r23, 0x12	; 18
 1c2:	8a e7       	ldi	r24, 0x7A	; 122
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 0a 03 	call	0x614	; 0x614 <__divmodsi4>
 1ca:	ba 01       	movw	r22, r20
 1cc:	a9 01       	movw	r20, r18
 1ce:	4f 5f       	subi	r20, 0xFF	; 255
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	6f 4f       	sbci	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	db 01       	movw	r26, r22
 1d8:	ca 01       	movw	r24, r20
 1da:	1a f4       	brpl	.+6      	; 0x1e2 <init_serial_stdio+0x5c>
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	a1 1d       	adc	r26, r1
 1e0:	b1 1d       	adc	r27, r1
 1e2:	b5 95       	asr	r27
 1e4:	a7 95       	ror	r26
 1e6:	97 95       	ror	r25
 1e8:	87 95       	ror	r24
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1f4:	e1 ec       	ldi	r30, 0xC1	; 193
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	88 e1       	ldi	r24, 0x18	; 24
 1fa:	80 83       	st	Z, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	80 68       	ori	r24, 0x80	; 128
 200:	80 83       	st	Z, r24
 202:	e0 e5       	ldi	r30, 0x50	; 80
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	93 83       	std	Z+3, r25	; 0x03
 20c:	82 83       	std	Z+2, r24	; 0x02
 20e:	91 83       	std	Z+1, r25	; 0x01
 210:	80 83       	st	Z, r24
 212:	08 95       	ret

00000214 <serial_input_available>:
 214:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <bytes_in_input_buffer>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	91 11       	cpse	r25, r1
 21c:	01 c0       	rjmp	.+2      	; 0x220 <serial_input_available+0xc>
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret

00000222 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
 236:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bytes_in_out_buffer>
 23a:	88 23       	and	r24, r24
 23c:	29 f1       	breq	.+74     	; 0x288 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
 23e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <out_insert_pos>
 242:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <bytes_in_out_buffer>
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	82 1b       	sub	r24, r18
 24a:	91 09       	sbc	r25, r1
 24c:	5a f4       	brpl	.+22     	; 0x264 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
 24e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <out_insert_pos>
 252:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bytes_in_out_buffer>
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	e8 1b       	sub	r30, r24
 25a:	f1 09       	sbc	r31, r1
 25c:	e7 5c       	subi	r30, 0xC7	; 199
 25e:	fd 4f       	sbci	r31, 0xFD	; 253
 260:	90 81       	ld	r25, Z
 262:	0a c0       	rjmp	.+20     	; 0x278 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 264:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <out_insert_pos>
 268:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bytes_in_out_buffer>
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	e8 1b       	sub	r30, r24
 270:	f1 09       	sbc	r31, r1
 272:	e6 5c       	subi	r30, 0xC6	; 198
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
 278:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bytes_in_out_buffer>
 27c:	81 50       	subi	r24, 0x01	; 1
 27e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
 282:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 286:	05 c0       	rjmp	.+10     	; 0x292 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
 288:	e1 ec       	ldi	r30, 0xC1	; 193
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	8f 7d       	andi	r24, 0xDF	; 223
 290:	80 83       	st	Z, r24
	}
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	cf 93       	push	r28
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
 2ca:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 2ce:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 2d2:	88 23       	and	r24, r24
 2d4:	49 f0       	breq	.+18     	; 0x2e8 <__vector_20+0x42>
 2d6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bytes_in_out_buffer>
 2da:	8f 3f       	cpi	r24, 0xFF	; 255
 2dc:	29 f0       	breq	.+10     	; 0x2e8 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 5d 00 	call	0xba	; 0xba <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 2e8:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <bytes_in_input_buffer>
 2ec:	80 31       	cpi	r24, 0x10	; 16
 2ee:	20 f0       	brcs	.+8      	; 0x2f8 <__vector_20+0x52>
		input_overrun = 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <input_overrun>
 2f6:	18 c0       	rjmp	.+48     	; 0x328 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
 2f8:	cd 30       	cpi	r28, 0x0D	; 13
 2fa:	09 f4       	brne	.+2      	; 0x2fe <__vector_20+0x58>
			c = '\n';
 2fc:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
 2fe:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <input_insert_pos>
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	8e 0f       	add	r24, r30
 306:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <input_insert_pos>
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	e6 5c       	subi	r30, 0xC6	; 198
 30e:	fd 4f       	sbci	r31, 0xFD	; 253
 310:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
 312:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <bytes_in_input_buffer>
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
 31c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <input_insert_pos>
 320:	80 31       	cpi	r24, 0x10	; 16
 322:	11 f4       	brne	.+4      	; 0x328 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
 324:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <input_insert_pos>
		}
	}
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	cf 91       	pop	r28
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__vector_1>:



 ISR(INT0_vect)//interrupt service routine when there is a change in logic level

 {
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31

	 if (i==1)//when logic from HIGH to LOW
 35e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <i>
 362:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <i+0x1>
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	81 f4       	brne	.+32     	; 0x38a <__vector_1+0x3e>

	 {

		 TCCR1B=0;//disabling counter
 36a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

		 pulse=TCNT1;//count memory is updated to integer
 36e:	e4 e8       	ldi	r30, 0x84	; 132
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	91 81       	ldd	r25, Z+1	; 0x01
 376:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <pulse+0x1>
 37a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <pulse>

		 TCNT1=0;//resetting the counter memory
 37e:	11 82       	std	Z+1, r1	; 0x01
 380:	10 82       	st	Z, r1

		 i=0;
 382:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <i+0x1>
 386:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <i>

	 }

	 if (i==0){//when logic change from LOW to HIGH
 38a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <i>
 38e:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <i+0x1>
 392:	89 2b       	or	r24, r25
 394:	59 f4       	brne	.+22     	; 0x3ac <__vector_1+0x60>

		 TCCR1B|=(1<<CS10);//enabling counter
 396:	e1 e8       	ldi	r30, 0x81	; 129
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	80 83       	st	Z, r24

		 i=1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <i+0x1>
 3a8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <i>

	 }

 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <pwm_initialiser>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
 3be:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 0;
 3c2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
 3c6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	DDRD |= (1<<PORTD7)|(1<<PORTD6);
 3ca:	8a b1       	in	r24, 0x0a	; 10
 3cc:	80 6c       	ori	r24, 0xC0	; 192
 3ce:	8a b9       	out	0x0a, r24	; 10
	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
 3d0:	e0 eb       	ldi	r30, 0xB0	; 176
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	83 6a       	ori	r24, 0xA3	; 163
 3d8:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
 3da:	e1 eb       	ldi	r30, 0xB1	; 177
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	81 60       	ori	r24, 0x01	; 1
 3e2:	80 83       	st	Z, r24
 3e4:	08 95       	ret

000003e6 <makeInfo>:
	}
}

info* makeInfo(void){
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
 3e6:	8c e3       	ldi	r24, 0x3C	; 60
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <malloc>
	return info_ptr;
}
 3ee:	08 95       	ret

000003f0 <custom_delay>:
	fputs("Float ready\n", stdout);

	
}

void custom_delay(uint32_t ticks){
 3f0:	cf 92       	push	r12
 3f2:	df 92       	push	r13
 3f4:	ef 92       	push	r14
 3f6:	ff 92       	push	r15
 3f8:	6b 01       	movw	r12, r22
 3fa:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt0 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt0_ticks();
 3fc:	0e 94 cf 02 	call	0x59e	; 0x59e <get_tcnt0_ticks>
	while((current_time + ticks) > get_tcnt0_ticks()){
 400:	c6 0e       	add	r12, r22
 402:	d7 1e       	adc	r13, r23
 404:	e8 1e       	adc	r14, r24
 406:	f9 1e       	adc	r15, r25
 408:	0e 94 cf 02 	call	0x59e	; 0x59e <get_tcnt0_ticks>
 40c:	6c 15       	cp	r22, r12
 40e:	7d 05       	cpc	r23, r13
 410:	8e 05       	cpc	r24, r14
 412:	9f 05       	cpc	r25, r15
 414:	c8 f3       	brcs	.-14     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
		;
	}
}
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	cf 90       	pop	r12
 41e:	08 95       	ret

00000420 <initialise>:
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}


void initialise(info* info_ptr){
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
	
	/* sensor pins	*/
	DDRA = (1<<TRIG0)|(0<<ECHO0);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	81 b9       	out	0x01, r24	; 1
	DDRA |= (1<<TRIG1)|(0<<ECHO1)|(1<<PORTA3);
 42a:	81 b1       	in	r24, 0x01	; 1
 42c:	8a 60       	ori	r24, 0x0A	; 10
 42e:	81 b9       	out	0x01, r24	; 1

	DDRC &= ~(1<<ECHO0);
 430:	3c 98       	cbi	0x07, 4	; 7
	DDRA &= ~(1<<ECHO1);
 432:	0a 98       	cbi	0x01, 2	; 1
	/* transmission pins */
	DDRD |= (1<<PORTD1)|(1<<PORTD5);
 434:	8a b1       	in	r24, 0x0a	; 10
 436:	82 62       	ori	r24, 0x22	; 34
 438:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
 43a:	50 98       	cbi	0x0a, 0	; 10
	
	/* initialise timers / pwm */
	pwm_initialiser();				/* initially OCR2A = 0 */
 43c:	0e 94 df 01 	call	0x3be	; 0x3be <pwm_initialiser>
	init_tcnt0();
 440:	0e 94 b5 02 	call	0x56a	; 0x56a <init_tcnt0>
	init_serial_stdio(9600,0);
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	60 e8       	ldi	r22, 0x80	; 128
 448:	75 e2       	ldi	r23, 0x25	; 37
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 c3 00 	call	0x186	; 0x186 <init_serial_stdio>
	//EICRA|=(1<<ISC00);
	//TCCR1A = 0;



	srand(get_tcnt0_ticks());
 452:	0e 94 cf 02 	call	0x59e	; 0x59e <get_tcnt0_ticks>
 456:	cb 01       	movw	r24, r22
 458:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <srand>
	sei();
 45c:	78 94       	sei


	custom_delay(100);
 45e:	64 e6       	ldi	r22, 0x64	; 100
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <custom_delay>
				//sonic(info_ptr);
			//}
		//}
	//}
	// wait for communication to start from host
	custom_delay(100);
 46a:	64 e6       	ldi	r22, 0x64	; 100
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <custom_delay>
	uint8_t check = 1;
	while (check){
		if (serial_input_available()){
			char in = fgetc(stdin);
 476:	00 e5       	ldi	r16, 0x50	; 80
 478:	12 e0       	ldi	r17, 0x02	; 2
		//}
	//}
	// wait for communication to start from host
	custom_delay(100);
	uint8_t check = 1;
	while (check){
 47a:	0e c0       	rjmp	.+28     	; 0x498 <initialise+0x78>
		if (serial_input_available()){
			char in = fgetc(stdin);
 47c:	f8 01       	movw	r30, r16
 47e:	80 81       	ld	r24, Z
 480:	91 81       	ldd	r25, Z+1	; 0x01
 482:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <fgetc>
 486:	c8 2f       	mov	r28, r24
			fputc(in, stdout);
 488:	f8 01       	movw	r30, r16
 48a:	62 81       	ldd	r22, Z+2	; 0x02
 48c:	73 81       	ldd	r23, Z+3	; 0x03
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
			if (in == '\n'){
 494:	ca 30       	cpi	r28, 0x0A	; 10
 496:	29 f0       	breq	.+10     	; 0x4a2 <initialise+0x82>
	//}
	// wait for communication to start from host
	custom_delay(100);
	uint8_t check = 1;
	while (check){
		if (serial_input_available()){
 498:	0e 94 0a 01 	call	0x214	; 0x214 <serial_input_available>
 49c:	88 23       	and	r24, r24
 49e:	e1 f3       	breq	.-8      	; 0x498 <initialise+0x78>
 4a0:	ed cf       	rjmp	.-38     	; 0x47c <initialise+0x5c>
				check = 0;
				break;
			}
		}
	}
	custom_delay(100);
 4a2:	64 e6       	ldi	r22, 0x64	; 100
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <custom_delay>
	fputs("Float ready\n", stdout);
 4ae:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__iob+0x2>
 4b2:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__iob+0x3>
 4b6:	4c e0       	ldi	r20, 0x0C	; 12
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	88 e1       	ldi	r24, 0x18	; 24
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 59 05 	call	0xab2	; 0xab2 <fwrite>

	
}
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	08 95       	ret

000004ce <main>:
uint8_t sonic(info* info_ptr);


/* functional code	*/
int main(void)
{
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	64 97       	sbiw	r28, 0x14	; 20
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
	//initialise();
	info* info_ptr = makeInfo();
 4e2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <makeInfo>
	initialise(info_ptr);
 4e6:	0e 94 10 02 	call	0x420	; 0x420 <initialise>
			//count = 0;
		//}	
		DDRD |= (1<<PORTD5);
		char buffer[20];
		if (serial_input_available()){
			char in = fgetc(stdin);
 4ea:	00 e5       	ldi	r16, 0x50	; 80
 4ec:	12 e0       	ldi	r17, 0x02	; 2
				PORTC |= (1<<PORTC1);
				PORTC &= ~(1<<PORTC0);
				
			} else if ((in == '?') || (in == ' ')){
				PORTC = 0x00;
				OCR2A = 0;
 4ee:	0f 2e       	mov	r0, r31
 4f0:	f3 eb       	ldi	r31, 0xB3	; 179
 4f2:	ef 2e       	mov	r14, r31
 4f4:	f1 2c       	mov	r15, r1
 4f6:	f0 2d       	mov	r31, r0
				PORTC |= (1<<PORTC0);
				PORTC &= ~(1<<PORTC1);
				OCR2A = 250;
				sprintf(buffer, "lifting\n");
			} else if (in == '-'){
				OCR2A = 250;
 4f8:	0f 2e       	mov	r0, r31
 4fa:	fa ef       	ldi	r31, 0xFA	; 250
 4fc:	df 2e       	mov	r13, r31
 4fe:	f0 2d       	mov	r31, r0
			char in = fgetc(stdin);
			if (in == '+'){
				PORTC |= (1<<PORTC0);
				PORTC &= ~(1<<PORTC1);
				OCR2A = 250;
				sprintf(buffer, "lifting\n");
 500:	0f 2e       	mov	r0, r31
 502:	f9 e0       	ldi	r31, 0x09	; 9
 504:	cf 2e       	mov	r12, r31
 506:	f0 2d       	mov	r31, r0
			//dtostrf(info_ptr->sonicD0, 3, 5, buffer0); fputs("Sensor0: ", stdout); fputs(buffer0, stdout); fputc('	', stdout);
			//char buffer1[20];
			//dtostrf(info_ptr->sonicD1, 3, 5, buffer1); fputs("Sensor1: ", stdout); fputs(buffer1, stdout); fputc('	', stdout);
			//count = 0;
		//}	
		DDRD |= (1<<PORTD5);
 508:	55 9a       	sbi	0x0a, 5	; 10
		char buffer[20];
		if (serial_input_available()){
 50a:	0e 94 0a 01 	call	0x214	; 0x214 <serial_input_available>
 50e:	88 23       	and	r24, r24
 510:	51 f1       	breq	.+84     	; 0x566 <main+0x98>
			char in = fgetc(stdin);
 512:	f8 01       	movw	r30, r16
 514:	80 81       	ld	r24, Z
 516:	91 81       	ldd	r25, Z+1	; 0x01
 518:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <fgetc>
			if (in == '+'){
 51c:	8b 32       	cpi	r24, 0x2B	; 43
 51e:	71 f4       	brne	.+28     	; 0x53c <main+0x6e>
				PORTC |= (1<<PORTC0);
 520:	40 9a       	sbi	0x08, 0	; 8
				PORTC &= ~(1<<PORTC1);
 522:	41 98       	cbi	0x08, 1	; 8
				OCR2A = 250;
 524:	f7 01       	movw	r30, r14
 526:	d0 82       	st	Z, r13
				sprintf(buffer, "lifting\n");
 528:	e5 e2       	ldi	r30, 0x25	; 37
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	de 01       	movw	r26, r28
 52e:	11 96       	adiw	r26, 0x01	; 1
 530:	9c 2d       	mov	r25, r12
 532:	01 90       	ld	r0, Z+
 534:	0d 92       	st	X+, r0
 536:	9a 95       	dec	r25
 538:	e1 f7       	brne	.-8      	; 0x532 <main+0x64>
 53a:	0e c0       	rjmp	.+28     	; 0x558 <main+0x8a>
			} else if (in == '-'){
 53c:	8d 32       	cpi	r24, 0x2D	; 45
 53e:	29 f4       	brne	.+10     	; 0x54a <main+0x7c>
				OCR2A = 250;
 540:	f7 01       	movw	r30, r14
 542:	d0 82       	st	Z, r13
				PORTC |= (1<<PORTC1);
 544:	41 9a       	sbi	0x08, 1	; 8
				PORTC &= ~(1<<PORTC0);
 546:	40 98       	cbi	0x08, 0	; 8
 548:	07 c0       	rjmp	.+14     	; 0x558 <main+0x8a>
				
			} else if ((in == '?') || (in == ' ')){
 54a:	8f 33       	cpi	r24, 0x3F	; 63
 54c:	11 f0       	breq	.+4      	; 0x552 <main+0x84>
 54e:	80 32       	cpi	r24, 0x20	; 32
 550:	19 f4       	brne	.+6      	; 0x558 <main+0x8a>
				PORTC = 0x00;
 552:	18 b8       	out	0x08, r1	; 8
				OCR2A = 0;
 554:	f7 01       	movw	r30, r14
 556:	10 82       	st	Z, r1
				//fputc('?', stdout);
			}
			fputc(in, stdout);
 558:	f8 01       	movw	r30, r16
 55a:	62 81       	ldd	r22, Z+2	; 0x02
 55c:	73 81       	ldd	r23, Z+3	; 0x03
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
			PORTD |= (1<<PORTD5);
 564:	5d 9a       	sbi	0x0b, 5	; 11
		}
		PORTD &= ~(1<<PORTD5);
 566:	5d 98       	cbi	0x0b, 5	; 11
		//count++;
		//TODO:: Please write your application code
	}
 568:	cf cf       	rjmp	.-98     	; 0x508 <main+0x3a>

0000056a <init_tcnt0>:
	 uint8_t return_value = Button_on;
	 if(interrupts_on){
		 sei();
	 }
	 return return_value;
 }
 56a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Button_on>
 56e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <tcnt0_ticks>
 572:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <tcnt0_ticks+0x1>
 576:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <tcnt0_ticks+0x2>
 57a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <tcnt0_ticks+0x3>
 57e:	16 bc       	out	0x26, r1	; 38
 580:	8c e7       	ldi	r24, 0x7C	; 124
 582:	87 bd       	out	0x27, r24	; 39
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	84 bd       	out	0x24, r24	; 36
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	85 bd       	out	0x25, r24	; 37
 58c:	ee e6       	ldi	r30, 0x6E	; 110
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	82 60       	ori	r24, 0x02	; 2
 594:	80 83       	st	Z, r24
 596:	85 b3       	in	r24, 0x15	; 21
 598:	82 70       	andi	r24, 0x02	; 2
 59a:	85 bb       	out	0x15, r24	; 21
 59c:	08 95       	ret

0000059e <get_tcnt0_ticks>:
 59e:	2f b7       	in	r18, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <tcnt0_ticks>
 5a6:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <tcnt0_ticks+0x1>
 5aa:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <tcnt0_ticks+0x2>
 5ae:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <tcnt0_ticks+0x3>
 5b2:	22 23       	and	r18, r18
 5b4:	0c f4       	brge	.+2      	; 0x5b8 <get_tcnt0_ticks+0x1a>
 5b6:	78 94       	sei
 5b8:	08 95       	ret

000005ba <__vector_16>:



 ISR(TIMER0_COMPA_vect) {
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 tcnt0_ticks++;
 5cc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <tcnt0_ticks>
 5d0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <tcnt0_ticks+0x1>
 5d4:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <tcnt0_ticks+0x2>
 5d8:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <tcnt0_ticks+0x3>
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	a1 1d       	adc	r26, r1
 5e0:	b1 1d       	adc	r27, r1
 5e2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <tcnt0_ticks>
 5e6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <tcnt0_ticks+0x1>
 5ea:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <tcnt0_ticks+0x2>
 5ee:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <tcnt0_ticks+0x3>
	 uint8_t temp = PIND & (1<<PORTD7);
	 if (temp != 0x00){
 5f2:	4f 9b       	sbis	0x09, 7	; 9
 5f4:	04 c0       	rjmp	.+8      	; 0x5fe <__vector_16+0x44>
		 Button_on = 1;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Button_on>
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <__vector_16+0x48>
		 } else {
		 Button_on = 0;
 5fe:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Button_on>
	 }
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	0f 90       	pop	r0
 610:	1f 90       	pop	r1
 612:	18 95       	reti

00000614 <__divmodsi4>:
 614:	05 2e       	mov	r0, r21
 616:	97 fb       	bst	r25, 7
 618:	1e f4       	brtc	.+6      	; 0x620 <__divmodsi4+0xc>
 61a:	00 94       	com	r0
 61c:	0e 94 21 03 	call	0x642	; 0x642 <__negsi2>
 620:	57 fd       	sbrc	r21, 7
 622:	07 d0       	rcall	.+14     	; 0x632 <__divmodsi4_neg2>
 624:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodsi4>
 628:	07 fc       	sbrc	r0, 7
 62a:	03 d0       	rcall	.+6      	; 0x632 <__divmodsi4_neg2>
 62c:	4e f4       	brtc	.+18     	; 0x640 <__divmodsi4_exit>
 62e:	0c 94 21 03 	jmp	0x642	; 0x642 <__negsi2>

00000632 <__divmodsi4_neg2>:
 632:	50 95       	com	r21
 634:	40 95       	com	r20
 636:	30 95       	com	r19
 638:	21 95       	neg	r18
 63a:	3f 4f       	sbci	r19, 0xFF	; 255
 63c:	4f 4f       	sbci	r20, 0xFF	; 255
 63e:	5f 4f       	sbci	r21, 0xFF	; 255

00000640 <__divmodsi4_exit>:
 640:	08 95       	ret

00000642 <__negsi2>:
 642:	90 95       	com	r25
 644:	80 95       	com	r24
 646:	70 95       	com	r23
 648:	61 95       	neg	r22
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	8f 4f       	sbci	r24, 0xFF	; 255
 64e:	9f 4f       	sbci	r25, 0xFF	; 255
 650:	08 95       	ret

00000652 <__umulhisi3>:
 652:	a2 9f       	mul	r26, r18
 654:	b0 01       	movw	r22, r0
 656:	b3 9f       	mul	r27, r19
 658:	c0 01       	movw	r24, r0
 65a:	a3 9f       	mul	r26, r19
 65c:	70 0d       	add	r23, r0
 65e:	81 1d       	adc	r24, r1
 660:	11 24       	eor	r1, r1
 662:	91 1d       	adc	r25, r1
 664:	b2 9f       	mul	r27, r18
 666:	70 0d       	add	r23, r0
 668:	81 1d       	adc	r24, r1
 66a:	11 24       	eor	r1, r1
 66c:	91 1d       	adc	r25, r1
 66e:	08 95       	ret

00000670 <__udivmodsi4>:
 670:	a1 e2       	ldi	r26, 0x21	; 33
 672:	1a 2e       	mov	r1, r26
 674:	aa 1b       	sub	r26, r26
 676:	bb 1b       	sub	r27, r27
 678:	fd 01       	movw	r30, r26
 67a:	0d c0       	rjmp	.+26     	; 0x696 <__udivmodsi4_ep>

0000067c <__udivmodsi4_loop>:
 67c:	aa 1f       	adc	r26, r26
 67e:	bb 1f       	adc	r27, r27
 680:	ee 1f       	adc	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	a2 17       	cp	r26, r18
 686:	b3 07       	cpc	r27, r19
 688:	e4 07       	cpc	r30, r20
 68a:	f5 07       	cpc	r31, r21
 68c:	20 f0       	brcs	.+8      	; 0x696 <__udivmodsi4_ep>
 68e:	a2 1b       	sub	r26, r18
 690:	b3 0b       	sbc	r27, r19
 692:	e4 0b       	sbc	r30, r20
 694:	f5 0b       	sbc	r31, r21

00000696 <__udivmodsi4_ep>:
 696:	66 1f       	adc	r22, r22
 698:	77 1f       	adc	r23, r23
 69a:	88 1f       	adc	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	1a 94       	dec	r1
 6a0:	69 f7       	brne	.-38     	; 0x67c <__udivmodsi4_loop>
 6a2:	60 95       	com	r22
 6a4:	70 95       	com	r23
 6a6:	80 95       	com	r24
 6a8:	90 95       	com	r25
 6aa:	9b 01       	movw	r18, r22
 6ac:	ac 01       	movw	r20, r24
 6ae:	bd 01       	movw	r22, r26
 6b0:	cf 01       	movw	r24, r30
 6b2:	08 95       	ret

000006b4 <malloc>:
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	82 30       	cpi	r24, 0x02	; 2
 6ba:	91 05       	cpc	r25, r1
 6bc:	10 f4       	brcc	.+4      	; 0x6c2 <malloc+0xe>
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <__flp>
 6c6:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <__flp+0x1>
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	c0 e0       	ldi	r28, 0x00	; 0
 6d0:	d0 e0       	ldi	r29, 0x00	; 0
 6d2:	30 97       	sbiw	r30, 0x00	; 0
 6d4:	11 f1       	breq	.+68     	; 0x71a <malloc+0x66>
 6d6:	40 81       	ld	r20, Z
 6d8:	51 81       	ldd	r21, Z+1	; 0x01
 6da:	48 17       	cp	r20, r24
 6dc:	59 07       	cpc	r21, r25
 6de:	c0 f0       	brcs	.+48     	; 0x710 <malloc+0x5c>
 6e0:	48 17       	cp	r20, r24
 6e2:	59 07       	cpc	r21, r25
 6e4:	61 f4       	brne	.+24     	; 0x6fe <malloc+0x4a>
 6e6:	82 81       	ldd	r24, Z+2	; 0x02
 6e8:	93 81       	ldd	r25, Z+3	; 0x03
 6ea:	20 97       	sbiw	r28, 0x00	; 0
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <malloc+0x40>
 6ee:	9b 83       	std	Y+3, r25	; 0x03
 6f0:	8a 83       	std	Y+2, r24	; 0x02
 6f2:	2b c0       	rjmp	.+86     	; 0x74a <malloc+0x96>
 6f4:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <__flp+0x1>
 6f8:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__flp>
 6fc:	26 c0       	rjmp	.+76     	; 0x74a <malloc+0x96>
 6fe:	21 15       	cp	r18, r1
 700:	31 05       	cpc	r19, r1
 702:	19 f0       	breq	.+6      	; 0x70a <malloc+0x56>
 704:	42 17       	cp	r20, r18
 706:	53 07       	cpc	r21, r19
 708:	18 f4       	brcc	.+6      	; 0x710 <malloc+0x5c>
 70a:	9a 01       	movw	r18, r20
 70c:	be 01       	movw	r22, r28
 70e:	df 01       	movw	r26, r30
 710:	ef 01       	movw	r28, r30
 712:	02 80       	ldd	r0, Z+2	; 0x02
 714:	f3 81       	ldd	r31, Z+3	; 0x03
 716:	e0 2d       	mov	r30, r0
 718:	dc cf       	rjmp	.-72     	; 0x6d2 <malloc+0x1e>
 71a:	21 15       	cp	r18, r1
 71c:	31 05       	cpc	r19, r1
 71e:	09 f1       	breq	.+66     	; 0x762 <malloc+0xae>
 720:	28 1b       	sub	r18, r24
 722:	39 0b       	sbc	r19, r25
 724:	24 30       	cpi	r18, 0x04	; 4
 726:	31 05       	cpc	r19, r1
 728:	90 f4       	brcc	.+36     	; 0x74e <malloc+0x9a>
 72a:	12 96       	adiw	r26, 0x02	; 2
 72c:	8d 91       	ld	r24, X+
 72e:	9c 91       	ld	r25, X
 730:	13 97       	sbiw	r26, 0x03	; 3
 732:	61 15       	cp	r22, r1
 734:	71 05       	cpc	r23, r1
 736:	21 f0       	breq	.+8      	; 0x740 <malloc+0x8c>
 738:	fb 01       	movw	r30, r22
 73a:	93 83       	std	Z+3, r25	; 0x03
 73c:	82 83       	std	Z+2, r24	; 0x02
 73e:	04 c0       	rjmp	.+8      	; 0x748 <malloc+0x94>
 740:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <__flp+0x1>
 744:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__flp>
 748:	fd 01       	movw	r30, r26
 74a:	32 96       	adiw	r30, 0x02	; 2
 74c:	44 c0       	rjmp	.+136    	; 0x7d6 <malloc+0x122>
 74e:	fd 01       	movw	r30, r26
 750:	e2 0f       	add	r30, r18
 752:	f3 1f       	adc	r31, r19
 754:	81 93       	st	Z+, r24
 756:	91 93       	st	Z+, r25
 758:	22 50       	subi	r18, 0x02	; 2
 75a:	31 09       	sbc	r19, r1
 75c:	2d 93       	st	X+, r18
 75e:	3c 93       	st	X, r19
 760:	3a c0       	rjmp	.+116    	; 0x7d6 <malloc+0x122>
 762:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__brkval>
 766:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__brkval+0x1>
 76a:	23 2b       	or	r18, r19
 76c:	41 f4       	brne	.+16     	; 0x77e <malloc+0xca>
 76e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 772:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 776:	30 93 4d 02 	sts	0x024D, r19	; 0x80024d <__brkval+0x1>
 77a:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <__brkval>
 77e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 782:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 786:	21 15       	cp	r18, r1
 788:	31 05       	cpc	r19, r1
 78a:	41 f4       	brne	.+16     	; 0x79c <malloc+0xe8>
 78c:	2d b7       	in	r18, 0x3d	; 61
 78e:	3e b7       	in	r19, 0x3e	; 62
 790:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 794:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 798:	24 1b       	sub	r18, r20
 79a:	35 0b       	sbc	r19, r21
 79c:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__brkval>
 7a0:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__brkval+0x1>
 7a4:	e2 17       	cp	r30, r18
 7a6:	f3 07       	cpc	r31, r19
 7a8:	a0 f4       	brcc	.+40     	; 0x7d2 <malloc+0x11e>
 7aa:	2e 1b       	sub	r18, r30
 7ac:	3f 0b       	sbc	r19, r31
 7ae:	28 17       	cp	r18, r24
 7b0:	39 07       	cpc	r19, r25
 7b2:	78 f0       	brcs	.+30     	; 0x7d2 <malloc+0x11e>
 7b4:	ac 01       	movw	r20, r24
 7b6:	4e 5f       	subi	r20, 0xFE	; 254
 7b8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ba:	24 17       	cp	r18, r20
 7bc:	35 07       	cpc	r19, r21
 7be:	48 f0       	brcs	.+18     	; 0x7d2 <malloc+0x11e>
 7c0:	4e 0f       	add	r20, r30
 7c2:	5f 1f       	adc	r21, r31
 7c4:	50 93 4d 02 	sts	0x024D, r21	; 0x80024d <__brkval+0x1>
 7c8:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <__brkval>
 7cc:	81 93       	st	Z+, r24
 7ce:	91 93       	st	Z+, r25
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <malloc+0x122>
 7d2:	e0 e0       	ldi	r30, 0x00	; 0
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	cf 01       	movw	r24, r30
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <free>:
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	00 97       	sbiw	r24, 0x00	; 0
 7e8:	09 f4       	brne	.+2      	; 0x7ec <free+0xe>
 7ea:	8c c0       	rjmp	.+280    	; 0x904 <__stack+0x5>
 7ec:	fc 01       	movw	r30, r24
 7ee:	32 97       	sbiw	r30, 0x02	; 2
 7f0:	13 82       	std	Z+3, r1	; 0x03
 7f2:	12 82       	std	Z+2, r1	; 0x02
 7f4:	00 91 4e 02 	lds	r16, 0x024E	; 0x80024e <__flp>
 7f8:	10 91 4f 02 	lds	r17, 0x024F	; 0x80024f <__flp+0x1>
 7fc:	01 15       	cp	r16, r1
 7fe:	11 05       	cpc	r17, r1
 800:	81 f4       	brne	.+32     	; 0x822 <free+0x44>
 802:	20 81       	ld	r18, Z
 804:	31 81       	ldd	r19, Z+1	; 0x01
 806:	82 0f       	add	r24, r18
 808:	93 1f       	adc	r25, r19
 80a:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__brkval>
 80e:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__brkval+0x1>
 812:	28 17       	cp	r18, r24
 814:	39 07       	cpc	r19, r25
 816:	79 f5       	brne	.+94     	; 0x876 <free+0x98>
 818:	f0 93 4d 02 	sts	0x024D, r31	; 0x80024d <__brkval+0x1>
 81c:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <__brkval>
 820:	71 c0       	rjmp	.+226    	; 0x904 <__stack+0x5>
 822:	d8 01       	movw	r26, r16
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	ae 17       	cp	r26, r30
 82a:	bf 07       	cpc	r27, r31
 82c:	50 f4       	brcc	.+20     	; 0x842 <free+0x64>
 82e:	12 96       	adiw	r26, 0x02	; 2
 830:	2d 91       	ld	r18, X+
 832:	3c 91       	ld	r19, X
 834:	13 97       	sbiw	r26, 0x03	; 3
 836:	ad 01       	movw	r20, r26
 838:	21 15       	cp	r18, r1
 83a:	31 05       	cpc	r19, r1
 83c:	09 f1       	breq	.+66     	; 0x880 <free+0xa2>
 83e:	d9 01       	movw	r26, r18
 840:	f3 cf       	rjmp	.-26     	; 0x828 <free+0x4a>
 842:	9d 01       	movw	r18, r26
 844:	da 01       	movw	r26, r20
 846:	33 83       	std	Z+3, r19	; 0x03
 848:	22 83       	std	Z+2, r18	; 0x02
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	86 0f       	add	r24, r22
 850:	97 1f       	adc	r25, r23
 852:	82 17       	cp	r24, r18
 854:	93 07       	cpc	r25, r19
 856:	69 f4       	brne	.+26     	; 0x872 <free+0x94>
 858:	ec 01       	movw	r28, r24
 85a:	28 81       	ld	r18, Y
 85c:	39 81       	ldd	r19, Y+1	; 0x01
 85e:	26 0f       	add	r18, r22
 860:	37 1f       	adc	r19, r23
 862:	2e 5f       	subi	r18, 0xFE	; 254
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	31 83       	std	Z+1, r19	; 0x01
 868:	20 83       	st	Z, r18
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	9b 81       	ldd	r25, Y+3	; 0x03
 86e:	93 83       	std	Z+3, r25	; 0x03
 870:	82 83       	std	Z+2, r24	; 0x02
 872:	45 2b       	or	r20, r21
 874:	29 f4       	brne	.+10     	; 0x880 <free+0xa2>
 876:	f0 93 4f 02 	sts	0x024F, r31	; 0x80024f <__flp+0x1>
 87a:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <__flp>
 87e:	42 c0       	rjmp	.+132    	; 0x904 <__stack+0x5>
 880:	13 96       	adiw	r26, 0x03	; 3
 882:	fc 93       	st	X, r31
 884:	ee 93       	st	-X, r30
 886:	12 97       	sbiw	r26, 0x02	; 2
 888:	ed 01       	movw	r28, r26
 88a:	49 91       	ld	r20, Y+
 88c:	59 91       	ld	r21, Y+
 88e:	9e 01       	movw	r18, r28
 890:	24 0f       	add	r18, r20
 892:	35 1f       	adc	r19, r21
 894:	e2 17       	cp	r30, r18
 896:	f3 07       	cpc	r31, r19
 898:	71 f4       	brne	.+28     	; 0x8b6 <free+0xd8>
 89a:	80 81       	ld	r24, Z
 89c:	91 81       	ldd	r25, Z+1	; 0x01
 89e:	84 0f       	add	r24, r20
 8a0:	95 1f       	adc	r25, r21
 8a2:	02 96       	adiw	r24, 0x02	; 2
 8a4:	11 96       	adiw	r26, 0x01	; 1
 8a6:	9c 93       	st	X, r25
 8a8:	8e 93       	st	-X, r24
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	93 81       	ldd	r25, Z+3	; 0x03
 8ae:	13 96       	adiw	r26, 0x03	; 3
 8b0:	9c 93       	st	X, r25
 8b2:	8e 93       	st	-X, r24
 8b4:	12 97       	sbiw	r26, 0x02	; 2
 8b6:	e0 e0       	ldi	r30, 0x00	; 0
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	d8 01       	movw	r26, r16
 8bc:	12 96       	adiw	r26, 0x02	; 2
 8be:	8d 91       	ld	r24, X+
 8c0:	9c 91       	ld	r25, X
 8c2:	13 97       	sbiw	r26, 0x03	; 3
 8c4:	00 97       	sbiw	r24, 0x00	; 0
 8c6:	19 f0       	breq	.+6      	; 0x8ce <free+0xf0>
 8c8:	f8 01       	movw	r30, r16
 8ca:	8c 01       	movw	r16, r24
 8cc:	f6 cf       	rjmp	.-20     	; 0x8ba <free+0xdc>
 8ce:	8d 91       	ld	r24, X+
 8d0:	9c 91       	ld	r25, X
 8d2:	98 01       	movw	r18, r16
 8d4:	2e 5f       	subi	r18, 0xFE	; 254
 8d6:	3f 4f       	sbci	r19, 0xFF	; 255
 8d8:	82 0f       	add	r24, r18
 8da:	93 1f       	adc	r25, r19
 8dc:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__brkval>
 8e0:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__brkval+0x1>
 8e4:	28 17       	cp	r18, r24
 8e6:	39 07       	cpc	r19, r25
 8e8:	69 f4       	brne	.+26     	; 0x904 <__stack+0x5>
 8ea:	30 97       	sbiw	r30, 0x00	; 0
 8ec:	29 f4       	brne	.+10     	; 0x8f8 <free+0x11a>
 8ee:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <__flp+0x1>
 8f2:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__flp>
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <free+0x11e>
 8f8:	13 82       	std	Z+3, r1	; 0x03
 8fa:	12 82       	std	Z+2, r1	; 0x02
 8fc:	10 93 4d 02 	sts	0x024D, r17	; 0x80024d <__brkval+0x1>
 900:	00 93 4c 02 	sts	0x024C, r16	; 0x80024c <__brkval>
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	08 95       	ret

0000090e <do_rand>:
 90e:	8f 92       	push	r8
 910:	9f 92       	push	r9
 912:	af 92       	push	r10
 914:	bf 92       	push	r11
 916:	cf 92       	push	r12
 918:	df 92       	push	r13
 91a:	ef 92       	push	r14
 91c:	ff 92       	push	r15
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	ec 01       	movw	r28, r24
 924:	68 81       	ld	r22, Y
 926:	79 81       	ldd	r23, Y+1	; 0x01
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	9b 81       	ldd	r25, Y+3	; 0x03
 92c:	61 15       	cp	r22, r1
 92e:	71 05       	cpc	r23, r1
 930:	81 05       	cpc	r24, r1
 932:	91 05       	cpc	r25, r1
 934:	21 f4       	brne	.+8      	; 0x93e <do_rand+0x30>
 936:	64 e2       	ldi	r22, 0x24	; 36
 938:	79 ed       	ldi	r23, 0xD9	; 217
 93a:	8b e5       	ldi	r24, 0x5B	; 91
 93c:	97 e0       	ldi	r25, 0x07	; 7
 93e:	2d e1       	ldi	r18, 0x1D	; 29
 940:	33 ef       	ldi	r19, 0xF3	; 243
 942:	41 e0       	ldi	r20, 0x01	; 1
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	0e 94 0a 03 	call	0x614	; 0x614 <__divmodsi4>
 94a:	49 01       	movw	r8, r18
 94c:	5a 01       	movw	r10, r20
 94e:	9b 01       	movw	r18, r22
 950:	ac 01       	movw	r20, r24
 952:	a7 ea       	ldi	r26, 0xA7	; 167
 954:	b1 e4       	ldi	r27, 0x41	; 65
 956:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__muluhisi3>
 95a:	6b 01       	movw	r12, r22
 95c:	7c 01       	movw	r14, r24
 95e:	ac ee       	ldi	r26, 0xEC	; 236
 960:	b4 ef       	ldi	r27, 0xF4	; 244
 962:	a5 01       	movw	r20, r10
 964:	94 01       	movw	r18, r8
 966:	0e 94 9b 05 	call	0xb36	; 0xb36 <__mulohisi3>
 96a:	dc 01       	movw	r26, r24
 96c:	cb 01       	movw	r24, r22
 96e:	8c 0d       	add	r24, r12
 970:	9d 1d       	adc	r25, r13
 972:	ae 1d       	adc	r26, r14
 974:	bf 1d       	adc	r27, r15
 976:	b7 ff       	sbrs	r27, 7
 978:	03 c0       	rjmp	.+6      	; 0x980 <do_rand+0x72>
 97a:	01 97       	sbiw	r24, 0x01	; 1
 97c:	a1 09       	sbc	r26, r1
 97e:	b0 48       	sbci	r27, 0x80	; 128
 980:	88 83       	st	Y, r24
 982:	99 83       	std	Y+1, r25	; 0x01
 984:	aa 83       	std	Y+2, r26	; 0x02
 986:	bb 83       	std	Y+3, r27	; 0x03
 988:	9f 77       	andi	r25, 0x7F	; 127
 98a:	df 91       	pop	r29
 98c:	cf 91       	pop	r28
 98e:	ff 90       	pop	r15
 990:	ef 90       	pop	r14
 992:	df 90       	pop	r13
 994:	cf 90       	pop	r12
 996:	bf 90       	pop	r11
 998:	af 90       	pop	r10
 99a:	9f 90       	pop	r9
 99c:	8f 90       	pop	r8
 99e:	08 95       	ret

000009a0 <rand_r>:
 9a0:	0e 94 87 04 	call	0x90e	; 0x90e <do_rand>
 9a4:	08 95       	ret

000009a6 <rand>:
 9a6:	86 e0       	ldi	r24, 0x06	; 6
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	0e 94 87 04 	call	0x90e	; 0x90e <do_rand>
 9ae:	08 95       	ret

000009b0 <srand>:
 9b0:	a0 e0       	ldi	r26, 0x00	; 0
 9b2:	b0 e0       	ldi	r27, 0x00	; 0
 9b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
 9b8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
 9bc:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
 9c0:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
 9c4:	08 95       	ret

000009c6 <fgetc>:
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	ec 01       	movw	r28, r24
 9cc:	2b 81       	ldd	r18, Y+3	; 0x03
 9ce:	20 ff       	sbrs	r18, 0
 9d0:	33 c0       	rjmp	.+102    	; 0xa38 <fgetc+0x72>
 9d2:	26 ff       	sbrs	r18, 6
 9d4:	0a c0       	rjmp	.+20     	; 0x9ea <fgetc+0x24>
 9d6:	2f 7b       	andi	r18, 0xBF	; 191
 9d8:	2b 83       	std	Y+3, r18	; 0x03
 9da:	8e 81       	ldd	r24, Y+6	; 0x06
 9dc:	9f 81       	ldd	r25, Y+7	; 0x07
 9de:	01 96       	adiw	r24, 0x01	; 1
 9e0:	9f 83       	std	Y+7, r25	; 0x07
 9e2:	8e 83       	std	Y+6, r24	; 0x06
 9e4:	8a 81       	ldd	r24, Y+2	; 0x02
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	29 c0       	rjmp	.+82     	; 0xa3c <fgetc+0x76>
 9ea:	22 ff       	sbrs	r18, 2
 9ec:	0f c0       	rjmp	.+30     	; 0xa0c <fgetc+0x46>
 9ee:	e8 81       	ld	r30, Y
 9f0:	f9 81       	ldd	r31, Y+1	; 0x01
 9f2:	80 81       	ld	r24, Z
 9f4:	08 2e       	mov	r0, r24
 9f6:	00 0c       	add	r0, r0
 9f8:	99 0b       	sbc	r25, r25
 9fa:	00 97       	sbiw	r24, 0x00	; 0
 9fc:	19 f4       	brne	.+6      	; 0xa04 <fgetc+0x3e>
 9fe:	20 62       	ori	r18, 0x20	; 32
 a00:	2b 83       	std	Y+3, r18	; 0x03
 a02:	1a c0       	rjmp	.+52     	; 0xa38 <fgetc+0x72>
 a04:	31 96       	adiw	r30, 0x01	; 1
 a06:	f9 83       	std	Y+1, r31	; 0x01
 a08:	e8 83       	st	Y, r30
 a0a:	0e c0       	rjmp	.+28     	; 0xa28 <fgetc+0x62>
 a0c:	ea 85       	ldd	r30, Y+10	; 0x0a
 a0e:	fb 85       	ldd	r31, Y+11	; 0x0b
 a10:	09 95       	icall
 a12:	97 ff       	sbrs	r25, 7
 a14:	09 c0       	rjmp	.+18     	; 0xa28 <fgetc+0x62>
 a16:	2b 81       	ldd	r18, Y+3	; 0x03
 a18:	01 96       	adiw	r24, 0x01	; 1
 a1a:	11 f0       	breq	.+4      	; 0xa20 <fgetc+0x5a>
 a1c:	80 e2       	ldi	r24, 0x20	; 32
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <fgetc+0x5c>
 a20:	80 e1       	ldi	r24, 0x10	; 16
 a22:	82 2b       	or	r24, r18
 a24:	8b 83       	std	Y+3, r24	; 0x03
 a26:	08 c0       	rjmp	.+16     	; 0xa38 <fgetc+0x72>
 a28:	2e 81       	ldd	r18, Y+6	; 0x06
 a2a:	3f 81       	ldd	r19, Y+7	; 0x07
 a2c:	2f 5f       	subi	r18, 0xFF	; 255
 a2e:	3f 4f       	sbci	r19, 0xFF	; 255
 a30:	3f 83       	std	Y+7, r19	; 0x07
 a32:	2e 83       	std	Y+6, r18	; 0x06
 a34:	99 27       	eor	r25, r25
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <fgetc+0x76>
 a38:	8f ef       	ldi	r24, 0xFF	; 255
 a3a:	9f ef       	ldi	r25, 0xFF	; 255
 a3c:	df 91       	pop	r29
 a3e:	cf 91       	pop	r28
 a40:	08 95       	ret

00000a42 <fputc>:
 a42:	0f 93       	push	r16
 a44:	1f 93       	push	r17
 a46:	cf 93       	push	r28
 a48:	df 93       	push	r29
 a4a:	fb 01       	movw	r30, r22
 a4c:	23 81       	ldd	r18, Z+3	; 0x03
 a4e:	21 fd       	sbrc	r18, 1
 a50:	03 c0       	rjmp	.+6      	; 0xa58 <fputc+0x16>
 a52:	8f ef       	ldi	r24, 0xFF	; 255
 a54:	9f ef       	ldi	r25, 0xFF	; 255
 a56:	28 c0       	rjmp	.+80     	; 0xaa8 <fputc+0x66>
 a58:	22 ff       	sbrs	r18, 2
 a5a:	16 c0       	rjmp	.+44     	; 0xa88 <fputc+0x46>
 a5c:	46 81       	ldd	r20, Z+6	; 0x06
 a5e:	57 81       	ldd	r21, Z+7	; 0x07
 a60:	24 81       	ldd	r18, Z+4	; 0x04
 a62:	35 81       	ldd	r19, Z+5	; 0x05
 a64:	42 17       	cp	r20, r18
 a66:	53 07       	cpc	r21, r19
 a68:	44 f4       	brge	.+16     	; 0xa7a <fputc+0x38>
 a6a:	a0 81       	ld	r26, Z
 a6c:	b1 81       	ldd	r27, Z+1	; 0x01
 a6e:	9d 01       	movw	r18, r26
 a70:	2f 5f       	subi	r18, 0xFF	; 255
 a72:	3f 4f       	sbci	r19, 0xFF	; 255
 a74:	31 83       	std	Z+1, r19	; 0x01
 a76:	20 83       	st	Z, r18
 a78:	8c 93       	st	X, r24
 a7a:	26 81       	ldd	r18, Z+6	; 0x06
 a7c:	37 81       	ldd	r19, Z+7	; 0x07
 a7e:	2f 5f       	subi	r18, 0xFF	; 255
 a80:	3f 4f       	sbci	r19, 0xFF	; 255
 a82:	37 83       	std	Z+7, r19	; 0x07
 a84:	26 83       	std	Z+6, r18	; 0x06
 a86:	10 c0       	rjmp	.+32     	; 0xaa8 <fputc+0x66>
 a88:	eb 01       	movw	r28, r22
 a8a:	09 2f       	mov	r16, r25
 a8c:	18 2f       	mov	r17, r24
 a8e:	00 84       	ldd	r0, Z+8	; 0x08
 a90:	f1 85       	ldd	r31, Z+9	; 0x09
 a92:	e0 2d       	mov	r30, r0
 a94:	09 95       	icall
 a96:	89 2b       	or	r24, r25
 a98:	e1 f6       	brne	.-72     	; 0xa52 <fputc+0x10>
 a9a:	8e 81       	ldd	r24, Y+6	; 0x06
 a9c:	9f 81       	ldd	r25, Y+7	; 0x07
 a9e:	01 96       	adiw	r24, 0x01	; 1
 aa0:	9f 83       	std	Y+7, r25	; 0x07
 aa2:	8e 83       	std	Y+6, r24	; 0x06
 aa4:	81 2f       	mov	r24, r17
 aa6:	90 2f       	mov	r25, r16
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	1f 91       	pop	r17
 aae:	0f 91       	pop	r16
 ab0:	08 95       	ret

00000ab2 <fwrite>:
 ab2:	a0 e0       	ldi	r26, 0x00	; 0
 ab4:	b0 e0       	ldi	r27, 0x00	; 0
 ab6:	ef e5       	ldi	r30, 0x5F	; 95
 ab8:	f5 e0       	ldi	r31, 0x05	; 5
 aba:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__prologue_saves__+0xc>
 abe:	5b 01       	movw	r10, r22
 ac0:	4a 01       	movw	r8, r20
 ac2:	79 01       	movw	r14, r18
 ac4:	d9 01       	movw	r26, r18
 ac6:	13 96       	adiw	r26, 0x03	; 3
 ac8:	2c 91       	ld	r18, X
 aca:	21 ff       	sbrs	r18, 1
 acc:	1d c0       	rjmp	.+58     	; 0xb08 <fwrite+0x56>
 ace:	c0 e0       	ldi	r28, 0x00	; 0
 ad0:	d0 e0       	ldi	r29, 0x00	; 0
 ad2:	c8 15       	cp	r28, r8
 ad4:	d9 05       	cpc	r29, r9
 ad6:	d9 f0       	breq	.+54     	; 0xb0e <fwrite+0x5c>
 ad8:	8c 01       	movw	r16, r24
 ada:	6c 01       	movw	r12, r24
 adc:	ca 0c       	add	r12, r10
 ade:	db 1c       	adc	r13, r11
 ae0:	c8 01       	movw	r24, r16
 ae2:	0c 15       	cp	r16, r12
 ae4:	1d 05       	cpc	r17, r13
 ae6:	71 f0       	breq	.+28     	; 0xb04 <fwrite+0x52>
 ae8:	0f 5f       	subi	r16, 0xFF	; 255
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	d7 01       	movw	r26, r14
 aee:	18 96       	adiw	r26, 0x08	; 8
 af0:	ed 91       	ld	r30, X+
 af2:	fc 91       	ld	r31, X
 af4:	19 97       	sbiw	r26, 0x09	; 9
 af6:	b7 01       	movw	r22, r14
 af8:	dc 01       	movw	r26, r24
 afa:	8c 91       	ld	r24, X
 afc:	09 95       	icall
 afe:	89 2b       	or	r24, r25
 b00:	79 f3       	breq	.-34     	; 0xae0 <fwrite+0x2e>
 b02:	05 c0       	rjmp	.+10     	; 0xb0e <fwrite+0x5c>
 b04:	21 96       	adiw	r28, 0x01	; 1
 b06:	e5 cf       	rjmp	.-54     	; 0xad2 <fwrite+0x20>
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <fwrite+0x5e>
 b0e:	ce 01       	movw	r24, r28
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
 b14:	ec e0       	ldi	r30, 0x0C	; 12
 b16:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__epilogue_restores__+0xc>

00000b1a <__muluhisi3>:
 b1a:	0e 94 29 03 	call	0x652	; 0x652 <__umulhisi3>
 b1e:	a5 9f       	mul	r26, r21
 b20:	90 0d       	add	r25, r0
 b22:	b4 9f       	mul	r27, r20
 b24:	90 0d       	add	r25, r0
 b26:	a4 9f       	mul	r26, r20
 b28:	80 0d       	add	r24, r0
 b2a:	91 1d       	adc	r25, r1
 b2c:	11 24       	eor	r1, r1
 b2e:	08 95       	ret

00000b30 <__mulshisi3>:
 b30:	b7 ff       	sbrs	r27, 7
 b32:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__muluhisi3>

00000b36 <__mulohisi3>:
 b36:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__muluhisi3>
 b3a:	82 1b       	sub	r24, r18
 b3c:	93 0b       	sbc	r25, r19
 b3e:	08 95       	ret

00000b40 <__prologue_saves__>:
 b40:	2f 92       	push	r2
 b42:	3f 92       	push	r3
 b44:	4f 92       	push	r4
 b46:	5f 92       	push	r5
 b48:	6f 92       	push	r6
 b4a:	7f 92       	push	r7
 b4c:	8f 92       	push	r8
 b4e:	9f 92       	push	r9
 b50:	af 92       	push	r10
 b52:	bf 92       	push	r11
 b54:	cf 92       	push	r12
 b56:	df 92       	push	r13
 b58:	ef 92       	push	r14
 b5a:	ff 92       	push	r15
 b5c:	0f 93       	push	r16
 b5e:	1f 93       	push	r17
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
 b64:	cd b7       	in	r28, 0x3d	; 61
 b66:	de b7       	in	r29, 0x3e	; 62
 b68:	ca 1b       	sub	r28, r26
 b6a:	db 0b       	sbc	r29, r27
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	f8 94       	cli
 b70:	de bf       	out	0x3e, r29	; 62
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	cd bf       	out	0x3d, r28	; 61
 b76:	09 94       	ijmp

00000b78 <__epilogue_restores__>:
 b78:	2a 88       	ldd	r2, Y+18	; 0x12
 b7a:	39 88       	ldd	r3, Y+17	; 0x11
 b7c:	48 88       	ldd	r4, Y+16	; 0x10
 b7e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b80:	6e 84       	ldd	r6, Y+14	; 0x0e
 b82:	7d 84       	ldd	r7, Y+13	; 0x0d
 b84:	8c 84       	ldd	r8, Y+12	; 0x0c
 b86:	9b 84       	ldd	r9, Y+11	; 0x0b
 b88:	aa 84       	ldd	r10, Y+10	; 0x0a
 b8a:	b9 84       	ldd	r11, Y+9	; 0x09
 b8c:	c8 84       	ldd	r12, Y+8	; 0x08
 b8e:	df 80       	ldd	r13, Y+7	; 0x07
 b90:	ee 80       	ldd	r14, Y+6	; 0x06
 b92:	fd 80       	ldd	r15, Y+5	; 0x05
 b94:	0c 81       	ldd	r16, Y+4	; 0x04
 b96:	1b 81       	ldd	r17, Y+3	; 0x03
 b98:	aa 81       	ldd	r26, Y+2	; 0x02
 b9a:	b9 81       	ldd	r27, Y+1	; 0x01
 b9c:	ce 0f       	add	r28, r30
 b9e:	d1 1d       	adc	r29, r1
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	de bf       	out	0x3e, r29	; 62
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	cd bf       	out	0x3d, r28	; 61
 baa:	ed 01       	movw	r28, r26
 bac:	08 95       	ret

00000bae <_exit>:
 bae:	f8 94       	cli

00000bb0 <__stop_program>:
 bb0:	ff cf       	rjmp	.-2      	; 0xbb0 <__stop_program>
