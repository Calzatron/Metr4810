
Project_Sub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00001f56  00001fea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  008001aa  008001aa  00002094  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e10  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e93  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012d3  00000000  00000000  00004f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00006240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076f  00000000  00000000  000065f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0d  00000000  00000000  00006d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00007b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_13>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      50:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_20>
      54:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_21>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      6c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      70:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      74:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      78:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      7c:	ac 03       	fmulsu	r18, r20
      7e:	ea 04       	cpc	r14, r10
      80:	ea 04       	cpc	r14, r10
      82:	ea 04       	cpc	r14, r10
      84:	ea 04       	cpc	r14, r10
      86:	ea 04       	cpc	r14, r10
      88:	ea 04       	cpc	r14, r10
      8a:	ea 04       	cpc	r14, r10
      8c:	ea 04       	cpc	r14, r10
      8e:	ea 04       	cpc	r14, r10
      90:	ea 04       	cpc	r14, r10
      92:	0c 05       	cpc	r16, r12
      94:	ea 04       	cpc	r14, r10
      96:	cc 02       	muls	r28, r28
      98:	ea 04       	cpc	r14, r10
      9a:	ea 04       	cpc	r14, r10
      9c:	2e 03       	fmul	r18, r22
      9e:	33 03       	mulsu	r19, r19
      a0:	39 03       	fmul	r19, r17
      a2:	3f 03       	fmul	r19, r23
      a4:	45 03       	mulsu	r20, r21
      a6:	4b 03       	fmul	r20, r19
      a8:	ea 04       	cpc	r14, r10
      aa:	ea 04       	cpc	r14, r10
      ac:	ea 04       	cpc	r14, r10
      ae:	ea 04       	cpc	r14, r10
      b0:	ea 04       	cpc	r14, r10
      b2:	ea 04       	cpc	r14, r10
      b4:	ea 04       	cpc	r14, r10
      b6:	c3 02       	muls	r28, r19
      b8:	ea 04       	cpc	r14, r10
      ba:	0c 05       	cpc	r16, r12
      bc:	ea 04       	cpc	r14, r10
      be:	ea 04       	cpc	r14, r10
      c0:	ea 04       	cpc	r14, r10
      c2:	ea 04       	cpc	r14, r10
      c4:	ea 04       	cpc	r14, r10
      c6:	ea 04       	cpc	r14, r10
      c8:	ea 04       	cpc	r14, r10
      ca:	ea 04       	cpc	r14, r10
      cc:	ea 04       	cpc	r14, r10
      ce:	ea 04       	cpc	r14, r10
      d0:	ea 04       	cpc	r14, r10
      d2:	ea 04       	cpc	r14, r10
      d4:	c1 03       	fmuls	r20, r17
      d6:	ea 04       	cpc	r14, r10
      d8:	ea 04       	cpc	r14, r10
      da:	ea 04       	cpc	r14, r10
      dc:	ea 04       	cpc	r14, r10
      de:	ea 04       	cpc	r14, r10
      e0:	ea 04       	cpc	r14, r10
      e2:	ea 04       	cpc	r14, r10
      e4:	ea 04       	cpc	r14, r10
      e6:	ea 04       	cpc	r14, r10
      e8:	ea 04       	cpc	r14, r10
      ea:	ea 04       	cpc	r14, r10
      ec:	ea 04       	cpc	r14, r10
      ee:	ea 04       	cpc	r14, r10
      f0:	ea 04       	cpc	r14, r10
      f2:	51 03       	mulsu	r21, r17
      f4:	ea 04       	cpc	r14, r10
      f6:	7f 03       	fmul	r23, r23
      f8:	ea 04       	cpc	r14, r10
      fa:	ea 04       	cpc	r14, r10
      fc:	29 03       	fmul	r18, r17
      fe:	aa 02       	muls	r26, r26
     100:	ea 04       	cpc	r14, r10
     102:	ea 04       	cpc	r14, r10
     104:	b4 02       	muls	r27, r20
     106:	d5 02       	muls	r29, r21
     108:	ea 04       	cpc	r14, r10
     10a:	b7 03       	fmuls	r19, r23
     10c:	b3 03       	fmuls	r19, r19
     10e:	ea 04       	cpc	r14, r10
     110:	c3 03       	fmuls	r20, r19
     112:	50 04       	cpc	r5, r0
     114:	bb 03       	fmulsu	r19, r19
     116:	ea 04       	cpc	r14, r10
     118:	ea 04       	cpc	r14, r10
     11a:	dd 04       	cpc	r13, r13
     11c:	ea 04       	cpc	r14, r10
     11e:	ff 02       	muls	r31, r31
     120:	be 02       	muls	r27, r30
     122:	af 02       	muls	r26, r31
     124:	ea 04       	cpc	r14, r10
     126:	ea 04       	cpc	r14, r10
     128:	ea 04       	cpc	r14, r10
     12a:	b9 02       	muls	r27, r25

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d8 e0       	ldi	r29, 0x08	; 8
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e6 e5       	ldi	r30, 0x56	; 86
     140:	ff e1       	ldi	r31, 0x1F	; 31
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	aa 3a       	cpi	r26, 0xAA	; 170
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	22 e0       	ldi	r18, 0x02	; 2
     150:	aa ea       	ldi	r26, 0xAA	; 170
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a5 3d       	cpi	r26, 0xD5	; 213
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	0e 94 25 05 	call	0xa4a	; 0xa4a <main>
     162:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <_exit>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     16a:	2f b7       	in	r18, 0x3f	; 63
     16c:	20 78       	andi	r18, 0x80	; 128
     16e:	02 c0       	rjmp	.+4      	; 0x174 <uart_put_char+0xa>
     170:	22 23       	and	r18, r18
     172:	29 f1       	breq	.+74     	; 0x1be <uart_put_char+0x54>
     174:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     178:	9f 3f       	cpi	r25, 0xFF	; 255
     17a:	d1 f3       	breq	.-12     	; 0x170 <uart_put_char+0x6>
     17c:	f8 94       	cli
     17e:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <out_insert_pos>
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	9e 0f       	add	r25, r30
     186:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <out_insert_pos>
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ee 54       	subi	r30, 0x4E	; 78
     18e:	fe 4f       	sbci	r31, 0xFE	; 254
     190:	80 83       	st	Z, r24
     192:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <bytes_in_out_buffer>
     19c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <out_insert_pos>
     1a0:	8f 3f       	cpi	r24, 0xFF	; 255
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <uart_put_char+0x3e>
     1a4:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <out_insert_pos>
     1a8:	e1 ec       	ldi	r30, 0xC1	; 193
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	80 62       	ori	r24, 0x20	; 32
     1b0:	80 83       	st	Z, r24
     1b2:	22 23       	and	r18, r18
     1b4:	39 f0       	breq	.+14     	; 0x1c4 <uart_put_char+0x5a>
     1b6:	78 94       	sei
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	08 95       	ret
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	08 95       	ret
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	08 95       	ret

000001ca <uart_get_char>:
     1ca:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     1ce:	88 23       	and	r24, r24
     1d0:	e1 f3       	breq	.-8      	; 0x1ca <uart_get_char>
     1d2:	2f b7       	in	r18, 0x3f	; 63
     1d4:	20 78       	andi	r18, 0x80	; 128
     1d6:	f8 94       	cli
     1d8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <input_insert_pos>
     1dc:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	83 1b       	sub	r24, r19
     1e4:	91 09       	sbc	r25, r1
     1e6:	5a f4       	brpl	.+22     	; 0x1fe <uart_get_char+0x34>
     1e8:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <input_insert_pos>
     1ec:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	e8 1b       	sub	r30, r24
     1f4:	f1 09       	sbc	r31, r1
     1f6:	ee 53       	subi	r30, 0x3E	; 62
     1f8:	fd 4f       	sbci	r31, 0xFD	; 253
     1fa:	80 81       	ld	r24, Z
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <uart_get_char+0x48>
     1fe:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <input_insert_pos>
     202:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	e8 1b       	sub	r30, r24
     20a:	f1 09       	sbc	r31, r1
     20c:	ee 54       	subi	r30, 0x4E	; 78
     20e:	fd 4f       	sbci	r31, 0xFD	; 253
     210:	80 81       	ld	r24, Z
     212:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     216:	91 50       	subi	r25, 0x01	; 1
     218:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <bytes_in_input_buffer>
     21c:	22 23       	and	r18, r18
     21e:	09 f0       	breq	.+2      	; 0x222 <uart_get_char+0x58>
     220:	78 94       	sei
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	08 95       	ret

00000226 <init_serial_stdio>:
     226:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <out_insert_pos>
     22a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <bytes_in_out_buffer>
     22e:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <input_insert_pos>
     232:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <bytes_in_input_buffer>
     236:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <input_overrun>
     23a:	40 93 aa 01 	sts	0x01AA, r20	; 0x8001aa <__data_end>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	aa 1f       	adc	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	aa 1f       	adc	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	9c 01       	movw	r18, r24
     254:	ad 01       	movw	r20, r26
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	44 1f       	adc	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	72 e1       	ldi	r23, 0x12	; 18
     262:	8a e7       	ldi	r24, 0x7A	; 122
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 29 0a 	call	0x1452	; 0x1452 <__divmodsi4>
     26a:	ba 01       	movw	r22, r20
     26c:	a9 01       	movw	r20, r18
     26e:	4f 5f       	subi	r20, 0xFF	; 255
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	6f 4f       	sbci	r22, 0xFF	; 255
     274:	7f 4f       	sbci	r23, 0xFF	; 255
     276:	db 01       	movw	r26, r22
     278:	ca 01       	movw	r24, r20
     27a:	1a f4       	brpl	.+6      	; 0x282 <init_serial_stdio+0x5c>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	b5 95       	asr	r27
     284:	a7 95       	ror	r26
     286:	97 95       	ror	r25
     288:	87 95       	ror	r24
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     290:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     294:	e1 ec       	ldi	r30, 0xC1	; 193
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	88 e1       	ldi	r24, 0x18	; 24
     29a:	80 83       	st	Z, r24
     29c:	80 81       	ld	r24, Z
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	80 83       	st	Z, r24
     2a2:	ef ec       	ldi	r30, 0xCF	; 207
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	93 83       	std	Z+3, r25	; 0x03
     2ac:	82 83       	std	Z+2, r24	; 0x02
     2ae:	91 83       	std	Z+1, r25	; 0x01
     2b0:	80 83       	st	Z, r24
     2b2:	08 95       	ret

000002b4 <serial_input_available>:
     2b4:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	91 11       	cpse	r25, r1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <serial_input_available+0xc>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     2d6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     2da:	88 23       	and	r24, r24
     2dc:	29 f1       	breq	.+74     	; 0x328 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     2de:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <out_insert_pos>
     2e2:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	82 1b       	sub	r24, r18
     2ea:	91 09       	sbc	r25, r1
     2ec:	5a f4       	brpl	.+22     	; 0x304 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2ee:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <out_insert_pos>
     2f2:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e8 1b       	sub	r30, r24
     2fa:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2fc:	ef 54       	subi	r30, 0x4F	; 79
     2fe:	fd 4f       	sbci	r31, 0xFD	; 253
     300:	90 81       	ld	r25, Z
     302:	0a c0       	rjmp	.+20     	; 0x318 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     304:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <out_insert_pos>
     308:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	e8 1b       	sub	r30, r24
     310:	f1 09       	sbc	r31, r1
     312:	ee 54       	subi	r30, 0x4E	; 78
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     318:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     322:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     326:	05 c0       	rjmp	.+10     	; 0x332 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     328:	e1 ec       	ldi	r30, 0xC1	; 193
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7d       	andi	r24, 0xDF	; 223
     330:	80 83       	st	Z, r24
	}
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	2f 91       	pop	r18
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	cf 93       	push	r28
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     36a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     36e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
     372:	88 23       	and	r24, r24
     374:	49 f0       	breq	.+18     	; 0x388 <__vector_20+0x42>
     376:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <bytes_in_out_buffer>
     37a:	8f 3f       	cpi	r24, 0xFF	; 255
     37c:	29 f0       	breq	.+10     	; 0x388 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8c 2f       	mov	r24, r28
     384:	0e 94 b5 00 	call	0x16a	; 0x16a <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     388:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     38c:	80 31       	cpi	r24, 0x10	; 16
     38e:	20 f0       	brcs	.+8      	; 0x398 <__vector_20+0x52>
		input_overrun = 1;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <input_overrun>
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     398:	cd 30       	cpi	r28, 0x0D	; 13
     39a:	09 f4       	brne	.+2      	; 0x39e <__vector_20+0x58>
			c = '\n';
     39c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     39e:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <input_insert_pos>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	8e 0f       	add	r24, r30
     3a6:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <input_insert_pos>
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	ee 54       	subi	r30, 0x4E	; 78
     3ae:	fd 4f       	sbci	r31, 0xFD	; 253
     3b0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     3b2:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <bytes_in_input_buffer>
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     3bc:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <input_insert_pos>
     3c0:	80 31       	cpi	r24, 0x10	; 16
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     3c4:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <input_insert_pos>
		}
	}
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	cf 91       	pop	r28
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	7f 91       	pop	r23
     3d8:	6f 91       	pop	r22
     3da:	5f 91       	pop	r21
     3dc:	4f 91       	pop	r20
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <init_tcnt0>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT0 = 0;
     3ec:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
     3ee:	17 bc       	out	0x27, r1	; 39
	//OCR0B = 124;
	

	TCCR0A |= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | _BV(WGM00) | _BV(WGM01);
     3f0:	84 b5       	in	r24, 0x24	; 36
     3f2:	83 68       	ori	r24, 0x83	; 131
     3f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS10);
     3f6:	85 b5       	in	r24, 0x25	; 37
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	85 bd       	out	0x25, r24	; 37
     3fc:	08 95       	ret

000003fe <init_tcnt2>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
     3fe:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 124;
     402:	8c e7       	ldi	r24, 0x7C	; 124
     404:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 124;
     408:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	

	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
     40c:	e0 eb       	ldi	r30, 0xB0	; 176
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	83 6a       	ori	r24, 0xA3	; 163
     414:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
     416:	e1 eb       	ldi	r30, 0xB1	; 177
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 83       	st	Z, r24
     420:	08 95       	ret

00000422 <makeInfo>:
	}
}

info* makeInfo(void) {
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     422:	8b e0       	ldi	r24, 0x0B	; 11
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 84 0a 	call	0x1508	; 0x1508 <malloc>
	return info_ptr;
}
     42a:	08 95       	ret

0000042c <initialise>:
	
}



void initialise(info* info_ptr){
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24

	DDRA = (1<<PORTA0)|(1<<PORTA1);
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	81 b9       	out	0x01, r24	; 1
	DDRB = (1<<PORTB3)|(1<<PORTB0);			/*	PWM camera, buttons	*/
     43a:	89 e0       	ldi	r24, 0x09	; 9
     43c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PINB1);
     43e:	21 98       	cbi	0x04, 1	; 4
	DDRC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5)|(1<<PORTC6)|(1<<PORTC7);
     440:	8c ef       	ldi	r24, 0xFC	; 252
     442:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
     444:	8e ef       	ldi	r24, 0xFE	; 254
     446:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
     448:	50 98       	cbi	0x0a, 0	; 10
	init_serial_stdio(9600,0);											//////////////////////////////////////////////////////////////////////////////////////////
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	60 e8       	ldi	r22, 0x80	; 128
     44e:	75 e2       	ldi	r23, 0x25	; 37
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 13 01 	call	0x226	; 0x226 <init_serial_stdio>

	init_tcnt0();				/*	Camera PWM	*/
     458:	0e 94 f6 01 	call	0x3ec	; 0x3ec <init_tcnt0>
	init_tcnt1();				/*	Timer		*/
     45c:	0e 94 8a 09 	call	0x1314	; 0x1314 <init_tcnt1>
	init_tcnt2();				/*	Motor PWM	*/
     460:	0e 94 ff 01 	call	0x3fe	; 0x3fe <init_tcnt2>
	init_step();
     464:	0e 94 75 06 	call	0xcea	; 0xcea <init_step>
	srand(get_tcnt1_ticks());
     468:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
     46c:	cb 01       	movw	r24, r22
     46e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <srand>
	sei();
     472:	78 94       	sei
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     474:	cf ec       	ldi	r28, 0xCF	; 207
     476:	d2 e0       	ldi	r29, 0x02	; 2
	//}

	/****************************************************************************************************************************************************************/
		
	uint8_t check = 1;
	while (check){
     478:	20 c0       	rjmp	.+64     	; 0x4ba <initialise+0x8e>
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     47a:	88 81       	ld	r24, Y
     47c:	99 81       	ldd	r25, Y+1	; 0x01
     47e:	0e 94 01 0c 	call	0x1802	; 0x1802 <fgetc>
			if (start == 'o'){
     482:	8f 36       	cpi	r24, 0x6F	; 111
     484:	d1 f4       	brne	.+52     	; 0x4ba <initialise+0x8e>
				fputs("Start\n", stdout);
     486:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <__iob+0x2>
     48a:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <__iob+0x3>
     48e:	46 e0       	ldi	r20, 0x06	; 6
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	88 e1       	ldi	r24, 0x18	; 24
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 a5 0c 	call	0x194a	; 0x194a <fwrite>
				
		}
			
	}

	info_ptr->start = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	f8 01       	movw	r30, r16
     4a2:	87 83       	std	Z+7, r24	; 0x07
	info_ptr->stepAct = '\0';
     4a4:	14 82       	std	Z+4, r1	; 0x04
	info_ptr->maxStep = 150;
     4a6:	86 e9       	ldi	r24, 0x96	; 150
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	93 83       	std	Z+3, r25	; 0x03
     4ac:	82 83       	std	Z+2, r24	; 0x02
	info_ptr->camera = 0;
     4ae:	16 82       	std	Z+6, r1	; 0x06
	info_ptr->pwmSpeed = 0;
     4b0:	10 82       	st	Z, r1
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper or winch
     4b2:	8b b1       	in	r24, 0x0b	; 11
     4b4:	80 63       	ori	r24, 0x30	; 48
     4b6:	8b b9       	out	0x0b, r24	; 11

}
     4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <initialise+0x98>
	/****************************************************************************************************************************************************************/
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
     4ba:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     4be:	88 23       	and	r24, r24
     4c0:	e1 f3       	breq	.-8      	; 0x4ba <initialise+0x8e>
     4c2:	db cf       	rjmp	.-74     	; 0x47a <initialise+0x4e>
	info_ptr->maxStep = 150;
	info_ptr->camera = 0;
	info_ptr->pwmSpeed = 0;
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper or winch

}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	08 95       	ret

000004ce <custom_delay>:




void custom_delay(uint32_t ticks){
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	6b 01       	movw	r12, r22
     4d8:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt1 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt1_ticks();
     4da:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
	while((current_time + ticks) > get_tcnt1_ticks()){
     4de:	c6 0e       	add	r12, r22
     4e0:	d7 1e       	adc	r13, r23
     4e2:	e8 1e       	adc	r14, r24
     4e4:	f9 1e       	adc	r15, r25
     4e6:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
     4ea:	6c 15       	cp	r22, r12
     4ec:	7d 05       	cpc	r23, r13
     4ee:	8e 05       	cpc	r24, r14
     4f0:	9f 05       	cpc	r25, r15
     4f2:	c8 f3       	brcs	.-14     	; 0x4e6 <custom_delay+0x18>
		;
	}
}
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	08 95       	ret

000004fe <input>:
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}


void input(info* info_ptr){
     4fe:	8f 92       	push	r8
     500:	9f 92       	push	r9
     502:	af 92       	push	r10
     504:	bf 92       	push	r11
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	64 97       	sbiw	r28, 0x14	; 20
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	8c 01       	movw	r16, r24
	
	if(!serial_input_available()){
     526:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     52a:	88 23       	and	r24, r24
     52c:	09 f4       	brne	.+2      	; 0x530 <input+0x32>
     52e:	7b c2       	rjmp	.+1270   	; 0xa26 <__stack+0x127>
		return;
		
	}

	char c = fgetc(stdin);
     530:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <__iob>
     534:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <__iob+0x1>
     538:	0e 94 01 0c 	call	0x1802	; 0x1802 <fgetc>
     53c:	7c 01       	movw	r14, r24
     53e:	ff 24       	eor	r15, r15
	int16_t speed;
	char buffer[20];
	uint8_t percent;
	char in;
	
	switch(c){
     540:	f7 01       	movw	r30, r14
     542:	b0 97       	sbiw	r30, 0x20	; 32
     544:	e8 35       	cpi	r30, 0x58	; 88
     546:	f1 05       	cpc	r31, r1
     548:	08 f0       	brcs	.+2      	; 0x54c <input+0x4e>
     54a:	44 c2       	rjmp	.+1160   	; 0x9d4 <__stack+0xd5>
     54c:	e2 5c       	subi	r30, 0xC2	; 194
     54e:	ff 4f       	sbci	r31, 0xFF	; 255
     550:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__tablejump2__>
		
		case 'a' :
			// turn left
			PORTD &= ~(1<<PORTD2);
     554:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     556:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     558:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     55a:	47 98       	cbi	0x08, 7	; 8
			break;
     55c:	5d c2       	rjmp	.+1210   	; 0xa18 <__stack+0x119>
		case 's' :
			// backwards
			PORTD &= ~(1<<PORTD2);
     55e:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     560:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     562:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     564:	47 9a       	sbi	0x08, 7	; 8
			break;
     566:	58 c2       	rjmp	.+1200   	; 0xa18 <__stack+0x119>
		case 'd' :
			// turn right
			PORTD |= (1<<PORTD2);
     568:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     56a:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     56c:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     56e:	47 9a       	sbi	0x08, 7	; 8
			break;
     570:	53 c2       	rjmp	.+1190   	; 0xa18 <__stack+0x119>
		case 'w' :
			// forward
			PORTD |= (1<<PORTD2);
     572:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     574:	5b 98       	cbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     576:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     578:	47 98       	cbi	0x08, 7	; 8
			break;
     57a:	4e c2       	rjmp	.+1180   	; 0xa18 <__stack+0x119>
		case 'r' :
			// release claw
			release_step();
     57c:	0e 94 b8 06 	call	0xd70	; 0xd70 <release_step>
			info_ptr->stepAct = '\0';
     580:	f8 01       	movw	r30, r16
     582:	14 82       	std	Z+4, r1	; 0x04
			break;
     584:	49 c2       	rjmp	.+1170   	; 0xa18 <__stack+0x119>
			// rely to winch to lift up
			//fputc('+', stdout);
			break;
		case '=' :
			// someone panic'd; winch to lift up
			fputc('+', stdout);
     586:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <__iob+0x2>
     58a:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <__iob+0x3>
     58e:	8b e2       	ldi	r24, 0x2B	; 43
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
			break;
     596:	40 c2       	rjmp	.+1152   	; 0xa18 <__stack+0x119>
		case '-' :
			// lower
			fputc('_', stdout);
     598:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <__iob+0x2>
     59c:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <__iob+0x3>
     5a0:	8f e5       	ldi	r24, 0x5F	; 95
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
			break;
     5a8:	37 c2       	rjmp	.+1134   	; 0xa18 <__stack+0x119>
		case 'e' :
			// activate claw
			if (info_ptr->stepSpeed < 0){
     5aa:	f8 01       	movw	r30, r16
     5ac:	81 81       	ldd	r24, Z+1	; 0x01
     5ae:	88 23       	and	r24, r24
     5b0:	14 f4       	brge	.+4      	; 0x5b6 <input+0xb8>
				info_ptr->stepSpeed = -info_ptr->stepSpeed;
     5b2:	81 95       	neg	r24
     5b4:	81 83       	std	Z+1, r24	; 0x01
			}

			sprintf(buffer, "activate %d\n", info_ptr->stepSpeed);
     5b6:	f8 01       	movw	r30, r16
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
     5ba:	28 2f       	mov	r18, r24
     5bc:	08 2e       	mov	r0, r24
     5be:	00 0c       	add	r0, r0
     5c0:	33 0b       	sbc	r19, r19
     5c2:	3f 93       	push	r19
     5c4:	8f 93       	push	r24
     5c6:	8f e1       	ldi	r24, 0x1F	; 31
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	5c 01       	movw	r10, r24
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
			fputs(buffer, stdout);
     5dc:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <__iob+0x2>
     5e0:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <__iob+0x3>
     5e4:	c5 01       	movw	r24, r10
     5e6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
			info_ptr->stepAct = 'A';
     5ea:	81 e4       	ldi	r24, 0x41	; 65
     5ec:	f8 01       	movw	r30, r16
     5ee:	84 83       	std	Z+4, r24	; 0x04
			break;
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0d c2       	rjmp	.+1050   	; 0xa18 <__stack+0x119>
		case 'q' :
			// retract claw
			if (info_ptr->stepSpeed > 0){
     5fe:	f8 01       	movw	r30, r16
     600:	81 81       	ldd	r24, Z+1	; 0x01
     602:	18 16       	cp	r1, r24
     604:	14 f4       	brge	.+4      	; 0x60a <input+0x10c>
					info_ptr->stepSpeed = -info_ptr->stepSpeed;
     606:	81 95       	neg	r24
     608:	81 83       	std	Z+1, r24	; 0x01
			}
			/************sends negative to activate winch *******/
			sprintf(buffer, "retract %d\n", info_ptr->stepSpeed);
     60a:	f8 01       	movw	r30, r16
     60c:	81 81       	ldd	r24, Z+1	; 0x01
     60e:	28 2f       	mov	r18, r24
     610:	08 2e       	mov	r0, r24
     612:	00 0c       	add	r0, r0
     614:	33 0b       	sbc	r19, r19
     616:	3f 93       	push	r19
     618:	8f 93       	push	r24
     61a:	8c e2       	ldi	r24, 0x2C	; 44
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	5c 01       	movw	r10, r24
     628:	9f 93       	push	r25
     62a:	8f 93       	push	r24
     62c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
			fputs(buffer, stdout);
     630:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <__iob+0x2>
     634:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <__iob+0x3>
     638:	c5 01       	movw	r24, r10
     63a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
			info_ptr->stepAct = 'R';
     63e:	82 e5       	ldi	r24, 0x52	; 82
     640:	f8 01       	movw	r30, r16
     642:	84 83       	std	Z+4, r24	; 0x04
			break;
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	e3 c1       	rjmp	.+966    	; 0xa18 <__stack+0x119>
		case '`' :
			info_ptr->pwmSpeed = 0;
     652:	f8 01       	movw	r30, r16
     654:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 87       	std	Z+8, r24	; 0x08
			break;
     65a:	de c1       	rjmp	.+956    	; 0xa18 <__stack+0x119>
		case '0' :
			info_ptr->pwmSpeed = 0;
     65c:	f8 01       	movw	r30, r16
     65e:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 87       	std	Z+8, r24	; 0x08
			break;
     664:	d9 c1       	rjmp	.+946    	; 0xa18 <__stack+0x119>
		case '1' :
			info_ptr->pwmSpeed = 20;
     666:	84 e1       	ldi	r24, 0x14	; 20
     668:	f8 01       	movw	r30, r16
     66a:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 87       	std	Z+8, r24	; 0x08
			break;
     670:	d3 c1       	rjmp	.+934    	; 0xa18 <__stack+0x119>
		case '2' :
			info_ptr->pwmSpeed = 40;
     672:	88 e2       	ldi	r24, 0x28	; 40
     674:	f8 01       	movw	r30, r16
     676:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	80 87       	std	Z+8, r24	; 0x08
			break;
     67c:	cd c1       	rjmp	.+922    	; 0xa18 <__stack+0x119>
		case '3' :
			info_ptr->pwmSpeed = 60;
     67e:	8c e3       	ldi	r24, 0x3C	; 60
     680:	f8 01       	movw	r30, r16
     682:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 87       	std	Z+8, r24	; 0x08
			break;
     688:	c7 c1       	rjmp	.+910    	; 0xa18 <__stack+0x119>
		case '4' :
			info_ptr->pwmSpeed = 80;
     68a:	80 e5       	ldi	r24, 0x50	; 80
     68c:	f8 01       	movw	r30, r16
     68e:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	80 87       	std	Z+8, r24	; 0x08
			break;
     694:	c1 c1       	rjmp	.+898    	; 0xa18 <__stack+0x119>
		case '5' :
			info_ptr->pwmSpeed = 100;
     696:	84 e6       	ldi	r24, 0x64	; 100
     698:	f8 01       	movw	r30, r16
     69a:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 87       	std	Z+8, r24	; 0x08
			break;
     6a0:	bb c1       	rjmp	.+886    	; 0xa18 <__stack+0x119>
		case '[' :
			speed = info_ptr->stepSpeed - 10;
     6a2:	f8 01       	movw	r30, r16
     6a4:	21 81       	ldd	r18, Z+1	; 0x01
			if (speed > -110){
     6a6:	82 2f       	mov	r24, r18
     6a8:	02 2e       	mov	r0, r18
     6aa:	00 0c       	add	r0, r0
     6ac:	99 0b       	sbc	r25, r25
     6ae:	0a 97       	sbiw	r24, 0x0a	; 10
     6b0:	83 39       	cpi	r24, 0x93	; 147
     6b2:	9f 4f       	sbci	r25, 0xFF	; 255
     6b4:	1c f0       	brlt	.+6      	; 0x6bc <input+0x1be>
				info_ptr->stepSpeed -= 10;
     6b6:	2a 50       	subi	r18, 0x0A	; 10
     6b8:	f8 01       	movw	r30, r16
     6ba:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     6bc:	f8 01       	movw	r30, r16
     6be:	81 81       	ldd	r24, Z+1	; 0x01
     6c0:	28 2f       	mov	r18, r24
     6c2:	08 2e       	mov	r0, r24
     6c4:	00 0c       	add	r0, r0
     6c6:	33 0b       	sbc	r19, r19
     6c8:	3f 93       	push	r19
     6ca:	8f 93       	push	r24
     6cc:	88 e3       	ldi	r24, 0x38	; 56
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	8e 01       	movw	r16, r28
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	1f 93       	push	r17
     6dc:	0f 93       	push	r16
     6de:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
			fputs(buffer, stdout);
     6e2:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <__iob+0x2>
     6e6:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <__iob+0x3>
     6ea:	c8 01       	movw	r24, r16
     6ec:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
			break;
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	8d c1       	rjmp	.+794    	; 0xa18 <__stack+0x119>
		case ']' :
			speed = info_ptr->stepSpeed - 10;
     6fe:	f8 01       	movw	r30, r16
     700:	21 81       	ldd	r18, Z+1	; 0x01
			if (speed < 110){
     702:	82 2f       	mov	r24, r18
     704:	02 2e       	mov	r0, r18
     706:	00 0c       	add	r0, r0
     708:	99 0b       	sbc	r25, r25
     70a:	0a 97       	sbiw	r24, 0x0a	; 10
     70c:	8e 36       	cpi	r24, 0x6E	; 110
     70e:	91 05       	cpc	r25, r1
     710:	14 f4       	brge	.+4      	; 0x716 <input+0x218>
				info_ptr->stepSpeed += 10;
     712:	26 5f       	subi	r18, 0xF6	; 246
     714:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     716:	f8 01       	movw	r30, r16
     718:	81 81       	ldd	r24, Z+1	; 0x01
     71a:	28 2f       	mov	r18, r24
     71c:	08 2e       	mov	r0, r24
     71e:	00 0c       	add	r0, r0
     720:	33 0b       	sbc	r19, r19
     722:	3f 93       	push	r19
     724:	8f 93       	push	r24
     726:	88 e3       	ldi	r24, 0x38	; 56
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	8e 01       	movw	r16, r28
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	1f 93       	push	r17
     736:	0f 93       	push	r16
     738:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
			fputs(buffer, stdout);
     73c:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <__iob+0x2>
     740:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <__iob+0x3>
     744:	c8 01       	movw	r24, r16
     746:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
			break;
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	60 c1       	rjmp	.+704    	; 0xa18 <__stack+0x119>
		case ' ' :
			info_ptr->pwmSpeed = 0;
     758:	f8 01       	movw	r30, r16
     75a:	10 82       	st	Z, r1
			info_ptr->stopCommand = 1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	85 83       	std	Z+5, r24	; 0x05
			info_ptr->motorAct = 0;
     760:	10 86       	std	Z+8, r1	; 0x08
			info_ptr->stepAct = '\0';
     762:	14 82       	std	Z+4, r1	; 0x04
			//fputc(' ', stdout);
			break;
     764:	59 c1       	rjmp	.+690    	; 0xa18 <__stack+0x119>
		case 'h' :
			info_ptr->camera = 10;
     766:	8a e0       	ldi	r24, 0x0A	; 10
     768:	f8 01       	movw	r30, r16
     76a:	86 83       	std	Z+6, r24	; 0x06
			break;
     76c:	55 c1       	rjmp	.+682    	; 0xa18 <__stack+0x119>
		case 'g' :
			info_ptr->camera = -10;
     76e:	86 ef       	ldi	r24, 0xF6	; 246
     770:	f8 01       	movw	r30, r16
     772:	86 83       	std	Z+6, r24	; 0x06
			break;
     774:	51 c1       	rjmp	.+674    	; 0xa18 <__stack+0x119>
		case 'l' :
			if (PORTA & (1<<PORTA1)){
     776:	11 9b       	sbis	0x02, 1	; 2
     778:	02 c0       	rjmp	.+4      	; 0x77e <input+0x280>
				PORTA &= ~(1<<PORTA1);
     77a:	11 98       	cbi	0x02, 1	; 2
     77c:	4d c1       	rjmp	.+666    	; 0xa18 <__stack+0x119>
				} else {
				PORTA |= (1<<PORTA1);
     77e:	11 9a       	sbi	0x02, 1	; 2
     780:	4b c1       	rjmp	.+662    	; 0xa18 <__stack+0x119>
			}
			break;
		case 'L' :
			PORTA |= (1<<PORTA1);
     782:	11 9a       	sbi	0x02, 1	; 2
			break;
     784:	49 c1       	rjmp	.+658    	; 0xa18 <__stack+0x119>
		case 'j' : 
			/* move winch backwards	*/
			PORTB |= (1<<PORTB0);
     786:	28 9a       	sbi	0x05, 0	; 5
			percent = 60;
			speed = 0;
			move_worm(percent, speed);
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	8c e3       	ldi	r24, 0x3C	; 60
     78c:	0e 94 ef 09 	call	0x13de	; 0x13de <move_worm>
			while (info_ptr->wormCom != 'j') {
     790:	f8 01       	movw	r30, r16
     792:	82 85       	ldd	r24, Z+10	; 0x0a
     794:	8a 36       	cpi	r24, 0x6A	; 106
     796:	09 f4       	brne	.+2      	; 0x79a <input+0x29c>
     798:	81 c0       	rjmp	.+258    	; 0x89c <input+0x39e>
     79a:	0f 2e       	mov	r0, r31
     79c:	fc e3       	ldi	r31, 0x3C	; 60
     79e:	df 2e       	mov	r13, r31
     7a0:	f0 2d       	mov	r31, r0
					if(serial_input_available()){
						in = fgetc(stdin);
     7a2:	0f 2e       	mov	r0, r31
     7a4:	ff ec       	ldi	r31, 0xCF	; 207
     7a6:	af 2e       	mov	r10, r31
     7a8:	f2 e0       	ldi	r31, 0x02	; 2
     7aa:	bf 2e       	mov	r11, r31
     7ac:	f0 2d       	mov	r31, r0
								fputs(buffer, stdout);
							}
						} else if ( in == 'j'){
							if ((percent -10) >=0){
								percent -= 10;
								sprintf(buffer, "Worm speed %d\n", percent);
     7ae:	0f 2e       	mov	r0, r31
     7b0:	f1 e5       	ldi	r31, 0x51	; 81
     7b2:	8f 2e       	mov	r8, r31
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	9f 2e       	mov	r9, r31
     7b8:	f0 2d       	mov	r31, r0
			PORTB |= (1<<PORTB0);
			percent = 60;
			speed = 0;
			move_worm(percent, speed);
			while (info_ptr->wormCom != 'j') {
					if(serial_input_available()){
     7ba:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     7be:	88 23       	and	r24, r24
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <input+0x2c6>
     7c2:	5b c0       	rjmp	.+182    	; 0x87a <input+0x37c>
						in = fgetc(stdin);
     7c4:	f5 01       	movw	r30, r10
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	0e 94 01 0c 	call	0x1802	; 0x1802 <fgetc>
						//char buffer[18];
						if (in == ' '){
     7ce:	80 32       	cpi	r24, 0x20	; 32
     7d0:	79 f4       	brne	.+30     	; 0x7f0 <input+0x2f2>
							fputs("Worm off\n", stdout);
     7d2:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <__iob+0x2>
     7d6:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <__iob+0x3>
     7da:	49 e0       	ldi	r20, 0x09	; 9
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	87 e4       	ldi	r24, 0x47	; 71
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 a5 0c 	call	0x194a	; 0x194a <fwrite>
							worm_off();
     7ea:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <worm_off>
							break;
     7ee:	56 c0       	rjmp	.+172    	; 0x89c <input+0x39e>
						} else if (in == 'k'){
     7f0:	8b 36       	cpi	r24, 0x6B	; 107
     7f2:	11 f5       	brne	.+68     	; 0x838 <input+0x33a>
							if ((percent + 10) < 100){
     7f4:	8d 2d       	mov	r24, r13
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0a 96       	adiw	r24, 0x0a	; 10
     7fa:	84 36       	cpi	r24, 0x64	; 100
     7fc:	91 05       	cpc	r25, r1
     7fe:	ec f5       	brge	.+122    	; 0x87a <input+0x37c>
								percent += 10;
     800:	fa e0       	ldi	r31, 0x0A	; 10
     802:	df 0e       	add	r13, r31
								sprintf(buffer, "Worm speed %d\n", percent);
     804:	1f 92       	push	r1
     806:	df 92       	push	r13
     808:	9f 92       	push	r9
     80a:	8f 92       	push	r8
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	8c 0f       	add	r24, r28
     812:	9d 1f       	adc	r25, r29
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
								fputs(buffer, stdout);
     81c:	f5 01       	movw	r30, r10
     81e:	62 81       	ldd	r22, Z+2	; 0x02
     820:	73 81       	ldd	r23, Z+3	; 0x03
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	21 c0       	rjmp	.+66     	; 0x87a <input+0x37c>
							}
						} else if ( in == 'j'){
     838:	8a 36       	cpi	r24, 0x6A	; 106
     83a:	f9 f4       	brne	.+62     	; 0x87a <input+0x37c>
							if ((percent -10) >=0){
     83c:	8d 2d       	mov	r24, r13
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0a 97       	sbiw	r24, 0x0a	; 10
     842:	da f0       	brmi	.+54     	; 0x87a <input+0x37c>
								percent -= 10;
     844:	f6 ef       	ldi	r31, 0xF6	; 246
     846:	df 0e       	add	r13, r31
								sprintf(buffer, "Worm speed %d\n", percent);
     848:	1f 92       	push	r1
     84a:	df 92       	push	r13
     84c:	9f 92       	push	r9
     84e:	8f 92       	push	r8
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	8c 0f       	add	r24, r28
     856:	9d 1f       	adc	r25, r29
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
								fputs(buffer, stdout);
     860:	f5 01       	movw	r30, r10
     862:	62 81       	ldd	r22, Z+2	; 0x02
     864:	73 81       	ldd	r23, Z+3	; 0x03
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
							}
						}
					}
					
					if (PINB & (1<<PINB1)){
     87a:	19 9b       	sbis	0x03, 1	; 3
     87c:	06 c0       	rjmp	.+12     	; 0x88a <input+0x38c>
							info_ptr->wormCom = 'j';
     87e:	8a e6       	ldi	r24, 0x6A	; 106
     880:	f8 01       	movw	r30, r16
     882:	82 87       	std	Z+10, r24	; 0x0a
							worm_off();
     884:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <worm_off>
							break;
     888:	09 c0       	rjmp	.+18     	; 0x89c <input+0x39e>
					}
					
					move_worm(percent, speed);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	8d 2d       	mov	r24, r13
     88e:	0e 94 ef 09 	call	0x13de	; 0x13de <move_worm>
			/* move winch backwards	*/
			PORTB |= (1<<PORTB0);
			percent = 60;
			speed = 0;
			move_worm(percent, speed);
			while (info_ptr->wormCom != 'j') {
     892:	f8 01       	movw	r30, r16
     894:	82 85       	ldd	r24, Z+10	; 0x0a
     896:	8a 36       	cpi	r24, 0x6A	; 106
     898:	09 f0       	breq	.+2      	; 0x89c <input+0x39e>
     89a:	8f cf       	rjmp	.-226    	; 0x7ba <input+0x2bc>
							break;
					}
					
					move_worm(percent, speed);
			}
			PORTB &= ~(1<<PORTB0);
     89c:	28 98       	cbi	0x05, 0	; 5
			break;
     89e:	bc c0       	rjmp	.+376    	; 0xa18 <__stack+0x119>
		case 'k' : 
			/* move winch forwards	*/
			percent = 60;
			speed = 1;
			PORTB |= (1<<PORTB0);
     8a0:	28 9a       	sbi	0x05, 0	; 5
			move_worm(percent, speed);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	8c e3       	ldi	r24, 0x3C	; 60
     8a6:	0e 94 ef 09 	call	0x13de	; 0x13de <move_worm>
			while (info_ptr->wormCom != 'k') {
     8aa:	f8 01       	movw	r30, r16
     8ac:	82 85       	ldd	r24, Z+10	; 0x0a
     8ae:	8b 36       	cpi	r24, 0x6B	; 107
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <input+0x3b6>
     8b2:	81 c0       	rjmp	.+258    	; 0x9b6 <__stack+0xb7>
     8b4:	0f 2e       	mov	r0, r31
     8b6:	fc e3       	ldi	r31, 0x3C	; 60
     8b8:	df 2e       	mov	r13, r31
     8ba:	f0 2d       	mov	r31, r0
				if(serial_input_available()){
					in = fgetc(stdin);
     8bc:	0f 2e       	mov	r0, r31
     8be:	ff ec       	ldi	r31, 0xCF	; 207
     8c0:	af 2e       	mov	r10, r31
     8c2:	f2 e0       	ldi	r31, 0x02	; 2
     8c4:	bf 2e       	mov	r11, r31
     8c6:	f0 2d       	mov	r31, r0
							fputs(buffer, stdout);
						}
					} else if (in == 'j'){
						if ((percent -10) >=0){
							percent -= 10;
							sprintf(buffer, "Worm speed %d\n", percent);
     8c8:	0f 2e       	mov	r0, r31
     8ca:	f1 e5       	ldi	r31, 0x51	; 81
     8cc:	8f 2e       	mov	r8, r31
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	9f 2e       	mov	r9, r31
     8d2:	f0 2d       	mov	r31, r0
			percent = 60;
			speed = 1;
			PORTB |= (1<<PORTB0);
			move_worm(percent, speed);
			while (info_ptr->wormCom != 'k') {
				if(serial_input_available()){
     8d4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     8d8:	88 23       	and	r24, r24
     8da:	09 f4       	brne	.+2      	; 0x8de <input+0x3e0>
     8dc:	5b c0       	rjmp	.+182    	; 0x994 <__stack+0x95>
					in = fgetc(stdin);
     8de:	f5 01       	movw	r30, r10
     8e0:	80 81       	ld	r24, Z
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	0e 94 01 0c 	call	0x1802	; 0x1802 <fgetc>
					if (in == ' '){
     8e8:	80 32       	cpi	r24, 0x20	; 32
     8ea:	79 f4       	brne	.+30     	; 0x90a <__stack+0xb>
						fputs("Worm off\n", stdout);
     8ec:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <__iob+0x2>
     8f0:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <__iob+0x3>
     8f4:	49 e0       	ldi	r20, 0x09	; 9
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	87 e4       	ldi	r24, 0x47	; 71
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 a5 0c 	call	0x194a	; 0x194a <fwrite>
						worm_off();
     904:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <worm_off>
						break;
     908:	56 c0       	rjmp	.+172    	; 0x9b6 <__stack+0xb7>
					} else if (in == 'k'){
     90a:	8b 36       	cpi	r24, 0x6B	; 107
     90c:	11 f5       	brne	.+68     	; 0x952 <__stack+0x53>
						if ((percent + 10) < 100){
     90e:	8d 2d       	mov	r24, r13
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0a 96       	adiw	r24, 0x0a	; 10
     914:	84 36       	cpi	r24, 0x64	; 100
     916:	91 05       	cpc	r25, r1
     918:	ec f5       	brge	.+122    	; 0x994 <__stack+0x95>
							percent += 10;
     91a:	fa e0       	ldi	r31, 0x0A	; 10
     91c:	df 0e       	add	r13, r31
							sprintf(buffer, "Worm speed %d\n", percent);
     91e:	1f 92       	push	r1
     920:	df 92       	push	r13
     922:	9f 92       	push	r9
     924:	8f 92       	push	r8
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	8c 0f       	add	r24, r28
     92c:	9d 1f       	adc	r25, r29
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
							fputs(buffer, stdout);
     936:	f5 01       	movw	r30, r10
     938:	62 81       	ldd	r22, Z+2	; 0x02
     93a:	73 81       	ldd	r23, Z+3	; 0x03
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	21 c0       	rjmp	.+66     	; 0x994 <__stack+0x95>
						}
					} else if (in == 'j'){
     952:	8a 36       	cpi	r24, 0x6A	; 106
     954:	f9 f4       	brne	.+62     	; 0x994 <__stack+0x95>
						if ((percent -10) >=0){
     956:	8d 2d       	mov	r24, r13
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0a 97       	sbiw	r24, 0x0a	; 10
     95c:	da f0       	brmi	.+54     	; 0x994 <__stack+0x95>
							percent -= 10;
     95e:	f6 ef       	ldi	r31, 0xF6	; 246
     960:	df 0e       	add	r13, r31
							sprintf(buffer, "Worm speed %d\n", percent);
     962:	1f 92       	push	r1
     964:	df 92       	push	r13
     966:	9f 92       	push	r9
     968:	8f 92       	push	r8
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	8c 0f       	add	r24, r28
     970:	9d 1f       	adc	r25, r29
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
							fputs(buffer, stdout);
     97a:	f5 01       	movw	r30, r10
     97c:	62 81       	ldd	r22, Z+2	; 0x02
     97e:	73 81       	ldd	r23, Z+3	; 0x03
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
						}
					}
				}
				
				if (PINB & (1<<PINB1)){
     994:	19 9b       	sbis	0x03, 1	; 3
     996:	06 c0       	rjmp	.+12     	; 0x9a4 <__stack+0xa5>
					info_ptr->wormCom = 'k';
     998:	8b e6       	ldi	r24, 0x6B	; 107
     99a:	f8 01       	movw	r30, r16
     99c:	82 87       	std	Z+10, r24	; 0x0a
					worm_off();
     99e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <worm_off>
					break;
     9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__stack+0xb7>
				}
				
				move_worm(percent, speed);
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	8d 2d       	mov	r24, r13
     9a8:	0e 94 ef 09 	call	0x13de	; 0x13de <move_worm>
			/* move winch forwards	*/
			percent = 60;
			speed = 1;
			PORTB |= (1<<PORTB0);
			move_worm(percent, speed);
			while (info_ptr->wormCom != 'k') {
     9ac:	f8 01       	movw	r30, r16
     9ae:	82 85       	ldd	r24, Z+10	; 0x0a
     9b0:	8b 36       	cpi	r24, 0x6B	; 107
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	8f cf       	rjmp	.-226    	; 0x8d4 <input+0x3d6>
					break;
				}
				
				move_worm(percent, speed);
			}
			PORTB &= ~(1<<PORTB0);
     9b6:	28 98       	cbi	0x05, 0	; 5
			break;
     9b8:	2f c0       	rjmp	.+94     	; 0xa18 <__stack+0x119>
			//fputc('?', stdout);
			//info_ptr->stopCommand = 1;
			break;
		case 'o':
			// restart
			fputs("started\n", stdout);
     9ba:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <__iob+0x2>
     9be:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <__iob+0x3>
     9c2:	48 e0       	ldi	r20, 0x08	; 8
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e6       	ldi	r24, 0x60	; 96
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 a5 0c 	call	0x194a	; 0x194a <fwrite>
			break;
     9d2:	22 c0       	rjmp	.+68     	; 0xa18 <__stack+0x119>
		default:
			fputs("stupid.\n", stdout);
     9d4:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <__iob+0x2>
     9d8:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <__iob+0x3>
     9dc:	48 e0       	ldi	r20, 0x08	; 8
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	89 e6       	ldi	r24, 0x69	; 105
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 a5 0c 	call	0x194a	; 0x194a <fwrite>
			++info_ptr->stupidCount;
     9ec:	f8 01       	movw	r30, r16
     9ee:	81 85       	ldd	r24, Z+9	; 0x09
     9f0:	8f 5f       	subi	r24, 0xFF	; 255
     9f2:	81 87       	std	Z+9, r24	; 0x09
			if (info_ptr->stupidCount >= 10){
     9f4:	8a 30       	cpi	r24, 0x0A	; 10
     9f6:	80 f0       	brcs	.+32     	; 0xa18 <__stack+0x119>
					fputc('H', stdout);
     9f8:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <__iob+0x2>
     9fc:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <__iob+0x3>
     a00:	88 e4       	ldi	r24, 0x48	; 72
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
					custom_delay(1000);
     a08:	68 ee       	ldi	r22, 0xE8	; 232
     a0a:	73 e0       	ldi	r23, 0x03	; 3
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
					info_ptr->stupidCount = 0;
     a14:	f8 01       	movw	r30, r16
     a16:	11 86       	std	Z+9, r1	; 0x09
			}
			break;
	}
	/* echo character to next micro */
	fputc(c, stdout);
     a18:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <__iob+0x2>
     a1c:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <__iob+0x3>
     a20:	c7 01       	movw	r24, r14
     a22:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
	
}
     a26:	64 96       	adiw	r28, 0x14	; 20
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	9f 90       	pop	r9
     a46:	8f 90       	pop	r8
     a48:	08 95       	ret

00000a4a <main>:
void initialise(info* info_ptr);
void input(info* info_ptr);


/* functional code	*/
int main(void) {
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	e2 97       	sbiw	r28, 0x32	; 50
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
	
	info* info_ptr = makeInfo();
     a5e:	0e 94 11 02 	call	0x422	; 0x422 <makeInfo>
     a62:	8c 01       	movw	r16, r24
	initialise(info_ptr);
     a64:	0e 94 16 02 	call	0x42c	; 0x42c <initialise>
	DDRA |= (1<<PORTA0);
     a68:	08 9a       	sbi	0x01, 0	; 1
	PORTA |= (1<<PORTA0);
     a6a:	10 9a       	sbi	0x02, 0	; 2
	while(1) {
		if(serial_input_available()){
			input(info_ptr);
		}
		if (info_ptr->motorAct){
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     a6c:	33 24       	eor	r3, r3
     a6e:	3a 94       	dec	r3
     a70:	0f 2e       	mov	r0, r31
     a72:	f4 e6       	ldi	r31, 0x64	; 100
     a74:	af 2e       	mov	r10, r31
     a76:	b1 2c       	mov	r11, r1
     a78:	f0 2d       	mov	r31, r0
     a7a:	0f 2e       	mov	r0, r31
     a7c:	f3 eb       	ldi	r31, 0xB3	; 179
     a7e:	8f 2e       	mov	r8, r31
     a80:	91 2c       	mov	r9, r1
     a82:	f0 2d       	mov	r31, r0
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     a84:	0f 2e       	mov	r0, r31
     a86:	f4 eb       	ldi	r31, 0xB4	; 180
     a88:	6f 2e       	mov	r6, r31
     a8a:	71 2c       	mov	r7, r1
     a8c:	f0 2d       	mov	r31, r0
				//}
				//step(info_ptr);
			//}
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     a8e:	2e 01       	movw	r4, r28
     a90:	2f e1       	ldi	r18, 0x1F	; 31
     a92:	42 0e       	add	r4, r18
     a94:	51 1c       	adc	r5, r1
			fputs(buffer, stdout);
     a96:	0f 2e       	mov	r0, r31
     a98:	ff ec       	ldi	r31, 0xCF	; 207
     a9a:	cf 2e       	mov	r12, r31
     a9c:	f2 e0       	ldi	r31, 0x02	; 2
     a9e:	df 2e       	mov	r13, r31
     aa0:	f0 2d       	mov	r31, r0
	initialise(info_ptr);
	DDRA |= (1<<PORTA0);
	PORTA |= (1<<PORTA0);
	
	while(1) {
		if(serial_input_available()){
     aa2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     aa6:	88 23       	and	r24, r24
     aa8:	19 f0       	breq	.+6      	; 0xab0 <main+0x66>
			input(info_ptr);
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 7f 02 	call	0x4fe	; 0x4fe <input>
		}
		if (info_ptr->motorAct){
     ab0:	f8 01       	movw	r30, r16
     ab2:	80 85       	ldd	r24, Z+8	; 0x08
     ab4:	88 23       	and	r24, r24
     ab6:	b1 f0       	breq	.+44     	; 0xae4 <main+0x9a>
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     ab8:	80 81       	ld	r24, Z
     aba:	38 9e       	mul	r3, r24
     abc:	c0 01       	movw	r24, r0
     abe:	11 24       	eor	r1, r1
     ac0:	b5 01       	movw	r22, r10
     ac2:	0e 94 15 0a 	call	0x142a	; 0x142a <__divmodhi4>
     ac6:	f4 01       	movw	r30, r8
     ac8:	60 83       	st	Z, r22
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     aca:	f8 01       	movw	r30, r16
     acc:	80 81       	ld	r24, Z
     ace:	38 9e       	mul	r3, r24
     ad0:	c0 01       	movw	r24, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	b5 01       	movw	r22, r10
     ad6:	0e 94 15 0a 	call	0x142a	; 0x142a <__divmodhi4>
     ada:	f3 01       	movw	r30, r6
     adc:	60 83       	st	Z, r22
			info_ptr->motorAct = 0;
     ade:	f8 01       	movw	r30, r16
     ae0:	10 86       	std	Z+8, r1	; 0x08
			info_ptr->stupidCount = 0;
     ae2:	11 86       	std	Z+9, r1	; 0x09
		}
		if (info_ptr->stopCommand){
     ae4:	f8 01       	movw	r30, r16
     ae6:	85 81       	ldd	r24, Z+5	; 0x05
     ae8:	88 23       	and	r24, r24
     aea:	91 f0       	breq	.+36     	; 0xb10 <main+0xc6>
			/* stop everything */
			PORTD &= ~(1<<PORTD2);
     aec:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     aee:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     af0:	46 98       	cbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     af2:	47 98       	cbi	0x08, 7	; 8
			//PORTC &= ~(1<<PORTC2);		/*	winch off	*/
			//PORTC &= ~(1<<PORTC5);		/*	winch off	*/
			if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     af4:	84 81       	ldd	r24, Z+4	; 0x04
     af6:	81 34       	cpi	r24, 0x41	; 65
     af8:	11 f0       	breq	.+4      	; 0xafe <main+0xb4>
     afa:	82 35       	cpi	r24, 0x52	; 82
     afc:	21 f4       	brne	.+8      	; 0xb06 <main+0xbc>
				hold_step();
     afe:	0e 94 90 06 	call	0xd20	; 0xd20 <hold_step>
				info_ptr->stepAct = '\0';
     b02:	f8 01       	movw	r30, r16
     b04:	14 82       	std	Z+4, r1	; 0x04
			}
			info_ptr->camera = 0;
     b06:	f8 01       	movw	r30, r16
     b08:	16 82       	std	Z+6, r1	; 0x06
			info_ptr->stopCommand = 0;
     b0a:	15 82       	std	Z+5, r1	; 0x05
			info_ptr->stupidCount = 0;
     b0c:	11 86       	std	Z+9, r1	; 0x09
     b0e:	d5 c0       	rjmp	.+426    	; 0xcba <main+0x270>
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     b10:	f8 01       	movw	r30, r16
     b12:	84 81       	ldd	r24, Z+4	; 0x04
     b14:	81 34       	cpi	r24, 0x41	; 65
     b16:	19 f0       	breq	.+6      	; 0xb1e <main+0xd4>
     b18:	82 35       	cpi	r24, 0x52	; 82
     b1a:	09 f0       	breq	.+2      	; 0xb1e <main+0xd4>
     b1c:	c6 c0       	rjmp	.+396    	; 0xcaa <main+0x260>
								//break;
						//}
				//}
				//step(info_ptr);
			//}
			int16_t current = current_step();
     b1e:	0e 94 8b 06 	call	0xd16	; 0xd16 <current_step>
     b22:	7c 01       	movw	r14, r24
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     b24:	f8 01       	movw	r30, r16
     b26:	84 81       	ldd	r24, Z+4	; 0x04
     b28:	1f 92       	push	r1
     b2a:	8f 93       	push	r24
     b2c:	81 81       	ldd	r24, Z+1	; 0x01
     b2e:	28 2f       	mov	r18, r24
     b30:	08 2e       	mov	r0, r24
     b32:	00 0c       	add	r0, r0
     b34:	33 0b       	sbc	r19, r19
     b36:	3f 93       	push	r19
     b38:	8f 93       	push	r24
     b3a:	ff 92       	push	r15
     b3c:	ef 92       	push	r14
     b3e:	82 e7       	ldi	r24, 0x72	; 114
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	9f 93       	push	r25
     b44:	8f 93       	push	r24
     b46:	5f 92       	push	r5
     b48:	4f 92       	push	r4
     b4a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
			fputs(buffer, stdout);
     b4e:	f6 01       	movw	r30, r12
     b50:	62 81       	ldd	r22, Z+2	; 0x02
     b52:	73 81       	ldd	r23, Z+3	; 0x03
     b54:	c2 01       	movw	r24, r4
     b56:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	f8 01       	movw	r30, r16
     b66:	81 81       	ldd	r24, Z+1	; 0x01
     b68:	88 23       	and	r24, r24
     b6a:	dc f4       	brge	.+54     	; 0xba2 <main+0x158>
     b6c:	84 81       	ldd	r24, Z+4	; 0x04
     b6e:	82 35       	cpi	r24, 0x52	; 82
     b70:	c1 f4       	brne	.+48     	; 0xba2 <main+0x158>
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	e8 16       	cp	r14, r24
     b78:	f9 06       	cpc	r15, r25
     b7a:	a8 f1       	brcs	.+106    	; 0xbe6 <main+0x19c>
					step(info_ptr);
     b7c:	c8 01       	movw	r24, r16
     b7e:	0e 94 36 09 	call	0x126c	; 0x126c <step>
					current = current_step();
     b82:	0e 94 8b 06 	call	0xd16	; 0xd16 <current_step>
     b86:	7c 01       	movw	r14, r24
			//}
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     b88:	f8 01       	movw	r30, r16
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	88 23       	and	r24, r24
     b8e:	4c f4       	brge	.+18     	; 0xba2 <main+0x158>
     b90:	84 81       	ldd	r24, Z+4	; 0x04
     b92:	82 35       	cpi	r24, 0x52	; 82
     b94:	31 f4       	brne	.+12     	; 0xba2 <main+0x158>
     b96:	82 81       	ldd	r24, Z+2	; 0x02
     b98:	93 81       	ldd	r25, Z+3	; 0x03
     b9a:	e8 16       	cp	r14, r24
     b9c:	f9 06       	cpc	r15, r25
     b9e:	70 f7       	brcc	.-36     	; 0xb7c <main+0x132>
     ba0:	22 c0       	rjmp	.+68     	; 0xbe6 <main+0x19c>
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     ba2:	f8 01       	movw	r30, r16
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
     ba6:	18 16       	cp	r1, r24
     ba8:	c4 f4       	brge	.+48     	; 0xbda <main+0x190>
     baa:	84 81       	ldd	r24, Z+4	; 0x04
     bac:	81 34       	cpi	r24, 0x41	; 65
     bae:	a9 f4       	brne	.+42     	; 0xbda <main+0x190>
     bb0:	1e 14       	cp	r1, r14
     bb2:	1f 04       	cpc	r1, r15
     bb4:	0c f4       	brge	.+2      	; 0xbb8 <main+0x16e>
     bb6:	91 c0       	rjmp	.+290    	; 0xcda <main+0x290>
				step(info_ptr);
     bb8:	c8 01       	movw	r24, r16
     bba:	0e 94 36 09 	call	0x126c	; 0x126c <step>
				current = current_step();
     bbe:	0e 94 8b 06 	call	0xd16	; 0xd16 <current_step>
     bc2:	7c 01       	movw	r14, r24
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     bc4:	f8 01       	movw	r30, r16
     bc6:	81 81       	ldd	r24, Z+1	; 0x01
     bc8:	18 16       	cp	r1, r24
     bca:	3c f4       	brge	.+14     	; 0xbda <main+0x190>
     bcc:	84 81       	ldd	r24, Z+4	; 0x04
     bce:	81 34       	cpi	r24, 0x41	; 65
     bd0:	21 f4       	brne	.+8      	; 0xbda <main+0x190>
     bd2:	1e 14       	cp	r1, r14
     bd4:	1f 04       	cpc	r1, r15
     bd6:	84 f7       	brge	.-32     	; 0xbb8 <main+0x16e>
     bd8:	80 c0       	rjmp	.+256    	; 0xcda <main+0x290>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     bda:	f8 01       	movw	r30, r16
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	e8 16       	cp	r14, r24
     be2:	f9 06       	cpc	r15, r25
     be4:	50 f5       	brcc	.+84     	; 0xc3a <main+0x1f0>
     be6:	ff 20       	and	r15, r15
     be8:	44 f1       	brlt	.+80     	; 0xc3a <main+0x1f0>
					if (serial_input_available()){
     bea:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     bee:	88 23       	and	r24, r24
     bf0:	b9 f0       	breq	.+46     	; 0xc20 <main+0x1d6>
						char in = fgetc(stdin);
     bf2:	f6 01       	movw	r30, r12
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	0e 94 01 0c 	call	0x1802	; 0x1802 <fgetc>
						if (in == ' '){
     bfc:	80 32       	cpi	r24, 0x20	; 32
     bfe:	81 f4       	brne	.+32     	; 0xc20 <main+0x1d6>
							info_ptr->stepAct = '\0';
     c00:	f8 01       	movw	r30, r16
     c02:	14 82       	std	Z+4, r1	; 0x04
							hold_step();
     c04:	0e 94 90 06 	call	0xd20	; 0xd20 <hold_step>
							fputs("canceled\n", stdout);
     c08:	f6 01       	movw	r30, r12
     c0a:	22 81       	ldd	r18, Z+2	; 0x02
     c0c:	33 81       	ldd	r19, Z+3	; 0x03
     c0e:	49 e0       	ldi	r20, 0x09	; 9
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	82 e8       	ldi	r24, 0x82	; 130
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 a5 0c 	call	0x194a	; 0x194a <fwrite>
							break;
     c1e:	0d c0       	rjmp	.+26     	; 0xc3a <main+0x1f0>
						}
					}
					step(info_ptr);
     c20:	c8 01       	movw	r24, r16
     c22:	0e 94 36 09 	call	0x126c	; 0x126c <step>
					current = current_step();				
     c26:	0e 94 8b 06 	call	0xd16	; 0xd16 <current_step>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     c2a:	f8 01       	movw	r30, r16
     c2c:	22 81       	ldd	r18, Z+2	; 0x02
     c2e:	33 81       	ldd	r19, Z+3	; 0x03
     c30:	82 17       	cp	r24, r18
     c32:	93 07       	cpc	r25, r19
     c34:	10 f4       	brcc	.+4      	; 0xc3a <main+0x1f0>
     c36:	99 23       	and	r25, r25
     c38:	c4 f6       	brge	.-80     	; 0xbea <main+0x1a0>
					step(info_ptr);
					current = current_step();				
				}
			/*************************************************************/
			//}
			current = current_step();
     c3a:	0e 94 8b 06 	call	0xd16	; 0xd16 <current_step>
			char buffer1[30];
			sprintf(buffer1, "step POS: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     c3e:	f8 01       	movw	r30, r16
     c40:	24 81       	ldd	r18, Z+4	; 0x04
     c42:	1f 92       	push	r1
     c44:	2f 93       	push	r18
     c46:	21 81       	ldd	r18, Z+1	; 0x01
     c48:	42 2f       	mov	r20, r18
     c4a:	02 2e       	mov	r0, r18
     c4c:	00 0c       	add	r0, r0
     c4e:	55 0b       	sbc	r21, r21
     c50:	5f 93       	push	r21
     c52:	2f 93       	push	r18
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	8c e8       	ldi	r24, 0x8C	; 140
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	9f 93       	push	r25
     c5e:	8f 93       	push	r24
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	8c 0f       	add	r24, r28
     c66:	9d 1f       	adc	r25, r29
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <sprintf>
			fputs(buffer1, stdout);
     c70:	f6 01       	movw	r30, r12
     c72:	62 81       	ldd	r22, Z+2	; 0x02
     c74:	73 81       	ldd	r23, Z+3	; 0x03
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <fputs>
			/****************************************************************/
			fputs("end step\n", stdout);
     c7e:	f6 01       	movw	r30, r12
     c80:	22 81       	ldd	r18, Z+2	; 0x02
     c82:	33 81       	ldd	r19, Z+3	; 0x03
     c84:	49 e0       	ldi	r20, 0x09	; 9
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	80 ea       	ldi	r24, 0xA0	; 160
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 a5 0c 	call	0x194a	; 0x194a <fwrite>
			info_ptr->stepAct = '\0';
     c94:	f8 01       	movw	r30, r16
     c96:	14 82       	std	Z+4, r1	; 0x04
			info_ptr->stupidCount = 0;
     c98:	11 86       	std	Z+9, r1	; 0x09
			hold_step();
     c9a:	0e 94 90 06 	call	0xd20	; 0xd20 <hold_step>
			}
			info_ptr->camera = 0;
			info_ptr->stopCommand = 0;
			info_ptr->stupidCount = 0;
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	08 c0       	rjmp	.+16     	; 0xcba <main+0x270>
			/****************************************************************/
			fputs("end step\n", stdout);
			info_ptr->stepAct = '\0';
			info_ptr->stupidCount = 0;
			hold_step();
		} else if (info_ptr->camera != 0){
     caa:	f8 01       	movw	r30, r16
     cac:	86 81       	ldd	r24, Z+6	; 0x06
     cae:	88 23       	and	r24, r24
     cb0:	21 f0       	breq	.+8      	; 0xcba <main+0x270>
			uint8_t pos = OCR0A;
     cb2:	97 b5       	in	r25, 0x27	; 39
			pos += info_ptr->camera;
     cb4:	89 0f       	add	r24, r25
					pos = 0;
			} else if (pos > 255){
					pos = 255;
			}
			/*	adjust camera position */
			OCR0A = pos;
     cb6:	87 bd       	out	0x27, r24	; 39
			info_ptr->stupidCount = 0;
     cb8:	11 86       	std	Z+9, r1	; 0x09
		}
		
		PORTB |= (1<<PORTB0);
     cba:	28 9a       	sbi	0x05, 0	; 5
		custom_delay(30);
     cbc:	6e e1       	ldi	r22, 0x1E	; 30
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
		if (PINB & (1<<PINB1)){
     cc8:	19 9b       	sbis	0x03, 1	; 3
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <main+0x288>
			worm_off();
     ccc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <worm_off>
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <main+0x28c>
		} else {
			/*	worm gear hasn't hit button and is free to use in both directions	*/
			info_ptr->wormCom = '\0';
     cd2:	f8 01       	movw	r30, r16
     cd4:	12 86       	std	Z+10, r1	; 0x0a
				
		}
		PORTB &= ~(1<<PORTB0);
     cd6:	28 98       	cbi	0x05, 0	; 5
		//TODO:: Please write your application code
	}
     cd8:	e4 ce       	rjmp	.-568    	; 0xaa2 <main+0x58>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     cda:	f8 01       	movw	r30, r16
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	e8 16       	cp	r14, r24
     ce2:	f9 06       	cpc	r15, r25
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <main+0x29e>
     ce6:	81 cf       	rjmp	.-254    	; 0xbea <main+0x1a0>
     ce8:	a8 cf       	rjmp	.-176    	; 0xc3a <main+0x1f0>

00000cea <init_step>:
 uint8_t RED;				// port for stepper red wire


 void init_step(void){
	/* sets the ports for the stepper motor and initializes the steps and phase	*/
	steps = 0;
     cea:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <steps+0x1>
     cee:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <steps>
	phase = 0;
     cf2:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <phase>
	//GRE = PORTC5;
	//YEL = PORTC2;
	//RED = PORTC3;
	
	//changing one
	BLU = PORTC5;
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <BLU>
	GRE = PORTC4;
     cfc:	84 e0       	ldi	r24, 0x04	; 4
     cfe:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <GRE>
	YEL = PORTC3;
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <YEL>
	RED = PORTC2;
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <RED>
	////BLU = PORTC2;
	////GRE = PORTC3;
	////YEL = PORTC4;
	////RED = PORTC5;

	DDRC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     d0e:	87 b1       	in	r24, 0x07	; 7
     d10:	8c 63       	ori	r24, 0x3C	; 60
     d12:	87 b9       	out	0x07, r24	; 7
     d14:	08 95       	ret

00000d16 <current_step>:
	*	can be modified to return an angle from origin using gear
	*	ratio
	*/
	int16_t returnValue = steps;
	return returnValue;
 }
     d16:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <steps>
     d1a:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <steps+0x1>
     d1e:	08 95       	ret

00000d20 <hold_step>:

void hold_step(void){
	
	PORTC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     d20:	38 b1       	in	r19, 0x08	; 8
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	bc 01       	movw	r22, r24
     d28:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <hold_step+0x12>
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <hold_step+0xe>
     d36:	ac 01       	movw	r20, r24
     d38:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <hold_step+0x22>
     d3e:	44 0f       	add	r20, r20
     d40:	55 1f       	adc	r21, r21
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <hold_step+0x1e>
     d46:	46 2b       	or	r20, r22
     d48:	43 2b       	or	r20, r19
     d4a:	9c 01       	movw	r18, r24
     d4c:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <hold_step+0x36>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <hold_step+0x32>
     d5a:	24 2b       	or	r18, r20
     d5c:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <hold_step+0x46>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <hold_step+0x42>
     d6a:	82 2b       	or	r24, r18
     d6c:	88 b9       	out	0x08, r24	; 8
     d6e:	08 95       	ret

00000d70 <release_step>:
	
}

void release_step(void){
	
	PORTC &= ~((1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED));
     d70:	28 b1       	in	r18, 0x08	; 8
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	bc 01       	movw	r22, r24
     d78:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <release_step+0x12>
     d7e:	66 0f       	add	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <release_step+0xe>
     d86:	ac 01       	movw	r20, r24
     d88:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <release_step+0x22>
     d8e:	44 0f       	add	r20, r20
     d90:	55 1f       	adc	r21, r21
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <release_step+0x1e>
     d96:	36 2f       	mov	r19, r22
     d98:	34 2b       	or	r19, r20
     d9a:	ac 01       	movw	r20, r24
     d9c:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <release_step+0x36>
     da2:	44 0f       	add	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <release_step+0x32>
     daa:	43 2b       	or	r20, r19
     dac:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <release_step+0x46>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <release_step+0x42>
     dba:	84 2b       	or	r24, r20
     dbc:	80 95       	com	r24
     dbe:	82 23       	and	r24, r18
     dc0:	88 b9       	out	0x08, r24	; 8
     dc2:	08 95       	ret

00000dc4 <decrement_step>:
 }

/**************************************************************************************swapped increment and decrement so start with claw closed ****************/
 void decrement_step(void){
	/* the motor has turned one step, increase the count */
	--steps;
     dc4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <steps>
     dc8:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <steps+0x1>
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <steps+0x1>
     dd2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <steps>
     dd6:	08 95       	ret

00000dd8 <increment_step>:
 }

 void increment_step(void){
	/* the motor has turned back one step, decrease the count */
	++steps;
     dd8:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <steps>
     ddc:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <steps+0x1>
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <steps+0x1>
     de6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <steps>
     dea:	08 95       	ret

00000dec <step_clockwise>:
 }
/**************************************************************************************************************************************************************/


 void step_clockwise(uint8_t time_on){
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */

	 uint32_t current_time;
	 
	 if(phase == 0){
     dfa:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <phase>
     dfe:	81 11       	cpse	r24, r1
     e00:	42 c0       	rjmp	.+132    	; 0xe86 <step_clockwise+0x9a>
		 current_time = get_tcnt1_ticks();
     e02:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e06:	6b 01       	movw	r12, r22
     e08:	7c 01       	movw	r14, r24
     e0a:	cc 0e       	add	r12, r28
     e0c:	d1 1c       	adc	r13, r1
     e0e:	e1 1c       	adc	r14, r1
     e10:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<YEL)|(1<<GRE);
     e12:	c1 e0       	ldi	r28, 0x01	; 1
     e14:	d0 e0       	ldi	r29, 0x00	; 0

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e16:	2a c0       	rjmp	.+84     	; 0xe6c <step_clockwise+0x80>
			 PORTC |= (1<<YEL)|(1<<GRE);
     e18:	98 b1       	in	r25, 0x08	; 8
     e1a:	ae 01       	movw	r20, r28
     e1c:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <step_clockwise+0x3a>
     e22:	44 0f       	add	r20, r20
     e24:	55 1f       	adc	r21, r21
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <step_clockwise+0x36>
     e2a:	9e 01       	movw	r18, r28
     e2c:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <step_clockwise+0x4a>
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <step_clockwise+0x46>
     e3a:	84 2f       	mov	r24, r20
     e3c:	82 2b       	or	r24, r18
     e3e:	89 2b       	or	r24, r25
     e40:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
     e42:	28 b1       	in	r18, 0x08	; 8
     e44:	ae 01       	movw	r20, r28
     e46:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <step_clockwise+0x64>
     e4c:	44 0f       	add	r20, r20
     e4e:	55 1f       	adc	r21, r21
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <step_clockwise+0x60>
     e54:	ce 01       	movw	r24, r28
     e56:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <step_clockwise+0x74>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <step_clockwise+0x70>
     e64:	84 2b       	or	r24, r20
     e66:	80 95       	com	r24
     e68:	82 23       	and	r24, r18
     e6a:	88 b9       	out	0x08, r24	; 8

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e6c:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
     e70:	6c 15       	cp	r22, r12
     e72:	7d 05       	cpc	r23, r13
     e74:	8e 05       	cpc	r24, r14
     e76:	9f 05       	cpc	r25, r15
     e78:	78 f2       	brcs	.-98     	; 0xe18 <step_clockwise+0x2c>
			 PORTC |= (1<<YEL)|(1<<GRE);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 ++phase;
     e7a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <phase>
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <phase>
     e84:	ca c0       	rjmp	.+404    	; 0x101a <step_clockwise+0x22e>
	 }
	 else if(phase == 1){
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	09 f0       	breq	.+2      	; 0xe8c <step_clockwise+0xa0>
     e8a:	42 c0       	rjmp	.+132    	; 0xf10 <step_clockwise+0x124>
		 current_time = get_tcnt1_ticks();
     e8c:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e90:	6b 01       	movw	r12, r22
     e92:	7c 01       	movw	r14, r24
     e94:	cc 0e       	add	r12, r28
     e96:	d1 1c       	adc	r13, r1
     e98:	e1 1c       	adc	r14, r1
     e9a:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<RED)|(1<<GRE);
     e9c:	c1 e0       	ldi	r28, 0x01	; 1
     e9e:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ea0:	2a c0       	rjmp	.+84     	; 0xef6 <step_clockwise+0x10a>
			 PORTC |= (1<<RED)|(1<<GRE);
     ea2:	98 b1       	in	r25, 0x08	; 8
     ea4:	ae 01       	movw	r20, r28
     ea6:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <step_clockwise+0xc4>
     eac:	44 0f       	add	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <step_clockwise+0xc0>
     eb4:	9e 01       	movw	r18, r28
     eb6:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <step_clockwise+0xd4>
     ebc:	22 0f       	add	r18, r18
     ebe:	33 1f       	adc	r19, r19
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <step_clockwise+0xd0>
     ec4:	84 2f       	mov	r24, r20
     ec6:	82 2b       	or	r24, r18
     ec8:	89 2b       	or	r24, r25
     eca:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
     ecc:	28 b1       	in	r18, 0x08	; 8
     ece:	ae 01       	movw	r20, r28
     ed0:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <step_clockwise+0xee>
     ed6:	44 0f       	add	r20, r20
     ed8:	55 1f       	adc	r21, r21
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <step_clockwise+0xea>
     ede:	ce 01       	movw	r24, r28
     ee0:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <step_clockwise+0xfe>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <step_clockwise+0xfa>
     eee:	84 2b       	or	r24, r20
     ef0:	80 95       	com	r24
     ef2:	82 23       	and	r24, r18
     ef4:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ef6:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
     efa:	6c 15       	cp	r22, r12
     efc:	7d 05       	cpc	r23, r13
     efe:	8e 05       	cpc	r24, r14
     f00:	9f 05       	cpc	r25, r15
     f02:	78 f2       	brcs	.-98     	; 0xea2 <step_clockwise+0xb6>
			 PORTC |= (1<<RED)|(1<<GRE);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
     f04:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <phase>
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <phase>
     f0e:	85 c0       	rjmp	.+266    	; 0x101a <step_clockwise+0x22e>
	 }
	 else if(phase == 2){
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	09 f0       	breq	.+2      	; 0xf16 <step_clockwise+0x12a>
     f14:	42 c0       	rjmp	.+132    	; 0xf9a <step_clockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
     f16:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24
     f1e:	cc 0e       	add	r12, r28
     f20:	d1 1c       	adc	r13, r1
     f22:	e1 1c       	adc	r14, r1
     f24:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
     f26:	c1 e0       	ldi	r28, 0x01	; 1
     f28:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f2a:	2a c0       	rjmp	.+84     	; 0xf80 <step_clockwise+0x194>
			 PORTC |= (1<<BLU)|(1<<RED);
     f2c:	98 b1       	in	r25, 0x08	; 8
     f2e:	ae 01       	movw	r20, r28
     f30:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <step_clockwise+0x14e>
     f36:	44 0f       	add	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <step_clockwise+0x14a>
     f3e:	9e 01       	movw	r18, r28
     f40:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <step_clockwise+0x15e>
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <step_clockwise+0x15a>
     f4e:	84 2f       	mov	r24, r20
     f50:	82 2b       	or	r24, r18
     f52:	89 2b       	or	r24, r25
     f54:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
     f56:	28 b1       	in	r18, 0x08	; 8
     f58:	ae 01       	movw	r20, r28
     f5a:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <step_clockwise+0x178>
     f60:	44 0f       	add	r20, r20
     f62:	55 1f       	adc	r21, r21
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <step_clockwise+0x174>
     f68:	ce 01       	movw	r24, r28
     f6a:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <step_clockwise+0x188>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <step_clockwise+0x184>
     f78:	84 2b       	or	r24, r20
     f7a:	80 95       	com	r24
     f7c:	82 23       	and	r24, r18
     f7e:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f80:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
     f84:	6c 15       	cp	r22, r12
     f86:	7d 05       	cpc	r23, r13
     f88:	8e 05       	cpc	r24, r14
     f8a:	9f 05       	cpc	r25, r15
     f8c:	78 f2       	brcs	.-98     	; 0xf2c <step_clockwise+0x140>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
     f8e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <phase>
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <phase>
     f98:	40 c0       	rjmp	.+128    	; 0x101a <step_clockwise+0x22e>
	 }
	 else if(phase == 3){
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	f1 f5       	brne	.+124    	; 0x101a <step_clockwise+0x22e>
		 current_time = get_tcnt1_ticks();
     f9e:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     fa2:	6b 01       	movw	r12, r22
     fa4:	7c 01       	movw	r14, r24
     fa6:	cc 0e       	add	r12, r28
     fa8:	d1 1c       	adc	r13, r1
     faa:	e1 1c       	adc	r14, r1
     fac:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
     fae:	c1 e0       	ldi	r28, 0x01	; 1
     fb0:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     fb2:	2a c0       	rjmp	.+84     	; 0x1008 <step_clockwise+0x21c>
			 PORTC |= (1<<BLU)|(1<<YEL);
     fb4:	98 b1       	in	r25, 0x08	; 8
     fb6:	ae 01       	movw	r20, r28
     fb8:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <step_clockwise+0x1d6>
     fbe:	44 0f       	add	r20, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <step_clockwise+0x1d2>
     fc6:	9e 01       	movw	r18, r28
     fc8:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <step_clockwise+0x1e6>
     fce:	22 0f       	add	r18, r18
     fd0:	33 1f       	adc	r19, r19
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <step_clockwise+0x1e2>
     fd6:	84 2f       	mov	r24, r20
     fd8:	82 2b       	or	r24, r18
     fda:	89 2b       	or	r24, r25
     fdc:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
     fde:	28 b1       	in	r18, 0x08	; 8
     fe0:	ae 01       	movw	r20, r28
     fe2:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <step_clockwise+0x200>
     fe8:	44 0f       	add	r20, r20
     fea:	55 1f       	adc	r21, r21
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <step_clockwise+0x1fc>
     ff0:	ce 01       	movw	r24, r28
     ff2:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <step_clockwise+0x210>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <step_clockwise+0x20c>
    1000:	84 2b       	or	r24, r20
    1002:	80 95       	com	r24
    1004:	82 23       	and	r24, r18
    1006:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1008:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
    100c:	6c 15       	cp	r22, r12
    100e:	7d 05       	cpc	r23, r13
    1010:	8e 05       	cpc	r24, r14
    1012:	9f 05       	cpc	r25, r15
    1014:	78 f2       	brcs	.-98     	; 0xfb4 <step_clockwise+0x1c8>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 phase = 0;
    1016:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <phase>
	 }
	 increment_step();
    101a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <increment_step>
 }
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	08 95       	ret

0000102c <step_anticlockwise>:


 void step_anticlockwise(uint8_t time_on){
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */
	
	 uint32_t current_time;

	 if(phase == 0){
    103a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <phase>
    103e:	81 11       	cpse	r24, r1
    1040:	42 c0       	rjmp	.+132    	; 0x10c6 <step_anticlockwise+0x9a>
		 current_time = get_tcnt1_ticks();
    1042:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1046:	6b 01       	movw	r12, r22
    1048:	7c 01       	movw	r14, r24
    104a:	cc 0e       	add	r12, r28
    104c:	d1 1c       	adc	r13, r1
    104e:	e1 1c       	adc	r14, r1
    1050:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
    1052:	c1 e0       	ldi	r28, 0x01	; 1
    1054:	d0 e0       	ldi	r29, 0x00	; 0
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1056:	2a c0       	rjmp	.+84     	; 0x10ac <step_anticlockwise+0x80>
			 PORTC |= (1<<BLU)|(1<<YEL);
    1058:	98 b1       	in	r25, 0x08	; 8
    105a:	ae 01       	movw	r20, r28
    105c:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <step_anticlockwise+0x3a>
    1062:	44 0f       	add	r20, r20
    1064:	55 1f       	adc	r21, r21
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <step_anticlockwise+0x36>
    106a:	9e 01       	movw	r18, r28
    106c:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <step_anticlockwise+0x4a>
    1072:	22 0f       	add	r18, r18
    1074:	33 1f       	adc	r19, r19
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <step_anticlockwise+0x46>
    107a:	84 2f       	mov	r24, r20
    107c:	82 2b       	or	r24, r18
    107e:	89 2b       	or	r24, r25
    1080:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
    1082:	28 b1       	in	r18, 0x08	; 8
    1084:	ae 01       	movw	r20, r28
    1086:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <step_anticlockwise+0x64>
    108c:	44 0f       	add	r20, r20
    108e:	55 1f       	adc	r21, r21
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <step_anticlockwise+0x60>
    1094:	ce 01       	movw	r24, r28
    1096:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <step_anticlockwise+0x74>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <step_anticlockwise+0x70>
    10a4:	84 2b       	or	r24, r20
    10a6:	80 95       	com	r24
    10a8:	82 23       	and	r24, r18
    10aa:	88 b9       	out	0x08, r24	; 8
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    10ac:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
    10b0:	6c 15       	cp	r22, r12
    10b2:	7d 05       	cpc	r23, r13
    10b4:	8e 05       	cpc	r24, r14
    10b6:	9f 05       	cpc	r25, r15
    10b8:	78 f2       	brcs	.-98     	; 0x1058 <step_anticlockwise+0x2c>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 ++phase;
    10ba:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <phase>
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <phase>
    10c4:	ca c0       	rjmp	.+404    	; 0x125a <step_anticlockwise+0x22e>
	 }
	 else if(phase == 1){
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f0       	breq	.+2      	; 0x10cc <step_anticlockwise+0xa0>
    10ca:	42 c0       	rjmp	.+132    	; 0x1150 <step_anticlockwise+0x124>
		 current_time = get_tcnt1_ticks();
    10cc:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    10d0:	6b 01       	movw	r12, r22
    10d2:	7c 01       	movw	r14, r24
    10d4:	cc 0e       	add	r12, r28
    10d6:	d1 1c       	adc	r13, r1
    10d8:	e1 1c       	adc	r14, r1
    10da:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
    10dc:	c1 e0       	ldi	r28, 0x01	; 1
    10de:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    10e0:	2a c0       	rjmp	.+84     	; 0x1136 <step_anticlockwise+0x10a>
			 PORTC |= (1<<BLU)|(1<<RED);
    10e2:	98 b1       	in	r25, 0x08	; 8
    10e4:	ae 01       	movw	r20, r28
    10e6:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <step_anticlockwise+0xc4>
    10ec:	44 0f       	add	r20, r20
    10ee:	55 1f       	adc	r21, r21
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <step_anticlockwise+0xc0>
    10f4:	9e 01       	movw	r18, r28
    10f6:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <step_anticlockwise+0xd4>
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <step_anticlockwise+0xd0>
    1104:	84 2f       	mov	r24, r20
    1106:	82 2b       	or	r24, r18
    1108:	89 2b       	or	r24, r25
    110a:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
    110c:	28 b1       	in	r18, 0x08	; 8
    110e:	ae 01       	movw	r20, r28
    1110:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
    1114:	02 c0       	rjmp	.+4      	; 0x111a <step_anticlockwise+0xee>
    1116:	44 0f       	add	r20, r20
    1118:	55 1f       	adc	r21, r21
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <step_anticlockwise+0xea>
    111e:	ce 01       	movw	r24, r28
    1120:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
    1124:	02 c0       	rjmp	.+4      	; 0x112a <step_anticlockwise+0xfe>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <step_anticlockwise+0xfa>
    112e:	84 2b       	or	r24, r20
    1130:	80 95       	com	r24
    1132:	82 23       	and	r24, r18
    1134:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1136:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
    113a:	6c 15       	cp	r22, r12
    113c:	7d 05       	cpc	r23, r13
    113e:	8e 05       	cpc	r24, r14
    1140:	9f 05       	cpc	r25, r15
    1142:	78 f2       	brcs	.-98     	; 0x10e2 <step_anticlockwise+0xb6>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
    1144:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <phase>
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <phase>
    114e:	85 c0       	rjmp	.+266    	; 0x125a <step_anticlockwise+0x22e>
	 }
	 else if(phase == 2){
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	09 f0       	breq	.+2      	; 0x1156 <step_anticlockwise+0x12a>
    1154:	42 c0       	rjmp	.+132    	; 0x11da <step_anticlockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
    1156:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    115a:	6b 01       	movw	r12, r22
    115c:	7c 01       	movw	r14, r24
    115e:	cc 0e       	add	r12, r28
    1160:	d1 1c       	adc	r13, r1
    1162:	e1 1c       	adc	r14, r1
    1164:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
    1166:	c1 e0       	ldi	r28, 0x01	; 1
    1168:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    116a:	2a c0       	rjmp	.+84     	; 0x11c0 <step_anticlockwise+0x194>
			 PORTC |= (1<<GRE)|(1<<RED);
    116c:	98 b1       	in	r25, 0x08	; 8
    116e:	ae 01       	movw	r20, r28
    1170:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
    1174:	02 c0       	rjmp	.+4      	; 0x117a <step_anticlockwise+0x14e>
    1176:	44 0f       	add	r20, r20
    1178:	55 1f       	adc	r21, r21
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <step_anticlockwise+0x14a>
    117e:	9e 01       	movw	r18, r28
    1180:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
    1184:	02 c0       	rjmp	.+4      	; 0x118a <step_anticlockwise+0x15e>
    1186:	22 0f       	add	r18, r18
    1188:	33 1f       	adc	r19, r19
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <step_anticlockwise+0x15a>
    118e:	84 2f       	mov	r24, r20
    1190:	82 2b       	or	r24, r18
    1192:	89 2b       	or	r24, r25
    1194:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
    1196:	28 b1       	in	r18, 0x08	; 8
    1198:	ae 01       	movw	r20, r28
    119a:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <step_anticlockwise+0x178>
    11a0:	44 0f       	add	r20, r20
    11a2:	55 1f       	adc	r21, r21
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <step_anticlockwise+0x174>
    11a8:	ce 01       	movw	r24, r28
    11aa:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <step_anticlockwise+0x188>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <step_anticlockwise+0x184>
    11b8:	84 2b       	or	r24, r20
    11ba:	80 95       	com	r24
    11bc:	82 23       	and	r24, r18
    11be:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    11c0:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
    11c4:	6c 15       	cp	r22, r12
    11c6:	7d 05       	cpc	r23, r13
    11c8:	8e 05       	cpc	r24, r14
    11ca:	9f 05       	cpc	r25, r15
    11cc:	78 f2       	brcs	.-98     	; 0x116c <step_anticlockwise+0x140>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
    11ce:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <phase>
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
    11d4:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <phase>
    11d8:	40 c0       	rjmp	.+128    	; 0x125a <step_anticlockwise+0x22e>
	 }
	 else if(phase == 3){
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	f1 f5       	brne	.+124    	; 0x125a <step_anticlockwise+0x22e>
		 current_time = get_tcnt1_ticks();
    11de:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    11e2:	6b 01       	movw	r12, r22
    11e4:	7c 01       	movw	r14, r24
    11e6:	cc 0e       	add	r12, r28
    11e8:	d1 1c       	adc	r13, r1
    11ea:	e1 1c       	adc	r14, r1
    11ec:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
    11ee:	c1 e0       	ldi	r28, 0x01	; 1
    11f0:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    11f2:	2a c0       	rjmp	.+84     	; 0x1248 <step_anticlockwise+0x21c>
			 PORTC |= (1<<GRE)|(1<<YEL);
    11f4:	98 b1       	in	r25, 0x08	; 8
    11f6:	ae 01       	movw	r20, r28
    11f8:	00 90 c8 02 	lds	r0, 0x02C8	; 0x8002c8 <GRE>
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <step_anticlockwise+0x1d6>
    11fe:	44 0f       	add	r20, r20
    1200:	55 1f       	adc	r21, r21
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <step_anticlockwise+0x1d2>
    1206:	9e 01       	movw	r18, r28
    1208:	00 90 c7 02 	lds	r0, 0x02C7	; 0x8002c7 <YEL>
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <step_anticlockwise+0x1e6>
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <step_anticlockwise+0x1e2>
    1216:	84 2f       	mov	r24, r20
    1218:	82 2b       	or	r24, r18
    121a:	89 2b       	or	r24, r25
    121c:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
    121e:	28 b1       	in	r18, 0x08	; 8
    1220:	ae 01       	movw	r20, r28
    1222:	00 90 c9 02 	lds	r0, 0x02C9	; 0x8002c9 <BLU>
    1226:	02 c0       	rjmp	.+4      	; 0x122c <step_anticlockwise+0x200>
    1228:	44 0f       	add	r20, r20
    122a:	55 1f       	adc	r21, r21
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <step_anticlockwise+0x1fc>
    1230:	ce 01       	movw	r24, r28
    1232:	00 90 ca 02 	lds	r0, 0x02CA	; 0x8002ca <RED>
    1236:	02 c0       	rjmp	.+4      	; 0x123c <step_anticlockwise+0x210>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <step_anticlockwise+0x20c>
    1240:	84 2b       	or	r24, r20
    1242:	80 95       	com	r24
    1244:	82 23       	and	r24, r18
    1246:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1248:	0e 94 ad 09 	call	0x135a	; 0x135a <get_tcnt1_ticks>
    124c:	6c 15       	cp	r22, r12
    124e:	7d 05       	cpc	r23, r13
    1250:	8e 05       	cpc	r24, r14
    1252:	9f 05       	cpc	r25, r15
    1254:	78 f2       	brcs	.-98     	; 0x11f4 <step_anticlockwise+0x1c8>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 phase = 0;
    1256:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <phase>
	 }
	 decrement_step();
    125a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <decrement_step>
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	08 95       	ret

0000126c <step>:
	//if ((steps > info_ptr->maxStep) || (steps < 0)){
		///*	dont move	*/
		//return;
	//}
	
	int8_t speed = info_ptr->stepSpeed;
    126c:	fc 01       	movw	r30, r24
    126e:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t time_on;
	if (speed >= 0){
    1270:	88 23       	and	r24, r24
    1272:	44 f1       	brlt	.+80     	; 0x12c4 <step+0x58>
			if (speed < 10){
    1274:	8a 30       	cpi	r24, 0x0A	; 10
    1276:	94 f0       	brlt	.+36     	; 0x129c <step+0x30>
				time_on = 100;
			} else if (speed < 20) {
    1278:	84 31       	cpi	r24, 0x14	; 20
    127a:	94 f0       	brlt	.+36     	; 0x12a0 <step+0x34>
				time_on = 90;
			} else if (speed < 30) {
    127c:	8e 31       	cpi	r24, 0x1E	; 30
    127e:	94 f0       	brlt	.+36     	; 0x12a4 <step+0x38>
				time_on = 80;
			} else if (speed < 40) {
    1280:	88 32       	cpi	r24, 0x28	; 40
    1282:	94 f0       	brlt	.+36     	; 0x12a8 <step+0x3c>
				time_on = 70;
			} else if (speed < 50){
    1284:	82 33       	cpi	r24, 0x32	; 50
    1286:	94 f0       	brlt	.+36     	; 0x12ac <step+0x40>
				time_on = 60;
			} else if (speed < 60) {
    1288:	8c 33       	cpi	r24, 0x3C	; 60
    128a:	94 f0       	brlt	.+36     	; 0x12b0 <step+0x44>
				time_on = 50;
			} else if (speed < 70){
    128c:	86 34       	cpi	r24, 0x46	; 70
    128e:	94 f0       	brlt	.+36     	; 0x12b4 <step+0x48>
				time_on = 40;
			} else if (speed < 80) {
    1290:	80 35       	cpi	r24, 0x50	; 80
    1292:	94 f0       	brlt	.+36     	; 0x12b8 <step+0x4c>
				time_on = 30;
			} else if (speed < 90){
    1294:	8a 35       	cpi	r24, 0x5A	; 90
    1296:	94 f0       	brlt	.+36     	; 0x12bc <step+0x50>
				time_on = 20;
			} else {
				time_on = 5;
    1298:	85 e0       	ldi	r24, 0x05	; 5
    129a:	11 c0       	rjmp	.+34     	; 0x12be <step+0x52>
	
	int8_t speed = info_ptr->stepSpeed;
	uint8_t time_on;
	if (speed >= 0){
			if (speed < 10){
				time_on = 100;
    129c:	84 e6       	ldi	r24, 0x64	; 100
    129e:	0f c0       	rjmp	.+30     	; 0x12be <step+0x52>
			} else if (speed < 20) {
				time_on = 90;
    12a0:	8a e5       	ldi	r24, 0x5A	; 90
    12a2:	0d c0       	rjmp	.+26     	; 0x12be <step+0x52>
			} else if (speed < 30) {
				time_on = 80;
    12a4:	80 e5       	ldi	r24, 0x50	; 80
    12a6:	0b c0       	rjmp	.+22     	; 0x12be <step+0x52>
			} else if (speed < 40) {
				time_on = 70;
    12a8:	86 e4       	ldi	r24, 0x46	; 70
    12aa:	09 c0       	rjmp	.+18     	; 0x12be <step+0x52>
			} else if (speed < 50){
				time_on = 60;
    12ac:	8c e3       	ldi	r24, 0x3C	; 60
    12ae:	07 c0       	rjmp	.+14     	; 0x12be <step+0x52>
			} else if (speed < 60) {
				time_on = 50;
    12b0:	82 e3       	ldi	r24, 0x32	; 50
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <step+0x52>
			} else if (speed < 70){
				time_on = 40;
    12b4:	88 e2       	ldi	r24, 0x28	; 40
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <step+0x52>
			} else if (speed < 80) {
				time_on = 30;
    12b8:	8e e1       	ldi	r24, 0x1E	; 30
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <step+0x52>
			} else if (speed < 90){
				time_on = 20;
    12bc:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 5;
			}
			step_clockwise(time_on);
    12be:	0e 94 f6 06 	call	0xdec	; 0xdec <step_clockwise>
    12c2:	08 95       	ret
	} else {
			if (speed > -10){
    12c4:	87 3f       	cpi	r24, 0xF7	; 247
    12c6:	94 f4       	brge	.+36     	; 0x12ec <step+0x80>
				time_on = 100;
			} else if (speed > -20) {
    12c8:	8d 3e       	cpi	r24, 0xED	; 237
    12ca:	94 f4       	brge	.+36     	; 0x12f0 <step+0x84>
				time_on = 90;
			} else if (speed > -30) {
    12cc:	83 3e       	cpi	r24, 0xE3	; 227
    12ce:	94 f4       	brge	.+36     	; 0x12f4 <step+0x88>
				time_on = 80;
			} else if (speed > -40) {
    12d0:	89 3d       	cpi	r24, 0xD9	; 217
    12d2:	94 f4       	brge	.+36     	; 0x12f8 <step+0x8c>
				time_on = 70;
			} else if (speed > -50){
    12d4:	8f 3c       	cpi	r24, 0xCF	; 207
    12d6:	94 f4       	brge	.+36     	; 0x12fc <step+0x90>
				time_on = 60;
			} else if (speed > -60) {
    12d8:	85 3c       	cpi	r24, 0xC5	; 197
    12da:	94 f4       	brge	.+36     	; 0x1300 <step+0x94>
				time_on = 50;
			} else if (speed > -70){
    12dc:	8b 3b       	cpi	r24, 0xBB	; 187
    12de:	94 f4       	brge	.+36     	; 0x1304 <step+0x98>
				time_on = 40;
			} else if (speed > -80) {
    12e0:	81 3b       	cpi	r24, 0xB1	; 177
    12e2:	94 f4       	brge	.+36     	; 0x1308 <step+0x9c>
				time_on = 30;
			} else if (speed > -90){
    12e4:	87 3a       	cpi	r24, 0xA7	; 167
    12e6:	94 f4       	brge	.+36     	; 0x130c <step+0xa0>
				time_on = 20;
			} else {
				time_on = 5;
    12e8:	85 e0       	ldi	r24, 0x05	; 5
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <step+0xa2>
				time_on = 5;
			}
			step_clockwise(time_on);
	} else {
			if (speed > -10){
				time_on = 100;
    12ec:	84 e6       	ldi	r24, 0x64	; 100
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <step+0xa2>
			} else if (speed > -20) {
				time_on = 90;
    12f0:	8a e5       	ldi	r24, 0x5A	; 90
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <step+0xa2>
			} else if (speed > -30) {
				time_on = 80;
    12f4:	80 e5       	ldi	r24, 0x50	; 80
    12f6:	0b c0       	rjmp	.+22     	; 0x130e <step+0xa2>
			} else if (speed > -40) {
				time_on = 70;
    12f8:	86 e4       	ldi	r24, 0x46	; 70
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <step+0xa2>
			} else if (speed > -50){
				time_on = 60;
    12fc:	8c e3       	ldi	r24, 0x3C	; 60
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <step+0xa2>
			} else if (speed > -60) {
				time_on = 50;
    1300:	82 e3       	ldi	r24, 0x32	; 50
    1302:	05 c0       	rjmp	.+10     	; 0x130e <step+0xa2>
			} else if (speed > -70){
				time_on = 40;
    1304:	88 e2       	ldi	r24, 0x28	; 40
    1306:	03 c0       	rjmp	.+6      	; 0x130e <step+0xa2>
			} else if (speed > -80) {
				time_on = 30;
    1308:	8e e1       	ldi	r24, 0x1E	; 30
    130a:	01 c0       	rjmp	.+2      	; 0x130e <step+0xa2>
			} else if (speed > -90){
				time_on = 20;
    130c:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 5;
			}
			step_anticlockwise(time_on);
    130e:	0e 94 16 08 	call	0x102c	; 0x102c <step_anticlockwise>
    1312:	08 95       	ret

00001314 <init_tcnt1>:

 void init_tcnt1(void){
	 /* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	 
	 //set button to be not pushed
	 Button_on = 0;
    1314:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <Button_on>
	 
	 // set global counter
	 tcnt1_ticks = 0L;
    1318:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <tcnt1_ticks>
    131c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <tcnt1_ticks+0x1>
    1320:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <tcnt1_ticks+0x2>
    1324:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <tcnt1_ticks+0x3>
	 
	 // set timer / counter
	 TCNT1 = 0;
    1328:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    132c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	 
	 // set output compare resgister; value to execute ISR
	 OCR1A = 124; // between 1 and 255
    1330:	8c e7       	ldi	r24, 0x7C	; 124
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1338:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	 
	 // timer/counter control register A - set to clear when TCNT0 matches OCR0A
	 TCCR1A = (1<<WGM11);
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	 
	 // set the timer to update at a fraction of a clock cycle
	 TCCR1B = (1<<CS11)|(1<<CS10);	// set to f(clk) / 64
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	 
	 // timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK1 |= (1<<OCIE1A);
    1348:	ef e6       	ldi	r30, 0x6F	; 111
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	82 60       	ori	r24, 0x02	; 2
    1350:	80 83       	st	Z, r24
	 
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR1 &= (1<<OCF1A);
    1352:	86 b3       	in	r24, 0x16	; 22
    1354:	82 70       	andi	r24, 0x02	; 2
    1356:	86 bb       	out	0x16, r24	; 22
    1358:	08 95       	ret

0000135a <get_tcnt1_ticks>:


 uint32_t get_tcnt1_ticks(void) {
	 /* internal reference clock, times how long the system has been on for	*/

	 uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
    135a:	2f b7       	in	r18, 0x3f	; 63
	 cli();
    135c:	f8 94       	cli
	 uint32_t return_value = tcnt1_ticks;
    135e:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <tcnt1_ticks>
    1362:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <tcnt1_ticks+0x1>
    1366:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <tcnt1_ticks+0x2>
    136a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <tcnt1_ticks+0x3>
	 if(interrupts_on) {
    136e:	22 23       	and	r18, r18
    1370:	0c f4       	brge	.+2      	; 0x1374 <get_tcnt1_ticks+0x1a>
		 sei();
    1372:	78 94       	sei
	 }
	 return return_value;
 }
    1374:	08 95       	ret

00001376 <__vector_13>:



 ISR(TIMER1_COMPA_vect) {
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 
	 tcnt1_ticks++;
    1388:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <tcnt1_ticks>
    138c:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <tcnt1_ticks+0x1>
    1390:	a0 91 ae 01 	lds	r26, 0x01AE	; 0x8001ae <tcnt1_ticks+0x2>
    1394:	b0 91 af 01 	lds	r27, 0x01AF	; 0x8001af <tcnt1_ticks+0x3>
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	a1 1d       	adc	r26, r1
    139c:	b1 1d       	adc	r27, r1
    139e:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <tcnt1_ticks>
    13a2:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <tcnt1_ticks+0x1>
    13a6:	a0 93 ae 01 	sts	0x01AE, r26	; 0x8001ae <tcnt1_ticks+0x2>
    13aa:	b0 93 af 01 	sts	0x01AF, r27	; 0x8001af <tcnt1_ticks+0x3>

    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <worm_off>:
#define RED PORTC5
#define BLACK PORTC2

void worm_off(void){
		/*	turn the motor off	*/
		PORTC &= ~(1<<RED);
    13c0:	45 98       	cbi	0x08, 5	; 8
		PORTC &= ~(1<<BLACK);
    13c2:	42 98       	cbi	0x08, 2	; 8
		fputs("Worm off\n", stdout);
    13c4:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <__iob+0x2>
    13c8:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <__iob+0x3>
    13cc:	49 e0       	ldi	r20, 0x09	; 9
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	87 e4       	ldi	r24, 0x47	; 71
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	0e 94 a5 0c 	call	0x194a	; 0x194a <fwrite>
    13dc:	08 95       	ret

000013de <move_worm>:
void move_worm(uint8_t percent, int8_t direction){
	/*	effective pwm to control DC motor for the claw */
	
	uint8_t duty = 20;
	
		if (direction){
    13de:	66 23       	and	r22, r22
    13e0:	91 f0       	breq	.+36     	; 0x1406 <move_worm+0x28>
				// forward
				PORTC |= (1<<RED);
    13e2:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<BLACK);
    13e4:	42 98       	cbi	0x08, 2	; 8
				custom_delay((duty*percent)/100);
    13e6:	24 e1       	ldi	r18, 0x14	; 20
    13e8:	82 9f       	mul	r24, r18
    13ea:	c0 01       	movw	r24, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	64 e6       	ldi	r22, 0x64	; 100
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	0e 94 15 0a 	call	0x142a	; 0x142a <__divmodhi4>
    13f6:	07 2e       	mov	r0, r23
    13f8:	00 0c       	add	r0, r0
    13fa:	88 0b       	sbc	r24, r24
    13fc:	99 0b       	sbc	r25, r25
    13fe:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
				PORTC &= ~(1<<RED);
    1402:	45 98       	cbi	0x08, 5	; 8
    1404:	08 95       	ret
		} else {
				// backwards
				PORTC |= (1<<BLACK);
    1406:	42 9a       	sbi	0x08, 2	; 8
				PORTC &= ~(1<<RED);
    1408:	45 98       	cbi	0x08, 5	; 8
				custom_delay((duty*percent)/100);
    140a:	24 e1       	ldi	r18, 0x14	; 20
    140c:	82 9f       	mul	r24, r18
    140e:	c0 01       	movw	r24, r0
    1410:	11 24       	eor	r1, r1
    1412:	64 e6       	ldi	r22, 0x64	; 100
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	0e 94 15 0a 	call	0x142a	; 0x142a <__divmodhi4>
    141a:	07 2e       	mov	r0, r23
    141c:	00 0c       	add	r0, r0
    141e:	88 0b       	sbc	r24, r24
    1420:	99 0b       	sbc	r25, r25
    1422:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
				PORTC &= ~(1<<RED);
    1426:	45 98       	cbi	0x08, 5	; 8
    1428:	08 95       	ret

0000142a <__divmodhi4>:
    142a:	97 fb       	bst	r25, 7
    142c:	07 2e       	mov	r0, r23
    142e:	16 f4       	brtc	.+4      	; 0x1434 <__divmodhi4+0xa>
    1430:	00 94       	com	r0
    1432:	07 d0       	rcall	.+14     	; 0x1442 <__divmodhi4_neg1>
    1434:	77 fd       	sbrc	r23, 7
    1436:	09 d0       	rcall	.+18     	; 0x144a <__divmodhi4_neg2>
    1438:	0e 94 4e 0a 	call	0x149c	; 0x149c <__udivmodhi4>
    143c:	07 fc       	sbrc	r0, 7
    143e:	05 d0       	rcall	.+10     	; 0x144a <__divmodhi4_neg2>
    1440:	3e f4       	brtc	.+14     	; 0x1450 <__divmodhi4_exit>

00001442 <__divmodhi4_neg1>:
    1442:	90 95       	com	r25
    1444:	81 95       	neg	r24
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	08 95       	ret

0000144a <__divmodhi4_neg2>:
    144a:	70 95       	com	r23
    144c:	61 95       	neg	r22
    144e:	7f 4f       	sbci	r23, 0xFF	; 255

00001450 <__divmodhi4_exit>:
    1450:	08 95       	ret

00001452 <__divmodsi4>:
    1452:	05 2e       	mov	r0, r21
    1454:	97 fb       	bst	r25, 7
    1456:	1e f4       	brtc	.+6      	; 0x145e <__divmodsi4+0xc>
    1458:	00 94       	com	r0
    145a:	0e 94 40 0a 	call	0x1480	; 0x1480 <__negsi2>
    145e:	57 fd       	sbrc	r21, 7
    1460:	07 d0       	rcall	.+14     	; 0x1470 <__divmodsi4_neg2>
    1462:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__udivmodsi4>
    1466:	07 fc       	sbrc	r0, 7
    1468:	03 d0       	rcall	.+6      	; 0x1470 <__divmodsi4_neg2>
    146a:	4e f4       	brtc	.+18     	; 0x147e <__divmodsi4_exit>
    146c:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__negsi2>

00001470 <__divmodsi4_neg2>:
    1470:	50 95       	com	r21
    1472:	40 95       	com	r20
    1474:	30 95       	com	r19
    1476:	21 95       	neg	r18
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	4f 4f       	sbci	r20, 0xFF	; 255
    147c:	5f 4f       	sbci	r21, 0xFF	; 255

0000147e <__divmodsi4_exit>:
    147e:	08 95       	ret

00001480 <__negsi2>:
    1480:	90 95       	com	r25
    1482:	80 95       	com	r24
    1484:	70 95       	com	r23
    1486:	61 95       	neg	r22
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	8f 4f       	sbci	r24, 0xFF	; 255
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	08 95       	ret

00001490 <__tablejump2__>:
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	05 90       	lpm	r0, Z+
    1496:	f4 91       	lpm	r31, Z
    1498:	e0 2d       	mov	r30, r0
    149a:	09 94       	ijmp

0000149c <__udivmodhi4>:
    149c:	aa 1b       	sub	r26, r26
    149e:	bb 1b       	sub	r27, r27
    14a0:	51 e1       	ldi	r21, 0x11	; 17
    14a2:	07 c0       	rjmp	.+14     	; 0x14b2 <__udivmodhi4_ep>

000014a4 <__udivmodhi4_loop>:
    14a4:	aa 1f       	adc	r26, r26
    14a6:	bb 1f       	adc	r27, r27
    14a8:	a6 17       	cp	r26, r22
    14aa:	b7 07       	cpc	r27, r23
    14ac:	10 f0       	brcs	.+4      	; 0x14b2 <__udivmodhi4_ep>
    14ae:	a6 1b       	sub	r26, r22
    14b0:	b7 0b       	sbc	r27, r23

000014b2 <__udivmodhi4_ep>:
    14b2:	88 1f       	adc	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	5a 95       	dec	r21
    14b8:	a9 f7       	brne	.-22     	; 0x14a4 <__udivmodhi4_loop>
    14ba:	80 95       	com	r24
    14bc:	90 95       	com	r25
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	08 95       	ret

000014c4 <__udivmodsi4>:
    14c4:	a1 e2       	ldi	r26, 0x21	; 33
    14c6:	1a 2e       	mov	r1, r26
    14c8:	aa 1b       	sub	r26, r26
    14ca:	bb 1b       	sub	r27, r27
    14cc:	fd 01       	movw	r30, r26
    14ce:	0d c0       	rjmp	.+26     	; 0x14ea <__udivmodsi4_ep>

000014d0 <__udivmodsi4_loop>:
    14d0:	aa 1f       	adc	r26, r26
    14d2:	bb 1f       	adc	r27, r27
    14d4:	ee 1f       	adc	r30, r30
    14d6:	ff 1f       	adc	r31, r31
    14d8:	a2 17       	cp	r26, r18
    14da:	b3 07       	cpc	r27, r19
    14dc:	e4 07       	cpc	r30, r20
    14de:	f5 07       	cpc	r31, r21
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <__udivmodsi4_ep>
    14e2:	a2 1b       	sub	r26, r18
    14e4:	b3 0b       	sbc	r27, r19
    14e6:	e4 0b       	sbc	r30, r20
    14e8:	f5 0b       	sbc	r31, r21

000014ea <__udivmodsi4_ep>:
    14ea:	66 1f       	adc	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	1a 94       	dec	r1
    14f4:	69 f7       	brne	.-38     	; 0x14d0 <__udivmodsi4_loop>
    14f6:	60 95       	com	r22
    14f8:	70 95       	com	r23
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	bd 01       	movw	r22, r26
    1504:	cf 01       	movw	r24, r30
    1506:	08 95       	ret

00001508 <malloc>:
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	91 05       	cpc	r25, r1
    1514:	10 f4       	brcc	.+4      	; 0x151a <malloc+0x12>
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <__flp>
    151e:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <__flp+0x1>
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	30 97       	sbiw	r30, 0x00	; 0
    152c:	19 f1       	breq	.+70     	; 0x1574 <malloc+0x6c>
    152e:	40 81       	ld	r20, Z
    1530:	51 81       	ldd	r21, Z+1	; 0x01
    1532:	02 81       	ldd	r16, Z+2	; 0x02
    1534:	13 81       	ldd	r17, Z+3	; 0x03
    1536:	48 17       	cp	r20, r24
    1538:	59 07       	cpc	r21, r25
    153a:	c8 f0       	brcs	.+50     	; 0x156e <malloc+0x66>
    153c:	84 17       	cp	r24, r20
    153e:	95 07       	cpc	r25, r21
    1540:	69 f4       	brne	.+26     	; 0x155c <malloc+0x54>
    1542:	10 97       	sbiw	r26, 0x00	; 0
    1544:	31 f0       	breq	.+12     	; 0x1552 <malloc+0x4a>
    1546:	12 96       	adiw	r26, 0x02	; 2
    1548:	0c 93       	st	X, r16
    154a:	12 97       	sbiw	r26, 0x02	; 2
    154c:	13 96       	adiw	r26, 0x03	; 3
    154e:	1c 93       	st	X, r17
    1550:	27 c0       	rjmp	.+78     	; 0x15a0 <malloc+0x98>
    1552:	00 93 cd 02 	sts	0x02CD, r16	; 0x8002cd <__flp>
    1556:	10 93 ce 02 	sts	0x02CE, r17	; 0x8002ce <__flp+0x1>
    155a:	22 c0       	rjmp	.+68     	; 0x15a0 <malloc+0x98>
    155c:	21 15       	cp	r18, r1
    155e:	31 05       	cpc	r19, r1
    1560:	19 f0       	breq	.+6      	; 0x1568 <malloc+0x60>
    1562:	42 17       	cp	r20, r18
    1564:	53 07       	cpc	r21, r19
    1566:	18 f4       	brcc	.+6      	; 0x156e <malloc+0x66>
    1568:	9a 01       	movw	r18, r20
    156a:	bd 01       	movw	r22, r26
    156c:	ef 01       	movw	r28, r30
    156e:	df 01       	movw	r26, r30
    1570:	f8 01       	movw	r30, r16
    1572:	db cf       	rjmp	.-74     	; 0x152a <malloc+0x22>
    1574:	21 15       	cp	r18, r1
    1576:	31 05       	cpc	r19, r1
    1578:	f9 f0       	breq	.+62     	; 0x15b8 <malloc+0xb0>
    157a:	28 1b       	sub	r18, r24
    157c:	39 0b       	sbc	r19, r25
    157e:	24 30       	cpi	r18, 0x04	; 4
    1580:	31 05       	cpc	r19, r1
    1582:	80 f4       	brcc	.+32     	; 0x15a4 <malloc+0x9c>
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	61 15       	cp	r22, r1
    158a:	71 05       	cpc	r23, r1
    158c:	21 f0       	breq	.+8      	; 0x1596 <malloc+0x8e>
    158e:	fb 01       	movw	r30, r22
    1590:	93 83       	std	Z+3, r25	; 0x03
    1592:	82 83       	std	Z+2, r24	; 0x02
    1594:	04 c0       	rjmp	.+8      	; 0x159e <malloc+0x96>
    1596:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <__flp+0x1>
    159a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <__flp>
    159e:	fe 01       	movw	r30, r28
    15a0:	32 96       	adiw	r30, 0x02	; 2
    15a2:	44 c0       	rjmp	.+136    	; 0x162c <malloc+0x124>
    15a4:	fe 01       	movw	r30, r28
    15a6:	e2 0f       	add	r30, r18
    15a8:	f3 1f       	adc	r31, r19
    15aa:	81 93       	st	Z+, r24
    15ac:	91 93       	st	Z+, r25
    15ae:	22 50       	subi	r18, 0x02	; 2
    15b0:	31 09       	sbc	r19, r1
    15b2:	39 83       	std	Y+1, r19	; 0x01
    15b4:	28 83       	st	Y, r18
    15b6:	3a c0       	rjmp	.+116    	; 0x162c <malloc+0x124>
    15b8:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <__brkval>
    15bc:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <__brkval+0x1>
    15c0:	23 2b       	or	r18, r19
    15c2:	41 f4       	brne	.+16     	; 0x15d4 <malloc+0xcc>
    15c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    15c8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    15cc:	30 93 cc 02 	sts	0x02CC, r19	; 0x8002cc <__brkval+0x1>
    15d0:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <__brkval>
    15d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    15d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    15dc:	21 15       	cp	r18, r1
    15de:	31 05       	cpc	r19, r1
    15e0:	41 f4       	brne	.+16     	; 0x15f2 <malloc+0xea>
    15e2:	2d b7       	in	r18, 0x3d	; 61
    15e4:	3e b7       	in	r19, 0x3e	; 62
    15e6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    15ea:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    15ee:	24 1b       	sub	r18, r20
    15f0:	35 0b       	sbc	r19, r21
    15f2:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <__brkval>
    15f6:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <__brkval+0x1>
    15fa:	e2 17       	cp	r30, r18
    15fc:	f3 07       	cpc	r31, r19
    15fe:	a0 f4       	brcc	.+40     	; 0x1628 <malloc+0x120>
    1600:	2e 1b       	sub	r18, r30
    1602:	3f 0b       	sbc	r19, r31
    1604:	28 17       	cp	r18, r24
    1606:	39 07       	cpc	r19, r25
    1608:	78 f0       	brcs	.+30     	; 0x1628 <malloc+0x120>
    160a:	ac 01       	movw	r20, r24
    160c:	4e 5f       	subi	r20, 0xFE	; 254
    160e:	5f 4f       	sbci	r21, 0xFF	; 255
    1610:	24 17       	cp	r18, r20
    1612:	35 07       	cpc	r19, r21
    1614:	48 f0       	brcs	.+18     	; 0x1628 <malloc+0x120>
    1616:	4e 0f       	add	r20, r30
    1618:	5f 1f       	adc	r21, r31
    161a:	50 93 cc 02 	sts	0x02CC, r21	; 0x8002cc <__brkval+0x1>
    161e:	40 93 cb 02 	sts	0x02CB, r20	; 0x8002cb <__brkval>
    1622:	81 93       	st	Z+, r24
    1624:	91 93       	st	Z+, r25
    1626:	02 c0       	rjmp	.+4      	; 0x162c <malloc+0x124>
    1628:	e0 e0       	ldi	r30, 0x00	; 0
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	cf 01       	movw	r24, r30
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <free>:
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	09 f4       	brne	.+2      	; 0x1642 <free+0xa>
    1640:	81 c0       	rjmp	.+258    	; 0x1744 <free+0x10c>
    1642:	fc 01       	movw	r30, r24
    1644:	32 97       	sbiw	r30, 0x02	; 2
    1646:	13 82       	std	Z+3, r1	; 0x03
    1648:	12 82       	std	Z+2, r1	; 0x02
    164a:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <__flp>
    164e:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <__flp+0x1>
    1652:	10 97       	sbiw	r26, 0x00	; 0
    1654:	81 f4       	brne	.+32     	; 0x1676 <free+0x3e>
    1656:	20 81       	ld	r18, Z
    1658:	31 81       	ldd	r19, Z+1	; 0x01
    165a:	82 0f       	add	r24, r18
    165c:	93 1f       	adc	r25, r19
    165e:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <__brkval>
    1662:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <__brkval+0x1>
    1666:	28 17       	cp	r18, r24
    1668:	39 07       	cpc	r19, r25
    166a:	51 f5       	brne	.+84     	; 0x16c0 <free+0x88>
    166c:	f0 93 cc 02 	sts	0x02CC, r31	; 0x8002cc <__brkval+0x1>
    1670:	e0 93 cb 02 	sts	0x02CB, r30	; 0x8002cb <__brkval>
    1674:	67 c0       	rjmp	.+206    	; 0x1744 <free+0x10c>
    1676:	ed 01       	movw	r28, r26
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	ce 17       	cp	r28, r30
    167e:	df 07       	cpc	r29, r31
    1680:	40 f4       	brcc	.+16     	; 0x1692 <free+0x5a>
    1682:	4a 81       	ldd	r20, Y+2	; 0x02
    1684:	5b 81       	ldd	r21, Y+3	; 0x03
    1686:	9e 01       	movw	r18, r28
    1688:	41 15       	cp	r20, r1
    168a:	51 05       	cpc	r21, r1
    168c:	f1 f0       	breq	.+60     	; 0x16ca <free+0x92>
    168e:	ea 01       	movw	r28, r20
    1690:	f5 cf       	rjmp	.-22     	; 0x167c <free+0x44>
    1692:	d3 83       	std	Z+3, r29	; 0x03
    1694:	c2 83       	std	Z+2, r28	; 0x02
    1696:	40 81       	ld	r20, Z
    1698:	51 81       	ldd	r21, Z+1	; 0x01
    169a:	84 0f       	add	r24, r20
    169c:	95 1f       	adc	r25, r21
    169e:	c8 17       	cp	r28, r24
    16a0:	d9 07       	cpc	r29, r25
    16a2:	59 f4       	brne	.+22     	; 0x16ba <free+0x82>
    16a4:	88 81       	ld	r24, Y
    16a6:	99 81       	ldd	r25, Y+1	; 0x01
    16a8:	84 0f       	add	r24, r20
    16aa:	95 1f       	adc	r25, r21
    16ac:	02 96       	adiw	r24, 0x02	; 2
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	93 83       	std	Z+3, r25	; 0x03
    16b8:	82 83       	std	Z+2, r24	; 0x02
    16ba:	21 15       	cp	r18, r1
    16bc:	31 05       	cpc	r19, r1
    16be:	29 f4       	brne	.+10     	; 0x16ca <free+0x92>
    16c0:	f0 93 ce 02 	sts	0x02CE, r31	; 0x8002ce <__flp+0x1>
    16c4:	e0 93 cd 02 	sts	0x02CD, r30	; 0x8002cd <__flp>
    16c8:	3d c0       	rjmp	.+122    	; 0x1744 <free+0x10c>
    16ca:	e9 01       	movw	r28, r18
    16cc:	fb 83       	std	Y+3, r31	; 0x03
    16ce:	ea 83       	std	Y+2, r30	; 0x02
    16d0:	49 91       	ld	r20, Y+
    16d2:	59 91       	ld	r21, Y+
    16d4:	c4 0f       	add	r28, r20
    16d6:	d5 1f       	adc	r29, r21
    16d8:	ec 17       	cp	r30, r28
    16da:	fd 07       	cpc	r31, r29
    16dc:	61 f4       	brne	.+24     	; 0x16f6 <free+0xbe>
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	84 0f       	add	r24, r20
    16e4:	95 1f       	adc	r25, r21
    16e6:	02 96       	adiw	r24, 0x02	; 2
    16e8:	e9 01       	movw	r28, r18
    16ea:	99 83       	std	Y+1, r25	; 0x01
    16ec:	88 83       	st	Y, r24
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	9b 83       	std	Y+3, r25	; 0x03
    16f4:	8a 83       	std	Y+2, r24	; 0x02
    16f6:	e0 e0       	ldi	r30, 0x00	; 0
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	12 96       	adiw	r26, 0x02	; 2
    16fc:	8d 91       	ld	r24, X+
    16fe:	9c 91       	ld	r25, X
    1700:	13 97       	sbiw	r26, 0x03	; 3
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	19 f0       	breq	.+6      	; 0x170c <free+0xd4>
    1706:	fd 01       	movw	r30, r26
    1708:	dc 01       	movw	r26, r24
    170a:	f7 cf       	rjmp	.-18     	; 0x16fa <free+0xc2>
    170c:	8d 91       	ld	r24, X+
    170e:	9c 91       	ld	r25, X
    1710:	11 97       	sbiw	r26, 0x01	; 1
    1712:	9d 01       	movw	r18, r26
    1714:	2e 5f       	subi	r18, 0xFE	; 254
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	82 0f       	add	r24, r18
    171a:	93 1f       	adc	r25, r19
    171c:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <__brkval>
    1720:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <__brkval+0x1>
    1724:	28 17       	cp	r18, r24
    1726:	39 07       	cpc	r19, r25
    1728:	69 f4       	brne	.+26     	; 0x1744 <free+0x10c>
    172a:	30 97       	sbiw	r30, 0x00	; 0
    172c:	29 f4       	brne	.+10     	; 0x1738 <free+0x100>
    172e:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <__flp+0x1>
    1732:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <__flp>
    1736:	02 c0       	rjmp	.+4      	; 0x173c <free+0x104>
    1738:	13 82       	std	Z+3, r1	; 0x03
    173a:	12 82       	std	Z+2, r1	; 0x02
    173c:	b0 93 cc 02 	sts	0x02CC, r27	; 0x8002cc <__brkval+0x1>
    1740:	a0 93 cb 02 	sts	0x02CB, r26	; 0x8002cb <__brkval>
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <do_rand>:
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	ec 01       	movw	r28, r24
    1760:	68 81       	ld	r22, Y
    1762:	79 81       	ldd	r23, Y+1	; 0x01
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	9b 81       	ldd	r25, Y+3	; 0x03
    1768:	61 15       	cp	r22, r1
    176a:	71 05       	cpc	r23, r1
    176c:	81 05       	cpc	r24, r1
    176e:	91 05       	cpc	r25, r1
    1770:	21 f4       	brne	.+8      	; 0x177a <do_rand+0x30>
    1772:	64 e2       	ldi	r22, 0x24	; 36
    1774:	79 ed       	ldi	r23, 0xD9	; 217
    1776:	8b e5       	ldi	r24, 0x5B	; 91
    1778:	97 e0       	ldi	r25, 0x07	; 7
    177a:	2d e1       	ldi	r18, 0x1D	; 29
    177c:	33 ef       	ldi	r19, 0xF3	; 243
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	0e 94 29 0a 	call	0x1452	; 0x1452 <__divmodsi4>
    1786:	49 01       	movw	r8, r18
    1788:	5a 01       	movw	r10, r20
    178a:	9b 01       	movw	r18, r22
    178c:	ac 01       	movw	r20, r24
    178e:	a7 ea       	ldi	r26, 0xA7	; 167
    1790:	b1 e4       	ldi	r27, 0x41	; 65
    1792:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__muluhisi3>
    1796:	6b 01       	movw	r12, r22
    1798:	7c 01       	movw	r14, r24
    179a:	ac ee       	ldi	r26, 0xEC	; 236
    179c:	b4 ef       	ldi	r27, 0xF4	; 244
    179e:	a5 01       	movw	r20, r10
    17a0:	94 01       	movw	r18, r8
    17a2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulohisi3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8c 0d       	add	r24, r12
    17ac:	9d 1d       	adc	r25, r13
    17ae:	ae 1d       	adc	r26, r14
    17b0:	bf 1d       	adc	r27, r15
    17b2:	b7 ff       	sbrs	r27, 7
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <do_rand+0x72>
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	a1 09       	sbc	r26, r1
    17ba:	b0 48       	sbci	r27, 0x80	; 128
    17bc:	88 83       	st	Y, r24
    17be:	99 83       	std	Y+1, r25	; 0x01
    17c0:	aa 83       	std	Y+2, r26	; 0x02
    17c2:	bb 83       	std	Y+3, r27	; 0x03
    17c4:	9f 77       	andi	r25, 0x7F	; 127
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	df 90       	pop	r13
    17d0:	cf 90       	pop	r12
    17d2:	bf 90       	pop	r11
    17d4:	af 90       	pop	r10
    17d6:	9f 90       	pop	r9
    17d8:	8f 90       	pop	r8
    17da:	08 95       	ret

000017dc <rand_r>:
    17dc:	0e 94 a5 0b 	call	0x174a	; 0x174a <do_rand>
    17e0:	08 95       	ret

000017e2 <rand>:
    17e2:	86 e0       	ldi	r24, 0x06	; 6
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	0e 94 a5 0b 	call	0x174a	; 0x174a <do_rand>
    17ea:	08 95       	ret

000017ec <srand>:
    17ec:	a0 e0       	ldi	r26, 0x00	; 0
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    17f4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    17f8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    17fc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1800:	08 95       	ret

00001802 <fgetc>:
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ec 01       	movw	r28, r24
    1808:	2b 81       	ldd	r18, Y+3	; 0x03
    180a:	20 ff       	sbrs	r18, 0
    180c:	33 c0       	rjmp	.+102    	; 0x1874 <fgetc+0x72>
    180e:	26 ff       	sbrs	r18, 6
    1810:	0a c0       	rjmp	.+20     	; 0x1826 <fgetc+0x24>
    1812:	2f 7b       	andi	r18, 0xBF	; 191
    1814:	2b 83       	std	Y+3, r18	; 0x03
    1816:	8e 81       	ldd	r24, Y+6	; 0x06
    1818:	9f 81       	ldd	r25, Y+7	; 0x07
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	9f 83       	std	Y+7, r25	; 0x07
    181e:	8e 83       	std	Y+6, r24	; 0x06
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	29 c0       	rjmp	.+82     	; 0x1878 <fgetc+0x76>
    1826:	22 ff       	sbrs	r18, 2
    1828:	0f c0       	rjmp	.+30     	; 0x1848 <fgetc+0x46>
    182a:	e8 81       	ld	r30, Y
    182c:	f9 81       	ldd	r31, Y+1	; 0x01
    182e:	80 81       	ld	r24, Z
    1830:	08 2e       	mov	r0, r24
    1832:	00 0c       	add	r0, r0
    1834:	99 0b       	sbc	r25, r25
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	19 f4       	brne	.+6      	; 0x1840 <fgetc+0x3e>
    183a:	20 62       	ori	r18, 0x20	; 32
    183c:	2b 83       	std	Y+3, r18	; 0x03
    183e:	1a c0       	rjmp	.+52     	; 0x1874 <fgetc+0x72>
    1840:	31 96       	adiw	r30, 0x01	; 1
    1842:	f9 83       	std	Y+1, r31	; 0x01
    1844:	e8 83       	st	Y, r30
    1846:	0e c0       	rjmp	.+28     	; 0x1864 <fgetc+0x62>
    1848:	ea 85       	ldd	r30, Y+10	; 0x0a
    184a:	fb 85       	ldd	r31, Y+11	; 0x0b
    184c:	09 95       	icall
    184e:	97 ff       	sbrs	r25, 7
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <fgetc+0x62>
    1852:	2b 81       	ldd	r18, Y+3	; 0x03
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	11 f0       	breq	.+4      	; 0x185c <fgetc+0x5a>
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	01 c0       	rjmp	.+2      	; 0x185e <fgetc+0x5c>
    185c:	80 e1       	ldi	r24, 0x10	; 16
    185e:	82 2b       	or	r24, r18
    1860:	8b 83       	std	Y+3, r24	; 0x03
    1862:	08 c0       	rjmp	.+16     	; 0x1874 <fgetc+0x72>
    1864:	2e 81       	ldd	r18, Y+6	; 0x06
    1866:	3f 81       	ldd	r19, Y+7	; 0x07
    1868:	2f 5f       	subi	r18, 0xFF	; 255
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	3f 83       	std	Y+7, r19	; 0x07
    186e:	2e 83       	std	Y+6, r18	; 0x06
    1870:	99 27       	eor	r25, r25
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <fgetc+0x76>
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	9f ef       	ldi	r25, 0xFF	; 255
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <fputc>:
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	fb 01       	movw	r30, r22
    1888:	23 81       	ldd	r18, Z+3	; 0x03
    188a:	21 fd       	sbrc	r18, 1
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <fputc+0x16>
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	9f ef       	ldi	r25, 0xFF	; 255
    1892:	2c c0       	rjmp	.+88     	; 0x18ec <fputc+0x6e>
    1894:	22 ff       	sbrs	r18, 2
    1896:	16 c0       	rjmp	.+44     	; 0x18c4 <fputc+0x46>
    1898:	46 81       	ldd	r20, Z+6	; 0x06
    189a:	57 81       	ldd	r21, Z+7	; 0x07
    189c:	24 81       	ldd	r18, Z+4	; 0x04
    189e:	35 81       	ldd	r19, Z+5	; 0x05
    18a0:	42 17       	cp	r20, r18
    18a2:	53 07       	cpc	r21, r19
    18a4:	44 f4       	brge	.+16     	; 0x18b6 <fputc+0x38>
    18a6:	a0 81       	ld	r26, Z
    18a8:	b1 81       	ldd	r27, Z+1	; 0x01
    18aa:	9d 01       	movw	r18, r26
    18ac:	2f 5f       	subi	r18, 0xFF	; 255
    18ae:	3f 4f       	sbci	r19, 0xFF	; 255
    18b0:	31 83       	std	Z+1, r19	; 0x01
    18b2:	20 83       	st	Z, r18
    18b4:	8c 93       	st	X, r24
    18b6:	26 81       	ldd	r18, Z+6	; 0x06
    18b8:	37 81       	ldd	r19, Z+7	; 0x07
    18ba:	2f 5f       	subi	r18, 0xFF	; 255
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	37 83       	std	Z+7, r19	; 0x07
    18c0:	26 83       	std	Z+6, r18	; 0x06
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <fputc+0x6e>
    18c4:	8b 01       	movw	r16, r22
    18c6:	ec 01       	movw	r28, r24
    18c8:	fb 01       	movw	r30, r22
    18ca:	00 84       	ldd	r0, Z+8	; 0x08
    18cc:	f1 85       	ldd	r31, Z+9	; 0x09
    18ce:	e0 2d       	mov	r30, r0
    18d0:	09 95       	icall
    18d2:	89 2b       	or	r24, r25
    18d4:	e1 f6       	brne	.-72     	; 0x188e <fputc+0x10>
    18d6:	d8 01       	movw	r26, r16
    18d8:	16 96       	adiw	r26, 0x06	; 6
    18da:	8d 91       	ld	r24, X+
    18dc:	9c 91       	ld	r25, X
    18de:	17 97       	sbiw	r26, 0x07	; 7
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	17 96       	adiw	r26, 0x07	; 7
    18e4:	9c 93       	st	X, r25
    18e6:	8e 93       	st	-X, r24
    18e8:	16 97       	sbiw	r26, 0x06	; 6
    18ea:	ce 01       	movw	r24, r28
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <fputs>:
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	db 01       	movw	r26, r22
    1904:	13 96       	adiw	r26, 0x03	; 3
    1906:	2c 91       	ld	r18, X
    1908:	21 ff       	sbrs	r18, 1
    190a:	18 c0       	rjmp	.+48     	; 0x193c <fputs+0x46>
    190c:	8b 01       	movw	r16, r22
    190e:	7c 01       	movw	r14, r24
    1910:	d0 e0       	ldi	r29, 0x00	; 0
    1912:	c0 e0       	ldi	r28, 0x00	; 0
    1914:	f7 01       	movw	r30, r14
    1916:	81 91       	ld	r24, Z+
    1918:	7f 01       	movw	r14, r30
    191a:	88 23       	and	r24, r24
    191c:	61 f0       	breq	.+24     	; 0x1936 <fputs+0x40>
    191e:	d8 01       	movw	r26, r16
    1920:	18 96       	adiw	r26, 0x08	; 8
    1922:	ed 91       	ld	r30, X+
    1924:	fc 91       	ld	r31, X
    1926:	19 97       	sbiw	r26, 0x09	; 9
    1928:	b8 01       	movw	r22, r16
    192a:	09 95       	icall
    192c:	89 2b       	or	r24, r25
    192e:	91 f3       	breq	.-28     	; 0x1914 <fputs+0x1e>
    1930:	df ef       	ldi	r29, 0xFF	; 255
    1932:	cf ef       	ldi	r28, 0xFF	; 255
    1934:	ef cf       	rjmp	.-34     	; 0x1914 <fputs+0x1e>
    1936:	8d 2f       	mov	r24, r29
    1938:	9c 2f       	mov	r25, r28
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <fputs+0x4a>
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	9f ef       	ldi	r25, 0xFF	; 255
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	e6 e0       	ldi	r30, 0x06	; 6
    1946:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__epilogue_restores__+0x18>

0000194a <fwrite>:
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	eb ea       	ldi	r30, 0xAB	; 171
    1950:	fc e0       	ldi	r31, 0x0C	; 12
    1952:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__prologue_saves__+0xc>
    1956:	5b 01       	movw	r10, r22
    1958:	4a 01       	movw	r8, r20
    195a:	79 01       	movw	r14, r18
    195c:	d9 01       	movw	r26, r18
    195e:	13 96       	adiw	r26, 0x03	; 3
    1960:	2c 91       	ld	r18, X
    1962:	21 ff       	sbrs	r18, 1
    1964:	1d c0       	rjmp	.+58     	; 0x19a0 <fwrite+0x56>
    1966:	c0 e0       	ldi	r28, 0x00	; 0
    1968:	d0 e0       	ldi	r29, 0x00	; 0
    196a:	c8 15       	cp	r28, r8
    196c:	d9 05       	cpc	r29, r9
    196e:	d9 f0       	breq	.+54     	; 0x19a6 <fwrite+0x5c>
    1970:	8c 01       	movw	r16, r24
    1972:	6c 01       	movw	r12, r24
    1974:	ca 0c       	add	r12, r10
    1976:	db 1c       	adc	r13, r11
    1978:	c8 01       	movw	r24, r16
    197a:	0c 15       	cp	r16, r12
    197c:	1d 05       	cpc	r17, r13
    197e:	71 f0       	breq	.+28     	; 0x199c <fwrite+0x52>
    1980:	0f 5f       	subi	r16, 0xFF	; 255
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	d7 01       	movw	r26, r14
    1986:	18 96       	adiw	r26, 0x08	; 8
    1988:	ed 91       	ld	r30, X+
    198a:	fc 91       	ld	r31, X
    198c:	19 97       	sbiw	r26, 0x09	; 9
    198e:	b7 01       	movw	r22, r14
    1990:	dc 01       	movw	r26, r24
    1992:	8c 91       	ld	r24, X
    1994:	09 95       	icall
    1996:	89 2b       	or	r24, r25
    1998:	79 f3       	breq	.-34     	; 0x1978 <fwrite+0x2e>
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <fwrite+0x5c>
    199c:	21 96       	adiw	r28, 0x01	; 1
    199e:	e5 cf       	rjmp	.-54     	; 0x196a <fwrite+0x20>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <fwrite+0x5e>
    19a6:	ce 01       	movw	r24, r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	ec e0       	ldi	r30, 0x0C	; 12
    19ae:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__epilogue_restores__+0xc>

000019b2 <sprintf>:
    19b2:	ae e0       	ldi	r26, 0x0E	; 14
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ef ed       	ldi	r30, 0xDF	; 223
    19b8:	fc e0       	ldi	r31, 0x0C	; 12
    19ba:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x1c>
    19be:	0d 89       	ldd	r16, Y+21	; 0x15
    19c0:	1e 89       	ldd	r17, Y+22	; 0x16
    19c2:	86 e0       	ldi	r24, 0x06	; 6
    19c4:	8c 83       	std	Y+4, r24	; 0x04
    19c6:	1a 83       	std	Y+2, r17	; 0x02
    19c8:	09 83       	std	Y+1, r16	; 0x01
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	9f e7       	ldi	r25, 0x7F	; 127
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	ae 01       	movw	r20, r28
    19d4:	47 5e       	subi	r20, 0xE7	; 231
    19d6:	5f 4f       	sbci	r21, 0xFF	; 255
    19d8:	6f 89       	ldd	r22, Y+23	; 0x17
    19da:	78 8d       	ldd	r23, Y+24	; 0x18
    19dc:	ce 01       	movw	r24, r28
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <vfprintf>
    19e4:	ef 81       	ldd	r30, Y+7	; 0x07
    19e6:	f8 85       	ldd	r31, Y+8	; 0x08
    19e8:	e0 0f       	add	r30, r16
    19ea:	f1 1f       	adc	r31, r17
    19ec:	10 82       	st	Z, r1
    19ee:	2e 96       	adiw	r28, 0x0e	; 14
    19f0:	e4 e0       	ldi	r30, 0x04	; 4
    19f2:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x1c>

000019f6 <vfprintf>:
    19f6:	ab e0       	ldi	r26, 0x0B	; 11
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e1 e0       	ldi	r30, 0x01	; 1
    19fc:	fd e0       	ldi	r31, 0x0D	; 13
    19fe:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__>
    1a02:	6c 01       	movw	r12, r24
    1a04:	7b 01       	movw	r14, r22
    1a06:	8a 01       	movw	r16, r20
    1a08:	fc 01       	movw	r30, r24
    1a0a:	17 82       	std	Z+7, r1	; 0x07
    1a0c:	16 82       	std	Z+6, r1	; 0x06
    1a0e:	83 81       	ldd	r24, Z+3	; 0x03
    1a10:	81 ff       	sbrs	r24, 1
    1a12:	cc c1       	rjmp	.+920    	; 0x1dac <vfprintf+0x3b6>
    1a14:	ce 01       	movw	r24, r28
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	3c 01       	movw	r6, r24
    1a1a:	f6 01       	movw	r30, r12
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	f7 01       	movw	r30, r14
    1a20:	93 fd       	sbrc	r25, 3
    1a22:	85 91       	lpm	r24, Z+
    1a24:	93 ff       	sbrs	r25, 3
    1a26:	81 91       	ld	r24, Z+
    1a28:	7f 01       	movw	r14, r30
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <vfprintf+0x3a>
    1a2e:	ba c1       	rjmp	.+884    	; 0x1da4 <vfprintf+0x3ae>
    1a30:	85 32       	cpi	r24, 0x25	; 37
    1a32:	39 f4       	brne	.+14     	; 0x1a42 <vfprintf+0x4c>
    1a34:	93 fd       	sbrc	r25, 3
    1a36:	85 91       	lpm	r24, Z+
    1a38:	93 ff       	sbrs	r25, 3
    1a3a:	81 91       	ld	r24, Z+
    1a3c:	7f 01       	movw	r14, r30
    1a3e:	85 32       	cpi	r24, 0x25	; 37
    1a40:	29 f4       	brne	.+10     	; 0x1a4c <vfprintf+0x56>
    1a42:	b6 01       	movw	r22, r12
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1a4a:	e7 cf       	rjmp	.-50     	; 0x1a1a <vfprintf+0x24>
    1a4c:	91 2c       	mov	r9, r1
    1a4e:	21 2c       	mov	r2, r1
    1a50:	31 2c       	mov	r3, r1
    1a52:	ff e1       	ldi	r31, 0x1F	; 31
    1a54:	f3 15       	cp	r31, r3
    1a56:	d8 f0       	brcs	.+54     	; 0x1a8e <vfprintf+0x98>
    1a58:	8b 32       	cpi	r24, 0x2B	; 43
    1a5a:	79 f0       	breq	.+30     	; 0x1a7a <vfprintf+0x84>
    1a5c:	38 f4       	brcc	.+14     	; 0x1a6c <vfprintf+0x76>
    1a5e:	80 32       	cpi	r24, 0x20	; 32
    1a60:	79 f0       	breq	.+30     	; 0x1a80 <vfprintf+0x8a>
    1a62:	83 32       	cpi	r24, 0x23	; 35
    1a64:	a1 f4       	brne	.+40     	; 0x1a8e <vfprintf+0x98>
    1a66:	23 2d       	mov	r18, r3
    1a68:	20 61       	ori	r18, 0x10	; 16
    1a6a:	1d c0       	rjmp	.+58     	; 0x1aa6 <vfprintf+0xb0>
    1a6c:	8d 32       	cpi	r24, 0x2D	; 45
    1a6e:	61 f0       	breq	.+24     	; 0x1a88 <vfprintf+0x92>
    1a70:	80 33       	cpi	r24, 0x30	; 48
    1a72:	69 f4       	brne	.+26     	; 0x1a8e <vfprintf+0x98>
    1a74:	23 2d       	mov	r18, r3
    1a76:	21 60       	ori	r18, 0x01	; 1
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <vfprintf+0xb0>
    1a7a:	83 2d       	mov	r24, r3
    1a7c:	82 60       	ori	r24, 0x02	; 2
    1a7e:	38 2e       	mov	r3, r24
    1a80:	e3 2d       	mov	r30, r3
    1a82:	e4 60       	ori	r30, 0x04	; 4
    1a84:	3e 2e       	mov	r3, r30
    1a86:	2a c0       	rjmp	.+84     	; 0x1adc <vfprintf+0xe6>
    1a88:	f3 2d       	mov	r31, r3
    1a8a:	f8 60       	ori	r31, 0x08	; 8
    1a8c:	1d c0       	rjmp	.+58     	; 0x1ac8 <vfprintf+0xd2>
    1a8e:	37 fc       	sbrc	r3, 7
    1a90:	2d c0       	rjmp	.+90     	; 0x1aec <vfprintf+0xf6>
    1a92:	20 ed       	ldi	r18, 0xD0	; 208
    1a94:	28 0f       	add	r18, r24
    1a96:	2a 30       	cpi	r18, 0x0A	; 10
    1a98:	40 f0       	brcs	.+16     	; 0x1aaa <vfprintf+0xb4>
    1a9a:	8e 32       	cpi	r24, 0x2E	; 46
    1a9c:	b9 f4       	brne	.+46     	; 0x1acc <vfprintf+0xd6>
    1a9e:	36 fc       	sbrc	r3, 6
    1aa0:	81 c1       	rjmp	.+770    	; 0x1da4 <vfprintf+0x3ae>
    1aa2:	23 2d       	mov	r18, r3
    1aa4:	20 64       	ori	r18, 0x40	; 64
    1aa6:	32 2e       	mov	r3, r18
    1aa8:	19 c0       	rjmp	.+50     	; 0x1adc <vfprintf+0xe6>
    1aaa:	36 fe       	sbrs	r3, 6
    1aac:	06 c0       	rjmp	.+12     	; 0x1aba <vfprintf+0xc4>
    1aae:	8a e0       	ldi	r24, 0x0A	; 10
    1ab0:	98 9e       	mul	r9, r24
    1ab2:	20 0d       	add	r18, r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	92 2e       	mov	r9, r18
    1ab8:	11 c0       	rjmp	.+34     	; 0x1adc <vfprintf+0xe6>
    1aba:	ea e0       	ldi	r30, 0x0A	; 10
    1abc:	2e 9e       	mul	r2, r30
    1abe:	20 0d       	add	r18, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	22 2e       	mov	r2, r18
    1ac4:	f3 2d       	mov	r31, r3
    1ac6:	f0 62       	ori	r31, 0x20	; 32
    1ac8:	3f 2e       	mov	r3, r31
    1aca:	08 c0       	rjmp	.+16     	; 0x1adc <vfprintf+0xe6>
    1acc:	8c 36       	cpi	r24, 0x6C	; 108
    1ace:	21 f4       	brne	.+8      	; 0x1ad8 <vfprintf+0xe2>
    1ad0:	83 2d       	mov	r24, r3
    1ad2:	80 68       	ori	r24, 0x80	; 128
    1ad4:	38 2e       	mov	r3, r24
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <vfprintf+0xe6>
    1ad8:	88 36       	cpi	r24, 0x68	; 104
    1ada:	41 f4       	brne	.+16     	; 0x1aec <vfprintf+0xf6>
    1adc:	f7 01       	movw	r30, r14
    1ade:	93 fd       	sbrc	r25, 3
    1ae0:	85 91       	lpm	r24, Z+
    1ae2:	93 ff       	sbrs	r25, 3
    1ae4:	81 91       	ld	r24, Z+
    1ae6:	7f 01       	movw	r14, r30
    1ae8:	81 11       	cpse	r24, r1
    1aea:	b3 cf       	rjmp	.-154    	; 0x1a52 <vfprintf+0x5c>
    1aec:	98 2f       	mov	r25, r24
    1aee:	9f 7d       	andi	r25, 0xDF	; 223
    1af0:	95 54       	subi	r25, 0x45	; 69
    1af2:	93 30       	cpi	r25, 0x03	; 3
    1af4:	28 f4       	brcc	.+10     	; 0x1b00 <vfprintf+0x10a>
    1af6:	0c 5f       	subi	r16, 0xFC	; 252
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	9f e3       	ldi	r25, 0x3F	; 63
    1afc:	99 83       	std	Y+1, r25	; 0x01
    1afe:	0d c0       	rjmp	.+26     	; 0x1b1a <vfprintf+0x124>
    1b00:	83 36       	cpi	r24, 0x63	; 99
    1b02:	31 f0       	breq	.+12     	; 0x1b10 <vfprintf+0x11a>
    1b04:	83 37       	cpi	r24, 0x73	; 115
    1b06:	71 f0       	breq	.+28     	; 0x1b24 <vfprintf+0x12e>
    1b08:	83 35       	cpi	r24, 0x53	; 83
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <vfprintf+0x118>
    1b0c:	59 c0       	rjmp	.+178    	; 0x1bc0 <vfprintf+0x1ca>
    1b0e:	21 c0       	rjmp	.+66     	; 0x1b52 <vfprintf+0x15c>
    1b10:	f8 01       	movw	r30, r16
    1b12:	80 81       	ld	r24, Z
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	0e 5f       	subi	r16, 0xFE	; 254
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	88 24       	eor	r8, r8
    1b1c:	83 94       	inc	r8
    1b1e:	91 2c       	mov	r9, r1
    1b20:	53 01       	movw	r10, r6
    1b22:	13 c0       	rjmp	.+38     	; 0x1b4a <vfprintf+0x154>
    1b24:	28 01       	movw	r4, r16
    1b26:	f2 e0       	ldi	r31, 0x02	; 2
    1b28:	4f 0e       	add	r4, r31
    1b2a:	51 1c       	adc	r5, r1
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	a0 80       	ld	r10, Z
    1b30:	b1 80       	ldd	r11, Z+1	; 0x01
    1b32:	36 fe       	sbrs	r3, 6
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <vfprintf+0x146>
    1b36:	69 2d       	mov	r22, r9
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <vfprintf+0x14a>
    1b3c:	6f ef       	ldi	r22, 0xFF	; 255
    1b3e:	7f ef       	ldi	r23, 0xFF	; 255
    1b40:	c5 01       	movw	r24, r10
    1b42:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <strnlen>
    1b46:	4c 01       	movw	r8, r24
    1b48:	82 01       	movw	r16, r4
    1b4a:	f3 2d       	mov	r31, r3
    1b4c:	ff 77       	andi	r31, 0x7F	; 127
    1b4e:	3f 2e       	mov	r3, r31
    1b50:	16 c0       	rjmp	.+44     	; 0x1b7e <vfprintf+0x188>
    1b52:	28 01       	movw	r4, r16
    1b54:	22 e0       	ldi	r18, 0x02	; 2
    1b56:	42 0e       	add	r4, r18
    1b58:	51 1c       	adc	r5, r1
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	a0 80       	ld	r10, Z
    1b5e:	b1 80       	ldd	r11, Z+1	; 0x01
    1b60:	36 fe       	sbrs	r3, 6
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <vfprintf+0x174>
    1b64:	69 2d       	mov	r22, r9
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <vfprintf+0x178>
    1b6a:	6f ef       	ldi	r22, 0xFF	; 255
    1b6c:	7f ef       	ldi	r23, 0xFF	; 255
    1b6e:	c5 01       	movw	r24, r10
    1b70:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <strnlen_P>
    1b74:	4c 01       	movw	r8, r24
    1b76:	f3 2d       	mov	r31, r3
    1b78:	f0 68       	ori	r31, 0x80	; 128
    1b7a:	3f 2e       	mov	r3, r31
    1b7c:	82 01       	movw	r16, r4
    1b7e:	33 fc       	sbrc	r3, 3
    1b80:	1b c0       	rjmp	.+54     	; 0x1bb8 <vfprintf+0x1c2>
    1b82:	82 2d       	mov	r24, r2
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	88 16       	cp	r8, r24
    1b88:	99 06       	cpc	r9, r25
    1b8a:	b0 f4       	brcc	.+44     	; 0x1bb8 <vfprintf+0x1c2>
    1b8c:	b6 01       	movw	r22, r12
    1b8e:	80 e2       	ldi	r24, 0x20	; 32
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1b96:	2a 94       	dec	r2
    1b98:	f4 cf       	rjmp	.-24     	; 0x1b82 <vfprintf+0x18c>
    1b9a:	f5 01       	movw	r30, r10
    1b9c:	37 fc       	sbrc	r3, 7
    1b9e:	85 91       	lpm	r24, Z+
    1ba0:	37 fe       	sbrs	r3, 7
    1ba2:	81 91       	ld	r24, Z+
    1ba4:	5f 01       	movw	r10, r30
    1ba6:	b6 01       	movw	r22, r12
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1bae:	21 10       	cpse	r2, r1
    1bb0:	2a 94       	dec	r2
    1bb2:	21 e0       	ldi	r18, 0x01	; 1
    1bb4:	82 1a       	sub	r8, r18
    1bb6:	91 08       	sbc	r9, r1
    1bb8:	81 14       	cp	r8, r1
    1bba:	91 04       	cpc	r9, r1
    1bbc:	71 f7       	brne	.-36     	; 0x1b9a <vfprintf+0x1a4>
    1bbe:	e8 c0       	rjmp	.+464    	; 0x1d90 <vfprintf+0x39a>
    1bc0:	84 36       	cpi	r24, 0x64	; 100
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <vfprintf+0x1d2>
    1bc4:	89 36       	cpi	r24, 0x69	; 105
    1bc6:	41 f5       	brne	.+80     	; 0x1c18 <vfprintf+0x222>
    1bc8:	f8 01       	movw	r30, r16
    1bca:	37 fe       	sbrs	r3, 7
    1bcc:	07 c0       	rjmp	.+14     	; 0x1bdc <vfprintf+0x1e6>
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	0c 5f       	subi	r16, 0xFC	; 252
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	08 c0       	rjmp	.+16     	; 0x1bec <vfprintf+0x1f6>
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	07 2e       	mov	r0, r23
    1be2:	00 0c       	add	r0, r0
    1be4:	88 0b       	sbc	r24, r24
    1be6:	99 0b       	sbc	r25, r25
    1be8:	0e 5f       	subi	r16, 0xFE	; 254
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	f3 2d       	mov	r31, r3
    1bee:	ff 76       	andi	r31, 0x6F	; 111
    1bf0:	3f 2e       	mov	r3, r31
    1bf2:	97 ff       	sbrs	r25, 7
    1bf4:	09 c0       	rjmp	.+18     	; 0x1c08 <vfprintf+0x212>
    1bf6:	90 95       	com	r25
    1bf8:	80 95       	com	r24
    1bfa:	70 95       	com	r23
    1bfc:	61 95       	neg	r22
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	8f 4f       	sbci	r24, 0xFF	; 255
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	f0 68       	ori	r31, 0x80	; 128
    1c06:	3f 2e       	mov	r3, r31
    1c08:	2a e0       	ldi	r18, 0x0A	; 10
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	a3 01       	movw	r20, r6
    1c0e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__ultoa_invert>
    1c12:	88 2e       	mov	r8, r24
    1c14:	86 18       	sub	r8, r6
    1c16:	45 c0       	rjmp	.+138    	; 0x1ca2 <vfprintf+0x2ac>
    1c18:	85 37       	cpi	r24, 0x75	; 117
    1c1a:	31 f4       	brne	.+12     	; 0x1c28 <vfprintf+0x232>
    1c1c:	23 2d       	mov	r18, r3
    1c1e:	2f 7e       	andi	r18, 0xEF	; 239
    1c20:	b2 2e       	mov	r11, r18
    1c22:	2a e0       	ldi	r18, 0x0A	; 10
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	25 c0       	rjmp	.+74     	; 0x1c72 <vfprintf+0x27c>
    1c28:	93 2d       	mov	r25, r3
    1c2a:	99 7f       	andi	r25, 0xF9	; 249
    1c2c:	b9 2e       	mov	r11, r25
    1c2e:	8f 36       	cpi	r24, 0x6F	; 111
    1c30:	c1 f0       	breq	.+48     	; 0x1c62 <vfprintf+0x26c>
    1c32:	18 f4       	brcc	.+6      	; 0x1c3a <vfprintf+0x244>
    1c34:	88 35       	cpi	r24, 0x58	; 88
    1c36:	79 f0       	breq	.+30     	; 0x1c56 <vfprintf+0x260>
    1c38:	b5 c0       	rjmp	.+362    	; 0x1da4 <vfprintf+0x3ae>
    1c3a:	80 37       	cpi	r24, 0x70	; 112
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <vfprintf+0x24e>
    1c3e:	88 37       	cpi	r24, 0x78	; 120
    1c40:	21 f0       	breq	.+8      	; 0x1c4a <vfprintf+0x254>
    1c42:	b0 c0       	rjmp	.+352    	; 0x1da4 <vfprintf+0x3ae>
    1c44:	e9 2f       	mov	r30, r25
    1c46:	e0 61       	ori	r30, 0x10	; 16
    1c48:	be 2e       	mov	r11, r30
    1c4a:	b4 fe       	sbrs	r11, 4
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <vfprintf+0x272>
    1c4e:	fb 2d       	mov	r31, r11
    1c50:	f4 60       	ori	r31, 0x04	; 4
    1c52:	bf 2e       	mov	r11, r31
    1c54:	09 c0       	rjmp	.+18     	; 0x1c68 <vfprintf+0x272>
    1c56:	34 fe       	sbrs	r3, 4
    1c58:	0a c0       	rjmp	.+20     	; 0x1c6e <vfprintf+0x278>
    1c5a:	29 2f       	mov	r18, r25
    1c5c:	26 60       	ori	r18, 0x06	; 6
    1c5e:	b2 2e       	mov	r11, r18
    1c60:	06 c0       	rjmp	.+12     	; 0x1c6e <vfprintf+0x278>
    1c62:	28 e0       	ldi	r18, 0x08	; 8
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <vfprintf+0x27c>
    1c68:	20 e1       	ldi	r18, 0x10	; 16
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <vfprintf+0x27c>
    1c6e:	20 e1       	ldi	r18, 0x10	; 16
    1c70:	32 e0       	ldi	r19, 0x02	; 2
    1c72:	f8 01       	movw	r30, r16
    1c74:	b7 fe       	sbrs	r11, 7
    1c76:	07 c0       	rjmp	.+14     	; 0x1c86 <vfprintf+0x290>
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	0c 5f       	subi	r16, 0xFC	; 252
    1c82:	1f 4f       	sbci	r17, 0xFF	; 255
    1c84:	06 c0       	rjmp	.+12     	; 0x1c92 <vfprintf+0x29c>
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 5f       	subi	r16, 0xFE	; 254
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	a3 01       	movw	r20, r6
    1c94:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__ultoa_invert>
    1c98:	88 2e       	mov	r8, r24
    1c9a:	86 18       	sub	r8, r6
    1c9c:	fb 2d       	mov	r31, r11
    1c9e:	ff 77       	andi	r31, 0x7F	; 127
    1ca0:	3f 2e       	mov	r3, r31
    1ca2:	36 fe       	sbrs	r3, 6
    1ca4:	0d c0       	rjmp	.+26     	; 0x1cc0 <vfprintf+0x2ca>
    1ca6:	23 2d       	mov	r18, r3
    1ca8:	2e 7f       	andi	r18, 0xFE	; 254
    1caa:	a2 2e       	mov	r10, r18
    1cac:	89 14       	cp	r8, r9
    1cae:	58 f4       	brcc	.+22     	; 0x1cc6 <vfprintf+0x2d0>
    1cb0:	34 fe       	sbrs	r3, 4
    1cb2:	0b c0       	rjmp	.+22     	; 0x1cca <vfprintf+0x2d4>
    1cb4:	32 fc       	sbrc	r3, 2
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <vfprintf+0x2d4>
    1cb8:	83 2d       	mov	r24, r3
    1cba:	8e 7e       	andi	r24, 0xEE	; 238
    1cbc:	a8 2e       	mov	r10, r24
    1cbe:	05 c0       	rjmp	.+10     	; 0x1cca <vfprintf+0x2d4>
    1cc0:	b8 2c       	mov	r11, r8
    1cc2:	a3 2c       	mov	r10, r3
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <vfprintf+0x2d6>
    1cc6:	b8 2c       	mov	r11, r8
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <vfprintf+0x2d6>
    1cca:	b9 2c       	mov	r11, r9
    1ccc:	a4 fe       	sbrs	r10, 4
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <vfprintf+0x2f8>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e8 0d       	add	r30, r8
    1cd4:	f1 1d       	adc	r31, r1
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 33       	cpi	r24, 0x30	; 48
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <vfprintf+0x2ee>
    1cdc:	9a 2d       	mov	r25, r10
    1cde:	99 7e       	andi	r25, 0xE9	; 233
    1ce0:	a9 2e       	mov	r10, r25
    1ce2:	09 c0       	rjmp	.+18     	; 0x1cf6 <vfprintf+0x300>
    1ce4:	a2 fe       	sbrs	r10, 2
    1ce6:	06 c0       	rjmp	.+12     	; 0x1cf4 <vfprintf+0x2fe>
    1ce8:	b3 94       	inc	r11
    1cea:	b3 94       	inc	r11
    1cec:	04 c0       	rjmp	.+8      	; 0x1cf6 <vfprintf+0x300>
    1cee:	8a 2d       	mov	r24, r10
    1cf0:	86 78       	andi	r24, 0x86	; 134
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <vfprintf+0x300>
    1cf4:	b3 94       	inc	r11
    1cf6:	a3 fc       	sbrc	r10, 3
    1cf8:	11 c0       	rjmp	.+34     	; 0x1d1c <vfprintf+0x326>
    1cfa:	a0 fe       	sbrs	r10, 0
    1cfc:	06 c0       	rjmp	.+12     	; 0x1d0a <vfprintf+0x314>
    1cfe:	b2 14       	cp	r11, r2
    1d00:	88 f4       	brcc	.+34     	; 0x1d24 <vfprintf+0x32e>
    1d02:	28 0c       	add	r2, r8
    1d04:	92 2c       	mov	r9, r2
    1d06:	9b 18       	sub	r9, r11
    1d08:	0e c0       	rjmp	.+28     	; 0x1d26 <vfprintf+0x330>
    1d0a:	b2 14       	cp	r11, r2
    1d0c:	60 f4       	brcc	.+24     	; 0x1d26 <vfprintf+0x330>
    1d0e:	b6 01       	movw	r22, r12
    1d10:	80 e2       	ldi	r24, 0x20	; 32
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1d18:	b3 94       	inc	r11
    1d1a:	f7 cf       	rjmp	.-18     	; 0x1d0a <vfprintf+0x314>
    1d1c:	b2 14       	cp	r11, r2
    1d1e:	18 f4       	brcc	.+6      	; 0x1d26 <vfprintf+0x330>
    1d20:	2b 18       	sub	r2, r11
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <vfprintf+0x332>
    1d24:	98 2c       	mov	r9, r8
    1d26:	21 2c       	mov	r2, r1
    1d28:	a4 fe       	sbrs	r10, 4
    1d2a:	10 c0       	rjmp	.+32     	; 0x1d4c <vfprintf+0x356>
    1d2c:	b6 01       	movw	r22, r12
    1d2e:	80 e3       	ldi	r24, 0x30	; 48
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1d36:	a2 fe       	sbrs	r10, 2
    1d38:	17 c0       	rjmp	.+46     	; 0x1d68 <vfprintf+0x372>
    1d3a:	a1 fc       	sbrc	r10, 1
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <vfprintf+0x34e>
    1d3e:	88 e7       	ldi	r24, 0x78	; 120
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <vfprintf+0x352>
    1d44:	88 e5       	ldi	r24, 0x58	; 88
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	b6 01       	movw	r22, r12
    1d4a:	0c c0       	rjmp	.+24     	; 0x1d64 <vfprintf+0x36e>
    1d4c:	8a 2d       	mov	r24, r10
    1d4e:	86 78       	andi	r24, 0x86	; 134
    1d50:	59 f0       	breq	.+22     	; 0x1d68 <vfprintf+0x372>
    1d52:	a1 fe       	sbrs	r10, 1
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <vfprintf+0x364>
    1d56:	8b e2       	ldi	r24, 0x2B	; 43
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <vfprintf+0x366>
    1d5a:	80 e2       	ldi	r24, 0x20	; 32
    1d5c:	a7 fc       	sbrc	r10, 7
    1d5e:	8d e2       	ldi	r24, 0x2D	; 45
    1d60:	b6 01       	movw	r22, r12
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1d68:	89 14       	cp	r8, r9
    1d6a:	38 f4       	brcc	.+14     	; 0x1d7a <vfprintf+0x384>
    1d6c:	b6 01       	movw	r22, r12
    1d6e:	80 e3       	ldi	r24, 0x30	; 48
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1d76:	9a 94       	dec	r9
    1d78:	f7 cf       	rjmp	.-18     	; 0x1d68 <vfprintf+0x372>
    1d7a:	8a 94       	dec	r8
    1d7c:	f3 01       	movw	r30, r6
    1d7e:	e8 0d       	add	r30, r8
    1d80:	f1 1d       	adc	r31, r1
    1d82:	80 81       	ld	r24, Z
    1d84:	b6 01       	movw	r22, r12
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1d8c:	81 10       	cpse	r8, r1
    1d8e:	f5 cf       	rjmp	.-22     	; 0x1d7a <vfprintf+0x384>
    1d90:	22 20       	and	r2, r2
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <vfprintf+0x3a0>
    1d94:	42 ce       	rjmp	.-892    	; 0x1a1a <vfprintf+0x24>
    1d96:	b6 01       	movw	r22, r12
    1d98:	80 e2       	ldi	r24, 0x20	; 32
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 3f 0c 	call	0x187e	; 0x187e <fputc>
    1da0:	2a 94       	dec	r2
    1da2:	f6 cf       	rjmp	.-20     	; 0x1d90 <vfprintf+0x39a>
    1da4:	f6 01       	movw	r30, r12
    1da6:	86 81       	ldd	r24, Z+6	; 0x06
    1da8:	97 81       	ldd	r25, Z+7	; 0x07
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <vfprintf+0x3ba>
    1dac:	8f ef       	ldi	r24, 0xFF	; 255
    1dae:	9f ef       	ldi	r25, 0xFF	; 255
    1db0:	2b 96       	adiw	r28, 0x0b	; 11
    1db2:	e2 e1       	ldi	r30, 0x12	; 18
    1db4:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__>

00001db8 <strnlen_P>:
    1db8:	fc 01       	movw	r30, r24
    1dba:	05 90       	lpm	r0, Z+
    1dbc:	61 50       	subi	r22, 0x01	; 1
    1dbe:	70 40       	sbci	r23, 0x00	; 0
    1dc0:	01 10       	cpse	r0, r1
    1dc2:	d8 f7       	brcc	.-10     	; 0x1dba <strnlen_P+0x2>
    1dc4:	80 95       	com	r24
    1dc6:	90 95       	com	r25
    1dc8:	8e 0f       	add	r24, r30
    1dca:	9f 1f       	adc	r25, r31
    1dcc:	08 95       	ret

00001dce <strnlen>:
    1dce:	fc 01       	movw	r30, r24
    1dd0:	61 50       	subi	r22, 0x01	; 1
    1dd2:	70 40       	sbci	r23, 0x00	; 0
    1dd4:	01 90       	ld	r0, Z+
    1dd6:	01 10       	cpse	r0, r1
    1dd8:	d8 f7       	brcc	.-10     	; 0x1dd0 <strnlen+0x2>
    1dda:	80 95       	com	r24
    1ddc:	90 95       	com	r25
    1dde:	8e 0f       	add	r24, r30
    1de0:	9f 1f       	adc	r25, r31
    1de2:	08 95       	ret

00001de4 <__ultoa_invert>:
    1de4:	fa 01       	movw	r30, r20
    1de6:	aa 27       	eor	r26, r26
    1de8:	28 30       	cpi	r18, 0x08	; 8
    1dea:	51 f1       	breq	.+84     	; 0x1e40 <__ultoa_invert+0x5c>
    1dec:	20 31       	cpi	r18, 0x10	; 16
    1dee:	81 f1       	breq	.+96     	; 0x1e50 <__ultoa_invert+0x6c>
    1df0:	e8 94       	clt
    1df2:	6f 93       	push	r22
    1df4:	6e 7f       	andi	r22, 0xFE	; 254
    1df6:	6e 5f       	subi	r22, 0xFE	; 254
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfe:	af 4f       	sbci	r26, 0xFF	; 255
    1e00:	b1 e0       	ldi	r27, 0x01	; 1
    1e02:	3e d0       	rcall	.+124    	; 0x1e80 <__ultoa_invert+0x9c>
    1e04:	b4 e0       	ldi	r27, 0x04	; 4
    1e06:	3c d0       	rcall	.+120    	; 0x1e80 <__ultoa_invert+0x9c>
    1e08:	67 0f       	add	r22, r23
    1e0a:	78 1f       	adc	r23, r24
    1e0c:	89 1f       	adc	r24, r25
    1e0e:	9a 1f       	adc	r25, r26
    1e10:	a1 1d       	adc	r26, r1
    1e12:	68 0f       	add	r22, r24
    1e14:	79 1f       	adc	r23, r25
    1e16:	8a 1f       	adc	r24, r26
    1e18:	91 1d       	adc	r25, r1
    1e1a:	a1 1d       	adc	r26, r1
    1e1c:	6a 0f       	add	r22, r26
    1e1e:	71 1d       	adc	r23, r1
    1e20:	81 1d       	adc	r24, r1
    1e22:	91 1d       	adc	r25, r1
    1e24:	a1 1d       	adc	r26, r1
    1e26:	20 d0       	rcall	.+64     	; 0x1e68 <__ultoa_invert+0x84>
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <__ultoa_invert+0x48>
    1e2a:	68 94       	set
    1e2c:	3f 91       	pop	r19
    1e2e:	2a e0       	ldi	r18, 0x0A	; 10
    1e30:	26 9f       	mul	r18, r22
    1e32:	11 24       	eor	r1, r1
    1e34:	30 19       	sub	r19, r0
    1e36:	30 5d       	subi	r19, 0xD0	; 208
    1e38:	31 93       	st	Z+, r19
    1e3a:	de f6       	brtc	.-74     	; 0x1df2 <__ultoa_invert+0xe>
    1e3c:	cf 01       	movw	r24, r30
    1e3e:	08 95       	ret
    1e40:	46 2f       	mov	r20, r22
    1e42:	47 70       	andi	r20, 0x07	; 7
    1e44:	40 5d       	subi	r20, 0xD0	; 208
    1e46:	41 93       	st	Z+, r20
    1e48:	b3 e0       	ldi	r27, 0x03	; 3
    1e4a:	0f d0       	rcall	.+30     	; 0x1e6a <__ultoa_invert+0x86>
    1e4c:	c9 f7       	brne	.-14     	; 0x1e40 <__ultoa_invert+0x5c>
    1e4e:	f6 cf       	rjmp	.-20     	; 0x1e3c <__ultoa_invert+0x58>
    1e50:	46 2f       	mov	r20, r22
    1e52:	4f 70       	andi	r20, 0x0F	; 15
    1e54:	40 5d       	subi	r20, 0xD0	; 208
    1e56:	4a 33       	cpi	r20, 0x3A	; 58
    1e58:	18 f0       	brcs	.+6      	; 0x1e60 <__ultoa_invert+0x7c>
    1e5a:	49 5d       	subi	r20, 0xD9	; 217
    1e5c:	31 fd       	sbrc	r19, 1
    1e5e:	40 52       	subi	r20, 0x20	; 32
    1e60:	41 93       	st	Z+, r20
    1e62:	02 d0       	rcall	.+4      	; 0x1e68 <__ultoa_invert+0x84>
    1e64:	a9 f7       	brne	.-22     	; 0x1e50 <__ultoa_invert+0x6c>
    1e66:	ea cf       	rjmp	.-44     	; 0x1e3c <__ultoa_invert+0x58>
    1e68:	b4 e0       	ldi	r27, 0x04	; 4
    1e6a:	a6 95       	lsr	r26
    1e6c:	97 95       	ror	r25
    1e6e:	87 95       	ror	r24
    1e70:	77 95       	ror	r23
    1e72:	67 95       	ror	r22
    1e74:	ba 95       	dec	r27
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__ultoa_invert+0x86>
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	61 05       	cpc	r22, r1
    1e7c:	71 05       	cpc	r23, r1
    1e7e:	08 95       	ret
    1e80:	9b 01       	movw	r18, r22
    1e82:	ac 01       	movw	r20, r24
    1e84:	0a 2e       	mov	r0, r26
    1e86:	06 94       	lsr	r0
    1e88:	57 95       	ror	r21
    1e8a:	47 95       	ror	r20
    1e8c:	37 95       	ror	r19
    1e8e:	27 95       	ror	r18
    1e90:	ba 95       	dec	r27
    1e92:	c9 f7       	brne	.-14     	; 0x1e86 <__ultoa_invert+0xa2>
    1e94:	62 0f       	add	r22, r18
    1e96:	73 1f       	adc	r23, r19
    1e98:	84 1f       	adc	r24, r20
    1e9a:	95 1f       	adc	r25, r21
    1e9c:	a0 1d       	adc	r26, r0
    1e9e:	08 95       	ret

00001ea0 <__muluhisi3>:
    1ea0:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__umulhisi3>
    1ea4:	a5 9f       	mul	r26, r21
    1ea6:	90 0d       	add	r25, r0
    1ea8:	b4 9f       	mul	r27, r20
    1eaa:	90 0d       	add	r25, r0
    1eac:	a4 9f       	mul	r26, r20
    1eae:	80 0d       	add	r24, r0
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	11 24       	eor	r1, r1
    1eb4:	08 95       	ret

00001eb6 <__mulshisi3>:
    1eb6:	b7 ff       	sbrs	r27, 7
    1eb8:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__muluhisi3>

00001ebc <__mulohisi3>:
    1ebc:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__muluhisi3>
    1ec0:	82 1b       	sub	r24, r18
    1ec2:	93 0b       	sbc	r25, r19
    1ec4:	08 95       	ret

00001ec6 <__prologue_saves__>:
    1ec6:	2f 92       	push	r2
    1ec8:	3f 92       	push	r3
    1eca:	4f 92       	push	r4
    1ecc:	5f 92       	push	r5
    1ece:	6f 92       	push	r6
    1ed0:	7f 92       	push	r7
    1ed2:	8f 92       	push	r8
    1ed4:	9f 92       	push	r9
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	ca 1b       	sub	r28, r26
    1ef0:	db 0b       	sbc	r29, r27
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	09 94       	ijmp

00001efe <__epilogue_restores__>:
    1efe:	2a 88       	ldd	r2, Y+18	; 0x12
    1f00:	39 88       	ldd	r3, Y+17	; 0x11
    1f02:	48 88       	ldd	r4, Y+16	; 0x10
    1f04:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f06:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f08:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f10:	b9 84       	ldd	r11, Y+9	; 0x09
    1f12:	c8 84       	ldd	r12, Y+8	; 0x08
    1f14:	df 80       	ldd	r13, Y+7	; 0x07
    1f16:	ee 80       	ldd	r14, Y+6	; 0x06
    1f18:	fd 80       	ldd	r15, Y+5	; 0x05
    1f1a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f1c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f1e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f20:	b9 81       	ldd	r27, Y+1	; 0x01
    1f22:	ce 0f       	add	r28, r30
    1f24:	d1 1d       	adc	r29, r1
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	ed 01       	movw	r28, r26
    1f32:	08 95       	ret

00001f34 <__umulhisi3>:
    1f34:	a2 9f       	mul	r26, r18
    1f36:	b0 01       	movw	r22, r0
    1f38:	b3 9f       	mul	r27, r19
    1f3a:	c0 01       	movw	r24, r0
    1f3c:	a3 9f       	mul	r26, r19
    1f3e:	70 0d       	add	r23, r0
    1f40:	81 1d       	adc	r24, r1
    1f42:	11 24       	eor	r1, r1
    1f44:	91 1d       	adc	r25, r1
    1f46:	b2 9f       	mul	r27, r18
    1f48:	70 0d       	add	r23, r0
    1f4a:	81 1d       	adc	r24, r1
    1f4c:	11 24       	eor	r1, r1
    1f4e:	91 1d       	adc	r25, r1
    1f50:	08 95       	ret

00001f52 <_exit>:
    1f52:	f8 94       	cli

00001f54 <__stop_program>:
    1f54:	ff cf       	rjmp	.-2      	; 0x1f54 <__stop_program>
