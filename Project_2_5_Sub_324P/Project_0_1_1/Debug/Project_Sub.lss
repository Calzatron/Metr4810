
Project_Sub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00001f68  00001ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  008001ac  008001ac  000020a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ad  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f3  00000000  00000000  00003989  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095f  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00004adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000558  00000000  00000000  00004e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e36  00000000  00000000  000053e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000621e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__vector_13>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      50:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_20>
      54:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_21>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      6c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      70:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      74:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      78:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      7c:	ac 03       	fmulsu	r18, r20
      7e:	ea 04       	cpc	r14, r10
      80:	ea 04       	cpc	r14, r10
      82:	ea 04       	cpc	r14, r10
      84:	ea 04       	cpc	r14, r10
      86:	ea 04       	cpc	r14, r10
      88:	ea 04       	cpc	r14, r10
      8a:	ea 04       	cpc	r14, r10
      8c:	ea 04       	cpc	r14, r10
      8e:	ea 04       	cpc	r14, r10
      90:	ea 04       	cpc	r14, r10
      92:	0c 05       	cpc	r16, r12
      94:	ea 04       	cpc	r14, r10
      96:	cc 02       	muls	r28, r28
      98:	ea 04       	cpc	r14, r10
      9a:	ea 04       	cpc	r14, r10
      9c:	2e 03       	fmul	r18, r22
      9e:	33 03       	mulsu	r19, r19
      a0:	39 03       	fmul	r19, r17
      a2:	3f 03       	fmul	r19, r23
      a4:	45 03       	mulsu	r20, r21
      a6:	4b 03       	fmul	r20, r19
      a8:	ea 04       	cpc	r14, r10
      aa:	ea 04       	cpc	r14, r10
      ac:	ea 04       	cpc	r14, r10
      ae:	ea 04       	cpc	r14, r10
      b0:	ea 04       	cpc	r14, r10
      b2:	ea 04       	cpc	r14, r10
      b4:	ea 04       	cpc	r14, r10
      b6:	c3 02       	muls	r28, r19
      b8:	ea 04       	cpc	r14, r10
      ba:	0c 05       	cpc	r16, r12
      bc:	ea 04       	cpc	r14, r10
      be:	ea 04       	cpc	r14, r10
      c0:	ea 04       	cpc	r14, r10
      c2:	ea 04       	cpc	r14, r10
      c4:	ea 04       	cpc	r14, r10
      c6:	ea 04       	cpc	r14, r10
      c8:	ea 04       	cpc	r14, r10
      ca:	ea 04       	cpc	r14, r10
      cc:	ea 04       	cpc	r14, r10
      ce:	ea 04       	cpc	r14, r10
      d0:	ea 04       	cpc	r14, r10
      d2:	ea 04       	cpc	r14, r10
      d4:	c2 03       	fmuls	r20, r18
      d6:	ea 04       	cpc	r14, r10
      d8:	ea 04       	cpc	r14, r10
      da:	ea 04       	cpc	r14, r10
      dc:	ea 04       	cpc	r14, r10
      de:	ea 04       	cpc	r14, r10
      e0:	ea 04       	cpc	r14, r10
      e2:	ea 04       	cpc	r14, r10
      e4:	ea 04       	cpc	r14, r10
      e6:	ea 04       	cpc	r14, r10
      e8:	ea 04       	cpc	r14, r10
      ea:	ea 04       	cpc	r14, r10
      ec:	ea 04       	cpc	r14, r10
      ee:	ea 04       	cpc	r14, r10
      f0:	ea 04       	cpc	r14, r10
      f2:	51 03       	mulsu	r21, r17
      f4:	ea 04       	cpc	r14, r10
      f6:	7f 03       	fmul	r23, r23
      f8:	ea 04       	cpc	r14, r10
      fa:	ea 04       	cpc	r14, r10
      fc:	29 03       	fmul	r18, r17
      fe:	aa 02       	muls	r26, r26
     100:	ea 04       	cpc	r14, r10
     102:	ea 04       	cpc	r14, r10
     104:	b4 02       	muls	r27, r20
     106:	d5 02       	muls	r29, r21
     108:	ea 04       	cpc	r14, r10
     10a:	b7 03       	fmuls	r19, r23
     10c:	b3 03       	fmuls	r19, r19
     10e:	ea 04       	cpc	r14, r10
     110:	c3 03       	fmuls	r20, r19
     112:	50 04       	cpc	r5, r0
     114:	bb 03       	fmulsu	r19, r19
     116:	ea 04       	cpc	r14, r10
     118:	ea 04       	cpc	r14, r10
     11a:	dd 04       	cpc	r13, r13
     11c:	ea 04       	cpc	r14, r10
     11e:	ff 02       	muls	r31, r31
     120:	be 02       	muls	r27, r30
     122:	af 02       	muls	r26, r31
     124:	ea 04       	cpc	r14, r10
     126:	ea 04       	cpc	r14, r10
     128:	ea 04       	cpc	r14, r10
     12a:	b9 02       	muls	r27, r25

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d8 e0       	ldi	r29, 0x08	; 8
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e8 e6       	ldi	r30, 0x68	; 104
     140:	ff e1       	ldi	r31, 0x1F	; 31
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	ac 3a       	cpi	r26, 0xAC	; 172
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	22 e0       	ldi	r18, 0x02	; 2
     150:	ac ea       	ldi	r26, 0xAC	; 172
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a7 3d       	cpi	r26, 0xD7	; 215
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	0e 94 25 05 	call	0xa4a	; 0xa4a <main>
     162:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <_exit>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <uart_put_char>:
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     16a:	2f b7       	in	r18, 0x3f	; 63
     16c:	20 78       	andi	r18, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     16e:	02 c0       	rjmp	.+4      	; 0x174 <uart_put_char+0xa>
		if(!interrupts_enabled) {
     170:	22 23       	and	r18, r18
     172:	29 f1       	breq	.+74     	; 0x1be <uart_put_char+0x54>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     174:	90 91 b3 01 	lds	r25, 0x01B3
     178:	9f 3f       	cpi	r25, 0xFF	; 255
     17a:	d1 f3       	breq	.-12     	; 0x170 <uart_put_char+0x6>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     17c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     17e:	e0 91 b2 01 	lds	r30, 0x01B2
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	9e 0f       	add	r25, r30
     186:	90 93 b2 01 	sts	0x01B2, r25
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ec 54       	subi	r30, 0x4C	; 76
     18e:	fe 4f       	sbci	r31, 0xFE	; 254
     190:	80 83       	st	Z, r24
	bytes_in_out_buffer++;
     192:	80 91 b3 01 	lds	r24, 0x01B3
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	80 93 b3 01 	sts	0x01B3, r24
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     19c:	80 91 b2 01 	lds	r24, 0x01B2
     1a0:	8f 3f       	cpi	r24, 0xFF	; 255
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <uart_put_char+0x3e>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     1a4:	10 92 b2 01 	sts	0x01B2, r1
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
     1a8:	e1 ec       	ldi	r30, 0xC1	; 193
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	80 62       	ori	r24, 0x20	; 32
     1b0:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     1b2:	22 23       	and	r18, r18
     1b4:	39 f0       	breq	.+14     	; 0x1c4 <uart_put_char+0x5a>
		sei();
     1b6:	78 94       	sei
	}
	return 0;
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	08 95       	ret
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	08 95       	ret
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
}
     1c8:	08 95       	ret

000001ca <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     1ca:	80 91 c5 02 	lds	r24, 0x02C5
     1ce:	88 23       	and	r24, r24
     1d0:	e1 f3       	breq	.-8      	; 0x1ca <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     1d2:	2f b7       	in	r18, 0x3f	; 63
     1d4:	20 78       	andi	r18, 0x80	; 128
	cli();
     1d6:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     1d8:	80 91 b3 02 	lds	r24, 0x02B3
     1dc:	30 91 c5 02 	lds	r19, 0x02C5
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	83 1b       	sub	r24, r19
     1e4:	91 09       	sbc	r25, r1
     1e6:	5a f4       	brpl	.+22     	; 0x1fe <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     1e8:	e0 91 b3 02 	lds	r30, 0x02B3
     1ec:	80 91 c5 02 	lds	r24, 0x02C5
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	e8 1b       	sub	r30, r24
     1f4:	f1 09       	sbc	r31, r1
     1f6:	ec 53       	subi	r30, 0x3C	; 60
     1f8:	fd 4f       	sbci	r31, 0xFD	; 253
     1fa:	80 81       	ld	r24, Z
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     1fe:	e0 91 b3 02 	lds	r30, 0x02B3
     202:	80 91 c5 02 	lds	r24, 0x02C5
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	e8 1b       	sub	r30, r24
     20a:	f1 09       	sbc	r31, r1
     20c:	ec 54       	subi	r30, 0x4C	; 76
     20e:	fd 4f       	sbci	r31, 0xFD	; 253
     210:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     212:	90 91 c5 02 	lds	r25, 0x02C5
     216:	91 50       	subi	r25, 0x01	; 1
     218:	90 93 c5 02 	sts	0x02C5, r25
	if(interrupts_enabled) {
     21c:	22 23       	and	r18, r18
     21e:	09 f0       	breq	.+2      	; 0x222 <uart_get_char+0x58>
		sei();
     220:	78 94       	sei
	}	
	return c;
}
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	08 95       	ret

00000226 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     226:	10 92 b2 01 	sts	0x01B2, r1
	bytes_in_out_buffer = 0;
     22a:	10 92 b3 01 	sts	0x01B3, r1
	input_insert_pos = 0;
     22e:	10 92 b3 02 	sts	0x02B3, r1
	bytes_in_input_buffer = 0;
     232:	10 92 c5 02 	sts	0x02C5, r1
	input_overrun = 0;
     236:	10 92 c4 02 	sts	0x02C4, r1
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     23a:	40 93 ac 01 	sts	0x01AC, r20
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	aa 1f       	adc	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	aa 1f       	adc	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	9c 01       	movw	r18, r24
     254:	ad 01       	movw	r20, r26
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	44 1f       	adc	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	72 e1       	ldi	r23, 0x12	; 18
     262:	8a e7       	ldi	r24, 0x7A	; 122
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divmodsi4>
     26a:	ba 01       	movw	r22, r20
     26c:	a9 01       	movw	r20, r18
     26e:	4f 5f       	subi	r20, 0xFF	; 255
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	6f 4f       	sbci	r22, 0xFF	; 255
     274:	7f 4f       	sbci	r23, 0xFF	; 255
     276:	db 01       	movw	r26, r22
     278:	ca 01       	movw	r24, r20
     27a:	1a f4       	brpl	.+6      	; 0x282 <init_serial_stdio+0x5c>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	b5 95       	asr	r27
     284:	a7 95       	ror	r26
     286:	97 95       	ror	r25
     288:	87 95       	ror	r24
     28a:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     28c:	90 93 c5 00 	sts	0x00C5, r25
     290:	80 93 c4 00 	sts	0x00C4, r24
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     294:	e1 ec       	ldi	r30, 0xC1	; 193
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	88 e1       	ldi	r24, 0x18	; 24
     29a:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     29c:	80 81       	ld	r24, Z
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     2a2:	e1 ed       	ldi	r30, 0xD1	; 209
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	93 83       	std	Z+3, r25	; 0x03
     2ac:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     2ae:	91 83       	std	Z+1, r25	; 0x01
     2b0:	80 83       	st	Z, r24
     2b2:	08 95       	ret

000002b4 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     2b4:	90 91 c5 02 	lds	r25, 0x02C5
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	91 11       	cpse	r25, r1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <serial_input_available+0xc>
     2be:	80 e0       	ldi	r24, 0x00	; 0
}
     2c0:	08 95       	ret

000002c2 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     2d6:	80 91 b3 01 	lds	r24, 0x01B3
     2da:	88 23       	and	r24, r24
     2dc:	29 f1       	breq	.+74     	; 0x328 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     2de:	80 91 b2 01 	lds	r24, 0x01B2
     2e2:	20 91 b3 01 	lds	r18, 0x01B3
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	82 1b       	sub	r24, r18
     2ea:	91 09       	sbc	r25, r1
     2ec:	5a f4       	brpl	.+22     	; 0x304 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2ee:	e0 91 b2 01 	lds	r30, 0x01B2
     2f2:	80 91 b3 01 	lds	r24, 0x01B3
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e8 1b       	sub	r30, r24
     2fa:	f1 09       	sbc	r31, r1
     2fc:	ed 54       	subi	r30, 0x4D	; 77
     2fe:	fd 4f       	sbci	r31, 0xFD	; 253
     300:	90 81       	ld	r25, Z
     302:	0a c0       	rjmp	.+20     	; 0x318 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     304:	e0 91 b2 01 	lds	r30, 0x01B2
     308:	80 91 b3 01 	lds	r24, 0x01B3
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	e8 1b       	sub	r30, r24
     310:	f1 09       	sbc	r31, r1
     312:	ec 54       	subi	r30, 0x4C	; 76
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     318:	80 91 b3 01 	lds	r24, 0x01B3
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	80 93 b3 01 	sts	0x01B3, r24
		
		/* Output the character via the UART */
		UDR0 = c;
     322:	90 93 c6 00 	sts	0x00C6, r25
     326:	05 c0       	rjmp	.+10     	; 0x332 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     328:	e1 ec       	ldi	r30, 0xC1	; 193
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7d       	andi	r24, 0xDF	; 223
     330:	80 83       	st	Z, r24
	}
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	2f 91       	pop	r18
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	cf 93       	push	r28
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     36a:	c0 91 c6 00 	lds	r28, 0x00C6
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     36e:	80 91 ac 01 	lds	r24, 0x01AC
     372:	88 23       	and	r24, r24
     374:	49 f0       	breq	.+18     	; 0x388 <__vector_20+0x42>
     376:	80 91 b3 01 	lds	r24, 0x01B3
     37a:	8f 3f       	cpi	r24, 0xFF	; 255
     37c:	29 f0       	breq	.+10     	; 0x388 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8c 2f       	mov	r24, r28
     384:	0e 94 b5 00 	call	0x16a	; 0x16a <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     388:	80 91 c5 02 	lds	r24, 0x02C5
     38c:	80 31       	cpi	r24, 0x10	; 16
     38e:	20 f0       	brcs	.+8      	; 0x398 <__vector_20+0x52>
		input_overrun = 1;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 c4 02 	sts	0x02C4, r24
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     398:	cd 30       	cpi	r28, 0x0D	; 13
     39a:	09 f4       	brne	.+2      	; 0x39e <__vector_20+0x58>
			c = '\n';
     39c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     39e:	e0 91 b3 02 	lds	r30, 0x02B3
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	8e 0f       	add	r24, r30
     3a6:	80 93 b3 02 	sts	0x02B3, r24
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	ec 54       	subi	r30, 0x4C	; 76
     3ae:	fd 4f       	sbci	r31, 0xFD	; 253
     3b0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     3b2:	80 91 c5 02 	lds	r24, 0x02C5
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 93 c5 02 	sts	0x02C5, r24
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     3bc:	80 91 b3 02 	lds	r24, 0x02B3
     3c0:	80 31       	cpi	r24, 0x10	; 16
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     3c4:	10 92 b3 02 	sts	0x02B3, r1
		}
	}
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	cf 91       	pop	r28
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	7f 91       	pop	r23
     3d8:	6f 91       	pop	r22
     3da:	5f 91       	pop	r21
     3dc:	4f 91       	pop	r20
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <init_tcnt0>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT0 = 0;
     3ec:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
     3ee:	17 bc       	out	0x27, r1	; 39
	//OCR0B = 124;
	

	TCCR0A |= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | _BV(WGM00) | _BV(WGM01);
     3f0:	84 b5       	in	r24, 0x24	; 36
     3f2:	83 68       	ori	r24, 0x83	; 131
     3f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS10);
     3f6:	85 b5       	in	r24, 0x25	; 37
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	85 bd       	out	0x25, r24	; 37
     3fc:	08 95       	ret

000003fe <init_tcnt2>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
     3fe:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 124;
     402:	8c e7       	ldi	r24, 0x7C	; 124
     404:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 124;
     408:	80 93 b4 00 	sts	0x00B4, r24
	

	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
     40c:	e0 eb       	ldi	r30, 0xB0	; 176
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	83 6a       	ori	r24, 0xA3	; 163
     414:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
     416:	e1 eb       	ldi	r30, 0xB1	; 177
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 83       	st	Z, r24
     420:	08 95       	ret

00000422 <makeInfo>:
	}
}

info* makeInfo(void) {
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     422:	8b e0       	ldi	r24, 0x0B	; 11
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 93 0a 	call	0x1526	; 0x1526 <malloc>
	return info_ptr;
}
     42a:	08 95       	ret

0000042c <initialise>:
	
}



void initialise(info* info_ptr){
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24

	DDRA = (1<<PORTA0)|(1<<PORTA1);
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	81 b9       	out	0x01, r24	; 1
	DDRB = (1<<PORTB3)|(1<<PORTB0);			/*	PWM camera, buttons	*/
     43a:	89 e0       	ldi	r24, 0x09	; 9
     43c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PINB1);
     43e:	21 98       	cbi	0x04, 1	; 4
	DDRC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5)|(1<<PORTC6)|(1<<PORTC7);
     440:	8c ef       	ldi	r24, 0xFC	; 252
     442:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
     444:	8e ef       	ldi	r24, 0xFE	; 254
     446:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
     448:	50 98       	cbi	0x0a, 0	; 10
	init_serial_stdio(9600,0);											//////////////////////////////////////////////////////////////////////////////////////////
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	60 e8       	ldi	r22, 0x80	; 128
     44e:	75 e2       	ldi	r23, 0x25	; 37
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 13 01 	call	0x226	; 0x226 <init_serial_stdio>

	init_tcnt0();				/*	Camera PWM	*/
     458:	0e 94 f6 01 	call	0x3ec	; 0x3ec <init_tcnt0>
	init_tcnt1();				/*	Timer		*/
     45c:	0e 94 a5 09 	call	0x134a	; 0x134a <init_tcnt1>
	init_tcnt2();				/*	Motor PWM	*/
     460:	0e 94 ff 01 	call	0x3fe	; 0x3fe <init_tcnt2>
	init_step();
     464:	0e 94 90 06 	call	0xd20	; 0xd20 <init_step>
	srand(get_tcnt1_ticks());
     468:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
     46c:	cb 01       	movw	r24, r22
     46e:	0e 94 11 0c 	call	0x1822	; 0x1822 <srand>
	sei();
     472:	78 94       	sei
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     474:	c1 ed       	ldi	r28, 0xD1	; 209
     476:	d2 e0       	ldi	r29, 0x02	; 2
	//}

	/****************************************************************************************************************************************************************/
		
	uint8_t check = 1;
	while (check){
     478:	20 c0       	rjmp	.+64     	; 0x4ba <initialise+0x8e>
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     47a:	88 81       	ld	r24, Y
     47c:	99 81       	ldd	r25, Y+1	; 0x01
     47e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <fgetc>
			if (start == 'o'){
     482:	8f 36       	cpi	r24, 0x6F	; 111
     484:	d1 f4       	brne	.+52     	; 0x4ba <initialise+0x8e>
				fputs("Start\n", stdout);
     486:	20 91 d3 02 	lds	r18, 0x02D3
     48a:	30 91 d4 02 	lds	r19, 0x02D4
     48e:	46 e0       	ldi	r20, 0x06	; 6
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	88 e1       	ldi	r24, 0x18	; 24
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <fwrite>
				
		}
			
	}

	info_ptr->start = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	f8 01       	movw	r30, r16
     4a2:	87 83       	std	Z+7, r24	; 0x07
	info_ptr->stepAct = '\0';
     4a4:	14 82       	std	Z+4, r1	; 0x04
	info_ptr->maxStep = 150;
     4a6:	86 e9       	ldi	r24, 0x96	; 150
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	93 83       	std	Z+3, r25	; 0x03
     4ac:	82 83       	std	Z+2, r24	; 0x02
	info_ptr->camera = 0;
     4ae:	16 82       	std	Z+6, r1	; 0x06
	info_ptr->pwmSpeed = 0;
     4b0:	10 82       	st	Z, r1
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper or winch
     4b2:	8b b1       	in	r24, 0x0b	; 11
     4b4:	80 63       	ori	r24, 0x30	; 48
     4b6:	8b b9       	out	0x0b, r24	; 11
     4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <initialise+0x98>
	/****************************************************************************************************************************************************************/
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
     4ba:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     4be:	88 23       	and	r24, r24
     4c0:	e1 f3       	breq	.-8      	; 0x4ba <initialise+0x8e>
     4c2:	db cf       	rjmp	.-74     	; 0x47a <initialise+0x4e>
	info_ptr->maxStep = 150;
	info_ptr->camera = 0;
	info_ptr->pwmSpeed = 0;
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper or winch

}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	08 95       	ret

000004ce <custom_delay>:




void custom_delay(uint32_t ticks){
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	6b 01       	movw	r12, r22
     4d8:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt1 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt1_ticks();
     4da:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
	while((current_time + ticks) > get_tcnt1_ticks()){
     4de:	c6 0e       	add	r12, r22
     4e0:	d7 1e       	adc	r13, r23
     4e2:	e8 1e       	adc	r14, r24
     4e4:	f9 1e       	adc	r15, r25
     4e6:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
     4ea:	6c 15       	cp	r22, r12
     4ec:	7d 05       	cpc	r23, r13
     4ee:	8e 05       	cpc	r24, r14
     4f0:	9f 05       	cpc	r25, r15
     4f2:	c8 f3       	brcs	.-14     	; 0x4e6 <custom_delay+0x18>
		;
	}
}
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	08 95       	ret

000004fe <input>:
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}


void input(info* info_ptr){
     4fe:	8f 92       	push	r8
     500:	9f 92       	push	r9
     502:	af 92       	push	r10
     504:	bf 92       	push	r11
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	64 97       	sbiw	r28, 0x14	; 20
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	8c 01       	movw	r16, r24
	
	if(!serial_input_available()){
     526:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     52a:	88 23       	and	r24, r24
     52c:	09 f4       	brne	.+2      	; 0x530 <input+0x32>
     52e:	7b c2       	rjmp	.+1270   	; 0xa26 <__stack+0x127>
		return;
		
	}

	char c = fgetc(stdin);
     530:	80 91 d1 02 	lds	r24, 0x02D1
     534:	90 91 d2 02 	lds	r25, 0x02D2
     538:	0e 94 1c 0c 	call	0x1838	; 0x1838 <fgetc>
	int16_t speed;
	char buffer[20];
	uint8_t percent;
	char in;
	
	switch(c){
     53c:	7c 01       	movw	r14, r24
     53e:	ff 24       	eor	r15, r15
     540:	f7 01       	movw	r30, r14
     542:	b0 97       	sbiw	r30, 0x20	; 32
     544:	e8 35       	cpi	r30, 0x58	; 88
     546:	f1 05       	cpc	r31, r1
     548:	08 f0       	brcs	.+2      	; 0x54c <input+0x4e>
     54a:	44 c2       	rjmp	.+1160   	; 0x9d4 <__stack+0xd5>
     54c:	e2 5c       	subi	r30, 0xC2	; 194
     54e:	ff 4f       	sbci	r31, 0xFF	; 255
     550:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__tablejump2__>
		
		case 'a' :
			// turn left
			PORTD &= ~(1<<PORTD2);
     554:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     556:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     558:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     55a:	47 98       	cbi	0x08, 7	; 8
			break;
     55c:	5d c2       	rjmp	.+1210   	; 0xa18 <__stack+0x119>
		case 's' :
			// backwards
			PORTD &= ~(1<<PORTD2);
     55e:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     560:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     562:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     564:	47 9a       	sbi	0x08, 7	; 8
			break;
     566:	58 c2       	rjmp	.+1200   	; 0xa18 <__stack+0x119>
		case 'd' :
			// turn right
			PORTD |= (1<<PORTD2);
     568:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     56a:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     56c:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     56e:	47 9a       	sbi	0x08, 7	; 8
			break;
     570:	53 c2       	rjmp	.+1190   	; 0xa18 <__stack+0x119>
		case 'w' :
			// forward
			PORTD |= (1<<PORTD2);
     572:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     574:	5b 98       	cbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     576:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     578:	47 98       	cbi	0x08, 7	; 8
			break;
     57a:	4e c2       	rjmp	.+1180   	; 0xa18 <__stack+0x119>
		case 'r' :
			// release claw
			release_step();
     57c:	0e 94 d3 06 	call	0xda6	; 0xda6 <release_step>
			info_ptr->stepAct = '\0';
     580:	f8 01       	movw	r30, r16
     582:	14 82       	std	Z+4, r1	; 0x04
			break;
     584:	49 c2       	rjmp	.+1170   	; 0xa18 <__stack+0x119>
			// rely to winch to lift up
			//fputc('+', stdout);
			break;
		case '=' :
			// someone panic'd; winch to lift up
			fputc('+', stdout);
     586:	60 91 d3 02 	lds	r22, 0x02D3
     58a:	70 91 d4 02 	lds	r23, 0x02D4
     58e:	8b e2       	ldi	r24, 0x2B	; 43
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
			break;
     596:	40 c2       	rjmp	.+1152   	; 0xa18 <__stack+0x119>
		case '-' :
			// lower
			fputc('_', stdout);
     598:	60 91 d3 02 	lds	r22, 0x02D3
     59c:	70 91 d4 02 	lds	r23, 0x02D4
     5a0:	8f e5       	ldi	r24, 0x5F	; 95
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
			break;
     5a8:	37 c2       	rjmp	.+1134   	; 0xa18 <__stack+0x119>
		case 'e' :
			// activate claw
			if (info_ptr->stepSpeed < 0){
     5aa:	f8 01       	movw	r30, r16
     5ac:	81 81       	ldd	r24, Z+1	; 0x01
     5ae:	88 23       	and	r24, r24
     5b0:	14 f4       	brge	.+4      	; 0x5b6 <input+0xb8>
				info_ptr->stepSpeed = -info_ptr->stepSpeed;
     5b2:	81 95       	neg	r24
     5b4:	81 83       	std	Z+1, r24	; 0x01
			}

			sprintf(buffer, "activate %d\n", info_ptr->stepSpeed);
     5b6:	f8 01       	movw	r30, r16
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
     5ba:	28 2f       	mov	r18, r24
     5bc:	08 2e       	mov	r0, r24
     5be:	00 0c       	add	r0, r0
     5c0:	33 0b       	sbc	r19, r19
     5c2:	3f 93       	push	r19
     5c4:	8f 93       	push	r24
     5c6:	8f e1       	ldi	r24, 0x1F	; 31
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	5c 01       	movw	r10, r24
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
			fputs(buffer, stdout);
     5dc:	60 91 d3 02 	lds	r22, 0x02D3
     5e0:	70 91 d4 02 	lds	r23, 0x02D4
     5e4:	c5 01       	movw	r24, r10
     5e6:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
			info_ptr->stepAct = 'A';
     5ea:	81 e4       	ldi	r24, 0x41	; 65
     5ec:	f8 01       	movw	r30, r16
     5ee:	84 83       	std	Z+4, r24	; 0x04
			break;
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0d c2       	rjmp	.+1050   	; 0xa18 <__stack+0x119>
		case 'q' :
			// retract claw
			if (info_ptr->stepSpeed > 0){
     5fe:	f8 01       	movw	r30, r16
     600:	81 81       	ldd	r24, Z+1	; 0x01
     602:	18 16       	cp	r1, r24
     604:	14 f4       	brge	.+4      	; 0x60a <input+0x10c>
					info_ptr->stepSpeed = -info_ptr->stepSpeed;
     606:	81 95       	neg	r24
     608:	81 83       	std	Z+1, r24	; 0x01
			}
			/************sends negative to activate winch *******/
			sprintf(buffer, "retract %d\n", info_ptr->stepSpeed);
     60a:	f8 01       	movw	r30, r16
     60c:	81 81       	ldd	r24, Z+1	; 0x01
     60e:	28 2f       	mov	r18, r24
     610:	08 2e       	mov	r0, r24
     612:	00 0c       	add	r0, r0
     614:	33 0b       	sbc	r19, r19
     616:	3f 93       	push	r19
     618:	8f 93       	push	r24
     61a:	8c e2       	ldi	r24, 0x2C	; 44
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	5c 01       	movw	r10, r24
     628:	9f 93       	push	r25
     62a:	8f 93       	push	r24
     62c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
			fputs(buffer, stdout);
     630:	60 91 d3 02 	lds	r22, 0x02D3
     634:	70 91 d4 02 	lds	r23, 0x02D4
     638:	c5 01       	movw	r24, r10
     63a:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
			info_ptr->stepAct = 'R';
     63e:	82 e5       	ldi	r24, 0x52	; 82
     640:	f8 01       	movw	r30, r16
     642:	84 83       	std	Z+4, r24	; 0x04
			break;
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	e3 c1       	rjmp	.+966    	; 0xa18 <__stack+0x119>
		case '`' :
			info_ptr->pwmSpeed = 0;
     652:	f8 01       	movw	r30, r16
     654:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 87       	std	Z+8, r24	; 0x08
			break;
     65a:	de c1       	rjmp	.+956    	; 0xa18 <__stack+0x119>
		case '0' :
			info_ptr->pwmSpeed = 0;
     65c:	f8 01       	movw	r30, r16
     65e:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 87       	std	Z+8, r24	; 0x08
			break;
     664:	d9 c1       	rjmp	.+946    	; 0xa18 <__stack+0x119>
		case '1' :
			info_ptr->pwmSpeed = 20;
     666:	84 e1       	ldi	r24, 0x14	; 20
     668:	f8 01       	movw	r30, r16
     66a:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 87       	std	Z+8, r24	; 0x08
			break;
     670:	d3 c1       	rjmp	.+934    	; 0xa18 <__stack+0x119>
		case '2' :
			info_ptr->pwmSpeed = 40;
     672:	88 e2       	ldi	r24, 0x28	; 40
     674:	f8 01       	movw	r30, r16
     676:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	80 87       	std	Z+8, r24	; 0x08
			break;
     67c:	cd c1       	rjmp	.+922    	; 0xa18 <__stack+0x119>
		case '3' :
			info_ptr->pwmSpeed = 60;
     67e:	8c e3       	ldi	r24, 0x3C	; 60
     680:	f8 01       	movw	r30, r16
     682:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 87       	std	Z+8, r24	; 0x08
			break;
     688:	c7 c1       	rjmp	.+910    	; 0xa18 <__stack+0x119>
		case '4' :
			info_ptr->pwmSpeed = 80;
     68a:	80 e5       	ldi	r24, 0x50	; 80
     68c:	f8 01       	movw	r30, r16
     68e:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	80 87       	std	Z+8, r24	; 0x08
			break;
     694:	c1 c1       	rjmp	.+898    	; 0xa18 <__stack+0x119>
		case '5' :
			info_ptr->pwmSpeed = 100;
     696:	84 e6       	ldi	r24, 0x64	; 100
     698:	f8 01       	movw	r30, r16
     69a:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 87       	std	Z+8, r24	; 0x08
			break;
     6a0:	bb c1       	rjmp	.+886    	; 0xa18 <__stack+0x119>
		case '[' :
			speed = info_ptr->stepSpeed - 10;
     6a2:	f8 01       	movw	r30, r16
     6a4:	21 81       	ldd	r18, Z+1	; 0x01
     6a6:	82 2f       	mov	r24, r18
     6a8:	02 2e       	mov	r0, r18
     6aa:	00 0c       	add	r0, r0
     6ac:	99 0b       	sbc	r25, r25
     6ae:	0a 97       	sbiw	r24, 0x0a	; 10
			if (speed > -110){
     6b0:	83 39       	cpi	r24, 0x93	; 147
     6b2:	9f 4f       	sbci	r25, 0xFF	; 255
     6b4:	1c f0       	brlt	.+6      	; 0x6bc <input+0x1be>
				info_ptr->stepSpeed -= 10;
     6b6:	2a 50       	subi	r18, 0x0A	; 10
     6b8:	f8 01       	movw	r30, r16
     6ba:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     6bc:	f8 01       	movw	r30, r16
     6be:	81 81       	ldd	r24, Z+1	; 0x01
     6c0:	28 2f       	mov	r18, r24
     6c2:	08 2e       	mov	r0, r24
     6c4:	00 0c       	add	r0, r0
     6c6:	33 0b       	sbc	r19, r19
     6c8:	3f 93       	push	r19
     6ca:	8f 93       	push	r24
     6cc:	88 e3       	ldi	r24, 0x38	; 56
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	8e 01       	movw	r16, r28
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	1f 93       	push	r17
     6dc:	0f 93       	push	r16
     6de:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
			fputs(buffer, stdout);
     6e2:	60 91 d3 02 	lds	r22, 0x02D3
     6e6:	70 91 d4 02 	lds	r23, 0x02D4
     6ea:	c8 01       	movw	r24, r16
     6ec:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
			break;
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	8d c1       	rjmp	.+794    	; 0xa18 <__stack+0x119>
		case ']' :
			speed = info_ptr->stepSpeed - 10;
     6fe:	f8 01       	movw	r30, r16
     700:	21 81       	ldd	r18, Z+1	; 0x01
     702:	82 2f       	mov	r24, r18
     704:	02 2e       	mov	r0, r18
     706:	00 0c       	add	r0, r0
     708:	99 0b       	sbc	r25, r25
     70a:	0a 97       	sbiw	r24, 0x0a	; 10
			if (speed < 110){
     70c:	8e 36       	cpi	r24, 0x6E	; 110
     70e:	91 05       	cpc	r25, r1
     710:	14 f4       	brge	.+4      	; 0x716 <input+0x218>
				info_ptr->stepSpeed += 10;
     712:	26 5f       	subi	r18, 0xF6	; 246
     714:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     716:	f8 01       	movw	r30, r16
     718:	81 81       	ldd	r24, Z+1	; 0x01
     71a:	28 2f       	mov	r18, r24
     71c:	08 2e       	mov	r0, r24
     71e:	00 0c       	add	r0, r0
     720:	33 0b       	sbc	r19, r19
     722:	3f 93       	push	r19
     724:	8f 93       	push	r24
     726:	88 e3       	ldi	r24, 0x38	; 56
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	8e 01       	movw	r16, r28
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	1f 93       	push	r17
     736:	0f 93       	push	r16
     738:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
			fputs(buffer, stdout);
     73c:	60 91 d3 02 	lds	r22, 0x02D3
     740:	70 91 d4 02 	lds	r23, 0x02D4
     744:	c8 01       	movw	r24, r16
     746:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
			break;
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	60 c1       	rjmp	.+704    	; 0xa18 <__stack+0x119>
		case ' ' :
			info_ptr->pwmSpeed = 0;
     758:	f8 01       	movw	r30, r16
     75a:	10 82       	st	Z, r1
			info_ptr->stopCommand = 1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	85 83       	std	Z+5, r24	; 0x05
			info_ptr->motorAct = 0;
     760:	10 86       	std	Z+8, r1	; 0x08
			info_ptr->stepAct = '\0';
     762:	14 82       	std	Z+4, r1	; 0x04
			//fputc(' ', stdout);
			break;
     764:	59 c1       	rjmp	.+690    	; 0xa18 <__stack+0x119>
		case 'h' :
			info_ptr->camera = 10;
     766:	8a e0       	ldi	r24, 0x0A	; 10
     768:	f8 01       	movw	r30, r16
     76a:	86 83       	std	Z+6, r24	; 0x06
			break;
     76c:	55 c1       	rjmp	.+682    	; 0xa18 <__stack+0x119>
		case 'g' :
			info_ptr->camera = -10;
     76e:	86 ef       	ldi	r24, 0xF6	; 246
     770:	f8 01       	movw	r30, r16
     772:	86 83       	std	Z+6, r24	; 0x06
			break;
     774:	51 c1       	rjmp	.+674    	; 0xa18 <__stack+0x119>
		case 'l' :
			if (PORTA && (1<<PORTA1)){
     776:	82 b1       	in	r24, 0x02	; 2
     778:	88 23       	and	r24, r24
     77a:	11 f0       	breq	.+4      	; 0x780 <input+0x282>
				PORTA &= ~(1<<PORTA1);
     77c:	11 98       	cbi	0x02, 1	; 2
     77e:	4c c1       	rjmp	.+664    	; 0xa18 <__stack+0x119>
				} else {
				PORTA |= (1<<PORTA1);
     780:	11 9a       	sbi	0x02, 1	; 2
     782:	4a c1       	rjmp	.+660    	; 0xa18 <__stack+0x119>
			}
			break;
		case 'L' :
			PORTA |= (1<<PORTA1);
     784:	11 9a       	sbi	0x02, 1	; 2
		case 'j' : 
			/* move winch backwards	*/
			PORTB |= (1<<PORTB0);
     786:	28 9a       	sbi	0x05, 0	; 5
			percent = 60;
			speed = 0;
			move_worm(percent, speed);
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	8c e3       	ldi	r24, 0x3C	; 60
     78c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <move_worm>
			while (info_ptr->wormCom != 'j') {
     790:	f8 01       	movw	r30, r16
     792:	82 85       	ldd	r24, Z+10	; 0x0a
     794:	8a 36       	cpi	r24, 0x6A	; 106
     796:	09 f4       	brne	.+2      	; 0x79a <input+0x29c>
     798:	81 c0       	rjmp	.+258    	; 0x89c <input+0x39e>
     79a:	0f 2e       	mov	r0, r31
     79c:	fc e3       	ldi	r31, 0x3C	; 60
     79e:	df 2e       	mov	r13, r31
     7a0:	f0 2d       	mov	r31, r0
					if(serial_input_available()){
						in = fgetc(stdin);
     7a2:	0f 2e       	mov	r0, r31
     7a4:	f1 ed       	ldi	r31, 0xD1	; 209
     7a6:	af 2e       	mov	r10, r31
     7a8:	f2 e0       	ldi	r31, 0x02	; 2
     7aa:	bf 2e       	mov	r11, r31
     7ac:	f0 2d       	mov	r31, r0
								fputs(buffer, stdout);
							}
						} else if ( in == 'j'){
							if ((percent -10) >=0){
								percent -= 10;
								sprintf(buffer, "Winch speed %d\n", percent);
     7ae:	0f 2e       	mov	r0, r31
     7b0:	f2 e5       	ldi	r31, 0x52	; 82
     7b2:	8f 2e       	mov	r8, r31
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	9f 2e       	mov	r9, r31
     7b8:	f0 2d       	mov	r31, r0
			PORTB |= (1<<PORTB0);
			percent = 60;
			speed = 0;
			move_worm(percent, speed);
			while (info_ptr->wormCom != 'j') {
					if(serial_input_available()){
     7ba:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     7be:	88 23       	and	r24, r24
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <input+0x2c6>
     7c2:	5b c0       	rjmp	.+182    	; 0x87a <input+0x37c>
						in = fgetc(stdin);
     7c4:	f5 01       	movw	r30, r10
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	0e 94 1c 0c 	call	0x1838	; 0x1838 <fgetc>
						//char buffer[18];
						if (in == ' '){
     7ce:	80 32       	cpi	r24, 0x20	; 32
     7d0:	79 f4       	brne	.+30     	; 0x7f0 <input+0x2f2>
							fputs("Winch off\n", stdout);
     7d2:	20 91 d3 02 	lds	r18, 0x02D3
     7d6:	30 91 d4 02 	lds	r19, 0x02D4
     7da:	4a e0       	ldi	r20, 0x0A	; 10
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	87 e4       	ldi	r24, 0x47	; 71
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <fwrite>
							winch_off();
     7ea:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <winch_off>
							break;
     7ee:	56 c0       	rjmp	.+172    	; 0x89c <input+0x39e>
						} else if (in == 'k'){
     7f0:	8b 36       	cpi	r24, 0x6B	; 107
     7f2:	11 f5       	brne	.+68     	; 0x838 <input+0x33a>
							if ((percent + 10) < 100){
     7f4:	8d 2d       	mov	r24, r13
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0a 96       	adiw	r24, 0x0a	; 10
     7fa:	84 36       	cpi	r24, 0x64	; 100
     7fc:	91 05       	cpc	r25, r1
     7fe:	ec f5       	brge	.+122    	; 0x87a <input+0x37c>
								percent += 10;
     800:	fa e0       	ldi	r31, 0x0A	; 10
     802:	df 0e       	add	r13, r31
								sprintf(buffer, "Winch speed %d\n", percent);
     804:	1f 92       	push	r1
     806:	df 92       	push	r13
     808:	9f 92       	push	r9
     80a:	8f 92       	push	r8
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	8c 0f       	add	r24, r28
     812:	9d 1f       	adc	r25, r29
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
								fputs(buffer, stdout);
     81c:	f5 01       	movw	r30, r10
     81e:	62 81       	ldd	r22, Z+2	; 0x02
     820:	73 81       	ldd	r23, Z+3	; 0x03
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	21 c0       	rjmp	.+66     	; 0x87a <input+0x37c>
							}
						} else if ( in == 'j'){
     838:	8a 36       	cpi	r24, 0x6A	; 106
     83a:	f9 f4       	brne	.+62     	; 0x87a <input+0x37c>
							if ((percent -10) >=0){
     83c:	8d 2d       	mov	r24, r13
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0a 97       	sbiw	r24, 0x0a	; 10
     842:	da f0       	brmi	.+54     	; 0x87a <input+0x37c>
								percent -= 10;
     844:	f6 ef       	ldi	r31, 0xF6	; 246
     846:	df 0e       	add	r13, r31
								sprintf(buffer, "Winch speed %d\n", percent);
     848:	1f 92       	push	r1
     84a:	df 92       	push	r13
     84c:	9f 92       	push	r9
     84e:	8f 92       	push	r8
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	8c 0f       	add	r24, r28
     856:	9d 1f       	adc	r25, r29
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
								fputs(buffer, stdout);
     860:	f5 01       	movw	r30, r10
     862:	62 81       	ldd	r22, Z+2	; 0x02
     864:	73 81       	ldd	r23, Z+3	; 0x03
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
							}
						}
					}
					
					if ((PINB & (1<<PINB1)) == 0x00){
     87a:	19 99       	sbic	0x03, 1	; 3
     87c:	06 c0       	rjmp	.+12     	; 0x88a <input+0x38c>
							info_ptr->wormCom = 'j';
     87e:	8a e6       	ldi	r24, 0x6A	; 106
     880:	f8 01       	movw	r30, r16
     882:	82 87       	std	Z+10, r24	; 0x0a
							winch_off();
     884:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <winch_off>
							break;
     888:	09 c0       	rjmp	.+18     	; 0x89c <input+0x39e>
					}
					
					move_worm(percent, speed);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	8d 2d       	mov	r24, r13
     88e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <move_worm>
			/* move winch backwards	*/
			PORTB |= (1<<PORTB0);
			percent = 60;
			speed = 0;
			move_worm(percent, speed);
			while (info_ptr->wormCom != 'j') {
     892:	f8 01       	movw	r30, r16
     894:	92 85       	ldd	r25, Z+10	; 0x0a
     896:	9a 36       	cpi	r25, 0x6A	; 106
     898:	09 f0       	breq	.+2      	; 0x89c <input+0x39e>
     89a:	8f cf       	rjmp	.-226    	; 0x7ba <input+0x2bc>
							break;
					}
					
					move_worm(percent, speed);
			}
			PORTB &= ~(1<<PORTB0);
     89c:	28 98       	cbi	0x05, 0	; 5
			break;
     89e:	bc c0       	rjmp	.+376    	; 0xa18 <__stack+0x119>
		case 'k' : 
			/* move winch forwards	*/
			percent = 60;
			speed = 1;
			PORTB |= (1<<PORTB0);
     8a0:	28 9a       	sbi	0x05, 0	; 5
			move_worm(percent, speed);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	8c e3       	ldi	r24, 0x3C	; 60
     8a6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <move_worm>
			while (info_ptr->wormCom != 'k') {
     8aa:	f8 01       	movw	r30, r16
     8ac:	82 85       	ldd	r24, Z+10	; 0x0a
     8ae:	8b 36       	cpi	r24, 0x6B	; 107
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <input+0x3b6>
     8b2:	81 c0       	rjmp	.+258    	; 0x9b6 <__stack+0xb7>
     8b4:	0f 2e       	mov	r0, r31
     8b6:	fc e3       	ldi	r31, 0x3C	; 60
     8b8:	df 2e       	mov	r13, r31
     8ba:	f0 2d       	mov	r31, r0
				if(serial_input_available()){
					in = fgetc(stdin);
     8bc:	0f 2e       	mov	r0, r31
     8be:	f1 ed       	ldi	r31, 0xD1	; 209
     8c0:	af 2e       	mov	r10, r31
     8c2:	f2 e0       	ldi	r31, 0x02	; 2
     8c4:	bf 2e       	mov	r11, r31
     8c6:	f0 2d       	mov	r31, r0
							fputs(buffer, stdout);
						}
					} else if (in == 'j'){
						if ((percent -10) >=0){
							percent -= 10;
							sprintf(buffer, "Winch speed %d\n", percent);
     8c8:	0f 2e       	mov	r0, r31
     8ca:	f2 e5       	ldi	r31, 0x52	; 82
     8cc:	8f 2e       	mov	r8, r31
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	9f 2e       	mov	r9, r31
     8d2:	f0 2d       	mov	r31, r0
			percent = 60;
			speed = 1;
			PORTB |= (1<<PORTB0);
			move_worm(percent, speed);
			while (info_ptr->wormCom != 'k') {
				if(serial_input_available()){
     8d4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     8d8:	88 23       	and	r24, r24
     8da:	09 f4       	brne	.+2      	; 0x8de <input+0x3e0>
     8dc:	5b c0       	rjmp	.+182    	; 0x994 <__stack+0x95>
					in = fgetc(stdin);
     8de:	f5 01       	movw	r30, r10
     8e0:	80 81       	ld	r24, Z
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <fgetc>
					if (in == ' '){
     8e8:	80 32       	cpi	r24, 0x20	; 32
     8ea:	79 f4       	brne	.+30     	; 0x90a <__stack+0xb>
						fputs("Winch off\n", stdout);
     8ec:	20 91 d3 02 	lds	r18, 0x02D3
     8f0:	30 91 d4 02 	lds	r19, 0x02D4
     8f4:	4a e0       	ldi	r20, 0x0A	; 10
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	87 e4       	ldi	r24, 0x47	; 71
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 bc 0c 	call	0x1978	; 0x1978 <fwrite>
						winch_off();
     904:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <winch_off>
						break;
     908:	56 c0       	rjmp	.+172    	; 0x9b6 <__stack+0xb7>
					} else if (in == 'k'){
     90a:	8b 36       	cpi	r24, 0x6B	; 107
     90c:	11 f5       	brne	.+68     	; 0x952 <__stack+0x53>
						if ((percent + 10) < 100){
     90e:	8d 2d       	mov	r24, r13
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0a 96       	adiw	r24, 0x0a	; 10
     914:	84 36       	cpi	r24, 0x64	; 100
     916:	91 05       	cpc	r25, r1
     918:	ec f5       	brge	.+122    	; 0x994 <__stack+0x95>
							percent += 10;
     91a:	fa e0       	ldi	r31, 0x0A	; 10
     91c:	df 0e       	add	r13, r31
							sprintf(buffer, "Winch speed %d\n", percent);
     91e:	1f 92       	push	r1
     920:	df 92       	push	r13
     922:	9f 92       	push	r9
     924:	8f 92       	push	r8
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	8c 0f       	add	r24, r28
     92c:	9d 1f       	adc	r25, r29
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
							fputs(buffer, stdout);
     936:	f5 01       	movw	r30, r10
     938:	62 81       	ldd	r22, Z+2	; 0x02
     93a:	73 81       	ldd	r23, Z+3	; 0x03
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	21 c0       	rjmp	.+66     	; 0x994 <__stack+0x95>
						}
					} else if (in == 'j'){
     952:	8a 36       	cpi	r24, 0x6A	; 106
     954:	f9 f4       	brne	.+62     	; 0x994 <__stack+0x95>
						if ((percent -10) >=0){
     956:	8d 2d       	mov	r24, r13
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0a 97       	sbiw	r24, 0x0a	; 10
     95c:	da f0       	brmi	.+54     	; 0x994 <__stack+0x95>
							percent -= 10;
     95e:	f6 ef       	ldi	r31, 0xF6	; 246
     960:	df 0e       	add	r13, r31
							sprintf(buffer, "Winch speed %d\n", percent);
     962:	1f 92       	push	r1
     964:	df 92       	push	r13
     966:	9f 92       	push	r9
     968:	8f 92       	push	r8
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	8c 0f       	add	r24, r28
     970:	9d 1f       	adc	r25, r29
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
							fputs(buffer, stdout);
     97a:	f5 01       	movw	r30, r10
     97c:	62 81       	ldd	r22, Z+2	; 0x02
     97e:	73 81       	ldd	r23, Z+3	; 0x03
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
						}
					}
				}
				
				if ((PINB & (1<<PINB1)) == 0x00){
     994:	19 99       	sbic	0x03, 1	; 3
     996:	06 c0       	rjmp	.+12     	; 0x9a4 <__stack+0xa5>
					info_ptr->wormCom = 'k';
     998:	8b e6       	ldi	r24, 0x6B	; 107
     99a:	f8 01       	movw	r30, r16
     99c:	82 87       	std	Z+10, r24	; 0x0a
					winch_off();
     99e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <winch_off>
					break;
     9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__stack+0xb7>
				}
				
				move_worm(percent, speed);
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	8d 2d       	mov	r24, r13
     9a8:	0e 94 fe 09 	call	0x13fc	; 0x13fc <move_worm>
			/* move winch forwards	*/
			percent = 60;
			speed = 1;
			PORTB |= (1<<PORTB0);
			move_worm(percent, speed);
			while (info_ptr->wormCom != 'k') {
     9ac:	f8 01       	movw	r30, r16
     9ae:	92 85       	ldd	r25, Z+10	; 0x0a
     9b0:	9b 36       	cpi	r25, 0x6B	; 107
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	8f cf       	rjmp	.-226    	; 0x8d4 <input+0x3d6>
					break;
				}
				
				move_worm(percent, speed);
			}
			PORTB &= ~(1<<PORTB0);
     9b6:	28 98       	cbi	0x05, 0	; 5
			break;
     9b8:	2f c0       	rjmp	.+94     	; 0xa18 <__stack+0x119>
			//fputc('?', stdout);
			//info_ptr->stopCommand = 1;
			break;
		case 'o':
			// restart
			fputs("started\n", stdout);
     9ba:	20 91 d3 02 	lds	r18, 0x02D3
     9be:	30 91 d4 02 	lds	r19, 0x02D4
     9c2:	48 e0       	ldi	r20, 0x08	; 8
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	82 e6       	ldi	r24, 0x62	; 98
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 bc 0c 	call	0x1978	; 0x1978 <fwrite>
			break;
     9d2:	22 c0       	rjmp	.+68     	; 0xa18 <__stack+0x119>
		default:
			fputs("stupid.\n", stdout);
     9d4:	20 91 d3 02 	lds	r18, 0x02D3
     9d8:	30 91 d4 02 	lds	r19, 0x02D4
     9dc:	48 e0       	ldi	r20, 0x08	; 8
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	8b e6       	ldi	r24, 0x6B	; 107
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <fwrite>
			++info_ptr->stupidCount;
     9ec:	f8 01       	movw	r30, r16
     9ee:	81 85       	ldd	r24, Z+9	; 0x09
     9f0:	8f 5f       	subi	r24, 0xFF	; 255
     9f2:	81 87       	std	Z+9, r24	; 0x09
			if (info_ptr->stupidCount >= 10){
     9f4:	8a 30       	cpi	r24, 0x0A	; 10
     9f6:	80 f0       	brcs	.+32     	; 0xa18 <__stack+0x119>
					fputc('H', stdout);
     9f8:	60 91 d3 02 	lds	r22, 0x02D3
     9fc:	70 91 d4 02 	lds	r23, 0x02D4
     a00:	88 e4       	ldi	r24, 0x48	; 72
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
					custom_delay(1000);
     a08:	68 ee       	ldi	r22, 0xE8	; 232
     a0a:	73 e0       	ldi	r23, 0x03	; 3
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
					info_ptr->stupidCount = 0;
     a14:	f8 01       	movw	r30, r16
     a16:	11 86       	std	Z+9, r1	; 0x09
			}
			break;
	}
	/* echo character to next micro */
	fputc(c, stdout);
     a18:	60 91 d3 02 	lds	r22, 0x02D3
     a1c:	70 91 d4 02 	lds	r23, 0x02D4
     a20:	c7 01       	movw	r24, r14
     a22:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
	
}
     a26:	64 96       	adiw	r28, 0x14	; 20
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	9f 90       	pop	r9
     a46:	8f 90       	pop	r8
     a48:	08 95       	ret

00000a4a <main>:
void initialise(info* info_ptr);
void input(info* info_ptr);


/* functional code	*/
int main(void) {
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	e2 97       	sbiw	r28, 0x32	; 50
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
	
	info* info_ptr = makeInfo();
     a5e:	0e 94 11 02 	call	0x422	; 0x422 <makeInfo>
     a62:	8c 01       	movw	r16, r24
	initialise(info_ptr);
     a64:	0e 94 16 02 	call	0x42c	; 0x42c <initialise>
	DDRA |= (1<<PORTA0);
     a68:	08 9a       	sbi	0x01, 0	; 1
	PORTA |= (1<<PORTA0);
     a6a:	10 9a       	sbi	0x02, 0	; 2
	while(1) {
		if(serial_input_available()){
			input(info_ptr);
		}
		if (info_ptr->motorAct){
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     a6c:	33 24       	eor	r3, r3
     a6e:	3a 94       	dec	r3
     a70:	0f 2e       	mov	r0, r31
     a72:	f4 e6       	ldi	r31, 0x64	; 100
     a74:	af 2e       	mov	r10, r31
     a76:	b1 2c       	mov	r11, r1
     a78:	f0 2d       	mov	r31, r0
     a7a:	0f 2e       	mov	r0, r31
     a7c:	f3 eb       	ldi	r31, 0xB3	; 179
     a7e:	8f 2e       	mov	r8, r31
     a80:	91 2c       	mov	r9, r1
     a82:	f0 2d       	mov	r31, r0
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     a84:	0f 2e       	mov	r0, r31
     a86:	f4 eb       	ldi	r31, 0xB4	; 180
     a88:	6f 2e       	mov	r6, r31
     a8a:	71 2c       	mov	r7, r1
     a8c:	f0 2d       	mov	r31, r0
				//}
				//step(info_ptr);
			//}
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     a8e:	2e 01       	movw	r4, r28
     a90:	8f e1       	ldi	r24, 0x1F	; 31
     a92:	48 0e       	add	r4, r24
     a94:	51 1c       	adc	r5, r1
			fputs(buffer, stdout);
     a96:	0f 2e       	mov	r0, r31
     a98:	f1 ed       	ldi	r31, 0xD1	; 209
     a9a:	cf 2e       	mov	r12, r31
     a9c:	f2 e0       	ldi	r31, 0x02	; 2
     a9e:	df 2e       	mov	r13, r31
     aa0:	f0 2d       	mov	r31, r0
	initialise(info_ptr);
	DDRA |= (1<<PORTA0);
	PORTA |= (1<<PORTA0);
	
	while(1) {
		if(serial_input_available()){
     aa2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     aa6:	88 23       	and	r24, r24
     aa8:	19 f0       	breq	.+6      	; 0xab0 <main+0x66>
			input(info_ptr);
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 7f 02 	call	0x4fe	; 0x4fe <input>
		}
		if (info_ptr->motorAct){
     ab0:	d8 01       	movw	r26, r16
     ab2:	18 96       	adiw	r26, 0x08	; 8
     ab4:	8c 91       	ld	r24, X
     ab6:	18 97       	sbiw	r26, 0x08	; 8
     ab8:	88 23       	and	r24, r24
     aba:	c9 f0       	breq	.+50     	; 0xaee <main+0xa4>
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     abc:	8c 91       	ld	r24, X
     abe:	38 9e       	mul	r3, r24
     ac0:	c0 01       	movw	r24, r0
     ac2:	11 24       	eor	r1, r1
     ac4:	b5 01       	movw	r22, r10
     ac6:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodhi4>
     aca:	f4 01       	movw	r30, r8
     acc:	60 83       	st	Z, r22
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     ace:	d8 01       	movw	r26, r16
     ad0:	8c 91       	ld	r24, X
     ad2:	38 9e       	mul	r3, r24
     ad4:	c0 01       	movw	r24, r0
     ad6:	11 24       	eor	r1, r1
     ad8:	b5 01       	movw	r22, r10
     ada:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodhi4>
     ade:	f3 01       	movw	r30, r6
     ae0:	60 83       	st	Z, r22
			info_ptr->motorAct = 0;
     ae2:	d8 01       	movw	r26, r16
     ae4:	18 96       	adiw	r26, 0x08	; 8
     ae6:	1c 92       	st	X, r1
     ae8:	18 97       	sbiw	r26, 0x08	; 8
			info_ptr->stupidCount = 0;
     aea:	19 96       	adiw	r26, 0x09	; 9
     aec:	1c 92       	st	X, r1
		}
		if (info_ptr->stopCommand){
     aee:	f8 01       	movw	r30, r16
     af0:	85 81       	ldd	r24, Z+5	; 0x05
     af2:	88 23       	and	r24, r24
     af4:	99 f0       	breq	.+38     	; 0xb1c <main+0xd2>
			/* stop everything */
			PORTD &= ~(1<<PORTD2);
     af6:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     af8:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     afa:	46 98       	cbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     afc:	47 98       	cbi	0x08, 7	; 8
			//PORTC &= ~(1<<PORTC2);		/*	winch off	*/
			//PORTC &= ~(1<<PORTC5);		/*	winch off	*/
			if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	81 34       	cpi	r24, 0x41	; 65
     b02:	11 f0       	breq	.+4      	; 0xb08 <main+0xbe>
     b04:	82 35       	cpi	r24, 0x52	; 82
     b06:	29 f4       	brne	.+10     	; 0xb12 <main+0xc8>
				hold_step();
     b08:	0e 94 ab 06 	call	0xd56	; 0xd56 <hold_step>
				info_ptr->stepAct = '\0';
     b0c:	d8 01       	movw	r26, r16
     b0e:	14 96       	adiw	r26, 0x04	; 4
     b10:	1c 92       	st	X, r1
			}
			info_ptr->camera = 0;
     b12:	f8 01       	movw	r30, r16
     b14:	16 82       	std	Z+6, r1	; 0x06
			info_ptr->stopCommand = 0;
     b16:	15 82       	std	Z+5, r1	; 0x05
			info_ptr->stupidCount = 0;
     b18:	11 86       	std	Z+9, r1	; 0x09
     b1a:	e8 c0       	rjmp	.+464    	; 0xcec <main+0x2a2>
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     b1c:	84 81       	ldd	r24, Z+4	; 0x04
     b1e:	81 34       	cpi	r24, 0x41	; 65
     b20:	19 f0       	breq	.+6      	; 0xb28 <main+0xde>
     b22:	82 35       	cpi	r24, 0x52	; 82
     b24:	09 f0       	breq	.+2      	; 0xb28 <main+0xde>
     b26:	db c0       	rjmp	.+438    	; 0xcde <main+0x294>
								//break;
						//}
				//}
				//step(info_ptr);
			//}
			int16_t current = current_step();
     b28:	0e 94 a6 06 	call	0xd4c	; 0xd4c <current_step>
     b2c:	7c 01       	movw	r14, r24
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     b2e:	f8 01       	movw	r30, r16
     b30:	84 81       	ldd	r24, Z+4	; 0x04
     b32:	1f 92       	push	r1
     b34:	8f 93       	push	r24
     b36:	81 81       	ldd	r24, Z+1	; 0x01
     b38:	28 2f       	mov	r18, r24
     b3a:	08 2e       	mov	r0, r24
     b3c:	00 0c       	add	r0, r0
     b3e:	33 0b       	sbc	r19, r19
     b40:	3f 93       	push	r19
     b42:	8f 93       	push	r24
     b44:	ff 92       	push	r15
     b46:	ef 92       	push	r14
     b48:	a4 e7       	ldi	r26, 0x74	; 116
     b4a:	b1 e0       	ldi	r27, 0x01	; 1
     b4c:	bf 93       	push	r27
     b4e:	af 93       	push	r26
     b50:	5f 92       	push	r5
     b52:	4f 92       	push	r4
     b54:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
			fputs(buffer, stdout);
     b58:	d6 01       	movw	r26, r12
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	6d 91       	ld	r22, X+
     b5e:	7c 91       	ld	r23, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	c2 01       	movw	r24, r4
     b64:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	d8 01       	movw	r26, r16
     b74:	11 96       	adiw	r26, 0x01	; 1
     b76:	8c 91       	ld	r24, X
     b78:	11 97       	sbiw	r26, 0x01	; 1
     b7a:	88 23       	and	r24, r24
     b7c:	fc f4       	brge	.+62     	; 0xbbc <main+0x172>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	8c 91       	ld	r24, X
     b82:	14 97       	sbiw	r26, 0x04	; 4
     b84:	82 35       	cpi	r24, 0x52	; 82
     b86:	d1 f4       	brne	.+52     	; 0xbbc <main+0x172>
     b88:	12 96       	adiw	r26, 0x02	; 2
     b8a:	8d 91       	ld	r24, X+
     b8c:	9c 91       	ld	r25, X
     b8e:	13 97       	sbiw	r26, 0x03	; 3
     b90:	e8 16       	cp	r14, r24
     b92:	f9 06       	cpc	r15, r25
     b94:	90 f1       	brcs	.+100    	; 0xbfa <main+0x1b0>
					step(info_ptr);
     b96:	c8 01       	movw	r24, r16
     b98:	0e 94 51 09 	call	0x12a2	; 0x12a2 <step>
					current = current_step();
     b9c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <current_step>
     ba0:	7c 01       	movw	r14, r24
			//}
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     ba2:	f8 01       	movw	r30, r16
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
     ba6:	88 23       	and	r24, r24
     ba8:	4c f4       	brge	.+18     	; 0xbbc <main+0x172>
     baa:	84 81       	ldd	r24, Z+4	; 0x04
     bac:	82 35       	cpi	r24, 0x52	; 82
     bae:	31 f4       	brne	.+12     	; 0xbbc <main+0x172>
     bb0:	82 81       	ldd	r24, Z+2	; 0x02
     bb2:	93 81       	ldd	r25, Z+3	; 0x03
     bb4:	e8 16       	cp	r14, r24
     bb6:	f9 06       	cpc	r15, r25
     bb8:	70 f7       	brcc	.-36     	; 0xb96 <main+0x14c>
     bba:	1f c0       	rjmp	.+62     	; 0xbfa <main+0x1b0>
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     bbc:	d8 01       	movw	r26, r16
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	8c 91       	ld	r24, X
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	18 16       	cp	r1, r24
     bc6:	cc f4       	brge	.+50     	; 0xbfa <main+0x1b0>
     bc8:	14 96       	adiw	r26, 0x04	; 4
     bca:	8c 91       	ld	r24, X
     bcc:	81 34       	cpi	r24, 0x41	; 65
     bce:	a9 f4       	brne	.+42     	; 0xbfa <main+0x1b0>
     bd0:	1e 14       	cp	r1, r14
     bd2:	1f 04       	cpc	r1, r15
     bd4:	0c f4       	brge	.+2      	; 0xbd8 <main+0x18e>
     bd6:	9a c0       	rjmp	.+308    	; 0xd0c <main+0x2c2>
				step(info_ptr);
     bd8:	c8 01       	movw	r24, r16
     bda:	0e 94 51 09 	call	0x12a2	; 0x12a2 <step>
				current = current_step();
     bde:	0e 94 a6 06 	call	0xd4c	; 0xd4c <current_step>
     be2:	7c 01       	movw	r14, r24
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     be4:	f8 01       	movw	r30, r16
     be6:	81 81       	ldd	r24, Z+1	; 0x01
     be8:	18 16       	cp	r1, r24
     bea:	3c f4       	brge	.+14     	; 0xbfa <main+0x1b0>
     bec:	84 81       	ldd	r24, Z+4	; 0x04
     bee:	81 34       	cpi	r24, 0x41	; 65
     bf0:	21 f4       	brne	.+8      	; 0xbfa <main+0x1b0>
     bf2:	1e 14       	cp	r1, r14
     bf4:	1f 04       	cpc	r1, r15
     bf6:	84 f7       	brge	.-32     	; 0xbd8 <main+0x18e>
     bf8:	89 c0       	rjmp	.+274    	; 0xd0c <main+0x2c2>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     bfa:	d8 01       	movw	r26, r16
     bfc:	12 96       	adiw	r26, 0x02	; 2
     bfe:	8d 91       	ld	r24, X+
     c00:	9c 91       	ld	r25, X
     c02:	13 97       	sbiw	r26, 0x03	; 3
     c04:	e8 16       	cp	r14, r24
     c06:	f9 06       	cpc	r15, r25
     c08:	68 f5       	brcc	.+90     	; 0xc64 <main+0x21a>
     c0a:	ff 20       	and	r15, r15
     c0c:	5c f1       	brlt	.+86     	; 0xc64 <main+0x21a>
					if (serial_input_available()){
     c0e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     c12:	88 23       	and	r24, r24
     c14:	c1 f0       	breq	.+48     	; 0xc46 <main+0x1fc>
						char in = fgetc(stdin);
     c16:	f6 01       	movw	r30, r12
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <fgetc>
						if (in == ' '){
     c20:	80 32       	cpi	r24, 0x20	; 32
     c22:	89 f4       	brne	.+34     	; 0xc46 <main+0x1fc>
							info_ptr->stepAct = '\0';
     c24:	d8 01       	movw	r26, r16
     c26:	14 96       	adiw	r26, 0x04	; 4
     c28:	1c 92       	st	X, r1
							hold_step();
     c2a:	0e 94 ab 06 	call	0xd56	; 0xd56 <hold_step>
							fputs("canceled\n", stdout);
     c2e:	f6 01       	movw	r30, r12
     c30:	22 81       	ldd	r18, Z+2	; 0x02
     c32:	33 81       	ldd	r19, Z+3	; 0x03
     c34:	49 e0       	ldi	r20, 0x09	; 9
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	84 e8       	ldi	r24, 0x84	; 132
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 bc 0c 	call	0x1978	; 0x1978 <fwrite>
							break;
     c44:	0f c0       	rjmp	.+30     	; 0xc64 <main+0x21a>
						}
					}
					step(info_ptr);
     c46:	c8 01       	movw	r24, r16
     c48:	0e 94 51 09 	call	0x12a2	; 0x12a2 <step>
					current = current_step();				
     c4c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <current_step>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     c50:	d8 01       	movw	r26, r16
     c52:	12 96       	adiw	r26, 0x02	; 2
     c54:	2d 91       	ld	r18, X+
     c56:	3c 91       	ld	r19, X
     c58:	13 97       	sbiw	r26, 0x03	; 3
     c5a:	82 17       	cp	r24, r18
     c5c:	93 07       	cpc	r25, r19
     c5e:	10 f4       	brcc	.+4      	; 0xc64 <main+0x21a>
     c60:	99 23       	and	r25, r25
     c62:	ac f6       	brge	.-86     	; 0xc0e <main+0x1c4>
					step(info_ptr);
					current = current_step();				
				}
			/*************************************************************/
			//}
			current = current_step();
     c64:	0e 94 a6 06 	call	0xd4c	; 0xd4c <current_step>
			char buffer1[30];
			sprintf(buffer1, "step POS: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     c68:	f8 01       	movw	r30, r16
     c6a:	24 81       	ldd	r18, Z+4	; 0x04
     c6c:	1f 92       	push	r1
     c6e:	2f 93       	push	r18
     c70:	21 81       	ldd	r18, Z+1	; 0x01
     c72:	42 2f       	mov	r20, r18
     c74:	02 2e       	mov	r0, r18
     c76:	00 0c       	add	r0, r0
     c78:	55 0b       	sbc	r21, r21
     c7a:	5f 93       	push	r21
     c7c:	2f 93       	push	r18
     c7e:	9f 93       	push	r25
     c80:	8f 93       	push	r24
     c82:	ae e8       	ldi	r26, 0x8E	; 142
     c84:	b1 e0       	ldi	r27, 0x01	; 1
     c86:	bf 93       	push	r27
     c88:	af 93       	push	r26
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	8c 0f       	add	r24, r28
     c90:	9d 1f       	adc	r25, r29
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <sprintf>
			fputs(buffer1, stdout);
     c9a:	d6 01       	movw	r26, r12
     c9c:	12 96       	adiw	r26, 0x02	; 2
     c9e:	6d 91       	ld	r22, X+
     ca0:	7c 91       	ld	r23, X
     ca2:	13 97       	sbiw	r26, 0x03	; 3
     ca4:	ce 01       	movw	r24, r28
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	0e 94 92 0c 	call	0x1924	; 0x1924 <fputs>
			/****************************************************************/
			fputs("end step\n", stdout);
     cac:	f6 01       	movw	r30, r12
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	33 81       	ldd	r19, Z+3	; 0x03
     cb2:	49 e0       	ldi	r20, 0x09	; 9
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	82 ea       	ldi	r24, 0xA2	; 162
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	0e 94 bc 0c 	call	0x1978	; 0x1978 <fwrite>
			info_ptr->stepAct = '\0';
     cc2:	d8 01       	movw	r26, r16
     cc4:	14 96       	adiw	r26, 0x04	; 4
     cc6:	1c 92       	st	X, r1
     cc8:	14 97       	sbiw	r26, 0x04	; 4
			info_ptr->stupidCount = 0;
     cca:	19 96       	adiw	r26, 0x09	; 9
     ccc:	1c 92       	st	X, r1
			hold_step();
     cce:	0e 94 ab 06 	call	0xd56	; 0xd56 <hold_step>
			}
			info_ptr->camera = 0;
			info_ptr->stopCommand = 0;
			info_ptr->stupidCount = 0;
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	07 c0       	rjmp	.+14     	; 0xcec <main+0x2a2>
			/****************************************************************/
			fputs("end step\n", stdout);
			info_ptr->stepAct = '\0';
			info_ptr->stupidCount = 0;
			hold_step();
		} else if (info_ptr->camera != 0){
     cde:	86 81       	ldd	r24, Z+6	; 0x06
     ce0:	88 23       	and	r24, r24
     ce2:	21 f0       	breq	.+8      	; 0xcec <main+0x2a2>
			uint8_t pos = OCR0A;
     ce4:	97 b5       	in	r25, 0x27	; 39
			pos += info_ptr->camera;
     ce6:	89 0f       	add	r24, r25
					pos = 0;
			} else if (pos > 255){
					pos = 255;
			}
			/*	adjust camera position */
			OCR0A = pos;
     ce8:	87 bd       	out	0x27, r24	; 39
			info_ptr->stupidCount = 0;
     cea:	11 86       	std	Z+9, r1	; 0x09
		}
		
		PORTB |= (1<<PORTB0);
     cec:	28 9a       	sbi	0x05, 0	; 5
		custom_delay(30);
     cee:	6e e1       	ldi	r22, 0x1E	; 30
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
		if (PINB & (1<<PINB1)){
     cfa:	19 9b       	sbis	0x03, 1	; 3
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <main+0x2ba>
			/*	worm gear hasn't hit button and is free to use in both directions	*/
				info_ptr->wormCom = '\0';
     cfe:	f8 01       	movw	r30, r16
     d00:	12 86       	std	Z+10, r1	; 0x0a
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <main+0x2be>
		} else {
				winch_off();
     d04:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <winch_off>
		}
		PORTB &= ~(1<<PORTB0);
     d08:	28 98       	cbi	0x05, 0	; 5
		//TODO:: Please write your application code
	}
     d0a:	cb ce       	rjmp	.-618    	; 0xaa2 <main+0x58>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     d0c:	d8 01       	movw	r26, r16
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	8d 91       	ld	r24, X+
     d12:	9c 91       	ld	r25, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	e8 16       	cp	r14, r24
     d18:	f9 06       	cpc	r15, r25
     d1a:	08 f4       	brcc	.+2      	; 0xd1e <main+0x2d4>
     d1c:	78 cf       	rjmp	.-272    	; 0xc0e <main+0x1c4>
     d1e:	a2 cf       	rjmp	.-188    	; 0xc64 <main+0x21a>

00000d20 <init_step>:
 uint8_t RED;				// port for stepper red wire


 void init_step(void){
	/* sets the ports for the stepper motor and initializes the steps and phase	*/
	steps = 0;
     d20:	10 92 c7 02 	sts	0x02C7, r1
     d24:	10 92 c6 02 	sts	0x02C6, r1
	phase = 0;
     d28:	10 92 c8 02 	sts	0x02C8, r1
	//GRE = PORTC5;
	//YEL = PORTC2;
	//RED = PORTC3;
	
	//changing one
	BLU = PORTC5;
     d2c:	85 e0       	ldi	r24, 0x05	; 5
     d2e:	80 93 cb 02 	sts	0x02CB, r24
	GRE = PORTC4;
     d32:	84 e0       	ldi	r24, 0x04	; 4
     d34:	80 93 ca 02 	sts	0x02CA, r24
	YEL = PORTC3;
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	80 93 c9 02 	sts	0x02C9, r24
	RED = PORTC2;
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	80 93 cc 02 	sts	0x02CC, r24
	////BLU = PORTC2;
	////GRE = PORTC3;
	////YEL = PORTC4;
	////RED = PORTC5;

	DDRC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     d44:	87 b1       	in	r24, 0x07	; 7
     d46:	8c 63       	ori	r24, 0x3C	; 60
     d48:	87 b9       	out	0x07, r24	; 7
     d4a:	08 95       	ret

00000d4c <current_step>:
	*	can be modified to return an angle from origin using gear
	*	ratio
	*/
	int16_t returnValue = steps;
	return returnValue;
 }
     d4c:	80 91 c6 02 	lds	r24, 0x02C6
     d50:	90 91 c7 02 	lds	r25, 0x02C7
     d54:	08 95       	ret

00000d56 <hold_step>:

void hold_step(void){
	
	PORTC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     d56:	38 b1       	in	r19, 0x08	; 8
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	bc 01       	movw	r22, r24
     d5e:	00 90 cb 02 	lds	r0, 0x02CB
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <hold_step+0x12>
     d64:	66 0f       	add	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <hold_step+0xe>
     d6c:	ac 01       	movw	r20, r24
     d6e:	00 90 ca 02 	lds	r0, 0x02CA
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <hold_step+0x22>
     d74:	44 0f       	add	r20, r20
     d76:	55 1f       	adc	r21, r21
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <hold_step+0x1e>
     d7c:	46 2b       	or	r20, r22
     d7e:	43 2b       	or	r20, r19
     d80:	9c 01       	movw	r18, r24
     d82:	00 90 c9 02 	lds	r0, 0x02C9
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <hold_step+0x36>
     d88:	22 0f       	add	r18, r18
     d8a:	33 1f       	adc	r19, r19
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <hold_step+0x32>
     d90:	24 2b       	or	r18, r20
     d92:	00 90 cc 02 	lds	r0, 0x02CC
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <hold_step+0x46>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <hold_step+0x42>
     da0:	82 2b       	or	r24, r18
     da2:	88 b9       	out	0x08, r24	; 8
     da4:	08 95       	ret

00000da6 <release_step>:
	
}

void release_step(void){
	
	PORTC &= ~((1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED));
     da6:	28 b1       	in	r18, 0x08	; 8
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	bc 01       	movw	r22, r24
     dae:	00 90 ca 02 	lds	r0, 0x02CA
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <release_step+0x12>
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <release_step+0xe>
     dbc:	ac 01       	movw	r20, r24
     dbe:	00 90 cb 02 	lds	r0, 0x02CB
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <release_step+0x22>
     dc4:	44 0f       	add	r20, r20
     dc6:	55 1f       	adc	r21, r21
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <release_step+0x1e>
     dcc:	36 2f       	mov	r19, r22
     dce:	34 2b       	or	r19, r20
     dd0:	ac 01       	movw	r20, r24
     dd2:	00 90 c9 02 	lds	r0, 0x02C9
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <release_step+0x36>
     dd8:	44 0f       	add	r20, r20
     dda:	55 1f       	adc	r21, r21
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <release_step+0x32>
     de0:	43 2b       	or	r20, r19
     de2:	00 90 cc 02 	lds	r0, 0x02CC
     de6:	02 c0       	rjmp	.+4      	; 0xdec <release_step+0x46>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <release_step+0x42>
     df0:	84 2b       	or	r24, r20
     df2:	80 95       	com	r24
     df4:	82 23       	and	r24, r18
     df6:	88 b9       	out	0x08, r24	; 8
     df8:	08 95       	ret

00000dfa <decrement_step>:
 }

/**************************************************************************************swapped increment and decrement so start with claw closed ****************/
 void decrement_step(void){
	/* the motor has turned one step, increase the count */
	--steps;
     dfa:	80 91 c6 02 	lds	r24, 0x02C6
     dfe:	90 91 c7 02 	lds	r25, 0x02C7
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	90 93 c7 02 	sts	0x02C7, r25
     e08:	80 93 c6 02 	sts	0x02C6, r24
     e0c:	08 95       	ret

00000e0e <increment_step>:
 }

 void increment_step(void){
	/* the motor has turned back one step, decrease the count */
	++steps;
     e0e:	80 91 c6 02 	lds	r24, 0x02C6
     e12:	90 91 c7 02 	lds	r25, 0x02C7
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	90 93 c7 02 	sts	0x02C7, r25
     e1c:	80 93 c6 02 	sts	0x02C6, r24
     e20:	08 95       	ret

00000e22 <step_clockwise>:
 }
/**************************************************************************************************************************************************************/


 void step_clockwise(uint8_t time_on){
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */

	 uint32_t current_time;
	 
	 if(phase == 0){
     e30:	90 91 c8 02 	lds	r25, 0x02C8
     e34:	91 11       	cpse	r25, r1
     e36:	42 c0       	rjmp	.+132    	; 0xebc <step_clockwise+0x9a>
		 current_time = get_tcnt1_ticks();
     e38:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e3c:	6b 01       	movw	r12, r22
     e3e:	7c 01       	movw	r14, r24
     e40:	cc 0e       	add	r12, r28
     e42:	d1 1c       	adc	r13, r1
     e44:	e1 1c       	adc	r14, r1
     e46:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<YEL)|(1<<GRE);
     e48:	c1 e0       	ldi	r28, 0x01	; 1
     e4a:	d0 e0       	ldi	r29, 0x00	; 0

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e4c:	2a c0       	rjmp	.+84     	; 0xea2 <step_clockwise+0x80>
			 PORTC |= (1<<YEL)|(1<<GRE);
     e4e:	98 b1       	in	r25, 0x08	; 8
     e50:	ae 01       	movw	r20, r28
     e52:	00 90 c9 02 	lds	r0, 0x02C9
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <step_clockwise+0x3a>
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <step_clockwise+0x36>
     e60:	9e 01       	movw	r18, r28
     e62:	00 90 ca 02 	lds	r0, 0x02CA
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <step_clockwise+0x4a>
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <step_clockwise+0x46>
     e70:	84 2f       	mov	r24, r20
     e72:	82 2b       	or	r24, r18
     e74:	89 2b       	or	r24, r25
     e76:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
     e78:	28 b1       	in	r18, 0x08	; 8
     e7a:	ae 01       	movw	r20, r28
     e7c:	00 90 cc 02 	lds	r0, 0x02CC
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <step_clockwise+0x64>
     e82:	44 0f       	add	r20, r20
     e84:	55 1f       	adc	r21, r21
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <step_clockwise+0x60>
     e8a:	ce 01       	movw	r24, r28
     e8c:	00 90 cb 02 	lds	r0, 0x02CB
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <step_clockwise+0x74>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <step_clockwise+0x70>
     e9a:	84 2b       	or	r24, r20
     e9c:	80 95       	com	r24
     e9e:	82 23       	and	r24, r18
     ea0:	88 b9       	out	0x08, r24	; 8

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ea2:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
     ea6:	6c 15       	cp	r22, r12
     ea8:	7d 05       	cpc	r23, r13
     eaa:	8e 05       	cpc	r24, r14
     eac:	9f 05       	cpc	r25, r15
     eae:	78 f2       	brcs	.-98     	; 0xe4e <step_clockwise+0x2c>
			 PORTC |= (1<<YEL)|(1<<GRE);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 ++phase;
     eb0:	80 91 c8 02 	lds	r24, 0x02C8
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	80 93 c8 02 	sts	0x02C8, r24
     eba:	ca c0       	rjmp	.+404    	; 0x1050 <step_clockwise+0x22e>
	 }
	 else if(phase == 1){
     ebc:	91 30       	cpi	r25, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <step_clockwise+0xa0>
     ec0:	42 c0       	rjmp	.+132    	; 0xf46 <step_clockwise+0x124>
		 current_time = get_tcnt1_ticks();
     ec2:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ec6:	6b 01       	movw	r12, r22
     ec8:	7c 01       	movw	r14, r24
     eca:	cc 0e       	add	r12, r28
     ecc:	d1 1c       	adc	r13, r1
     ece:	e1 1c       	adc	r14, r1
     ed0:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<RED)|(1<<GRE);
     ed2:	c1 e0       	ldi	r28, 0x01	; 1
     ed4:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ed6:	2a c0       	rjmp	.+84     	; 0xf2c <step_clockwise+0x10a>
			 PORTC |= (1<<RED)|(1<<GRE);
     ed8:	98 b1       	in	r25, 0x08	; 8
     eda:	ae 01       	movw	r20, r28
     edc:	00 90 cc 02 	lds	r0, 0x02CC
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <step_clockwise+0xc4>
     ee2:	44 0f       	add	r20, r20
     ee4:	55 1f       	adc	r21, r21
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <step_clockwise+0xc0>
     eea:	9e 01       	movw	r18, r28
     eec:	00 90 ca 02 	lds	r0, 0x02CA
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <step_clockwise+0xd4>
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <step_clockwise+0xd0>
     efa:	84 2f       	mov	r24, r20
     efc:	82 2b       	or	r24, r18
     efe:	89 2b       	or	r24, r25
     f00:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
     f02:	28 b1       	in	r18, 0x08	; 8
     f04:	ae 01       	movw	r20, r28
     f06:	00 90 c9 02 	lds	r0, 0x02C9
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <step_clockwise+0xee>
     f0c:	44 0f       	add	r20, r20
     f0e:	55 1f       	adc	r21, r21
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <step_clockwise+0xea>
     f14:	ce 01       	movw	r24, r28
     f16:	00 90 cb 02 	lds	r0, 0x02CB
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <step_clockwise+0xfe>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <step_clockwise+0xfa>
     f24:	84 2b       	or	r24, r20
     f26:	80 95       	com	r24
     f28:	82 23       	and	r24, r18
     f2a:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f2c:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
     f30:	6c 15       	cp	r22, r12
     f32:	7d 05       	cpc	r23, r13
     f34:	8e 05       	cpc	r24, r14
     f36:	9f 05       	cpc	r25, r15
     f38:	78 f2       	brcs	.-98     	; 0xed8 <step_clockwise+0xb6>
			 PORTC |= (1<<RED)|(1<<GRE);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
     f3a:	80 91 c8 02 	lds	r24, 0x02C8
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 c8 02 	sts	0x02C8, r24
     f44:	85 c0       	rjmp	.+266    	; 0x1050 <step_clockwise+0x22e>
	 }
	 else if(phase == 2){
     f46:	92 30       	cpi	r25, 0x02	; 2
     f48:	09 f0       	breq	.+2      	; 0xf4c <step_clockwise+0x12a>
     f4a:	42 c0       	rjmp	.+132    	; 0xfd0 <step_clockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
     f4c:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f50:	6b 01       	movw	r12, r22
     f52:	7c 01       	movw	r14, r24
     f54:	cc 0e       	add	r12, r28
     f56:	d1 1c       	adc	r13, r1
     f58:	e1 1c       	adc	r14, r1
     f5a:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
     f5c:	c1 e0       	ldi	r28, 0x01	; 1
     f5e:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f60:	2a c0       	rjmp	.+84     	; 0xfb6 <step_clockwise+0x194>
			 PORTC |= (1<<BLU)|(1<<RED);
     f62:	98 b1       	in	r25, 0x08	; 8
     f64:	ae 01       	movw	r20, r28
     f66:	00 90 cb 02 	lds	r0, 0x02CB
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <step_clockwise+0x14e>
     f6c:	44 0f       	add	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <step_clockwise+0x14a>
     f74:	9e 01       	movw	r18, r28
     f76:	00 90 cc 02 	lds	r0, 0x02CC
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <step_clockwise+0x15e>
     f7c:	22 0f       	add	r18, r18
     f7e:	33 1f       	adc	r19, r19
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <step_clockwise+0x15a>
     f84:	84 2f       	mov	r24, r20
     f86:	82 2b       	or	r24, r18
     f88:	89 2b       	or	r24, r25
     f8a:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
     f8c:	28 b1       	in	r18, 0x08	; 8
     f8e:	ae 01       	movw	r20, r28
     f90:	00 90 c9 02 	lds	r0, 0x02C9
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <step_clockwise+0x178>
     f96:	44 0f       	add	r20, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <step_clockwise+0x174>
     f9e:	ce 01       	movw	r24, r28
     fa0:	00 90 ca 02 	lds	r0, 0x02CA
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <step_clockwise+0x188>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <step_clockwise+0x184>
     fae:	84 2b       	or	r24, r20
     fb0:	80 95       	com	r24
     fb2:	82 23       	and	r24, r18
     fb4:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     fb6:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
     fba:	6c 15       	cp	r22, r12
     fbc:	7d 05       	cpc	r23, r13
     fbe:	8e 05       	cpc	r24, r14
     fc0:	9f 05       	cpc	r25, r15
     fc2:	78 f2       	brcs	.-98     	; 0xf62 <step_clockwise+0x140>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
     fc4:	80 91 c8 02 	lds	r24, 0x02C8
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	80 93 c8 02 	sts	0x02C8, r24
     fce:	40 c0       	rjmp	.+128    	; 0x1050 <step_clockwise+0x22e>
	 }
	 else if(phase == 3){
     fd0:	93 30       	cpi	r25, 0x03	; 3
     fd2:	f1 f5       	brne	.+124    	; 0x1050 <step_clockwise+0x22e>
		 current_time = get_tcnt1_ticks();
     fd4:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     fd8:	6b 01       	movw	r12, r22
     fda:	7c 01       	movw	r14, r24
     fdc:	cc 0e       	add	r12, r28
     fde:	d1 1c       	adc	r13, r1
     fe0:	e1 1c       	adc	r14, r1
     fe2:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
     fe4:	c1 e0       	ldi	r28, 0x01	; 1
     fe6:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     fe8:	2a c0       	rjmp	.+84     	; 0x103e <step_clockwise+0x21c>
			 PORTC |= (1<<BLU)|(1<<YEL);
     fea:	98 b1       	in	r25, 0x08	; 8
     fec:	ae 01       	movw	r20, r28
     fee:	00 90 cb 02 	lds	r0, 0x02CB
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <step_clockwise+0x1d6>
     ff4:	44 0f       	add	r20, r20
     ff6:	55 1f       	adc	r21, r21
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <step_clockwise+0x1d2>
     ffc:	9e 01       	movw	r18, r28
     ffe:	00 90 c9 02 	lds	r0, 0x02C9
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <step_clockwise+0x1e6>
    1004:	22 0f       	add	r18, r18
    1006:	33 1f       	adc	r19, r19
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <step_clockwise+0x1e2>
    100c:	84 2f       	mov	r24, r20
    100e:	82 2b       	or	r24, r18
    1010:	89 2b       	or	r24, r25
    1012:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
    1014:	28 b1       	in	r18, 0x08	; 8
    1016:	ae 01       	movw	r20, r28
    1018:	00 90 cc 02 	lds	r0, 0x02CC
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <step_clockwise+0x200>
    101e:	44 0f       	add	r20, r20
    1020:	55 1f       	adc	r21, r21
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <step_clockwise+0x1fc>
    1026:	ce 01       	movw	r24, r28
    1028:	00 90 ca 02 	lds	r0, 0x02CA
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <step_clockwise+0x210>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <step_clockwise+0x20c>
    1036:	84 2b       	or	r24, r20
    1038:	80 95       	com	r24
    103a:	82 23       	and	r24, r18
    103c:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    103e:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
    1042:	6c 15       	cp	r22, r12
    1044:	7d 05       	cpc	r23, r13
    1046:	8e 05       	cpc	r24, r14
    1048:	9f 05       	cpc	r25, r15
    104a:	78 f2       	brcs	.-98     	; 0xfea <step_clockwise+0x1c8>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 phase = 0;
    104c:	10 92 c8 02 	sts	0x02C8, r1
	 }
	 increment_step();
    1050:	0e 94 07 07 	call	0xe0e	; 0xe0e <increment_step>
 }
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	08 95       	ret

00001062 <step_anticlockwise>:


 void step_anticlockwise(uint8_t time_on){
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */
	
	 uint32_t current_time;

	 if(phase == 0){
    1070:	90 91 c8 02 	lds	r25, 0x02C8
    1074:	91 11       	cpse	r25, r1
    1076:	42 c0       	rjmp	.+132    	; 0x10fc <step_anticlockwise+0x9a>
		 current_time = get_tcnt1_ticks();
    1078:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    107c:	6b 01       	movw	r12, r22
    107e:	7c 01       	movw	r14, r24
    1080:	cc 0e       	add	r12, r28
    1082:	d1 1c       	adc	r13, r1
    1084:	e1 1c       	adc	r14, r1
    1086:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
    1088:	c1 e0       	ldi	r28, 0x01	; 1
    108a:	d0 e0       	ldi	r29, 0x00	; 0
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    108c:	2a c0       	rjmp	.+84     	; 0x10e2 <step_anticlockwise+0x80>
			 PORTC |= (1<<BLU)|(1<<YEL);
    108e:	98 b1       	in	r25, 0x08	; 8
    1090:	ae 01       	movw	r20, r28
    1092:	00 90 cb 02 	lds	r0, 0x02CB
    1096:	02 c0       	rjmp	.+4      	; 0x109c <step_anticlockwise+0x3a>
    1098:	44 0f       	add	r20, r20
    109a:	55 1f       	adc	r21, r21
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <step_anticlockwise+0x36>
    10a0:	9e 01       	movw	r18, r28
    10a2:	00 90 c9 02 	lds	r0, 0x02C9
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <step_anticlockwise+0x4a>
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <step_anticlockwise+0x46>
    10b0:	84 2f       	mov	r24, r20
    10b2:	82 2b       	or	r24, r18
    10b4:	89 2b       	or	r24, r25
    10b6:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
    10b8:	28 b1       	in	r18, 0x08	; 8
    10ba:	ae 01       	movw	r20, r28
    10bc:	00 90 cc 02 	lds	r0, 0x02CC
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <step_anticlockwise+0x64>
    10c2:	44 0f       	add	r20, r20
    10c4:	55 1f       	adc	r21, r21
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <step_anticlockwise+0x60>
    10ca:	ce 01       	movw	r24, r28
    10cc:	00 90 ca 02 	lds	r0, 0x02CA
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <step_anticlockwise+0x74>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <step_anticlockwise+0x70>
    10da:	84 2b       	or	r24, r20
    10dc:	80 95       	com	r24
    10de:	82 23       	and	r24, r18
    10e0:	88 b9       	out	0x08, r24	; 8
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    10e2:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
    10e6:	6c 15       	cp	r22, r12
    10e8:	7d 05       	cpc	r23, r13
    10ea:	8e 05       	cpc	r24, r14
    10ec:	9f 05       	cpc	r25, r15
    10ee:	78 f2       	brcs	.-98     	; 0x108e <step_anticlockwise+0x2c>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 ++phase;
    10f0:	80 91 c8 02 	lds	r24, 0x02C8
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	80 93 c8 02 	sts	0x02C8, r24
    10fa:	ca c0       	rjmp	.+404    	; 0x1290 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 1){
    10fc:	91 30       	cpi	r25, 0x01	; 1
    10fe:	09 f0       	breq	.+2      	; 0x1102 <step_anticlockwise+0xa0>
    1100:	42 c0       	rjmp	.+132    	; 0x1186 <step_anticlockwise+0x124>
		 current_time = get_tcnt1_ticks();
    1102:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1106:	6b 01       	movw	r12, r22
    1108:	7c 01       	movw	r14, r24
    110a:	cc 0e       	add	r12, r28
    110c:	d1 1c       	adc	r13, r1
    110e:	e1 1c       	adc	r14, r1
    1110:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
    1112:	c1 e0       	ldi	r28, 0x01	; 1
    1114:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1116:	2a c0       	rjmp	.+84     	; 0x116c <step_anticlockwise+0x10a>
			 PORTC |= (1<<BLU)|(1<<RED);
    1118:	98 b1       	in	r25, 0x08	; 8
    111a:	ae 01       	movw	r20, r28
    111c:	00 90 cb 02 	lds	r0, 0x02CB
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <step_anticlockwise+0xc4>
    1122:	44 0f       	add	r20, r20
    1124:	55 1f       	adc	r21, r21
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <step_anticlockwise+0xc0>
    112a:	9e 01       	movw	r18, r28
    112c:	00 90 cc 02 	lds	r0, 0x02CC
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <step_anticlockwise+0xd4>
    1132:	22 0f       	add	r18, r18
    1134:	33 1f       	adc	r19, r19
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <step_anticlockwise+0xd0>
    113a:	84 2f       	mov	r24, r20
    113c:	82 2b       	or	r24, r18
    113e:	89 2b       	or	r24, r25
    1140:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
    1142:	28 b1       	in	r18, 0x08	; 8
    1144:	ae 01       	movw	r20, r28
    1146:	00 90 c9 02 	lds	r0, 0x02C9
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <step_anticlockwise+0xee>
    114c:	44 0f       	add	r20, r20
    114e:	55 1f       	adc	r21, r21
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <step_anticlockwise+0xea>
    1154:	ce 01       	movw	r24, r28
    1156:	00 90 ca 02 	lds	r0, 0x02CA
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <step_anticlockwise+0xfe>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <step_anticlockwise+0xfa>
    1164:	84 2b       	or	r24, r20
    1166:	80 95       	com	r24
    1168:	82 23       	and	r24, r18
    116a:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    116c:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
    1170:	6c 15       	cp	r22, r12
    1172:	7d 05       	cpc	r23, r13
    1174:	8e 05       	cpc	r24, r14
    1176:	9f 05       	cpc	r25, r15
    1178:	78 f2       	brcs	.-98     	; 0x1118 <step_anticlockwise+0xb6>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
    117a:	80 91 c8 02 	lds	r24, 0x02C8
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	80 93 c8 02 	sts	0x02C8, r24
    1184:	85 c0       	rjmp	.+266    	; 0x1290 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 2){
    1186:	92 30       	cpi	r25, 0x02	; 2
    1188:	09 f0       	breq	.+2      	; 0x118c <step_anticlockwise+0x12a>
    118a:	42 c0       	rjmp	.+132    	; 0x1210 <step_anticlockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
    118c:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1190:	6b 01       	movw	r12, r22
    1192:	7c 01       	movw	r14, r24
    1194:	cc 0e       	add	r12, r28
    1196:	d1 1c       	adc	r13, r1
    1198:	e1 1c       	adc	r14, r1
    119a:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
    119c:	c1 e0       	ldi	r28, 0x01	; 1
    119e:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    11a0:	2a c0       	rjmp	.+84     	; 0x11f6 <step_anticlockwise+0x194>
			 PORTC |= (1<<GRE)|(1<<RED);
    11a2:	98 b1       	in	r25, 0x08	; 8
    11a4:	ae 01       	movw	r20, r28
    11a6:	00 90 ca 02 	lds	r0, 0x02CA
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <step_anticlockwise+0x14e>
    11ac:	44 0f       	add	r20, r20
    11ae:	55 1f       	adc	r21, r21
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <step_anticlockwise+0x14a>
    11b4:	9e 01       	movw	r18, r28
    11b6:	00 90 cc 02 	lds	r0, 0x02CC
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <step_anticlockwise+0x15e>
    11bc:	22 0f       	add	r18, r18
    11be:	33 1f       	adc	r19, r19
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <step_anticlockwise+0x15a>
    11c4:	84 2f       	mov	r24, r20
    11c6:	82 2b       	or	r24, r18
    11c8:	89 2b       	or	r24, r25
    11ca:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
    11cc:	28 b1       	in	r18, 0x08	; 8
    11ce:	ae 01       	movw	r20, r28
    11d0:	00 90 c9 02 	lds	r0, 0x02C9
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <step_anticlockwise+0x178>
    11d6:	44 0f       	add	r20, r20
    11d8:	55 1f       	adc	r21, r21
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <step_anticlockwise+0x174>
    11de:	ce 01       	movw	r24, r28
    11e0:	00 90 cb 02 	lds	r0, 0x02CB
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <step_anticlockwise+0x188>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <step_anticlockwise+0x184>
    11ee:	84 2b       	or	r24, r20
    11f0:	80 95       	com	r24
    11f2:	82 23       	and	r24, r18
    11f4:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    11f6:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
    11fa:	6c 15       	cp	r22, r12
    11fc:	7d 05       	cpc	r23, r13
    11fe:	8e 05       	cpc	r24, r14
    1200:	9f 05       	cpc	r25, r15
    1202:	78 f2       	brcs	.-98     	; 0x11a2 <step_anticlockwise+0x140>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
    1204:	80 91 c8 02 	lds	r24, 0x02C8
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	80 93 c8 02 	sts	0x02C8, r24
    120e:	40 c0       	rjmp	.+128    	; 0x1290 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 3){
    1210:	93 30       	cpi	r25, 0x03	; 3
    1212:	f1 f5       	brne	.+124    	; 0x1290 <step_anticlockwise+0x22e>
		 current_time = get_tcnt1_ticks();
    1214:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1218:	6b 01       	movw	r12, r22
    121a:	7c 01       	movw	r14, r24
    121c:	cc 0e       	add	r12, r28
    121e:	d1 1c       	adc	r13, r1
    1220:	e1 1c       	adc	r14, r1
    1222:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
    1224:	c1 e0       	ldi	r28, 0x01	; 1
    1226:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1228:	2a c0       	rjmp	.+84     	; 0x127e <step_anticlockwise+0x21c>
			 PORTC |= (1<<GRE)|(1<<YEL);
    122a:	98 b1       	in	r25, 0x08	; 8
    122c:	ae 01       	movw	r20, r28
    122e:	00 90 ca 02 	lds	r0, 0x02CA
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <step_anticlockwise+0x1d6>
    1234:	44 0f       	add	r20, r20
    1236:	55 1f       	adc	r21, r21
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <step_anticlockwise+0x1d2>
    123c:	9e 01       	movw	r18, r28
    123e:	00 90 c9 02 	lds	r0, 0x02C9
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <step_anticlockwise+0x1e6>
    1244:	22 0f       	add	r18, r18
    1246:	33 1f       	adc	r19, r19
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <step_anticlockwise+0x1e2>
    124c:	84 2f       	mov	r24, r20
    124e:	82 2b       	or	r24, r18
    1250:	89 2b       	or	r24, r25
    1252:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
    1254:	28 b1       	in	r18, 0x08	; 8
    1256:	ae 01       	movw	r20, r28
    1258:	00 90 cc 02 	lds	r0, 0x02CC
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <step_anticlockwise+0x200>
    125e:	44 0f       	add	r20, r20
    1260:	55 1f       	adc	r21, r21
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <step_anticlockwise+0x1fc>
    1266:	ce 01       	movw	r24, r28
    1268:	00 90 cb 02 	lds	r0, 0x02CB
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <step_anticlockwise+0x210>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <step_anticlockwise+0x20c>
    1276:	84 2b       	or	r24, r20
    1278:	80 95       	com	r24
    127a:	82 23       	and	r24, r18
    127c:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    127e:	0e 94 c8 09 	call	0x1390	; 0x1390 <get_tcnt1_ticks>
    1282:	6c 15       	cp	r22, r12
    1284:	7d 05       	cpc	r23, r13
    1286:	8e 05       	cpc	r24, r14
    1288:	9f 05       	cpc	r25, r15
    128a:	78 f2       	brcs	.-98     	; 0x122a <step_anticlockwise+0x1c8>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 phase = 0;
    128c:	10 92 c8 02 	sts	0x02C8, r1
	 }
	 decrement_step();
    1290:	0e 94 fd 06 	call	0xdfa	; 0xdfa <decrement_step>
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	08 95       	ret

000012a2 <step>:
	//if ((steps > info_ptr->maxStep) || (steps < 0)){
		///*	dont move	*/
		//return;
	//}
	
	int8_t speed = info_ptr->stepSpeed;
    12a2:	fc 01       	movw	r30, r24
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t time_on;
	if (speed >= 0){
    12a6:	88 23       	and	r24, r24
    12a8:	44 f1       	brlt	.+80     	; 0x12fa <step+0x58>
			if (speed < 10){
    12aa:	8a 30       	cpi	r24, 0x0A	; 10
    12ac:	94 f0       	brlt	.+36     	; 0x12d2 <step+0x30>
				time_on = 100;
			} else if (speed < 20) {
    12ae:	84 31       	cpi	r24, 0x14	; 20
    12b0:	94 f0       	brlt	.+36     	; 0x12d6 <step+0x34>
				time_on = 90;
			} else if (speed < 30) {
    12b2:	8e 31       	cpi	r24, 0x1E	; 30
    12b4:	94 f0       	brlt	.+36     	; 0x12da <step+0x38>
				time_on = 80;
			} else if (speed < 40) {
    12b6:	88 32       	cpi	r24, 0x28	; 40
    12b8:	94 f0       	brlt	.+36     	; 0x12de <step+0x3c>
				time_on = 70;
			} else if (speed < 50){
    12ba:	82 33       	cpi	r24, 0x32	; 50
    12bc:	94 f0       	brlt	.+36     	; 0x12e2 <step+0x40>
				time_on = 60;
			} else if (speed < 60) {
    12be:	8c 33       	cpi	r24, 0x3C	; 60
    12c0:	94 f0       	brlt	.+36     	; 0x12e6 <step+0x44>
				time_on = 50;
			} else if (speed < 70){
    12c2:	86 34       	cpi	r24, 0x46	; 70
    12c4:	94 f0       	brlt	.+36     	; 0x12ea <step+0x48>
				time_on = 40;
			} else if (speed < 80) {
    12c6:	80 35       	cpi	r24, 0x50	; 80
    12c8:	94 f0       	brlt	.+36     	; 0x12ee <step+0x4c>
				time_on = 30;
			} else if (speed < 90){
    12ca:	8a 35       	cpi	r24, 0x5A	; 90
    12cc:	94 f0       	brlt	.+36     	; 0x12f2 <step+0x50>
				time_on = 20;
			} else {
				time_on = 5;
    12ce:	85 e0       	ldi	r24, 0x05	; 5
    12d0:	11 c0       	rjmp	.+34     	; 0x12f4 <step+0x52>
	
	int8_t speed = info_ptr->stepSpeed;
	uint8_t time_on;
	if (speed >= 0){
			if (speed < 10){
				time_on = 100;
    12d2:	84 e6       	ldi	r24, 0x64	; 100
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <step+0x52>
			} else if (speed < 20) {
				time_on = 90;
    12d6:	8a e5       	ldi	r24, 0x5A	; 90
    12d8:	0d c0       	rjmp	.+26     	; 0x12f4 <step+0x52>
			} else if (speed < 30) {
				time_on = 80;
    12da:	80 e5       	ldi	r24, 0x50	; 80
    12dc:	0b c0       	rjmp	.+22     	; 0x12f4 <step+0x52>
			} else if (speed < 40) {
				time_on = 70;
    12de:	86 e4       	ldi	r24, 0x46	; 70
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <step+0x52>
			} else if (speed < 50){
				time_on = 60;
    12e2:	8c e3       	ldi	r24, 0x3C	; 60
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <step+0x52>
			} else if (speed < 60) {
				time_on = 50;
    12e6:	82 e3       	ldi	r24, 0x32	; 50
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <step+0x52>
			} else if (speed < 70){
				time_on = 40;
    12ea:	88 e2       	ldi	r24, 0x28	; 40
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <step+0x52>
			} else if (speed < 80) {
				time_on = 30;
    12ee:	8e e1       	ldi	r24, 0x1E	; 30
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <step+0x52>
			} else if (speed < 90){
				time_on = 20;
    12f2:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 5;
			}
			step_clockwise(time_on);
    12f4:	0e 94 11 07 	call	0xe22	; 0xe22 <step_clockwise>
    12f8:	08 95       	ret
	} else {
			if (speed > -10){
    12fa:	87 3f       	cpi	r24, 0xF7	; 247
    12fc:	94 f4       	brge	.+36     	; 0x1322 <step+0x80>
				time_on = 100;
			} else if (speed > -20) {
    12fe:	8d 3e       	cpi	r24, 0xED	; 237
    1300:	94 f4       	brge	.+36     	; 0x1326 <step+0x84>
				time_on = 90;
			} else if (speed > -30) {
    1302:	83 3e       	cpi	r24, 0xE3	; 227
    1304:	94 f4       	brge	.+36     	; 0x132a <step+0x88>
				time_on = 80;
			} else if (speed > -40) {
    1306:	89 3d       	cpi	r24, 0xD9	; 217
    1308:	94 f4       	brge	.+36     	; 0x132e <step+0x8c>
				time_on = 70;
			} else if (speed > -50){
    130a:	8f 3c       	cpi	r24, 0xCF	; 207
    130c:	94 f4       	brge	.+36     	; 0x1332 <step+0x90>
				time_on = 60;
			} else if (speed > -60) {
    130e:	85 3c       	cpi	r24, 0xC5	; 197
    1310:	94 f4       	brge	.+36     	; 0x1336 <step+0x94>
				time_on = 50;
			} else if (speed > -70){
    1312:	8b 3b       	cpi	r24, 0xBB	; 187
    1314:	94 f4       	brge	.+36     	; 0x133a <step+0x98>
				time_on = 40;
			} else if (speed > -80) {
    1316:	81 3b       	cpi	r24, 0xB1	; 177
    1318:	94 f4       	brge	.+36     	; 0x133e <step+0x9c>
				time_on = 30;
			} else if (speed > -90){
    131a:	87 3a       	cpi	r24, 0xA7	; 167
    131c:	94 f4       	brge	.+36     	; 0x1342 <step+0xa0>
				time_on = 20;
			} else {
				time_on = 5;
    131e:	85 e0       	ldi	r24, 0x05	; 5
    1320:	11 c0       	rjmp	.+34     	; 0x1344 <step+0xa2>
				time_on = 5;
			}
			step_clockwise(time_on);
	} else {
			if (speed > -10){
				time_on = 100;
    1322:	84 e6       	ldi	r24, 0x64	; 100
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <step+0xa2>
			} else if (speed > -20) {
				time_on = 90;
    1326:	8a e5       	ldi	r24, 0x5A	; 90
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <step+0xa2>
			} else if (speed > -30) {
				time_on = 80;
    132a:	80 e5       	ldi	r24, 0x50	; 80
    132c:	0b c0       	rjmp	.+22     	; 0x1344 <step+0xa2>
			} else if (speed > -40) {
				time_on = 70;
    132e:	86 e4       	ldi	r24, 0x46	; 70
    1330:	09 c0       	rjmp	.+18     	; 0x1344 <step+0xa2>
			} else if (speed > -50){
				time_on = 60;
    1332:	8c e3       	ldi	r24, 0x3C	; 60
    1334:	07 c0       	rjmp	.+14     	; 0x1344 <step+0xa2>
			} else if (speed > -60) {
				time_on = 50;
    1336:	82 e3       	ldi	r24, 0x32	; 50
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <step+0xa2>
			} else if (speed > -70){
				time_on = 40;
    133a:	88 e2       	ldi	r24, 0x28	; 40
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <step+0xa2>
			} else if (speed > -80) {
				time_on = 30;
    133e:	8e e1       	ldi	r24, 0x1E	; 30
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <step+0xa2>
			} else if (speed > -90){
				time_on = 20;
    1342:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 5;
			}
			step_anticlockwise(time_on);
    1344:	0e 94 31 08 	call	0x1062	; 0x1062 <step_anticlockwise>
    1348:	08 95       	ret

0000134a <init_tcnt1>:

 void init_tcnt1(void){
	 /* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	 
	 //set button to be not pushed
	 Button_on = 0;
    134a:	10 92 ad 01 	sts	0x01AD, r1
	 
	 // set global counter
	 tcnt1_ticks = 0L;
    134e:	10 92 ae 01 	sts	0x01AE, r1
    1352:	10 92 af 01 	sts	0x01AF, r1
    1356:	10 92 b0 01 	sts	0x01B0, r1
    135a:	10 92 b1 01 	sts	0x01B1, r1
	 
	 // set timer / counter
	 TCNT1 = 0;
    135e:	10 92 85 00 	sts	0x0085, r1
    1362:	10 92 84 00 	sts	0x0084, r1
	 
	 // set output compare resgister; value to execute ISR
	 OCR1A = 124; // between 1 and 255
    1366:	8c e7       	ldi	r24, 0x7C	; 124
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	90 93 89 00 	sts	0x0089, r25
    136e:	80 93 88 00 	sts	0x0088, r24
	 
	 // timer/counter control register A - set to clear when TCNT0 matches OCR0A
	 TCCR1A = (1<<WGM11);
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	80 93 80 00 	sts	0x0080, r24
	 
	 // set the timer to update at a fraction of a clock cycle
	 TCCR1B = (1<<CS11)|(1<<CS10);	// set to f(clk) / 64
    1378:	83 e0       	ldi	r24, 0x03	; 3
    137a:	80 93 81 00 	sts	0x0081, r24
	 
	 // timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK1 |= (1<<OCIE1A);
    137e:	ef e6       	ldi	r30, 0x6F	; 111
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	82 60       	ori	r24, 0x02	; 2
    1386:	80 83       	st	Z, r24
	 
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR1 &= (1<<OCF1A);
    1388:	86 b3       	in	r24, 0x16	; 22
    138a:	82 70       	andi	r24, 0x02	; 2
    138c:	86 bb       	out	0x16, r24	; 22
    138e:	08 95       	ret

00001390 <get_tcnt1_ticks>:


 uint32_t get_tcnt1_ticks(void) {
	 /* internal reference clock, times how long the system has been on for	*/

	 uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
    1390:	2f b7       	in	r18, 0x3f	; 63
	 cli();
    1392:	f8 94       	cli
	 uint32_t return_value = tcnt1_ticks;
    1394:	60 91 ae 01 	lds	r22, 0x01AE
    1398:	70 91 af 01 	lds	r23, 0x01AF
    139c:	80 91 b0 01 	lds	r24, 0x01B0
    13a0:	90 91 b1 01 	lds	r25, 0x01B1
	 if(interrupts_on) {
    13a4:	22 23       	and	r18, r18
    13a6:	0c f4       	brge	.+2      	; 0x13aa <get_tcnt1_ticks+0x1a>
		 sei();
    13a8:	78 94       	sei
	 }
	 return return_value;
 }
    13aa:	08 95       	ret

000013ac <__vector_13>:



 ISR(TIMER1_COMPA_vect) {
    13ac:	1f 92       	push	r1
    13ae:	0f 92       	push	r0
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	0f 92       	push	r0
    13b4:	11 24       	eor	r1, r1
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 
	 tcnt1_ticks++;
    13be:	80 91 ae 01 	lds	r24, 0x01AE
    13c2:	90 91 af 01 	lds	r25, 0x01AF
    13c6:	a0 91 b0 01 	lds	r26, 0x01B0
    13ca:	b0 91 b1 01 	lds	r27, 0x01B1
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	a1 1d       	adc	r26, r1
    13d2:	b1 1d       	adc	r27, r1
    13d4:	80 93 ae 01 	sts	0x01AE, r24
    13d8:	90 93 af 01 	sts	0x01AF, r25
    13dc:	a0 93 b0 01 	sts	0x01B0, r26
    13e0:	b0 93 b1 01 	sts	0x01B1, r27

    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <winch_off>:
#define RED PORTC5
#define BLACK PORTC2

void winch_off(void){
		/*	turn the motor off	*/
		PORTC &= ~(1<<RED);
    13f6:	45 98       	cbi	0x08, 5	; 8
		PORTC &= ~(1<<BLACK);
    13f8:	42 98       	cbi	0x08, 2	; 8
    13fa:	08 95       	ret

000013fc <move_worm>:
void move_worm(uint8_t percent, int8_t direction){
	/*	effective pwm to control DC motor for the claw */
	
	uint8_t duty = 20;
	
		if (direction){
    13fc:	66 23       	and	r22, r22
    13fe:	91 f0       	breq	.+36     	; 0x1424 <move_worm+0x28>
				// forward
				PORTC |= (1<<RED);
    1400:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<BLACK);
    1402:	42 98       	cbi	0x08, 2	; 8
				custom_delay((duty*percent)/100);
    1404:	24 e1       	ldi	r18, 0x14	; 20
    1406:	82 9f       	mul	r24, r18
    1408:	c0 01       	movw	r24, r0
    140a:	11 24       	eor	r1, r1
    140c:	64 e6       	ldi	r22, 0x64	; 100
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodhi4>
    1414:	07 2e       	mov	r0, r23
    1416:	00 0c       	add	r0, r0
    1418:	88 0b       	sbc	r24, r24
    141a:	99 0b       	sbc	r25, r25
    141c:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
				PORTC &= ~(1<<RED);
    1420:	45 98       	cbi	0x08, 5	; 8
    1422:	08 95       	ret
		} else {
				// backwards
				PORTC |= (1<<BLACK);
    1424:	42 9a       	sbi	0x08, 2	; 8
				PORTC &= ~(1<<RED);
    1426:	45 98       	cbi	0x08, 5	; 8
				custom_delay((duty*percent)/100);
    1428:	24 e1       	ldi	r18, 0x14	; 20
    142a:	82 9f       	mul	r24, r18
    142c:	c0 01       	movw	r24, r0
    142e:	11 24       	eor	r1, r1
    1430:	64 e6       	ldi	r22, 0x64	; 100
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodhi4>
    1438:	07 2e       	mov	r0, r23
    143a:	00 0c       	add	r0, r0
    143c:	88 0b       	sbc	r24, r24
    143e:	99 0b       	sbc	r25, r25
    1440:	0e 94 67 02 	call	0x4ce	; 0x4ce <custom_delay>
				PORTC &= ~(1<<RED);
    1444:	45 98       	cbi	0x08, 5	; 8
    1446:	08 95       	ret

00001448 <__divmodhi4>:
    1448:	97 fb       	bst	r25, 7
    144a:	07 2e       	mov	r0, r23
    144c:	16 f4       	brtc	.+4      	; 0x1452 <__divmodhi4+0xa>
    144e:	00 94       	com	r0
    1450:	07 d0       	rcall	.+14     	; 0x1460 <__divmodhi4_neg1>
    1452:	77 fd       	sbrc	r23, 7
    1454:	09 d0       	rcall	.+18     	; 0x1468 <__divmodhi4_neg2>
    1456:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__udivmodhi4>
    145a:	07 fc       	sbrc	r0, 7
    145c:	05 d0       	rcall	.+10     	; 0x1468 <__divmodhi4_neg2>
    145e:	3e f4       	brtc	.+14     	; 0x146e <__divmodhi4_exit>

00001460 <__divmodhi4_neg1>:
    1460:	90 95       	com	r25
    1462:	81 95       	neg	r24
    1464:	9f 4f       	sbci	r25, 0xFF	; 255
    1466:	08 95       	ret

00001468 <__divmodhi4_neg2>:
    1468:	70 95       	com	r23
    146a:	61 95       	neg	r22
    146c:	7f 4f       	sbci	r23, 0xFF	; 255

0000146e <__divmodhi4_exit>:
    146e:	08 95       	ret

00001470 <__divmodsi4>:
    1470:	05 2e       	mov	r0, r21
    1472:	97 fb       	bst	r25, 7
    1474:	1e f4       	brtc	.+6      	; 0x147c <__divmodsi4+0xc>
    1476:	00 94       	com	r0
    1478:	0e 94 4f 0a 	call	0x149e	; 0x149e <__negsi2>
    147c:	57 fd       	sbrc	r21, 7
    147e:	07 d0       	rcall	.+14     	; 0x148e <__divmodsi4_neg2>
    1480:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodsi4>
    1484:	07 fc       	sbrc	r0, 7
    1486:	03 d0       	rcall	.+6      	; 0x148e <__divmodsi4_neg2>
    1488:	4e f4       	brtc	.+18     	; 0x149c <__divmodsi4_exit>
    148a:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__negsi2>

0000148e <__divmodsi4_neg2>:
    148e:	50 95       	com	r21
    1490:	40 95       	com	r20
    1492:	30 95       	com	r19
    1494:	21 95       	neg	r18
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	4f 4f       	sbci	r20, 0xFF	; 255
    149a:	5f 4f       	sbci	r21, 0xFF	; 255

0000149c <__divmodsi4_exit>:
    149c:	08 95       	ret

0000149e <__negsi2>:
    149e:	90 95       	com	r25
    14a0:	80 95       	com	r24
    14a2:	70 95       	com	r23
    14a4:	61 95       	neg	r22
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	8f 4f       	sbci	r24, 0xFF	; 255
    14aa:	9f 4f       	sbci	r25, 0xFF	; 255
    14ac:	08 95       	ret

000014ae <__tablejump2__>:
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	05 90       	lpm	r0, Z+
    14b4:	f4 91       	lpm	r31, Z
    14b6:	e0 2d       	mov	r30, r0
    14b8:	09 94       	ijmp

000014ba <__udivmodhi4>:
    14ba:	aa 1b       	sub	r26, r26
    14bc:	bb 1b       	sub	r27, r27
    14be:	51 e1       	ldi	r21, 0x11	; 17
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <__udivmodhi4_ep>

000014c2 <__udivmodhi4_loop>:
    14c2:	aa 1f       	adc	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	a6 17       	cp	r26, r22
    14c8:	b7 07       	cpc	r27, r23
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <__udivmodhi4_ep>
    14cc:	a6 1b       	sub	r26, r22
    14ce:	b7 0b       	sbc	r27, r23

000014d0 <__udivmodhi4_ep>:
    14d0:	88 1f       	adc	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	5a 95       	dec	r21
    14d6:	a9 f7       	brne	.-22     	; 0x14c2 <__udivmodhi4_loop>
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	08 95       	ret

000014e2 <__udivmodsi4>:
    14e2:	a1 e2       	ldi	r26, 0x21	; 33
    14e4:	1a 2e       	mov	r1, r26
    14e6:	aa 1b       	sub	r26, r26
    14e8:	bb 1b       	sub	r27, r27
    14ea:	fd 01       	movw	r30, r26
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <__udivmodsi4_ep>

000014ee <__udivmodsi4_loop>:
    14ee:	aa 1f       	adc	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	ee 1f       	adc	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	a2 17       	cp	r26, r18
    14f8:	b3 07       	cpc	r27, r19
    14fa:	e4 07       	cpc	r30, r20
    14fc:	f5 07       	cpc	r31, r21
    14fe:	20 f0       	brcs	.+8      	; 0x1508 <__udivmodsi4_ep>
    1500:	a2 1b       	sub	r26, r18
    1502:	b3 0b       	sbc	r27, r19
    1504:	e4 0b       	sbc	r30, r20
    1506:	f5 0b       	sbc	r31, r21

00001508 <__udivmodsi4_ep>:
    1508:	66 1f       	adc	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	88 1f       	adc	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	1a 94       	dec	r1
    1512:	69 f7       	brne	.-38     	; 0x14ee <__udivmodsi4_loop>
    1514:	60 95       	com	r22
    1516:	70 95       	com	r23
    1518:	80 95       	com	r24
    151a:	90 95       	com	r25
    151c:	9b 01       	movw	r18, r22
    151e:	ac 01       	movw	r20, r24
    1520:	bd 01       	movw	r22, r26
    1522:	cf 01       	movw	r24, r30
    1524:	08 95       	ret

00001526 <malloc>:
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	82 30       	cpi	r24, 0x02	; 2
    152c:	91 05       	cpc	r25, r1
    152e:	10 f4       	brcc	.+4      	; 0x1534 <malloc+0xe>
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	e0 91 cf 02 	lds	r30, 0x02CF
    1538:	f0 91 d0 02 	lds	r31, 0x02D0
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	c0 e0       	ldi	r28, 0x00	; 0
    1542:	d0 e0       	ldi	r29, 0x00	; 0
    1544:	30 97       	sbiw	r30, 0x00	; 0
    1546:	11 f1       	breq	.+68     	; 0x158c <malloc+0x66>
    1548:	40 81       	ld	r20, Z
    154a:	51 81       	ldd	r21, Z+1	; 0x01
    154c:	48 17       	cp	r20, r24
    154e:	59 07       	cpc	r21, r25
    1550:	c0 f0       	brcs	.+48     	; 0x1582 <malloc+0x5c>
    1552:	48 17       	cp	r20, r24
    1554:	59 07       	cpc	r21, r25
    1556:	61 f4       	brne	.+24     	; 0x1570 <malloc+0x4a>
    1558:	82 81       	ldd	r24, Z+2	; 0x02
    155a:	93 81       	ldd	r25, Z+3	; 0x03
    155c:	20 97       	sbiw	r28, 0x00	; 0
    155e:	19 f0       	breq	.+6      	; 0x1566 <malloc+0x40>
    1560:	9b 83       	std	Y+3, r25	; 0x03
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	2b c0       	rjmp	.+86     	; 0x15bc <malloc+0x96>
    1566:	90 93 d0 02 	sts	0x02D0, r25
    156a:	80 93 cf 02 	sts	0x02CF, r24
    156e:	26 c0       	rjmp	.+76     	; 0x15bc <malloc+0x96>
    1570:	21 15       	cp	r18, r1
    1572:	31 05       	cpc	r19, r1
    1574:	19 f0       	breq	.+6      	; 0x157c <malloc+0x56>
    1576:	42 17       	cp	r20, r18
    1578:	53 07       	cpc	r21, r19
    157a:	18 f4       	brcc	.+6      	; 0x1582 <malloc+0x5c>
    157c:	9a 01       	movw	r18, r20
    157e:	be 01       	movw	r22, r28
    1580:	df 01       	movw	r26, r30
    1582:	ef 01       	movw	r28, r30
    1584:	02 80       	ldd	r0, Z+2	; 0x02
    1586:	f3 81       	ldd	r31, Z+3	; 0x03
    1588:	e0 2d       	mov	r30, r0
    158a:	dc cf       	rjmp	.-72     	; 0x1544 <malloc+0x1e>
    158c:	21 15       	cp	r18, r1
    158e:	31 05       	cpc	r19, r1
    1590:	09 f1       	breq	.+66     	; 0x15d4 <malloc+0xae>
    1592:	28 1b       	sub	r18, r24
    1594:	39 0b       	sbc	r19, r25
    1596:	24 30       	cpi	r18, 0x04	; 4
    1598:	31 05       	cpc	r19, r1
    159a:	90 f4       	brcc	.+36     	; 0x15c0 <malloc+0x9a>
    159c:	12 96       	adiw	r26, 0x02	; 2
    159e:	8d 91       	ld	r24, X+
    15a0:	9c 91       	ld	r25, X
    15a2:	13 97       	sbiw	r26, 0x03	; 3
    15a4:	61 15       	cp	r22, r1
    15a6:	71 05       	cpc	r23, r1
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <malloc+0x8c>
    15aa:	fb 01       	movw	r30, r22
    15ac:	93 83       	std	Z+3, r25	; 0x03
    15ae:	82 83       	std	Z+2, r24	; 0x02
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <malloc+0x94>
    15b2:	90 93 d0 02 	sts	0x02D0, r25
    15b6:	80 93 cf 02 	sts	0x02CF, r24
    15ba:	fd 01       	movw	r30, r26
    15bc:	32 96       	adiw	r30, 0x02	; 2
    15be:	44 c0       	rjmp	.+136    	; 0x1648 <malloc+0x122>
    15c0:	fd 01       	movw	r30, r26
    15c2:	e2 0f       	add	r30, r18
    15c4:	f3 1f       	adc	r31, r19
    15c6:	81 93       	st	Z+, r24
    15c8:	91 93       	st	Z+, r25
    15ca:	22 50       	subi	r18, 0x02	; 2
    15cc:	31 09       	sbc	r19, r1
    15ce:	2d 93       	st	X+, r18
    15d0:	3c 93       	st	X, r19
    15d2:	3a c0       	rjmp	.+116    	; 0x1648 <malloc+0x122>
    15d4:	20 91 cd 02 	lds	r18, 0x02CD
    15d8:	30 91 ce 02 	lds	r19, 0x02CE
    15dc:	23 2b       	or	r18, r19
    15de:	41 f4       	brne	.+16     	; 0x15f0 <malloc+0xca>
    15e0:	20 91 02 01 	lds	r18, 0x0102
    15e4:	30 91 03 01 	lds	r19, 0x0103
    15e8:	30 93 ce 02 	sts	0x02CE, r19
    15ec:	20 93 cd 02 	sts	0x02CD, r18
    15f0:	20 91 00 01 	lds	r18, 0x0100
    15f4:	30 91 01 01 	lds	r19, 0x0101
    15f8:	21 15       	cp	r18, r1
    15fa:	31 05       	cpc	r19, r1
    15fc:	41 f4       	brne	.+16     	; 0x160e <malloc+0xe8>
    15fe:	2d b7       	in	r18, 0x3d	; 61
    1600:	3e b7       	in	r19, 0x3e	; 62
    1602:	40 91 04 01 	lds	r20, 0x0104
    1606:	50 91 05 01 	lds	r21, 0x0105
    160a:	24 1b       	sub	r18, r20
    160c:	35 0b       	sbc	r19, r21
    160e:	e0 91 cd 02 	lds	r30, 0x02CD
    1612:	f0 91 ce 02 	lds	r31, 0x02CE
    1616:	e2 17       	cp	r30, r18
    1618:	f3 07       	cpc	r31, r19
    161a:	a0 f4       	brcc	.+40     	; 0x1644 <malloc+0x11e>
    161c:	2e 1b       	sub	r18, r30
    161e:	3f 0b       	sbc	r19, r31
    1620:	28 17       	cp	r18, r24
    1622:	39 07       	cpc	r19, r25
    1624:	78 f0       	brcs	.+30     	; 0x1644 <malloc+0x11e>
    1626:	ac 01       	movw	r20, r24
    1628:	4e 5f       	subi	r20, 0xFE	; 254
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	24 17       	cp	r18, r20
    162e:	35 07       	cpc	r19, r21
    1630:	48 f0       	brcs	.+18     	; 0x1644 <malloc+0x11e>
    1632:	4e 0f       	add	r20, r30
    1634:	5f 1f       	adc	r21, r31
    1636:	50 93 ce 02 	sts	0x02CE, r21
    163a:	40 93 cd 02 	sts	0x02CD, r20
    163e:	81 93       	st	Z+, r24
    1640:	91 93       	st	Z+, r25
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <malloc+0x122>
    1644:	e0 e0       	ldi	r30, 0x00	; 0
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	cf 01       	movw	r24, r30
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <free>:
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	09 f4       	brne	.+2      	; 0x165e <free+0xe>
    165c:	8c c0       	rjmp	.+280    	; 0x1776 <free+0x126>
    165e:	fc 01       	movw	r30, r24
    1660:	32 97       	sbiw	r30, 0x02	; 2
    1662:	13 82       	std	Z+3, r1	; 0x03
    1664:	12 82       	std	Z+2, r1	; 0x02
    1666:	00 91 cf 02 	lds	r16, 0x02CF
    166a:	10 91 d0 02 	lds	r17, 0x02D0
    166e:	01 15       	cp	r16, r1
    1670:	11 05       	cpc	r17, r1
    1672:	81 f4       	brne	.+32     	; 0x1694 <free+0x44>
    1674:	20 81       	ld	r18, Z
    1676:	31 81       	ldd	r19, Z+1	; 0x01
    1678:	82 0f       	add	r24, r18
    167a:	93 1f       	adc	r25, r19
    167c:	20 91 cd 02 	lds	r18, 0x02CD
    1680:	30 91 ce 02 	lds	r19, 0x02CE
    1684:	28 17       	cp	r18, r24
    1686:	39 07       	cpc	r19, r25
    1688:	79 f5       	brne	.+94     	; 0x16e8 <free+0x98>
    168a:	f0 93 ce 02 	sts	0x02CE, r31
    168e:	e0 93 cd 02 	sts	0x02CD, r30
    1692:	71 c0       	rjmp	.+226    	; 0x1776 <free+0x126>
    1694:	d8 01       	movw	r26, r16
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	ae 17       	cp	r26, r30
    169c:	bf 07       	cpc	r27, r31
    169e:	50 f4       	brcc	.+20     	; 0x16b4 <free+0x64>
    16a0:	12 96       	adiw	r26, 0x02	; 2
    16a2:	2d 91       	ld	r18, X+
    16a4:	3c 91       	ld	r19, X
    16a6:	13 97       	sbiw	r26, 0x03	; 3
    16a8:	ad 01       	movw	r20, r26
    16aa:	21 15       	cp	r18, r1
    16ac:	31 05       	cpc	r19, r1
    16ae:	09 f1       	breq	.+66     	; 0x16f2 <free+0xa2>
    16b0:	d9 01       	movw	r26, r18
    16b2:	f3 cf       	rjmp	.-26     	; 0x169a <free+0x4a>
    16b4:	9d 01       	movw	r18, r26
    16b6:	da 01       	movw	r26, r20
    16b8:	33 83       	std	Z+3, r19	; 0x03
    16ba:	22 83       	std	Z+2, r18	; 0x02
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	86 0f       	add	r24, r22
    16c2:	97 1f       	adc	r25, r23
    16c4:	82 17       	cp	r24, r18
    16c6:	93 07       	cpc	r25, r19
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <free+0x94>
    16ca:	ec 01       	movw	r28, r24
    16cc:	28 81       	ld	r18, Y
    16ce:	39 81       	ldd	r19, Y+1	; 0x01
    16d0:	26 0f       	add	r18, r22
    16d2:	37 1f       	adc	r19, r23
    16d4:	2e 5f       	subi	r18, 0xFE	; 254
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	31 83       	std	Z+1, r19	; 0x01
    16da:	20 83       	st	Z, r18
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	9b 81       	ldd	r25, Y+3	; 0x03
    16e0:	93 83       	std	Z+3, r25	; 0x03
    16e2:	82 83       	std	Z+2, r24	; 0x02
    16e4:	45 2b       	or	r20, r21
    16e6:	29 f4       	brne	.+10     	; 0x16f2 <free+0xa2>
    16e8:	f0 93 d0 02 	sts	0x02D0, r31
    16ec:	e0 93 cf 02 	sts	0x02CF, r30
    16f0:	42 c0       	rjmp	.+132    	; 0x1776 <free+0x126>
    16f2:	13 96       	adiw	r26, 0x03	; 3
    16f4:	fc 93       	st	X, r31
    16f6:	ee 93       	st	-X, r30
    16f8:	12 97       	sbiw	r26, 0x02	; 2
    16fa:	ed 01       	movw	r28, r26
    16fc:	49 91       	ld	r20, Y+
    16fe:	59 91       	ld	r21, Y+
    1700:	9e 01       	movw	r18, r28
    1702:	24 0f       	add	r18, r20
    1704:	35 1f       	adc	r19, r21
    1706:	e2 17       	cp	r30, r18
    1708:	f3 07       	cpc	r31, r19
    170a:	71 f4       	brne	.+28     	; 0x1728 <free+0xd8>
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	84 0f       	add	r24, r20
    1712:	95 1f       	adc	r25, r21
    1714:	02 96       	adiw	r24, 0x02	; 2
    1716:	11 96       	adiw	r26, 0x01	; 1
    1718:	9c 93       	st	X, r25
    171a:	8e 93       	st	-X, r24
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	13 96       	adiw	r26, 0x03	; 3
    1722:	9c 93       	st	X, r25
    1724:	8e 93       	st	-X, r24
    1726:	12 97       	sbiw	r26, 0x02	; 2
    1728:	e0 e0       	ldi	r30, 0x00	; 0
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	d8 01       	movw	r26, r16
    172e:	12 96       	adiw	r26, 0x02	; 2
    1730:	8d 91       	ld	r24, X+
    1732:	9c 91       	ld	r25, X
    1734:	13 97       	sbiw	r26, 0x03	; 3
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	19 f0       	breq	.+6      	; 0x1740 <free+0xf0>
    173a:	f8 01       	movw	r30, r16
    173c:	8c 01       	movw	r16, r24
    173e:	f6 cf       	rjmp	.-20     	; 0x172c <free+0xdc>
    1740:	8d 91       	ld	r24, X+
    1742:	9c 91       	ld	r25, X
    1744:	98 01       	movw	r18, r16
    1746:	2e 5f       	subi	r18, 0xFE	; 254
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	82 0f       	add	r24, r18
    174c:	93 1f       	adc	r25, r19
    174e:	20 91 cd 02 	lds	r18, 0x02CD
    1752:	30 91 ce 02 	lds	r19, 0x02CE
    1756:	28 17       	cp	r18, r24
    1758:	39 07       	cpc	r19, r25
    175a:	69 f4       	brne	.+26     	; 0x1776 <free+0x126>
    175c:	30 97       	sbiw	r30, 0x00	; 0
    175e:	29 f4       	brne	.+10     	; 0x176a <free+0x11a>
    1760:	10 92 d0 02 	sts	0x02D0, r1
    1764:	10 92 cf 02 	sts	0x02CF, r1
    1768:	02 c0       	rjmp	.+4      	; 0x176e <free+0x11e>
    176a:	13 82       	std	Z+3, r1	; 0x03
    176c:	12 82       	std	Z+2, r1	; 0x02
    176e:	10 93 ce 02 	sts	0x02CE, r17
    1772:	00 93 cd 02 	sts	0x02CD, r16
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <do_rand>:
    1780:	8f 92       	push	r8
    1782:	9f 92       	push	r9
    1784:	af 92       	push	r10
    1786:	bf 92       	push	r11
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	ec 01       	movw	r28, r24
    1796:	68 81       	ld	r22, Y
    1798:	79 81       	ldd	r23, Y+1	; 0x01
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	61 15       	cp	r22, r1
    17a0:	71 05       	cpc	r23, r1
    17a2:	81 05       	cpc	r24, r1
    17a4:	91 05       	cpc	r25, r1
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <do_rand+0x30>
    17a8:	64 e2       	ldi	r22, 0x24	; 36
    17aa:	79 ed       	ldi	r23, 0xD9	; 217
    17ac:	8b e5       	ldi	r24, 0x5B	; 91
    17ae:	97 e0       	ldi	r25, 0x07	; 7
    17b0:	2d e1       	ldi	r18, 0x1D	; 29
    17b2:	33 ef       	ldi	r19, 0xF3	; 243
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divmodsi4>
    17bc:	49 01       	movw	r8, r18
    17be:	5a 01       	movw	r10, r20
    17c0:	9b 01       	movw	r18, r22
    17c2:	ac 01       	movw	r20, r24
    17c4:	a7 ea       	ldi	r26, 0xA7	; 167
    17c6:	b1 e4       	ldi	r27, 0x41	; 65
    17c8:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__muluhisi3>
    17cc:	6b 01       	movw	r12, r22
    17ce:	7c 01       	movw	r14, r24
    17d0:	ac ee       	ldi	r26, 0xEC	; 236
    17d2:	b4 ef       	ldi	r27, 0xF4	; 244
    17d4:	a5 01       	movw	r20, r10
    17d6:	94 01       	movw	r18, r8
    17d8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__mulohisi3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8c 0d       	add	r24, r12
    17e2:	9d 1d       	adc	r25, r13
    17e4:	ae 1d       	adc	r26, r14
    17e6:	bf 1d       	adc	r27, r15
    17e8:	b7 ff       	sbrs	r27, 7
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <do_rand+0x72>
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	a1 09       	sbc	r26, r1
    17f0:	b0 48       	sbci	r27, 0x80	; 128
    17f2:	88 83       	st	Y, r24
    17f4:	99 83       	std	Y+1, r25	; 0x01
    17f6:	aa 83       	std	Y+2, r26	; 0x02
    17f8:	bb 83       	std	Y+3, r27	; 0x03
    17fa:	9f 77       	andi	r25, 0x7F	; 127
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	9f 90       	pop	r9
    180e:	8f 90       	pop	r8
    1810:	08 95       	ret

00001812 <rand_r>:
    1812:	0e 94 c0 0b 	call	0x1780	; 0x1780 <do_rand>
    1816:	08 95       	ret

00001818 <rand>:
    1818:	86 e0       	ldi	r24, 0x06	; 6
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <do_rand>
    1820:	08 95       	ret

00001822 <srand>:
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	80 93 06 01 	sts	0x0106, r24
    182a:	90 93 07 01 	sts	0x0107, r25
    182e:	a0 93 08 01 	sts	0x0108, r26
    1832:	b0 93 09 01 	sts	0x0109, r27
    1836:	08 95       	ret

00001838 <fgetc>:
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	ec 01       	movw	r28, r24
    183e:	2b 81       	ldd	r18, Y+3	; 0x03
    1840:	20 ff       	sbrs	r18, 0
    1842:	33 c0       	rjmp	.+102    	; 0x18aa <fgetc+0x72>
    1844:	26 ff       	sbrs	r18, 6
    1846:	0a c0       	rjmp	.+20     	; 0x185c <fgetc+0x24>
    1848:	2f 7b       	andi	r18, 0xBF	; 191
    184a:	2b 83       	std	Y+3, r18	; 0x03
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	9f 81       	ldd	r25, Y+7	; 0x07
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	9f 83       	std	Y+7, r25	; 0x07
    1854:	8e 83       	std	Y+6, r24	; 0x06
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	29 c0       	rjmp	.+82     	; 0x18ae <fgetc+0x76>
    185c:	22 ff       	sbrs	r18, 2
    185e:	0f c0       	rjmp	.+30     	; 0x187e <fgetc+0x46>
    1860:	e8 81       	ld	r30, Y
    1862:	f9 81       	ldd	r31, Y+1	; 0x01
    1864:	80 81       	ld	r24, Z
    1866:	08 2e       	mov	r0, r24
    1868:	00 0c       	add	r0, r0
    186a:	99 0b       	sbc	r25, r25
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	19 f4       	brne	.+6      	; 0x1876 <fgetc+0x3e>
    1870:	20 62       	ori	r18, 0x20	; 32
    1872:	2b 83       	std	Y+3, r18	; 0x03
    1874:	1a c0       	rjmp	.+52     	; 0x18aa <fgetc+0x72>
    1876:	31 96       	adiw	r30, 0x01	; 1
    1878:	f9 83       	std	Y+1, r31	; 0x01
    187a:	e8 83       	st	Y, r30
    187c:	0e c0       	rjmp	.+28     	; 0x189a <fgetc+0x62>
    187e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1880:	fb 85       	ldd	r31, Y+11	; 0x0b
    1882:	09 95       	icall
    1884:	97 ff       	sbrs	r25, 7
    1886:	09 c0       	rjmp	.+18     	; 0x189a <fgetc+0x62>
    1888:	2b 81       	ldd	r18, Y+3	; 0x03
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	11 f0       	breq	.+4      	; 0x1892 <fgetc+0x5a>
    188e:	80 e2       	ldi	r24, 0x20	; 32
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <fgetc+0x5c>
    1892:	80 e1       	ldi	r24, 0x10	; 16
    1894:	82 2b       	or	r24, r18
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <fgetc+0x72>
    189a:	2e 81       	ldd	r18, Y+6	; 0x06
    189c:	3f 81       	ldd	r19, Y+7	; 0x07
    189e:	2f 5f       	subi	r18, 0xFF	; 255
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	3f 83       	std	Y+7, r19	; 0x07
    18a4:	2e 83       	std	Y+6, r18	; 0x06
    18a6:	99 27       	eor	r25, r25
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <fgetc+0x76>
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
    18ac:	9f ef       	ldi	r25, 0xFF	; 255
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <fputc>:
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	fb 01       	movw	r30, r22
    18be:	23 81       	ldd	r18, Z+3	; 0x03
    18c0:	21 fd       	sbrc	r18, 1
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <fputc+0x16>
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	9f ef       	ldi	r25, 0xFF	; 255
    18c8:	28 c0       	rjmp	.+80     	; 0x191a <fputc+0x66>
    18ca:	22 ff       	sbrs	r18, 2
    18cc:	16 c0       	rjmp	.+44     	; 0x18fa <fputc+0x46>
    18ce:	46 81       	ldd	r20, Z+6	; 0x06
    18d0:	57 81       	ldd	r21, Z+7	; 0x07
    18d2:	24 81       	ldd	r18, Z+4	; 0x04
    18d4:	35 81       	ldd	r19, Z+5	; 0x05
    18d6:	42 17       	cp	r20, r18
    18d8:	53 07       	cpc	r21, r19
    18da:	44 f4       	brge	.+16     	; 0x18ec <fputc+0x38>
    18dc:	a0 81       	ld	r26, Z
    18de:	b1 81       	ldd	r27, Z+1	; 0x01
    18e0:	9d 01       	movw	r18, r26
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	31 83       	std	Z+1, r19	; 0x01
    18e8:	20 83       	st	Z, r18
    18ea:	8c 93       	st	X, r24
    18ec:	26 81       	ldd	r18, Z+6	; 0x06
    18ee:	37 81       	ldd	r19, Z+7	; 0x07
    18f0:	2f 5f       	subi	r18, 0xFF	; 255
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	37 83       	std	Z+7, r19	; 0x07
    18f6:	26 83       	std	Z+6, r18	; 0x06
    18f8:	10 c0       	rjmp	.+32     	; 0x191a <fputc+0x66>
    18fa:	eb 01       	movw	r28, r22
    18fc:	09 2f       	mov	r16, r25
    18fe:	18 2f       	mov	r17, r24
    1900:	00 84       	ldd	r0, Z+8	; 0x08
    1902:	f1 85       	ldd	r31, Z+9	; 0x09
    1904:	e0 2d       	mov	r30, r0
    1906:	09 95       	icall
    1908:	89 2b       	or	r24, r25
    190a:	e1 f6       	brne	.-72     	; 0x18c4 <fputc+0x10>
    190c:	8e 81       	ldd	r24, Y+6	; 0x06
    190e:	9f 81       	ldd	r25, Y+7	; 0x07
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	9f 83       	std	Y+7, r25	; 0x07
    1914:	8e 83       	std	Y+6, r24	; 0x06
    1916:	81 2f       	mov	r24, r17
    1918:	90 2f       	mov	r25, r16
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <fputs>:
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	db 01       	movw	r26, r22
    1932:	13 96       	adiw	r26, 0x03	; 3
    1934:	2c 91       	ld	r18, X
    1936:	21 ff       	sbrs	r18, 1
    1938:	18 c0       	rjmp	.+48     	; 0x196a <fputs+0x46>
    193a:	8b 01       	movw	r16, r22
    193c:	7c 01       	movw	r14, r24
    193e:	d0 e0       	ldi	r29, 0x00	; 0
    1940:	c0 e0       	ldi	r28, 0x00	; 0
    1942:	f7 01       	movw	r30, r14
    1944:	81 91       	ld	r24, Z+
    1946:	7f 01       	movw	r14, r30
    1948:	88 23       	and	r24, r24
    194a:	61 f0       	breq	.+24     	; 0x1964 <fputs+0x40>
    194c:	d8 01       	movw	r26, r16
    194e:	18 96       	adiw	r26, 0x08	; 8
    1950:	ed 91       	ld	r30, X+
    1952:	fc 91       	ld	r31, X
    1954:	19 97       	sbiw	r26, 0x09	; 9
    1956:	b8 01       	movw	r22, r16
    1958:	09 95       	icall
    195a:	89 2b       	or	r24, r25
    195c:	91 f3       	breq	.-28     	; 0x1942 <fputs+0x1e>
    195e:	df ef       	ldi	r29, 0xFF	; 255
    1960:	cf ef       	ldi	r28, 0xFF	; 255
    1962:	ef cf       	rjmp	.-34     	; 0x1942 <fputs+0x1e>
    1964:	8d 2f       	mov	r24, r29
    1966:	9c 2f       	mov	r25, r28
    1968:	02 c0       	rjmp	.+4      	; 0x196e <fputs+0x4a>
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	9f ef       	ldi	r25, 0xFF	; 255
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	e6 e0       	ldi	r30, 0x06	; 6
    1974:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__epilogue_restores__+0x18>

00001978 <fwrite>:
    1978:	a0 e0       	ldi	r26, 0x00	; 0
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e2 ec       	ldi	r30, 0xC2	; 194
    197e:	fc e0       	ldi	r31, 0x0C	; 12
    1980:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__prologue_saves__+0xc>
    1984:	5b 01       	movw	r10, r22
    1986:	4a 01       	movw	r8, r20
    1988:	79 01       	movw	r14, r18
    198a:	d9 01       	movw	r26, r18
    198c:	13 96       	adiw	r26, 0x03	; 3
    198e:	2c 91       	ld	r18, X
    1990:	21 ff       	sbrs	r18, 1
    1992:	1d c0       	rjmp	.+58     	; 0x19ce <fwrite+0x56>
    1994:	c0 e0       	ldi	r28, 0x00	; 0
    1996:	d0 e0       	ldi	r29, 0x00	; 0
    1998:	c8 15       	cp	r28, r8
    199a:	d9 05       	cpc	r29, r9
    199c:	d9 f0       	breq	.+54     	; 0x19d4 <fwrite+0x5c>
    199e:	8c 01       	movw	r16, r24
    19a0:	6c 01       	movw	r12, r24
    19a2:	ca 0c       	add	r12, r10
    19a4:	db 1c       	adc	r13, r11
    19a6:	c8 01       	movw	r24, r16
    19a8:	0c 15       	cp	r16, r12
    19aa:	1d 05       	cpc	r17, r13
    19ac:	71 f0       	breq	.+28     	; 0x19ca <fwrite+0x52>
    19ae:	0f 5f       	subi	r16, 0xFF	; 255
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	d7 01       	movw	r26, r14
    19b4:	18 96       	adiw	r26, 0x08	; 8
    19b6:	ed 91       	ld	r30, X+
    19b8:	fc 91       	ld	r31, X
    19ba:	19 97       	sbiw	r26, 0x09	; 9
    19bc:	b7 01       	movw	r22, r14
    19be:	dc 01       	movw	r26, r24
    19c0:	8c 91       	ld	r24, X
    19c2:	09 95       	icall
    19c4:	89 2b       	or	r24, r25
    19c6:	79 f3       	breq	.-34     	; 0x19a6 <fwrite+0x2e>
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <fwrite+0x5c>
    19ca:	21 96       	adiw	r28, 0x01	; 1
    19cc:	e5 cf       	rjmp	.-54     	; 0x1998 <fwrite+0x20>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <fwrite+0x5e>
    19d4:	ce 01       	movw	r24, r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	ec e0       	ldi	r30, 0x0C	; 12
    19dc:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__epilogue_restores__+0xc>

000019e0 <sprintf>:
    19e0:	ae e0       	ldi	r26, 0x0E	; 14
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 ef       	ldi	r30, 0xF6	; 246
    19e6:	fc e0       	ldi	r31, 0x0C	; 12
    19e8:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__prologue_saves__+0x1c>
    19ec:	0d 89       	ldd	r16, Y+21	; 0x15
    19ee:	1e 89       	ldd	r17, Y+22	; 0x16
    19f0:	86 e0       	ldi	r24, 0x06	; 6
    19f2:	8c 83       	std	Y+4, r24	; 0x04
    19f4:	1a 83       	std	Y+2, r17	; 0x02
    19f6:	09 83       	std	Y+1, r16	; 0x01
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	9f e7       	ldi	r25, 0x7F	; 127
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	ae 01       	movw	r20, r28
    1a02:	47 5e       	subi	r20, 0xE7	; 231
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255
    1a06:	6f 89       	ldd	r22, Y+23	; 0x17
    1a08:	78 8d       	ldd	r23, Y+24	; 0x18
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	01 96       	adiw	r24, 0x01	; 1
    1a0e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vfprintf>
    1a12:	2f 81       	ldd	r18, Y+7	; 0x07
    1a14:	38 85       	ldd	r19, Y+8	; 0x08
    1a16:	f8 01       	movw	r30, r16
    1a18:	e2 0f       	add	r30, r18
    1a1a:	f3 1f       	adc	r31, r19
    1a1c:	10 82       	st	Z, r1
    1a1e:	2e 96       	adiw	r28, 0x0e	; 14
    1a20:	e4 e0       	ldi	r30, 0x04	; 4
    1a22:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__epilogue_restores__+0x1c>

00001a26 <vfprintf>:
    1a26:	ac e0       	ldi	r26, 0x0C	; 12
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e9 e1       	ldi	r30, 0x19	; 25
    1a2c:	fd e0       	ldi	r31, 0x0D	; 13
    1a2e:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__prologue_saves__>
    1a32:	7c 01       	movw	r14, r24
    1a34:	6b 01       	movw	r12, r22
    1a36:	8a 01       	movw	r16, r20
    1a38:	fc 01       	movw	r30, r24
    1a3a:	17 82       	std	Z+7, r1	; 0x07
    1a3c:	16 82       	std	Z+6, r1	; 0x06
    1a3e:	83 81       	ldd	r24, Z+3	; 0x03
    1a40:	81 ff       	sbrs	r24, 1
    1a42:	bd c1       	rjmp	.+890    	; 0x1dbe <vfprintf+0x398>
    1a44:	ce 01       	movw	r24, r28
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	4c 01       	movw	r8, r24
    1a4a:	f7 01       	movw	r30, r14
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	f6 01       	movw	r30, r12
    1a50:	93 fd       	sbrc	r25, 3
    1a52:	85 91       	lpm	r24, Z+
    1a54:	93 ff       	sbrs	r25, 3
    1a56:	81 91       	ld	r24, Z+
    1a58:	6f 01       	movw	r12, r30
    1a5a:	88 23       	and	r24, r24
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <vfprintf+0x3a>
    1a5e:	ab c1       	rjmp	.+854    	; 0x1db6 <vfprintf+0x390>
    1a60:	85 32       	cpi	r24, 0x25	; 37
    1a62:	39 f4       	brne	.+14     	; 0x1a72 <vfprintf+0x4c>
    1a64:	93 fd       	sbrc	r25, 3
    1a66:	85 91       	lpm	r24, Z+
    1a68:	93 ff       	sbrs	r25, 3
    1a6a:	81 91       	ld	r24, Z+
    1a6c:	6f 01       	movw	r12, r30
    1a6e:	85 32       	cpi	r24, 0x25	; 37
    1a70:	29 f4       	brne	.+10     	; 0x1a7c <vfprintf+0x56>
    1a72:	b7 01       	movw	r22, r14
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1a7a:	e7 cf       	rjmp	.-50     	; 0x1a4a <vfprintf+0x24>
    1a7c:	51 2c       	mov	r5, r1
    1a7e:	31 2c       	mov	r3, r1
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	20 32       	cpi	r18, 0x20	; 32
    1a84:	a0 f4       	brcc	.+40     	; 0x1aae <vfprintf+0x88>
    1a86:	8b 32       	cpi	r24, 0x2B	; 43
    1a88:	69 f0       	breq	.+26     	; 0x1aa4 <vfprintf+0x7e>
    1a8a:	30 f4       	brcc	.+12     	; 0x1a98 <vfprintf+0x72>
    1a8c:	80 32       	cpi	r24, 0x20	; 32
    1a8e:	59 f0       	breq	.+22     	; 0x1aa6 <vfprintf+0x80>
    1a90:	83 32       	cpi	r24, 0x23	; 35
    1a92:	69 f4       	brne	.+26     	; 0x1aae <vfprintf+0x88>
    1a94:	20 61       	ori	r18, 0x10	; 16
    1a96:	2c c0       	rjmp	.+88     	; 0x1af0 <vfprintf+0xca>
    1a98:	8d 32       	cpi	r24, 0x2D	; 45
    1a9a:	39 f0       	breq	.+14     	; 0x1aaa <vfprintf+0x84>
    1a9c:	80 33       	cpi	r24, 0x30	; 48
    1a9e:	39 f4       	brne	.+14     	; 0x1aae <vfprintf+0x88>
    1aa0:	21 60       	ori	r18, 0x01	; 1
    1aa2:	26 c0       	rjmp	.+76     	; 0x1af0 <vfprintf+0xca>
    1aa4:	22 60       	ori	r18, 0x02	; 2
    1aa6:	24 60       	ori	r18, 0x04	; 4
    1aa8:	23 c0       	rjmp	.+70     	; 0x1af0 <vfprintf+0xca>
    1aaa:	28 60       	ori	r18, 0x08	; 8
    1aac:	21 c0       	rjmp	.+66     	; 0x1af0 <vfprintf+0xca>
    1aae:	27 fd       	sbrc	r18, 7
    1ab0:	27 c0       	rjmp	.+78     	; 0x1b00 <vfprintf+0xda>
    1ab2:	30 ed       	ldi	r19, 0xD0	; 208
    1ab4:	38 0f       	add	r19, r24
    1ab6:	3a 30       	cpi	r19, 0x0A	; 10
    1ab8:	78 f4       	brcc	.+30     	; 0x1ad8 <vfprintf+0xb2>
    1aba:	26 ff       	sbrs	r18, 6
    1abc:	06 c0       	rjmp	.+12     	; 0x1aca <vfprintf+0xa4>
    1abe:	fa e0       	ldi	r31, 0x0A	; 10
    1ac0:	5f 9e       	mul	r5, r31
    1ac2:	30 0d       	add	r19, r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	53 2e       	mov	r5, r19
    1ac8:	13 c0       	rjmp	.+38     	; 0x1af0 <vfprintf+0xca>
    1aca:	8a e0       	ldi	r24, 0x0A	; 10
    1acc:	38 9e       	mul	r3, r24
    1ace:	30 0d       	add	r19, r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	33 2e       	mov	r3, r19
    1ad4:	20 62       	ori	r18, 0x20	; 32
    1ad6:	0c c0       	rjmp	.+24     	; 0x1af0 <vfprintf+0xca>
    1ad8:	8e 32       	cpi	r24, 0x2E	; 46
    1ada:	21 f4       	brne	.+8      	; 0x1ae4 <vfprintf+0xbe>
    1adc:	26 fd       	sbrc	r18, 6
    1ade:	6b c1       	rjmp	.+726    	; 0x1db6 <vfprintf+0x390>
    1ae0:	20 64       	ori	r18, 0x40	; 64
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <vfprintf+0xca>
    1ae4:	8c 36       	cpi	r24, 0x6C	; 108
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <vfprintf+0xc6>
    1ae8:	20 68       	ori	r18, 0x80	; 128
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <vfprintf+0xca>
    1aec:	88 36       	cpi	r24, 0x68	; 104
    1aee:	41 f4       	brne	.+16     	; 0x1b00 <vfprintf+0xda>
    1af0:	f6 01       	movw	r30, r12
    1af2:	93 fd       	sbrc	r25, 3
    1af4:	85 91       	lpm	r24, Z+
    1af6:	93 ff       	sbrs	r25, 3
    1af8:	81 91       	ld	r24, Z+
    1afa:	6f 01       	movw	r12, r30
    1afc:	81 11       	cpse	r24, r1
    1afe:	c1 cf       	rjmp	.-126    	; 0x1a82 <vfprintf+0x5c>
    1b00:	98 2f       	mov	r25, r24
    1b02:	9f 7d       	andi	r25, 0xDF	; 223
    1b04:	95 54       	subi	r25, 0x45	; 69
    1b06:	93 30       	cpi	r25, 0x03	; 3
    1b08:	28 f4       	brcc	.+10     	; 0x1b14 <vfprintf+0xee>
    1b0a:	0c 5f       	subi	r16, 0xFC	; 252
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	ff e3       	ldi	r31, 0x3F	; 63
    1b10:	f9 83       	std	Y+1, r31	; 0x01
    1b12:	0d c0       	rjmp	.+26     	; 0x1b2e <vfprintf+0x108>
    1b14:	83 36       	cpi	r24, 0x63	; 99
    1b16:	31 f0       	breq	.+12     	; 0x1b24 <vfprintf+0xfe>
    1b18:	83 37       	cpi	r24, 0x73	; 115
    1b1a:	71 f0       	breq	.+28     	; 0x1b38 <vfprintf+0x112>
    1b1c:	83 35       	cpi	r24, 0x53	; 83
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <vfprintf+0xfc>
    1b20:	5b c0       	rjmp	.+182    	; 0x1bd8 <vfprintf+0x1b2>
    1b22:	22 c0       	rjmp	.+68     	; 0x1b68 <vfprintf+0x142>
    1b24:	f8 01       	movw	r30, r16
    1b26:	80 81       	ld	r24, Z
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	0e 5f       	subi	r16, 0xFE	; 254
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	44 24       	eor	r4, r4
    1b30:	43 94       	inc	r4
    1b32:	51 2c       	mov	r5, r1
    1b34:	54 01       	movw	r10, r8
    1b36:	15 c0       	rjmp	.+42     	; 0x1b62 <vfprintf+0x13c>
    1b38:	38 01       	movw	r6, r16
    1b3a:	f2 e0       	ldi	r31, 0x02	; 2
    1b3c:	6f 0e       	add	r6, r31
    1b3e:	71 1c       	adc	r7, r1
    1b40:	f8 01       	movw	r30, r16
    1b42:	a0 80       	ld	r10, Z
    1b44:	b1 80       	ldd	r11, Z+1	; 0x01
    1b46:	26 ff       	sbrs	r18, 6
    1b48:	03 c0       	rjmp	.+6      	; 0x1b50 <vfprintf+0x12a>
    1b4a:	65 2d       	mov	r22, r5
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <vfprintf+0x12e>
    1b50:	6f ef       	ldi	r22, 0xFF	; 255
    1b52:	7f ef       	ldi	r23, 0xFF	; 255
    1b54:	c5 01       	movw	r24, r10
    1b56:	2c 87       	std	Y+12, r18	; 0x0c
    1b58:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <strnlen>
    1b5c:	2c 01       	movw	r4, r24
    1b5e:	83 01       	movw	r16, r6
    1b60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b62:	2f 77       	andi	r18, 0x7F	; 127
    1b64:	22 2e       	mov	r2, r18
    1b66:	17 c0       	rjmp	.+46     	; 0x1b96 <vfprintf+0x170>
    1b68:	38 01       	movw	r6, r16
    1b6a:	f2 e0       	ldi	r31, 0x02	; 2
    1b6c:	6f 0e       	add	r6, r31
    1b6e:	71 1c       	adc	r7, r1
    1b70:	f8 01       	movw	r30, r16
    1b72:	a0 80       	ld	r10, Z
    1b74:	b1 80       	ldd	r11, Z+1	; 0x01
    1b76:	26 ff       	sbrs	r18, 6
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <vfprintf+0x15a>
    1b7a:	65 2d       	mov	r22, r5
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <vfprintf+0x15e>
    1b80:	6f ef       	ldi	r22, 0xFF	; 255
    1b82:	7f ef       	ldi	r23, 0xFF	; 255
    1b84:	c5 01       	movw	r24, r10
    1b86:	2c 87       	std	Y+12, r18	; 0x0c
    1b88:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <strnlen_P>
    1b8c:	2c 01       	movw	r4, r24
    1b8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b90:	20 68       	ori	r18, 0x80	; 128
    1b92:	22 2e       	mov	r2, r18
    1b94:	83 01       	movw	r16, r6
    1b96:	23 fc       	sbrc	r2, 3
    1b98:	1b c0       	rjmp	.+54     	; 0x1bd0 <vfprintf+0x1aa>
    1b9a:	83 2d       	mov	r24, r3
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	48 16       	cp	r4, r24
    1ba0:	59 06       	cpc	r5, r25
    1ba2:	b0 f4       	brcc	.+44     	; 0x1bd0 <vfprintf+0x1aa>
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	80 e2       	ldi	r24, 0x20	; 32
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1bae:	3a 94       	dec	r3
    1bb0:	f4 cf       	rjmp	.-24     	; 0x1b9a <vfprintf+0x174>
    1bb2:	f5 01       	movw	r30, r10
    1bb4:	27 fc       	sbrc	r2, 7
    1bb6:	85 91       	lpm	r24, Z+
    1bb8:	27 fe       	sbrs	r2, 7
    1bba:	81 91       	ld	r24, Z+
    1bbc:	5f 01       	movw	r10, r30
    1bbe:	b7 01       	movw	r22, r14
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1bc6:	31 10       	cpse	r3, r1
    1bc8:	3a 94       	dec	r3
    1bca:	f1 e0       	ldi	r31, 0x01	; 1
    1bcc:	4f 1a       	sub	r4, r31
    1bce:	51 08       	sbc	r5, r1
    1bd0:	41 14       	cp	r4, r1
    1bd2:	51 04       	cpc	r5, r1
    1bd4:	71 f7       	brne	.-36     	; 0x1bb2 <vfprintf+0x18c>
    1bd6:	e5 c0       	rjmp	.+458    	; 0x1da2 <vfprintf+0x37c>
    1bd8:	84 36       	cpi	r24, 0x64	; 100
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <vfprintf+0x1ba>
    1bdc:	89 36       	cpi	r24, 0x69	; 105
    1bde:	39 f5       	brne	.+78     	; 0x1c2e <vfprintf+0x208>
    1be0:	f8 01       	movw	r30, r16
    1be2:	27 ff       	sbrs	r18, 7
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <vfprintf+0x1ce>
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0c 5f       	subi	r16, 0xFC	; 252
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	08 c0       	rjmp	.+16     	; 0x1c04 <vfprintf+0x1de>
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	07 2e       	mov	r0, r23
    1bfa:	00 0c       	add	r0, r0
    1bfc:	88 0b       	sbc	r24, r24
    1bfe:	99 0b       	sbc	r25, r25
    1c00:	0e 5f       	subi	r16, 0xFE	; 254
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
    1c04:	2f 76       	andi	r18, 0x6F	; 111
    1c06:	72 2e       	mov	r7, r18
    1c08:	97 ff       	sbrs	r25, 7
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <vfprintf+0x1f8>
    1c0c:	90 95       	com	r25
    1c0e:	80 95       	com	r24
    1c10:	70 95       	com	r23
    1c12:	61 95       	neg	r22
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	8f 4f       	sbci	r24, 0xFF	; 255
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	20 68       	ori	r18, 0x80	; 128
    1c1c:	72 2e       	mov	r7, r18
    1c1e:	2a e0       	ldi	r18, 0x0A	; 10
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	a4 01       	movw	r20, r8
    1c24:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__ultoa_invert>
    1c28:	a8 2e       	mov	r10, r24
    1c2a:	a8 18       	sub	r10, r8
    1c2c:	44 c0       	rjmp	.+136    	; 0x1cb6 <vfprintf+0x290>
    1c2e:	85 37       	cpi	r24, 0x75	; 117
    1c30:	29 f4       	brne	.+10     	; 0x1c3c <vfprintf+0x216>
    1c32:	2f 7e       	andi	r18, 0xEF	; 239
    1c34:	b2 2e       	mov	r11, r18
    1c36:	2a e0       	ldi	r18, 0x0A	; 10
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	25 c0       	rjmp	.+74     	; 0x1c86 <vfprintf+0x260>
    1c3c:	f2 2f       	mov	r31, r18
    1c3e:	f9 7f       	andi	r31, 0xF9	; 249
    1c40:	bf 2e       	mov	r11, r31
    1c42:	8f 36       	cpi	r24, 0x6F	; 111
    1c44:	c1 f0       	breq	.+48     	; 0x1c76 <vfprintf+0x250>
    1c46:	18 f4       	brcc	.+6      	; 0x1c4e <vfprintf+0x228>
    1c48:	88 35       	cpi	r24, 0x58	; 88
    1c4a:	79 f0       	breq	.+30     	; 0x1c6a <vfprintf+0x244>
    1c4c:	b4 c0       	rjmp	.+360    	; 0x1db6 <vfprintf+0x390>
    1c4e:	80 37       	cpi	r24, 0x70	; 112
    1c50:	19 f0       	breq	.+6      	; 0x1c58 <vfprintf+0x232>
    1c52:	88 37       	cpi	r24, 0x78	; 120
    1c54:	21 f0       	breq	.+8      	; 0x1c5e <vfprintf+0x238>
    1c56:	af c0       	rjmp	.+350    	; 0x1db6 <vfprintf+0x390>
    1c58:	2f 2f       	mov	r18, r31
    1c5a:	20 61       	ori	r18, 0x10	; 16
    1c5c:	b2 2e       	mov	r11, r18
    1c5e:	b4 fe       	sbrs	r11, 4
    1c60:	0d c0       	rjmp	.+26     	; 0x1c7c <vfprintf+0x256>
    1c62:	8b 2d       	mov	r24, r11
    1c64:	84 60       	ori	r24, 0x04	; 4
    1c66:	b8 2e       	mov	r11, r24
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <vfprintf+0x256>
    1c6a:	24 ff       	sbrs	r18, 4
    1c6c:	0a c0       	rjmp	.+20     	; 0x1c82 <vfprintf+0x25c>
    1c6e:	9f 2f       	mov	r25, r31
    1c70:	96 60       	ori	r25, 0x06	; 6
    1c72:	b9 2e       	mov	r11, r25
    1c74:	06 c0       	rjmp	.+12     	; 0x1c82 <vfprintf+0x25c>
    1c76:	28 e0       	ldi	r18, 0x08	; 8
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <vfprintf+0x260>
    1c7c:	20 e1       	ldi	r18, 0x10	; 16
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <vfprintf+0x260>
    1c82:	20 e1       	ldi	r18, 0x10	; 16
    1c84:	32 e0       	ldi	r19, 0x02	; 2
    1c86:	f8 01       	movw	r30, r16
    1c88:	b7 fe       	sbrs	r11, 7
    1c8a:	07 c0       	rjmp	.+14     	; 0x1c9a <vfprintf+0x274>
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	0c 5f       	subi	r16, 0xFC	; 252
    1c96:	1f 4f       	sbci	r17, 0xFF	; 255
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vfprintf+0x280>
    1c9a:	60 81       	ld	r22, Z
    1c9c:	71 81       	ldd	r23, Z+1	; 0x01
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 5f       	subi	r16, 0xFE	; 254
    1ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca6:	a4 01       	movw	r20, r8
    1ca8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__ultoa_invert>
    1cac:	a8 2e       	mov	r10, r24
    1cae:	a8 18       	sub	r10, r8
    1cb0:	fb 2d       	mov	r31, r11
    1cb2:	ff 77       	andi	r31, 0x7F	; 127
    1cb4:	7f 2e       	mov	r7, r31
    1cb6:	76 fe       	sbrs	r7, 6
    1cb8:	0b c0       	rjmp	.+22     	; 0x1cd0 <vfprintf+0x2aa>
    1cba:	37 2d       	mov	r19, r7
    1cbc:	3e 7f       	andi	r19, 0xFE	; 254
    1cbe:	a5 14       	cp	r10, r5
    1cc0:	50 f4       	brcc	.+20     	; 0x1cd6 <vfprintf+0x2b0>
    1cc2:	74 fe       	sbrs	r7, 4
    1cc4:	0a c0       	rjmp	.+20     	; 0x1cda <vfprintf+0x2b4>
    1cc6:	72 fc       	sbrc	r7, 2
    1cc8:	08 c0       	rjmp	.+16     	; 0x1cda <vfprintf+0x2b4>
    1cca:	37 2d       	mov	r19, r7
    1ccc:	3e 7e       	andi	r19, 0xEE	; 238
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <vfprintf+0x2b4>
    1cd0:	ba 2c       	mov	r11, r10
    1cd2:	37 2d       	mov	r19, r7
    1cd4:	03 c0       	rjmp	.+6      	; 0x1cdc <vfprintf+0x2b6>
    1cd6:	ba 2c       	mov	r11, r10
    1cd8:	01 c0       	rjmp	.+2      	; 0x1cdc <vfprintf+0x2b6>
    1cda:	b5 2c       	mov	r11, r5
    1cdc:	34 ff       	sbrs	r19, 4
    1cde:	0d c0       	rjmp	.+26     	; 0x1cfa <vfprintf+0x2d4>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ea 0d       	add	r30, r10
    1ce4:	f1 1d       	adc	r31, r1
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 33       	cpi	r24, 0x30	; 48
    1cea:	11 f4       	brne	.+4      	; 0x1cf0 <vfprintf+0x2ca>
    1cec:	39 7e       	andi	r19, 0xE9	; 233
    1cee:	09 c0       	rjmp	.+18     	; 0x1d02 <vfprintf+0x2dc>
    1cf0:	32 ff       	sbrs	r19, 2
    1cf2:	06 c0       	rjmp	.+12     	; 0x1d00 <vfprintf+0x2da>
    1cf4:	b3 94       	inc	r11
    1cf6:	b3 94       	inc	r11
    1cf8:	04 c0       	rjmp	.+8      	; 0x1d02 <vfprintf+0x2dc>
    1cfa:	83 2f       	mov	r24, r19
    1cfc:	86 78       	andi	r24, 0x86	; 134
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <vfprintf+0x2dc>
    1d00:	b3 94       	inc	r11
    1d02:	33 fd       	sbrc	r19, 3
    1d04:	13 c0       	rjmp	.+38     	; 0x1d2c <vfprintf+0x306>
    1d06:	30 ff       	sbrs	r19, 0
    1d08:	06 c0       	rjmp	.+12     	; 0x1d16 <vfprintf+0x2f0>
    1d0a:	5a 2c       	mov	r5, r10
    1d0c:	b3 14       	cp	r11, r3
    1d0e:	18 f4       	brcc	.+6      	; 0x1d16 <vfprintf+0x2f0>
    1d10:	53 0c       	add	r5, r3
    1d12:	5b 18       	sub	r5, r11
    1d14:	b3 2c       	mov	r11, r3
    1d16:	b3 14       	cp	r11, r3
    1d18:	68 f4       	brcc	.+26     	; 0x1d34 <vfprintf+0x30e>
    1d1a:	b7 01       	movw	r22, r14
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	3c 87       	std	Y+12, r19	; 0x0c
    1d22:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1d26:	b3 94       	inc	r11
    1d28:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d2a:	f5 cf       	rjmp	.-22     	; 0x1d16 <vfprintf+0x2f0>
    1d2c:	b3 14       	cp	r11, r3
    1d2e:	10 f4       	brcc	.+4      	; 0x1d34 <vfprintf+0x30e>
    1d30:	3b 18       	sub	r3, r11
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <vfprintf+0x310>
    1d34:	31 2c       	mov	r3, r1
    1d36:	34 ff       	sbrs	r19, 4
    1d38:	12 c0       	rjmp	.+36     	; 0x1d5e <vfprintf+0x338>
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	80 e3       	ldi	r24, 0x30	; 48
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	3c 87       	std	Y+12, r19	; 0x0c
    1d42:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1d46:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d48:	32 ff       	sbrs	r19, 2
    1d4a:	17 c0       	rjmp	.+46     	; 0x1d7a <vfprintf+0x354>
    1d4c:	31 fd       	sbrc	r19, 1
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <vfprintf+0x330>
    1d50:	88 e7       	ldi	r24, 0x78	; 120
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <vfprintf+0x334>
    1d56:	88 e5       	ldi	r24, 0x58	; 88
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	b7 01       	movw	r22, r14
    1d5c:	0c c0       	rjmp	.+24     	; 0x1d76 <vfprintf+0x350>
    1d5e:	83 2f       	mov	r24, r19
    1d60:	86 78       	andi	r24, 0x86	; 134
    1d62:	59 f0       	breq	.+22     	; 0x1d7a <vfprintf+0x354>
    1d64:	31 ff       	sbrs	r19, 1
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <vfprintf+0x346>
    1d68:	8b e2       	ldi	r24, 0x2B	; 43
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <vfprintf+0x348>
    1d6c:	80 e2       	ldi	r24, 0x20	; 32
    1d6e:	37 fd       	sbrc	r19, 7
    1d70:	8d e2       	ldi	r24, 0x2D	; 45
    1d72:	b7 01       	movw	r22, r14
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1d7a:	a5 14       	cp	r10, r5
    1d7c:	38 f4       	brcc	.+14     	; 0x1d8c <vfprintf+0x366>
    1d7e:	b7 01       	movw	r22, r14
    1d80:	80 e3       	ldi	r24, 0x30	; 48
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1d88:	5a 94       	dec	r5
    1d8a:	f7 cf       	rjmp	.-18     	; 0x1d7a <vfprintf+0x354>
    1d8c:	aa 94       	dec	r10
    1d8e:	f4 01       	movw	r30, r8
    1d90:	ea 0d       	add	r30, r10
    1d92:	f1 1d       	adc	r31, r1
    1d94:	80 81       	ld	r24, Z
    1d96:	b7 01       	movw	r22, r14
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1d9e:	a1 10       	cpse	r10, r1
    1da0:	f5 cf       	rjmp	.-22     	; 0x1d8c <vfprintf+0x366>
    1da2:	33 20       	and	r3, r3
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <vfprintf+0x382>
    1da6:	51 ce       	rjmp	.-862    	; 0x1a4a <vfprintf+0x24>
    1da8:	b7 01       	movw	r22, r14
    1daa:	80 e2       	ldi	r24, 0x20	; 32
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <fputc>
    1db2:	3a 94       	dec	r3
    1db4:	f6 cf       	rjmp	.-20     	; 0x1da2 <vfprintf+0x37c>
    1db6:	f7 01       	movw	r30, r14
    1db8:	86 81       	ldd	r24, Z+6	; 0x06
    1dba:	97 81       	ldd	r25, Z+7	; 0x07
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <vfprintf+0x39c>
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	9f ef       	ldi	r25, 0xFF	; 255
    1dc2:	2c 96       	adiw	r28, 0x0c	; 12
    1dc4:	e2 e1       	ldi	r30, 0x12	; 18
    1dc6:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__epilogue_restores__>

00001dca <strnlen_P>:
    1dca:	fc 01       	movw	r30, r24
    1dcc:	05 90       	lpm	r0, Z+
    1dce:	61 50       	subi	r22, 0x01	; 1
    1dd0:	70 40       	sbci	r23, 0x00	; 0
    1dd2:	01 10       	cpse	r0, r1
    1dd4:	d8 f7       	brcc	.-10     	; 0x1dcc <strnlen_P+0x2>
    1dd6:	80 95       	com	r24
    1dd8:	90 95       	com	r25
    1dda:	8e 0f       	add	r24, r30
    1ddc:	9f 1f       	adc	r25, r31
    1dde:	08 95       	ret

00001de0 <strnlen>:
    1de0:	fc 01       	movw	r30, r24
    1de2:	61 50       	subi	r22, 0x01	; 1
    1de4:	70 40       	sbci	r23, 0x00	; 0
    1de6:	01 90       	ld	r0, Z+
    1de8:	01 10       	cpse	r0, r1
    1dea:	d8 f7       	brcc	.-10     	; 0x1de2 <strnlen+0x2>
    1dec:	80 95       	com	r24
    1dee:	90 95       	com	r25
    1df0:	8e 0f       	add	r24, r30
    1df2:	9f 1f       	adc	r25, r31
    1df4:	08 95       	ret

00001df6 <__ultoa_invert>:
    1df6:	fa 01       	movw	r30, r20
    1df8:	aa 27       	eor	r26, r26
    1dfa:	28 30       	cpi	r18, 0x08	; 8
    1dfc:	51 f1       	breq	.+84     	; 0x1e52 <__ultoa_invert+0x5c>
    1dfe:	20 31       	cpi	r18, 0x10	; 16
    1e00:	81 f1       	breq	.+96     	; 0x1e62 <__ultoa_invert+0x6c>
    1e02:	e8 94       	clt
    1e04:	6f 93       	push	r22
    1e06:	6e 7f       	andi	r22, 0xFE	; 254
    1e08:	6e 5f       	subi	r22, 0xFE	; 254
    1e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	af 4f       	sbci	r26, 0xFF	; 255
    1e12:	b1 e0       	ldi	r27, 0x01	; 1
    1e14:	3e d0       	rcall	.+124    	; 0x1e92 <__ultoa_invert+0x9c>
    1e16:	b4 e0       	ldi	r27, 0x04	; 4
    1e18:	3c d0       	rcall	.+120    	; 0x1e92 <__ultoa_invert+0x9c>
    1e1a:	67 0f       	add	r22, r23
    1e1c:	78 1f       	adc	r23, r24
    1e1e:	89 1f       	adc	r24, r25
    1e20:	9a 1f       	adc	r25, r26
    1e22:	a1 1d       	adc	r26, r1
    1e24:	68 0f       	add	r22, r24
    1e26:	79 1f       	adc	r23, r25
    1e28:	8a 1f       	adc	r24, r26
    1e2a:	91 1d       	adc	r25, r1
    1e2c:	a1 1d       	adc	r26, r1
    1e2e:	6a 0f       	add	r22, r26
    1e30:	71 1d       	adc	r23, r1
    1e32:	81 1d       	adc	r24, r1
    1e34:	91 1d       	adc	r25, r1
    1e36:	a1 1d       	adc	r26, r1
    1e38:	20 d0       	rcall	.+64     	; 0x1e7a <__ultoa_invert+0x84>
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <__ultoa_invert+0x48>
    1e3c:	68 94       	set
    1e3e:	3f 91       	pop	r19
    1e40:	2a e0       	ldi	r18, 0x0A	; 10
    1e42:	26 9f       	mul	r18, r22
    1e44:	11 24       	eor	r1, r1
    1e46:	30 19       	sub	r19, r0
    1e48:	30 5d       	subi	r19, 0xD0	; 208
    1e4a:	31 93       	st	Z+, r19
    1e4c:	de f6       	brtc	.-74     	; 0x1e04 <__ultoa_invert+0xe>
    1e4e:	cf 01       	movw	r24, r30
    1e50:	08 95       	ret
    1e52:	46 2f       	mov	r20, r22
    1e54:	47 70       	andi	r20, 0x07	; 7
    1e56:	40 5d       	subi	r20, 0xD0	; 208
    1e58:	41 93       	st	Z+, r20
    1e5a:	b3 e0       	ldi	r27, 0x03	; 3
    1e5c:	0f d0       	rcall	.+30     	; 0x1e7c <__ultoa_invert+0x86>
    1e5e:	c9 f7       	brne	.-14     	; 0x1e52 <__ultoa_invert+0x5c>
    1e60:	f6 cf       	rjmp	.-20     	; 0x1e4e <__ultoa_invert+0x58>
    1e62:	46 2f       	mov	r20, r22
    1e64:	4f 70       	andi	r20, 0x0F	; 15
    1e66:	40 5d       	subi	r20, 0xD0	; 208
    1e68:	4a 33       	cpi	r20, 0x3A	; 58
    1e6a:	18 f0       	brcs	.+6      	; 0x1e72 <__ultoa_invert+0x7c>
    1e6c:	49 5d       	subi	r20, 0xD9	; 217
    1e6e:	31 fd       	sbrc	r19, 1
    1e70:	40 52       	subi	r20, 0x20	; 32
    1e72:	41 93       	st	Z+, r20
    1e74:	02 d0       	rcall	.+4      	; 0x1e7a <__ultoa_invert+0x84>
    1e76:	a9 f7       	brne	.-22     	; 0x1e62 <__ultoa_invert+0x6c>
    1e78:	ea cf       	rjmp	.-44     	; 0x1e4e <__ultoa_invert+0x58>
    1e7a:	b4 e0       	ldi	r27, 0x04	; 4
    1e7c:	a6 95       	lsr	r26
    1e7e:	97 95       	ror	r25
    1e80:	87 95       	ror	r24
    1e82:	77 95       	ror	r23
    1e84:	67 95       	ror	r22
    1e86:	ba 95       	dec	r27
    1e88:	c9 f7       	brne	.-14     	; 0x1e7c <__ultoa_invert+0x86>
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	61 05       	cpc	r22, r1
    1e8e:	71 05       	cpc	r23, r1
    1e90:	08 95       	ret
    1e92:	9b 01       	movw	r18, r22
    1e94:	ac 01       	movw	r20, r24
    1e96:	0a 2e       	mov	r0, r26
    1e98:	06 94       	lsr	r0
    1e9a:	57 95       	ror	r21
    1e9c:	47 95       	ror	r20
    1e9e:	37 95       	ror	r19
    1ea0:	27 95       	ror	r18
    1ea2:	ba 95       	dec	r27
    1ea4:	c9 f7       	brne	.-14     	; 0x1e98 <__ultoa_invert+0xa2>
    1ea6:	62 0f       	add	r22, r18
    1ea8:	73 1f       	adc	r23, r19
    1eaa:	84 1f       	adc	r24, r20
    1eac:	95 1f       	adc	r25, r21
    1eae:	a0 1d       	adc	r26, r0
    1eb0:	08 95       	ret

00001eb2 <__muluhisi3>:
    1eb2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__umulhisi3>
    1eb6:	a5 9f       	mul	r26, r21
    1eb8:	90 0d       	add	r25, r0
    1eba:	b4 9f       	mul	r27, r20
    1ebc:	90 0d       	add	r25, r0
    1ebe:	a4 9f       	mul	r26, r20
    1ec0:	80 0d       	add	r24, r0
    1ec2:	91 1d       	adc	r25, r1
    1ec4:	11 24       	eor	r1, r1
    1ec6:	08 95       	ret

00001ec8 <__mulshisi3>:
    1ec8:	b7 ff       	sbrs	r27, 7
    1eca:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__muluhisi3>

00001ece <__mulohisi3>:
    1ece:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__muluhisi3>
    1ed2:	82 1b       	sub	r24, r18
    1ed4:	93 0b       	sbc	r25, r19
    1ed6:	08 95       	ret

00001ed8 <__prologue_saves__>:
    1ed8:	2f 92       	push	r2
    1eda:	3f 92       	push	r3
    1edc:	4f 92       	push	r4
    1ede:	5f 92       	push	r5
    1ee0:	6f 92       	push	r6
    1ee2:	7f 92       	push	r7
    1ee4:	8f 92       	push	r8
    1ee6:	9f 92       	push	r9
    1ee8:	af 92       	push	r10
    1eea:	bf 92       	push	r11
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	ca 1b       	sub	r28, r26
    1f02:	db 0b       	sbc	r29, r27
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	09 94       	ijmp

00001f10 <__epilogue_restores__>:
    1f10:	2a 88       	ldd	r2, Y+18	; 0x12
    1f12:	39 88       	ldd	r3, Y+17	; 0x11
    1f14:	48 88       	ldd	r4, Y+16	; 0x10
    1f16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f22:	b9 84       	ldd	r11, Y+9	; 0x09
    1f24:	c8 84       	ldd	r12, Y+8	; 0x08
    1f26:	df 80       	ldd	r13, Y+7	; 0x07
    1f28:	ee 80       	ldd	r14, Y+6	; 0x06
    1f2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1f2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1f30:	aa 81       	ldd	r26, Y+2	; 0x02
    1f32:	b9 81       	ldd	r27, Y+1	; 0x01
    1f34:	ce 0f       	add	r28, r30
    1f36:	d1 1d       	adc	r29, r1
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	ed 01       	movw	r28, r26
    1f44:	08 95       	ret

00001f46 <__umulhisi3>:
    1f46:	a2 9f       	mul	r26, r18
    1f48:	b0 01       	movw	r22, r0
    1f4a:	b3 9f       	mul	r27, r19
    1f4c:	c0 01       	movw	r24, r0
    1f4e:	a3 9f       	mul	r26, r19
    1f50:	70 0d       	add	r23, r0
    1f52:	81 1d       	adc	r24, r1
    1f54:	11 24       	eor	r1, r1
    1f56:	91 1d       	adc	r25, r1
    1f58:	b2 9f       	mul	r27, r18
    1f5a:	70 0d       	add	r23, r0
    1f5c:	81 1d       	adc	r24, r1
    1f5e:	11 24       	eor	r1, r1
    1f60:	91 1d       	adc	r25, r1
    1f62:	08 95       	ret

00001f64 <_exit>:
    1f64:	f8 94       	cli

00001f66 <__stop_program>:
    1f66:	ff cf       	rjmp	.-2      	; 0x1f66 <__stop_program>
