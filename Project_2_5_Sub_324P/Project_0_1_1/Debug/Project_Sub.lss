
Project_Sub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00001eda  00001f6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  008001ac  008001ac  0000201a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001658  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f3  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094b  00000000  00000000  0000409b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  000049e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00004d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e72  00000000  00000000  000052ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000615e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_13>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      50:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_20>
      54:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_21>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      6c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      70:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      74:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      78:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      7c:	ab 03       	fmulsu	r18, r19
      7e:	b3 04       	cpc	r11, r3
      80:	b3 04       	cpc	r11, r3
      82:	b3 04       	cpc	r11, r3
      84:	b3 04       	cpc	r11, r3
      86:	b3 04       	cpc	r11, r3
      88:	b3 04       	cpc	r11, r3
      8a:	b3 04       	cpc	r11, r3
      8c:	b3 04       	cpc	r11, r3
      8e:	b3 04       	cpc	r11, r3
      90:	b3 04       	cpc	r11, r3
      92:	d5 04       	cpc	r13, r5
      94:	b3 04       	cpc	r11, r3
      96:	cb 02       	muls	r28, r27
      98:	b3 04       	cpc	r11, r3
      9a:	b3 04       	cpc	r11, r3
      9c:	2d 03       	fmul	r18, r21
      9e:	32 03       	mulsu	r19, r18
      a0:	38 03       	fmul	r19, r16
      a2:	3e 03       	fmul	r19, r22
      a4:	44 03       	mulsu	r20, r20
      a6:	4a 03       	fmul	r20, r18
      a8:	b3 04       	cpc	r11, r3
      aa:	b3 04       	cpc	r11, r3
      ac:	b3 04       	cpc	r11, r3
      ae:	b3 04       	cpc	r11, r3
      b0:	b3 04       	cpc	r11, r3
      b2:	b3 04       	cpc	r11, r3
      b4:	b3 04       	cpc	r11, r3
      b6:	c2 02       	muls	r28, r18
      b8:	b3 04       	cpc	r11, r3
      ba:	d5 04       	cpc	r13, r5
      bc:	b3 04       	cpc	r11, r3
      be:	b3 04       	cpc	r11, r3
      c0:	b3 04       	cpc	r11, r3
      c2:	b3 04       	cpc	r11, r3
      c4:	b3 04       	cpc	r11, r3
      c6:	b3 04       	cpc	r11, r3
      c8:	b3 04       	cpc	r11, r3
      ca:	b3 04       	cpc	r11, r3
      cc:	b3 04       	cpc	r11, r3
      ce:	b3 04       	cpc	r11, r3
      d0:	b3 04       	cpc	r11, r3
      d2:	b3 04       	cpc	r11, r3
      d4:	c1 03       	fmuls	r20, r17
      d6:	b3 04       	cpc	r11, r3
      d8:	b3 04       	cpc	r11, r3
      da:	b3 04       	cpc	r11, r3
      dc:	b3 04       	cpc	r11, r3
      de:	b3 04       	cpc	r11, r3
      e0:	b3 04       	cpc	r11, r3
      e2:	b3 04       	cpc	r11, r3
      e4:	b3 04       	cpc	r11, r3
      e6:	b3 04       	cpc	r11, r3
      e8:	b3 04       	cpc	r11, r3
      ea:	b3 04       	cpc	r11, r3
      ec:	b3 04       	cpc	r11, r3
      ee:	b3 04       	cpc	r11, r3
      f0:	b3 04       	cpc	r11, r3
      f2:	50 03       	mulsu	r21, r16
      f4:	b3 04       	cpc	r11, r3
      f6:	7e 03       	fmul	r23, r22
      f8:	b3 04       	cpc	r11, r3
      fa:	b3 04       	cpc	r11, r3
      fc:	28 03       	fmul	r18, r16
      fe:	a9 02       	muls	r26, r25
     100:	b3 04       	cpc	r11, r3
     102:	b3 04       	cpc	r11, r3
     104:	b3 02       	muls	r27, r19
     106:	d4 02       	muls	r29, r20
     108:	b3 04       	cpc	r11, r3
     10a:	b6 03       	fmuls	r19, r22
     10c:	b2 03       	fmuls	r19, r18
     10e:	b3 04       	cpc	r11, r3
     110:	c2 03       	fmuls	r20, r18
     112:	34 04       	cpc	r3, r4
     114:	ba 03       	fmulsu	r19, r18
     116:	b3 04       	cpc	r11, r3
     118:	b3 04       	cpc	r11, r3
     11a:	a6 04       	cpc	r10, r6
     11c:	b3 04       	cpc	r11, r3
     11e:	fe 02       	muls	r31, r30
     120:	bd 02       	muls	r27, r29
     122:	ae 02       	muls	r26, r30
     124:	b3 04       	cpc	r11, r3
     126:	b3 04       	cpc	r11, r3
     128:	b3 04       	cpc	r11, r3
     12a:	b8 02       	muls	r27, r24

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d8 e0       	ldi	r29, 0x08	; 8
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	ea ed       	ldi	r30, 0xDA	; 218
     140:	fe e1       	ldi	r31, 0x1E	; 30
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	ac 3a       	cpi	r26, 0xAC	; 172
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	22 e0       	ldi	r18, 0x02	; 2
     150:	ac ea       	ldi	r26, 0xAC	; 172
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a7 3d       	cpi	r26, 0xD7	; 215
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <main>
     162:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <_exit>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <uart_put_char>:
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     16a:	2f b7       	in	r18, 0x3f	; 63
     16c:	20 78       	andi	r18, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     16e:	02 c0       	rjmp	.+4      	; 0x174 <uart_put_char+0xa>
		if(!interrupts_enabled) {
     170:	22 23       	and	r18, r18
     172:	29 f1       	breq	.+74     	; 0x1be <uart_put_char+0x54>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     174:	90 91 b3 01 	lds	r25, 0x01B3
     178:	9f 3f       	cpi	r25, 0xFF	; 255
     17a:	d1 f3       	breq	.-12     	; 0x170 <uart_put_char+0x6>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     17c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     17e:	e0 91 b2 01 	lds	r30, 0x01B2
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	9e 0f       	add	r25, r30
     186:	90 93 b2 01 	sts	0x01B2, r25
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ec 54       	subi	r30, 0x4C	; 76
     18e:	fe 4f       	sbci	r31, 0xFE	; 254
     190:	80 83       	st	Z, r24
	bytes_in_out_buffer++;
     192:	80 91 b3 01 	lds	r24, 0x01B3
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	80 93 b3 01 	sts	0x01B3, r24
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     19c:	80 91 b2 01 	lds	r24, 0x01B2
     1a0:	8f 3f       	cpi	r24, 0xFF	; 255
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <uart_put_char+0x3e>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     1a4:	10 92 b2 01 	sts	0x01B2, r1
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
     1a8:	e1 ec       	ldi	r30, 0xC1	; 193
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	80 62       	ori	r24, 0x20	; 32
     1b0:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     1b2:	22 23       	and	r18, r18
     1b4:	39 f0       	breq	.+14     	; 0x1c4 <uart_put_char+0x5a>
		sei();
     1b6:	78 94       	sei
	}
	return 0;
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	08 95       	ret
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	08 95       	ret
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
}
     1c8:	08 95       	ret

000001ca <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     1ca:	80 91 c5 02 	lds	r24, 0x02C5
     1ce:	88 23       	and	r24, r24
     1d0:	e1 f3       	breq	.-8      	; 0x1ca <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     1d2:	2f b7       	in	r18, 0x3f	; 63
     1d4:	20 78       	andi	r18, 0x80	; 128
	cli();
     1d6:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     1d8:	80 91 b3 02 	lds	r24, 0x02B3
     1dc:	30 91 c5 02 	lds	r19, 0x02C5
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	83 1b       	sub	r24, r19
     1e4:	91 09       	sbc	r25, r1
     1e6:	5a f4       	brpl	.+22     	; 0x1fe <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     1e8:	e0 91 b3 02 	lds	r30, 0x02B3
     1ec:	80 91 c5 02 	lds	r24, 0x02C5
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	e8 1b       	sub	r30, r24
     1f4:	f1 09       	sbc	r31, r1
     1f6:	ec 53       	subi	r30, 0x3C	; 60
     1f8:	fd 4f       	sbci	r31, 0xFD	; 253
     1fa:	80 81       	ld	r24, Z
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     1fe:	e0 91 b3 02 	lds	r30, 0x02B3
     202:	80 91 c5 02 	lds	r24, 0x02C5
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	e8 1b       	sub	r30, r24
     20a:	f1 09       	sbc	r31, r1
     20c:	ec 54       	subi	r30, 0x4C	; 76
     20e:	fd 4f       	sbci	r31, 0xFD	; 253
     210:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     212:	90 91 c5 02 	lds	r25, 0x02C5
     216:	91 50       	subi	r25, 0x01	; 1
     218:	90 93 c5 02 	sts	0x02C5, r25
	if(interrupts_enabled) {
     21c:	22 23       	and	r18, r18
     21e:	09 f0       	breq	.+2      	; 0x222 <uart_get_char+0x58>
		sei();
     220:	78 94       	sei
	}	
	return c;
}
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	08 95       	ret

00000226 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     226:	10 92 b2 01 	sts	0x01B2, r1
	bytes_in_out_buffer = 0;
     22a:	10 92 b3 01 	sts	0x01B3, r1
	input_insert_pos = 0;
     22e:	10 92 b3 02 	sts	0x02B3, r1
	bytes_in_input_buffer = 0;
     232:	10 92 c5 02 	sts	0x02C5, r1
	input_overrun = 0;
     236:	10 92 c4 02 	sts	0x02C4, r1
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     23a:	40 93 ac 01 	sts	0x01AC, r20
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	aa 1f       	adc	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	aa 1f       	adc	r26, r26
     250:	bb 1f       	adc	r27, r27
     252:	9c 01       	movw	r18, r24
     254:	ad 01       	movw	r20, r26
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	44 1f       	adc	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	72 e1       	ldi	r23, 0x12	; 18
     262:	8a e7       	ldi	r24, 0x7A	; 122
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__divmodsi4>
     26a:	ba 01       	movw	r22, r20
     26c:	a9 01       	movw	r20, r18
     26e:	4f 5f       	subi	r20, 0xFF	; 255
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	6f 4f       	sbci	r22, 0xFF	; 255
     274:	7f 4f       	sbci	r23, 0xFF	; 255
     276:	db 01       	movw	r26, r22
     278:	ca 01       	movw	r24, r20
     27a:	1a f4       	brpl	.+6      	; 0x282 <init_serial_stdio+0x5c>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	b5 95       	asr	r27
     284:	a7 95       	ror	r26
     286:	97 95       	ror	r25
     288:	87 95       	ror	r24
     28a:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     28c:	90 93 c5 00 	sts	0x00C5, r25
     290:	80 93 c4 00 	sts	0x00C4, r24
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     294:	e1 ec       	ldi	r30, 0xC1	; 193
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	88 e1       	ldi	r24, 0x18	; 24
     29a:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     29c:	80 81       	ld	r24, Z
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     2a2:	e1 ed       	ldi	r30, 0xD1	; 209
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	93 83       	std	Z+3, r25	; 0x03
     2ac:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     2ae:	91 83       	std	Z+1, r25	; 0x01
     2b0:	80 83       	st	Z, r24
     2b2:	08 95       	ret

000002b4 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     2b4:	90 91 c5 02 	lds	r25, 0x02C5
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	91 11       	cpse	r25, r1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <serial_input_available+0xc>
     2be:	80 e0       	ldi	r24, 0x00	; 0
}
     2c0:	08 95       	ret

000002c2 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	8f 93       	push	r24
     2d0:	9f 93       	push	r25
     2d2:	ef 93       	push	r30
     2d4:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     2d6:	80 91 b3 01 	lds	r24, 0x01B3
     2da:	88 23       	and	r24, r24
     2dc:	29 f1       	breq	.+74     	; 0x328 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     2de:	80 91 b2 01 	lds	r24, 0x01B2
     2e2:	20 91 b3 01 	lds	r18, 0x01B3
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	82 1b       	sub	r24, r18
     2ea:	91 09       	sbc	r25, r1
     2ec:	5a f4       	brpl	.+22     	; 0x304 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     2ee:	e0 91 b2 01 	lds	r30, 0x01B2
     2f2:	80 91 b3 01 	lds	r24, 0x01B3
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	e8 1b       	sub	r30, r24
     2fa:	f1 09       	sbc	r31, r1
     2fc:	ed 54       	subi	r30, 0x4D	; 77
     2fe:	fd 4f       	sbci	r31, 0xFD	; 253
     300:	90 81       	ld	r25, Z
     302:	0a c0       	rjmp	.+20     	; 0x318 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     304:	e0 91 b2 01 	lds	r30, 0x01B2
     308:	80 91 b3 01 	lds	r24, 0x01B3
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	e8 1b       	sub	r30, r24
     310:	f1 09       	sbc	r31, r1
     312:	ec 54       	subi	r30, 0x4C	; 76
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     318:	80 91 b3 01 	lds	r24, 0x01B3
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	80 93 b3 01 	sts	0x01B3, r24
		
		/* Output the character via the UART */
		UDR0 = c;
     322:	90 93 c6 00 	sts	0x00C6, r25
     326:	05 c0       	rjmp	.+10     	; 0x332 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     328:	e1 ec       	ldi	r30, 0xC1	; 193
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7d       	andi	r24, 0xDF	; 223
     330:	80 83       	st	Z, r24
	}
}
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	2f 91       	pop	r18
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	cf 93       	push	r28
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     36a:	c0 91 c6 00 	lds	r28, 0x00C6
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     36e:	80 91 ac 01 	lds	r24, 0x01AC
     372:	88 23       	and	r24, r24
     374:	49 f0       	breq	.+18     	; 0x388 <__vector_20+0x42>
     376:	80 91 b3 01 	lds	r24, 0x01B3
     37a:	8f 3f       	cpi	r24, 0xFF	; 255
     37c:	29 f0       	breq	.+10     	; 0x388 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8c 2f       	mov	r24, r28
     384:	0e 94 b5 00 	call	0x16a	; 0x16a <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     388:	80 91 c5 02 	lds	r24, 0x02C5
     38c:	80 31       	cpi	r24, 0x10	; 16
     38e:	20 f0       	brcs	.+8      	; 0x398 <__vector_20+0x52>
		input_overrun = 1;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 c4 02 	sts	0x02C4, r24
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     398:	cd 30       	cpi	r28, 0x0D	; 13
     39a:	09 f4       	brne	.+2      	; 0x39e <__vector_20+0x58>
			c = '\n';
     39c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     39e:	e0 91 b3 02 	lds	r30, 0x02B3
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	8e 0f       	add	r24, r30
     3a6:	80 93 b3 02 	sts	0x02B3, r24
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	ec 54       	subi	r30, 0x4C	; 76
     3ae:	fd 4f       	sbci	r31, 0xFD	; 253
     3b0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     3b2:	80 91 c5 02 	lds	r24, 0x02C5
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 93 c5 02 	sts	0x02C5, r24
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     3bc:	80 91 b3 02 	lds	r24, 0x02B3
     3c0:	80 31       	cpi	r24, 0x10	; 16
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     3c4:	10 92 b3 02 	sts	0x02B3, r1
		}
	}
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	cf 91       	pop	r28
     3ce:	bf 91       	pop	r27
     3d0:	af 91       	pop	r26
     3d2:	9f 91       	pop	r25
     3d4:	8f 91       	pop	r24
     3d6:	7f 91       	pop	r23
     3d8:	6f 91       	pop	r22
     3da:	5f 91       	pop	r21
     3dc:	4f 91       	pop	r20
     3de:	3f 91       	pop	r19
     3e0:	2f 91       	pop	r18
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <init_tcnt0>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT0 = 0;
     3ec:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
     3ee:	17 bc       	out	0x27, r1	; 39
	//OCR0B = 124;
	

	TCCR0A |= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | _BV(WGM00) | _BV(WGM01);
     3f0:	84 b5       	in	r24, 0x24	; 36
     3f2:	83 68       	ori	r24, 0x83	; 131
     3f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS10);
     3f6:	85 b5       	in	r24, 0x25	; 37
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	85 bd       	out	0x25, r24	; 37
     3fc:	08 95       	ret

000003fe <init_tcnt2>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
     3fe:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 124;
     402:	8c e7       	ldi	r24, 0x7C	; 124
     404:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 124;
     408:	80 93 b4 00 	sts	0x00B4, r24
	

	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
     40c:	e0 eb       	ldi	r30, 0xB0	; 176
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	83 6a       	ori	r24, 0xA3	; 163
     414:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
     416:	e1 eb       	ldi	r30, 0xB1	; 177
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	81 60       	ori	r24, 0x01	; 1
     41e:	80 83       	st	Z, r24
     420:	08 95       	ret

00000422 <makeInfo>:
	}
}

info* makeInfo(void) {
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 4c 0a 	call	0x1498	; 0x1498 <malloc>
	return info_ptr;
}
     42a:	08 95       	ret

0000042c <initialise>:
	
}



void initialise(info* info_ptr){
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24

	DDRA = (1<<PORTA0)|(1<<PORTA1);
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	81 b9       	out	0x01, r24	; 1
	DDRB = (1<<PORTB3);			/*	PWM camera	*/
     43a:	88 e0       	ldi	r24, 0x08	; 8
     43c:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5)|(1<<PORTC6)|(1<<PORTC7);
     43e:	8c ef       	ldi	r24, 0xFC	; 252
     440:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
     442:	8e ef       	ldi	r24, 0xFE	; 254
     444:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
     446:	50 98       	cbi	0x0a, 0	; 10
	init_serial_stdio(9600,0);											//////////////////////////////////////////////////////////////////////////////////////////
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	60 e8       	ldi	r22, 0x80	; 128
     44c:	75 e2       	ldi	r23, 0x25	; 37
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 13 01 	call	0x226	; 0x226 <init_serial_stdio>

	init_tcnt0();				/*	Camera PWM	*/
     456:	0e 94 f6 01 	call	0x3ec	; 0x3ec <init_tcnt0>
	init_tcnt1();				/*	Timer		*/
     45a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <init_tcnt1>
	init_tcnt2();				/*	Motor PWM	*/
     45e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <init_tcnt2>
	init_step();
     462:	0e 94 49 06 	call	0xc92	; 0xc92 <init_step>
	srand(get_tcnt1_ticks());
     466:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
     46a:	cb 01       	movw	r24, r22
     46c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <srand>
	sei();
     470:	78 94       	sei
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     472:	c1 ed       	ldi	r28, 0xD1	; 209
     474:	d2 e0       	ldi	r29, 0x02	; 2
	//}

	/****************************************************************************************************************************************************************/
		
	uint8_t check = 1;
	while (check){
     476:	20 c0       	rjmp	.+64     	; 0x4b8 <initialise+0x8c>
			
		if (serial_input_available()){
			char start = fgetc(stdin);
     478:	88 81       	ld	r24, Y
     47a:	99 81       	ldd	r25, Y+1	; 0x01
     47c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <fgetc>
			if (start == 'o'){
     480:	8f 36       	cpi	r24, 0x6F	; 111
     482:	d1 f4       	brne	.+52     	; 0x4b8 <initialise+0x8c>
				fputs("Start\n", stdout);
     484:	20 91 d3 02 	lds	r18, 0x02D3
     488:	30 91 d4 02 	lds	r19, 0x02D4
     48c:	46 e0       	ldi	r20, 0x06	; 6
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fwrite>
				
		}
			
	}

	info_ptr->start = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	f8 01       	movw	r30, r16
     4a0:	87 83       	std	Z+7, r24	; 0x07
	info_ptr->stepAct = '\0';
     4a2:	14 82       	std	Z+4, r1	; 0x04
	info_ptr->maxStep = 150;
     4a4:	86 e9       	ldi	r24, 0x96	; 150
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	93 83       	std	Z+3, r25	; 0x03
     4aa:	82 83       	std	Z+2, r24	; 0x02
	info_ptr->camera = 0;
     4ac:	16 82       	std	Z+6, r1	; 0x06
	info_ptr->pwmSpeed = 0;
     4ae:	10 82       	st	Z, r1
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper or winch
     4b0:	8b b1       	in	r24, 0x0b	; 11
     4b2:	80 63       	ori	r24, 0x30	; 48
     4b4:	8b b9       	out	0x0b, r24	; 11
     4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <initialise+0x96>
	/****************************************************************************************************************************************************************/
		
	uint8_t check = 1;
	while (check){
			
		if (serial_input_available()){
     4b8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     4bc:	88 23       	and	r24, r24
     4be:	e1 f3       	breq	.-8      	; 0x4b8 <initialise+0x8c>
     4c0:	db cf       	rjmp	.-74     	; 0x478 <initialise+0x4c>
	info_ptr->maxStep = 150;
	info_ptr->camera = 0;
	info_ptr->pwmSpeed = 0;
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable stepper or winch

}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	08 95       	ret

000004cc <custom_delay>:




void custom_delay(uint32_t ticks){
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	6b 01       	movw	r12, r22
     4d6:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt1 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt1_ticks();
     4d8:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
	while((current_time + ticks) > get_tcnt1_ticks()){
     4dc:	c6 0e       	add	r12, r22
     4de:	d7 1e       	adc	r13, r23
     4e0:	e8 1e       	adc	r14, r24
     4e2:	f9 1e       	adc	r15, r25
     4e4:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
     4e8:	6c 15       	cp	r22, r12
     4ea:	7d 05       	cpc	r23, r13
     4ec:	8e 05       	cpc	r24, r14
     4ee:	9f 05       	cpc	r25, r15
     4f0:	c8 f3       	brcs	.-14     	; 0x4e4 <custom_delay+0x18>
		;
	}
}
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <input>:
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}


void input(info* info_ptr){
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	64 97       	sbiw	r28, 0x14	; 20
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	8c 01       	movw	r16, r24
	
	if(!serial_input_available()){
     524:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     528:	88 23       	and	r24, r24
     52a:	09 f4       	brne	.+2      	; 0x52e <input+0x32>
     52c:	45 c2       	rjmp	.+1162   	; 0x9b8 <__stack+0xb9>
		return;
		
	}

	char c = fgetc(stdin);
     52e:	80 91 d1 02 	lds	r24, 0x02D1
     532:	90 91 d2 02 	lds	r25, 0x02D2
     536:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <fgetc>
	int16_t speed;
	char buffer[20];
	uint8_t percent;
	char in;
	
	switch(c){
     53a:	7c 01       	movw	r14, r24
     53c:	ff 24       	eor	r15, r15
     53e:	f7 01       	movw	r30, r14
     540:	b0 97       	sbiw	r30, 0x20	; 32
     542:	e8 35       	cpi	r30, 0x58	; 88
     544:	f1 05       	cpc	r31, r1
     546:	08 f0       	brcs	.+2      	; 0x54a <input+0x4e>
     548:	0e c2       	rjmp	.+1052   	; 0x966 <__stack+0x67>
     54a:	e2 5c       	subi	r30, 0xC2	; 194
     54c:	ff 4f       	sbci	r31, 0xFF	; 255
     54e:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__tablejump2__>
		
		case 'a' :
			// turn left
			PORTD &= ~(1<<PORTD2);
     552:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     554:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     556:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     558:	47 98       	cbi	0x08, 7	; 8
			break;
     55a:	27 c2       	rjmp	.+1102   	; 0x9aa <__stack+0xab>
		case 's' :
			// backwards
			PORTD &= ~(1<<PORTD2);
     55c:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     55e:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     560:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     562:	47 9a       	sbi	0x08, 7	; 8
			break;
     564:	22 c2       	rjmp	.+1092   	; 0x9aa <__stack+0xab>
		case 'd' :
			// turn right
			PORTD |= (1<<PORTD2);
     566:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     568:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     56a:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     56c:	47 9a       	sbi	0x08, 7	; 8
			break;
     56e:	1d c2       	rjmp	.+1082   	; 0x9aa <__stack+0xab>
		case 'w' :
			// forward
			PORTD |= (1<<PORTD2);
     570:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     572:	5b 98       	cbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     574:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     576:	47 98       	cbi	0x08, 7	; 8
			break;
     578:	18 c2       	rjmp	.+1072   	; 0x9aa <__stack+0xab>
		case 'r' :
			// release claw
			release_step();
     57a:	0e 94 8c 06 	call	0xd18	; 0xd18 <release_step>
			info_ptr->stepAct = '\0';
     57e:	f8 01       	movw	r30, r16
     580:	14 82       	std	Z+4, r1	; 0x04
			break;
     582:	13 c2       	rjmp	.+1062   	; 0x9aa <__stack+0xab>
			// rely to winch to lift up
			//fputc('+', stdout);
			break;
		case '=' :
			// someone panic'd; winch to lift up
			fputc('+', stdout);
     584:	60 91 d3 02 	lds	r22, 0x02D3
     588:	70 91 d4 02 	lds	r23, 0x02D4
     58c:	8b e2       	ldi	r24, 0x2B	; 43
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
			break;
     594:	0a c2       	rjmp	.+1044   	; 0x9aa <__stack+0xab>
		case '-' :
			// lower
			fputc('_', stdout);
     596:	60 91 d3 02 	lds	r22, 0x02D3
     59a:	70 91 d4 02 	lds	r23, 0x02D4
     59e:	8f e5       	ldi	r24, 0x5F	; 95
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
			break;
     5a6:	01 c2       	rjmp	.+1026   	; 0x9aa <__stack+0xab>
		case 'e' :
			// activate claw
			if (info_ptr->stepSpeed < 0){
     5a8:	f8 01       	movw	r30, r16
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	88 23       	and	r24, r24
     5ae:	14 f4       	brge	.+4      	; 0x5b4 <input+0xb8>
				info_ptr->stepSpeed = -info_ptr->stepSpeed;
     5b0:	81 95       	neg	r24
     5b2:	81 83       	std	Z+1, r24	; 0x01
			}

			sprintf(buffer, "activate %d\n", info_ptr->stepSpeed);
     5b4:	f8 01       	movw	r30, r16
     5b6:	81 81       	ldd	r24, Z+1	; 0x01
     5b8:	28 2f       	mov	r18, r24
     5ba:	08 2e       	mov	r0, r24
     5bc:	00 0c       	add	r0, r0
     5be:	33 0b       	sbc	r19, r19
     5c0:	3f 93       	push	r19
     5c2:	8f 93       	push	r24
     5c4:	8f e1       	ldi	r24, 0x1F	; 31
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	ce 01       	movw	r24, r28
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	5c 01       	movw	r10, r24
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
			fputs(buffer, stdout);
     5da:	60 91 d3 02 	lds	r22, 0x02D3
     5de:	70 91 d4 02 	lds	r23, 0x02D4
     5e2:	c5 01       	movw	r24, r10
     5e4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
			info_ptr->stepAct = 'A';
     5e8:	81 e4       	ldi	r24, 0x41	; 65
     5ea:	f8 01       	movw	r30, r16
     5ec:	84 83       	std	Z+4, r24	; 0x04
			break;
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	d7 c1       	rjmp	.+942    	; 0x9aa <__stack+0xab>
		case 'q' :
			// retract claw
			if (info_ptr->stepSpeed > 0){
     5fc:	f8 01       	movw	r30, r16
     5fe:	81 81       	ldd	r24, Z+1	; 0x01
     600:	18 16       	cp	r1, r24
     602:	14 f4       	brge	.+4      	; 0x608 <input+0x10c>
					info_ptr->stepSpeed = -info_ptr->stepSpeed;
     604:	81 95       	neg	r24
     606:	81 83       	std	Z+1, r24	; 0x01
			}
			/************sends negative to activate winch *******/
			sprintf(buffer, "retract %d\n", info_ptr->stepSpeed);
     608:	f8 01       	movw	r30, r16
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	28 2f       	mov	r18, r24
     60e:	08 2e       	mov	r0, r24
     610:	00 0c       	add	r0, r0
     612:	33 0b       	sbc	r19, r19
     614:	3f 93       	push	r19
     616:	8f 93       	push	r24
     618:	8c e2       	ldi	r24, 0x2C	; 44
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	5c 01       	movw	r10, r24
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
			fputs(buffer, stdout);
     62e:	60 91 d3 02 	lds	r22, 0x02D3
     632:	70 91 d4 02 	lds	r23, 0x02D4
     636:	c5 01       	movw	r24, r10
     638:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
			info_ptr->stepAct = 'R';
     63c:	82 e5       	ldi	r24, 0x52	; 82
     63e:	f8 01       	movw	r30, r16
     640:	84 83       	std	Z+4, r24	; 0x04
			break;
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	ad c1       	rjmp	.+858    	; 0x9aa <__stack+0xab>
		case '`' :
			info_ptr->pwmSpeed = 0;
     650:	f8 01       	movw	r30, r16
     652:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 87       	std	Z+8, r24	; 0x08
			break;
     658:	a8 c1       	rjmp	.+848    	; 0x9aa <__stack+0xab>
		case '0' :
			info_ptr->pwmSpeed = 0;
     65a:	f8 01       	movw	r30, r16
     65c:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 87       	std	Z+8, r24	; 0x08
			break;
     662:	a3 c1       	rjmp	.+838    	; 0x9aa <__stack+0xab>
		case '1' :
			info_ptr->pwmSpeed = 20;
     664:	84 e1       	ldi	r24, 0x14	; 20
     666:	f8 01       	movw	r30, r16
     668:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	80 87       	std	Z+8, r24	; 0x08
			break;
     66e:	9d c1       	rjmp	.+826    	; 0x9aa <__stack+0xab>
		case '2' :
			info_ptr->pwmSpeed = 40;
     670:	88 e2       	ldi	r24, 0x28	; 40
     672:	f8 01       	movw	r30, r16
     674:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	80 87       	std	Z+8, r24	; 0x08
			break;
     67a:	97 c1       	rjmp	.+814    	; 0x9aa <__stack+0xab>
		case '3' :
			info_ptr->pwmSpeed = 60;
     67c:	8c e3       	ldi	r24, 0x3C	; 60
     67e:	f8 01       	movw	r30, r16
     680:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 87       	std	Z+8, r24	; 0x08
			break;
     686:	91 c1       	rjmp	.+802    	; 0x9aa <__stack+0xab>
		case '4' :
			info_ptr->pwmSpeed = 80;
     688:	80 e5       	ldi	r24, 0x50	; 80
     68a:	f8 01       	movw	r30, r16
     68c:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 87       	std	Z+8, r24	; 0x08
			break;
     692:	8b c1       	rjmp	.+790    	; 0x9aa <__stack+0xab>
		case '5' :
			info_ptr->pwmSpeed = 100;
     694:	84 e6       	ldi	r24, 0x64	; 100
     696:	f8 01       	movw	r30, r16
     698:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 87       	std	Z+8, r24	; 0x08
			break;
     69e:	85 c1       	rjmp	.+778    	; 0x9aa <__stack+0xab>
		case '[' :
			speed = info_ptr->stepSpeed - 10;
     6a0:	f8 01       	movw	r30, r16
     6a2:	21 81       	ldd	r18, Z+1	; 0x01
     6a4:	82 2f       	mov	r24, r18
     6a6:	02 2e       	mov	r0, r18
     6a8:	00 0c       	add	r0, r0
     6aa:	99 0b       	sbc	r25, r25
     6ac:	0a 97       	sbiw	r24, 0x0a	; 10
			if (speed > -110){
     6ae:	83 39       	cpi	r24, 0x93	; 147
     6b0:	9f 4f       	sbci	r25, 0xFF	; 255
     6b2:	1c f0       	brlt	.+6      	; 0x6ba <input+0x1be>
				info_ptr->stepSpeed -= 10;
     6b4:	2a 50       	subi	r18, 0x0A	; 10
     6b6:	f8 01       	movw	r30, r16
     6b8:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     6ba:	f8 01       	movw	r30, r16
     6bc:	81 81       	ldd	r24, Z+1	; 0x01
     6be:	28 2f       	mov	r18, r24
     6c0:	08 2e       	mov	r0, r24
     6c2:	00 0c       	add	r0, r0
     6c4:	33 0b       	sbc	r19, r19
     6c6:	3f 93       	push	r19
     6c8:	8f 93       	push	r24
     6ca:	88 e3       	ldi	r24, 0x38	; 56
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	8e 01       	movw	r16, r28
     6d4:	0f 5f       	subi	r16, 0xFF	; 255
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255
     6d8:	1f 93       	push	r17
     6da:	0f 93       	push	r16
     6dc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
			fputs(buffer, stdout);
     6e0:	60 91 d3 02 	lds	r22, 0x02D3
     6e4:	70 91 d4 02 	lds	r23, 0x02D4
     6e8:	c8 01       	movw	r24, r16
     6ea:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
			break;
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	57 c1       	rjmp	.+686    	; 0x9aa <__stack+0xab>
		case ']' :
			speed = info_ptr->stepSpeed - 10;
     6fc:	f8 01       	movw	r30, r16
     6fe:	21 81       	ldd	r18, Z+1	; 0x01
     700:	82 2f       	mov	r24, r18
     702:	02 2e       	mov	r0, r18
     704:	00 0c       	add	r0, r0
     706:	99 0b       	sbc	r25, r25
     708:	0a 97       	sbiw	r24, 0x0a	; 10
			if (speed < 110){
     70a:	8e 36       	cpi	r24, 0x6E	; 110
     70c:	91 05       	cpc	r25, r1
     70e:	14 f4       	brge	.+4      	; 0x714 <input+0x218>
				info_ptr->stepSpeed += 10;
     710:	26 5f       	subi	r18, 0xF6	; 246
     712:	21 83       	std	Z+1, r18	; 0x01
			}
			
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     714:	f8 01       	movw	r30, r16
     716:	81 81       	ldd	r24, Z+1	; 0x01
     718:	28 2f       	mov	r18, r24
     71a:	08 2e       	mov	r0, r24
     71c:	00 0c       	add	r0, r0
     71e:	33 0b       	sbc	r19, r19
     720:	3f 93       	push	r19
     722:	8f 93       	push	r24
     724:	88 e3       	ldi	r24, 0x38	; 56
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8e 01       	movw	r16, r28
     72e:	0f 5f       	subi	r16, 0xFF	; 255
     730:	1f 4f       	sbci	r17, 0xFF	; 255
     732:	1f 93       	push	r17
     734:	0f 93       	push	r16
     736:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
			fputs(buffer, stdout);
     73a:	60 91 d3 02 	lds	r22, 0x02D3
     73e:	70 91 d4 02 	lds	r23, 0x02D4
     742:	c8 01       	movw	r24, r16
     744:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
			break;
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	2a c1       	rjmp	.+596    	; 0x9aa <__stack+0xab>
		case ' ' :
			info_ptr->pwmSpeed = 0;
     756:	f8 01       	movw	r30, r16
     758:	10 82       	st	Z, r1
			info_ptr->stopCommand = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	85 83       	std	Z+5, r24	; 0x05
			info_ptr->motorAct = 0;
     75e:	10 86       	std	Z+8, r1	; 0x08
			info_ptr->stepAct = '\0';
     760:	14 82       	std	Z+4, r1	; 0x04
			//fputc(' ', stdout);
			break;
     762:	23 c1       	rjmp	.+582    	; 0x9aa <__stack+0xab>
		case 'h' :
			info_ptr->camera = 10;
     764:	8a e0       	ldi	r24, 0x0A	; 10
     766:	f8 01       	movw	r30, r16
     768:	86 83       	std	Z+6, r24	; 0x06
			break;
     76a:	1f c1       	rjmp	.+574    	; 0x9aa <__stack+0xab>
		case 'g' :
			info_ptr->camera = -10;
     76c:	86 ef       	ldi	r24, 0xF6	; 246
     76e:	f8 01       	movw	r30, r16
     770:	86 83       	std	Z+6, r24	; 0x06
			break;
     772:	1b c1       	rjmp	.+566    	; 0x9aa <__stack+0xab>
		case 'l' :
			if (PORTA && (1<<PORTA1)){
     774:	82 b1       	in	r24, 0x02	; 2
     776:	88 23       	and	r24, r24
     778:	11 f0       	breq	.+4      	; 0x77e <input+0x282>
				PORTA &= ~(1<<PORTA1);
     77a:	11 98       	cbi	0x02, 1	; 2
     77c:	16 c1       	rjmp	.+556    	; 0x9aa <__stack+0xab>
				} else {
				PORTA |= (1<<PORTA1);
     77e:	11 9a       	sbi	0x02, 1	; 2
     780:	14 c1       	rjmp	.+552    	; 0x9aa <__stack+0xab>
			}
			break;
		case 'L' :
			PORTA |= (1<<PORTA1);
     782:	11 9a       	sbi	0x02, 1	; 2
		case 'j' : 
			/* move winch backwards	*/
			percent = 60;
			speed = 0;
			move_worm(percent, speed);
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	8c e3       	ldi	r24, 0x3C	; 60
     788:	0e 94 b7 09 	call	0x136e	; 0x136e <move_worm>
			break;
		case 'L' :
			PORTA |= (1<<PORTA1);
		case 'j' : 
			/* move winch backwards	*/
			percent = 60;
     78c:	0f 2e       	mov	r0, r31
     78e:	fc e3       	ldi	r31, 0x3C	; 60
     790:	df 2e       	mov	r13, r31
     792:	f0 2d       	mov	r31, r0
			speed = 0;
			move_worm(percent, speed);
			while (1) {
					if(serial_input_available()){
							in = fgetc(stdin);
     794:	0f 2e       	mov	r0, r31
     796:	f1 ed       	ldi	r31, 0xD1	; 209
     798:	af 2e       	mov	r10, r31
     79a:	f2 e0       	ldi	r31, 0x02	; 2
     79c:	bf 2e       	mov	r11, r31
     79e:	f0 2d       	mov	r31, r0
									fputs(buffer, stdout);
								}
							} else if ( in == 'j'){
								if ((percent -10) >=0){
									percent -= 10;
									sprintf(buffer, "Winch speed %d\n", percent);
     7a0:	0f 2e       	mov	r0, r31
     7a2:	f2 e5       	ldi	r31, 0x52	; 82
     7a4:	8f 2e       	mov	r8, r31
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	9f 2e       	mov	r9, r31
     7aa:	f0 2d       	mov	r31, r0
     7ac:	8e 01       	movw	r16, r28
     7ae:	0f 5f       	subi	r16, 0xFF	; 255
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
			/* move winch backwards	*/
			percent = 60;
			speed = 0;
			move_worm(percent, speed);
			while (1) {
					if(serial_input_available()){
     7b2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <input+0x2c0>
     7ba:	51 c0       	rjmp	.+162    	; 0x85e <input+0x362>
							in = fgetc(stdin);
     7bc:	f5 01       	movw	r30, r10
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <fgetc>
							//char buffer[18];
							if (in == ' '){
     7c6:	80 32       	cpi	r24, 0x20	; 32
     7c8:	79 f4       	brne	.+30     	; 0x7e8 <input+0x2ec>
								fputs("Winch off\n", stdout);
     7ca:	20 91 d3 02 	lds	r18, 0x02D3
     7ce:	30 91 d4 02 	lds	r19, 0x02D4
     7d2:	4a e0       	ldi	r20, 0x0A	; 10
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	87 e4       	ldi	r24, 0x47	; 71
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fwrite>
								winch_off();
     7e2:	0e 94 b4 09 	call	0x1368	; 0x1368 <winch_off>
								}
							}
					}
					move_worm(percent, speed);
			}
			break;
     7e6:	e1 c0       	rjmp	.+450    	; 0x9aa <__stack+0xab>
							//char buffer[18];
							if (in == ' '){
								fputs("Winch off\n", stdout);
								winch_off();
								break;
							} else if (in == 'k'){
     7e8:	8b 36       	cpi	r24, 0x6B	; 107
     7ea:	e9 f4       	brne	.+58     	; 0x826 <input+0x32a>
								if ((percent + 10) < 100){
     7ec:	8d 2d       	mov	r24, r13
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0a 96       	adiw	r24, 0x0a	; 10
     7f2:	84 36       	cpi	r24, 0x64	; 100
     7f4:	91 05       	cpc	r25, r1
     7f6:	9c f5       	brge	.+102    	; 0x85e <input+0x362>
									percent += 10;
     7f8:	fa e0       	ldi	r31, 0x0A	; 10
     7fa:	df 0e       	add	r13, r31
									sprintf(buffer, "Winch speed %d\n", percent);
     7fc:	1f 92       	push	r1
     7fe:	df 92       	push	r13
     800:	9f 92       	push	r9
     802:	8f 92       	push	r8
     804:	1f 93       	push	r17
     806:	0f 93       	push	r16
     808:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
									fputs(buffer, stdout);
     80c:	f5 01       	movw	r30, r10
     80e:	62 81       	ldd	r22, Z+2	; 0x02
     810:	73 81       	ldd	r23, Z+3	; 0x03
     812:	c8 01       	movw	r24, r16
     814:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	1c c0       	rjmp	.+56     	; 0x85e <input+0x362>
								}
							} else if ( in == 'j'){
     826:	8a 36       	cpi	r24, 0x6A	; 106
     828:	d1 f4       	brne	.+52     	; 0x85e <input+0x362>
								if ((percent -10) >=0){
     82a:	8d 2d       	mov	r24, r13
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0a 97       	sbiw	r24, 0x0a	; 10
     830:	b2 f0       	brmi	.+44     	; 0x85e <input+0x362>
									percent -= 10;
     832:	f6 ef       	ldi	r31, 0xF6	; 246
     834:	df 0e       	add	r13, r31
									sprintf(buffer, "Winch speed %d\n", percent);
     836:	1f 92       	push	r1
     838:	df 92       	push	r13
     83a:	9f 92       	push	r9
     83c:	8f 92       	push	r8
     83e:	1f 93       	push	r17
     840:	0f 93       	push	r16
     842:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
									fputs(buffer, stdout);
     846:	f5 01       	movw	r30, r10
     848:	62 81       	ldd	r22, Z+2	; 0x02
     84a:	73 81       	ldd	r23, Z+3	; 0x03
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
								}
							}
					}
					move_worm(percent, speed);
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	8d 2d       	mov	r24, r13
     862:	0e 94 b7 09 	call	0x136e	; 0x136e <move_worm>
			}
     866:	a5 cf       	rjmp	.-182    	; 0x7b2 <input+0x2b6>
			break;
		case 'k' : 
			/* move winch forwards	*/
			percent = 60;
			speed = 1;
			move_worm(percent, speed);
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	8c e3       	ldi	r24, 0x3C	; 60
     86c:	0e 94 b7 09 	call	0x136e	; 0x136e <move_worm>
					move_worm(percent, speed);
			}
			break;
		case 'k' : 
			/* move winch forwards	*/
			percent = 60;
     870:	0f 2e       	mov	r0, r31
     872:	fc e3       	ldi	r31, 0x3C	; 60
     874:	df 2e       	mov	r13, r31
     876:	f0 2d       	mov	r31, r0
			speed = 1;
			move_worm(percent, speed);
			while (1) {
				if(serial_input_available()){
					in = fgetc(stdin);
     878:	0f 2e       	mov	r0, r31
     87a:	f1 ed       	ldi	r31, 0xD1	; 209
     87c:	af 2e       	mov	r10, r31
     87e:	f2 e0       	ldi	r31, 0x02	; 2
     880:	bf 2e       	mov	r11, r31
     882:	f0 2d       	mov	r31, r0
								fputs(buffer, stdout);
							}
					} else if (in == 'j'){
							if ((percent -10) >=0){
								percent -= 10;
								sprintf(buffer, "Winch speed %d\n", percent);
     884:	0f 2e       	mov	r0, r31
     886:	f2 e5       	ldi	r31, 0x52	; 82
     888:	8f 2e       	mov	r8, r31
     88a:	f1 e0       	ldi	r31, 0x01	; 1
     88c:	9f 2e       	mov	r9, r31
     88e:	f0 2d       	mov	r31, r0
     890:	8e 01       	movw	r16, r28
     892:	0f 5f       	subi	r16, 0xFF	; 255
     894:	1f 4f       	sbci	r17, 0xFF	; 255
			/* move winch forwards	*/
			percent = 60;
			speed = 1;
			move_worm(percent, speed);
			while (1) {
				if(serial_input_available()){
     896:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     89a:	88 23       	and	r24, r24
     89c:	09 f4       	brne	.+2      	; 0x8a0 <input+0x3a4>
     89e:	51 c0       	rjmp	.+162    	; 0x942 <__stack+0x43>
					in = fgetc(stdin);
     8a0:	f5 01       	movw	r30, r10
     8a2:	80 81       	ld	r24, Z
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
     8a6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <fgetc>
					if (in == ' '){
     8aa:	80 32       	cpi	r24, 0x20	; 32
     8ac:	79 f4       	brne	.+30     	; 0x8cc <input+0x3d0>
						fputs("Winch off\n", stdout);
     8ae:	20 91 d3 02 	lds	r18, 0x02D3
     8b2:	30 91 d4 02 	lds	r19, 0x02D4
     8b6:	4a e0       	ldi	r20, 0x0A	; 10
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	87 e4       	ldi	r24, 0x47	; 71
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fwrite>
						winch_off();
     8c6:	0e 94 b4 09 	call	0x1368	; 0x1368 <winch_off>
							}
					}
				}
				move_worm(percent, speed);
			}
			break;
     8ca:	6f c0       	rjmp	.+222    	; 0x9aa <__stack+0xab>
					in = fgetc(stdin);
					if (in == ' '){
						fputs("Winch off\n", stdout);
						winch_off();
						break;
					} else if (in == 'k'){
     8cc:	8b 36       	cpi	r24, 0x6B	; 107
     8ce:	e9 f4       	brne	.+58     	; 0x90a <__stack+0xb>
							if ((percent + 10) < 100){
     8d0:	8d 2d       	mov	r24, r13
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0a 96       	adiw	r24, 0x0a	; 10
     8d6:	84 36       	cpi	r24, 0x64	; 100
     8d8:	91 05       	cpc	r25, r1
     8da:	9c f5       	brge	.+102    	; 0x942 <__stack+0x43>
								percent += 10;
     8dc:	fa e0       	ldi	r31, 0x0A	; 10
     8de:	df 0e       	add	r13, r31
								sprintf(buffer, "Winch speed %d\n", percent);
     8e0:	1f 92       	push	r1
     8e2:	df 92       	push	r13
     8e4:	9f 92       	push	r9
     8e6:	8f 92       	push	r8
     8e8:	1f 93       	push	r17
     8ea:	0f 93       	push	r16
     8ec:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
								fputs(buffer, stdout);
     8f0:	f5 01       	movw	r30, r10
     8f2:	62 81       	ldd	r22, Z+2	; 0x02
     8f4:	73 81       	ldd	r23, Z+3	; 0x03
     8f6:	c8 01       	movw	r24, r16
     8f8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	1c c0       	rjmp	.+56     	; 0x942 <__stack+0x43>
							}
					} else if (in == 'j'){
     90a:	8a 36       	cpi	r24, 0x6A	; 106
     90c:	d1 f4       	brne	.+52     	; 0x942 <__stack+0x43>
							if ((percent -10) >=0){
     90e:	8d 2d       	mov	r24, r13
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0a 97       	sbiw	r24, 0x0a	; 10
     914:	b2 f0       	brmi	.+44     	; 0x942 <__stack+0x43>
								percent -= 10;
     916:	f6 ef       	ldi	r31, 0xF6	; 246
     918:	df 0e       	add	r13, r31
								sprintf(buffer, "Winch speed %d\n", percent);
     91a:	1f 92       	push	r1
     91c:	df 92       	push	r13
     91e:	9f 92       	push	r9
     920:	8f 92       	push	r8
     922:	1f 93       	push	r17
     924:	0f 93       	push	r16
     926:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
								fputs(buffer, stdout);
     92a:	f5 01       	movw	r30, r10
     92c:	62 81       	ldd	r22, Z+2	; 0x02
     92e:	73 81       	ldd	r23, Z+3	; 0x03
     930:	c8 01       	movw	r24, r16
     932:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
							}
					}
				}
				move_worm(percent, speed);
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	8d 2d       	mov	r24, r13
     946:	0e 94 b7 09 	call	0x136e	; 0x136e <move_worm>
			}
     94a:	a5 cf       	rjmp	.-182    	; 0x896 <input+0x39a>
			//fputc('?', stdout);
			//info_ptr->stopCommand = 1;
			break;
		case 'o':
			// restart
			fputs("started\n", stdout);
     94c:	20 91 d3 02 	lds	r18, 0x02D3
     950:	30 91 d4 02 	lds	r19, 0x02D4
     954:	48 e0       	ldi	r20, 0x08	; 8
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	82 e6       	ldi	r24, 0x62	; 98
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fwrite>
			break;
     964:	22 c0       	rjmp	.+68     	; 0x9aa <__stack+0xab>
		default:
			fputs("stupid.\n", stdout);
     966:	20 91 d3 02 	lds	r18, 0x02D3
     96a:	30 91 d4 02 	lds	r19, 0x02D4
     96e:	48 e0       	ldi	r20, 0x08	; 8
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	8b e6       	ldi	r24, 0x6B	; 107
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fwrite>
			++info_ptr->stupidCount;
     97e:	f8 01       	movw	r30, r16
     980:	81 85       	ldd	r24, Z+9	; 0x09
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	81 87       	std	Z+9, r24	; 0x09
			if (info_ptr->stupidCount >= 10){
     986:	8a 30       	cpi	r24, 0x0A	; 10
     988:	80 f0       	brcs	.+32     	; 0x9aa <__stack+0xab>
					fputc('H', stdout);
     98a:	60 91 d3 02 	lds	r22, 0x02D3
     98e:	70 91 d4 02 	lds	r23, 0x02D4
     992:	88 e4       	ldi	r24, 0x48	; 72
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
					custom_delay(1000);
     99a:	68 ee       	ldi	r22, 0xE8	; 232
     99c:	73 e0       	ldi	r23, 0x03	; 3
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 66 02 	call	0x4cc	; 0x4cc <custom_delay>
					info_ptr->stupidCount = 0;
     9a6:	f8 01       	movw	r30, r16
     9a8:	11 86       	std	Z+9, r1	; 0x09
			}
			break;
	}
	/* echo character to next micro */
	fputc(c, stdout);
     9aa:	60 91 d3 02 	lds	r22, 0x02D3
     9ae:	70 91 d4 02 	lds	r23, 0x02D4
     9b2:	c7 01       	movw	r24, r14
     9b4:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
	
}
     9b8:	64 96       	adiw	r28, 0x14	; 20
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	08 95       	ret

000009dc <main>:
void initialise(info* info_ptr);
void input(info* info_ptr);


/* functional code	*/
int main(void) {
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	e2 97       	sbiw	r28, 0x32	; 50
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
	
	info* info_ptr = makeInfo();
     9f0:	0e 94 11 02 	call	0x422	; 0x422 <makeInfo>
     9f4:	8c 01       	movw	r16, r24
	initialise(info_ptr);
     9f6:	0e 94 16 02 	call	0x42c	; 0x42c <initialise>
	DDRA |= (1<<PORTA0);
     9fa:	08 9a       	sbi	0x01, 0	; 1
	PORTA |= (1<<PORTA0);
     9fc:	10 9a       	sbi	0x02, 0	; 2
	while(1) {
		if(serial_input_available()){
			input(info_ptr);
		}
		if (info_ptr->motorAct){
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     9fe:	33 24       	eor	r3, r3
     a00:	3a 94       	dec	r3
     a02:	0f 2e       	mov	r0, r31
     a04:	f4 e6       	ldi	r31, 0x64	; 100
     a06:	af 2e       	mov	r10, r31
     a08:	b1 2c       	mov	r11, r1
     a0a:	f0 2d       	mov	r31, r0
     a0c:	0f 2e       	mov	r0, r31
     a0e:	f3 eb       	ldi	r31, 0xB3	; 179
     a10:	8f 2e       	mov	r8, r31
     a12:	91 2c       	mov	r9, r1
     a14:	f0 2d       	mov	r31, r0
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     a16:	0f 2e       	mov	r0, r31
     a18:	f4 eb       	ldi	r31, 0xB4	; 180
     a1a:	6f 2e       	mov	r6, r31
     a1c:	71 2c       	mov	r7, r1
     a1e:	f0 2d       	mov	r31, r0
				//}
				//step(info_ptr);
			//}
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     a20:	2e 01       	movw	r4, r28
     a22:	8f e1       	ldi	r24, 0x1F	; 31
     a24:	48 0e       	add	r4, r24
     a26:	51 1c       	adc	r5, r1
			fputs(buffer, stdout);
     a28:	0f 2e       	mov	r0, r31
     a2a:	f1 ed       	ldi	r31, 0xD1	; 209
     a2c:	cf 2e       	mov	r12, r31
     a2e:	f2 e0       	ldi	r31, 0x02	; 2
     a30:	df 2e       	mov	r13, r31
     a32:	f0 2d       	mov	r31, r0
	initialise(info_ptr);
	DDRA |= (1<<PORTA0);
	PORTA |= (1<<PORTA0);
	
	while(1) {
		if(serial_input_available()){
     a34:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     a38:	88 23       	and	r24, r24
     a3a:	19 f0       	breq	.+6      	; 0xa42 <main+0x66>
			input(info_ptr);
     a3c:	c8 01       	movw	r24, r16
     a3e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <input>
		}
		if (info_ptr->motorAct){
     a42:	d8 01       	movw	r26, r16
     a44:	18 96       	adiw	r26, 0x08	; 8
     a46:	8c 91       	ld	r24, X
     a48:	18 97       	sbiw	r26, 0x08	; 8
     a4a:	88 23       	and	r24, r24
     a4c:	c9 f0       	breq	.+50     	; 0xa80 <main+0xa4>
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     a4e:	8c 91       	ld	r24, X
     a50:	38 9e       	mul	r3, r24
     a52:	c0 01       	movw	r24, r0
     a54:	11 24       	eor	r1, r1
     a56:	b5 01       	movw	r22, r10
     a58:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__divmodhi4>
     a5c:	f4 01       	movw	r30, r8
     a5e:	60 83       	st	Z, r22
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     a60:	d8 01       	movw	r26, r16
     a62:	8c 91       	ld	r24, X
     a64:	38 9e       	mul	r3, r24
     a66:	c0 01       	movw	r24, r0
     a68:	11 24       	eor	r1, r1
     a6a:	b5 01       	movw	r22, r10
     a6c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__divmodhi4>
     a70:	f3 01       	movw	r30, r6
     a72:	60 83       	st	Z, r22
			info_ptr->motorAct = 0;
     a74:	d8 01       	movw	r26, r16
     a76:	18 96       	adiw	r26, 0x08	; 8
     a78:	1c 92       	st	X, r1
     a7a:	18 97       	sbiw	r26, 0x08	; 8
			info_ptr->stupidCount = 0;
     a7c:	19 96       	adiw	r26, 0x09	; 9
     a7e:	1c 92       	st	X, r1
		}
		if (info_ptr->stopCommand){
     a80:	f8 01       	movw	r30, r16
     a82:	85 81       	ldd	r24, Z+5	; 0x05
     a84:	88 23       	and	r24, r24
     a86:	99 f0       	breq	.+38     	; 0xaae <main+0xd2>
			/* stop everything */
			PORTD &= ~(1<<PORTD2);
     a88:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     a8a:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     a8c:	46 98       	cbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     a8e:	47 98       	cbi	0x08, 7	; 8
			//PORTC &= ~(1<<PORTC2);		/*	winch off	*/
			//PORTC &= ~(1<<PORTC5);		/*	winch off	*/
			if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     a90:	84 81       	ldd	r24, Z+4	; 0x04
     a92:	81 34       	cpi	r24, 0x41	; 65
     a94:	11 f0       	breq	.+4      	; 0xa9a <main+0xbe>
     a96:	82 35       	cpi	r24, 0x52	; 82
     a98:	29 f4       	brne	.+10     	; 0xaa4 <main+0xc8>
				hold_step();
     a9a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <hold_step>
				info_ptr->stepAct = '\0';
     a9e:	d8 01       	movw	r26, r16
     aa0:	14 96       	adiw	r26, 0x04	; 4
     aa2:	1c 92       	st	X, r1
			}
			info_ptr->camera = 0;
     aa4:	f8 01       	movw	r30, r16
     aa6:	16 82       	std	Z+6, r1	; 0x06
			info_ptr->stopCommand = 0;
     aa8:	15 82       	std	Z+5, r1	; 0x05
			info_ptr->stupidCount = 0;
     aaa:	11 86       	std	Z+9, r1	; 0x09
     aac:	c3 cf       	rjmp	.-122    	; 0xa34 <main+0x58>
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     aae:	84 81       	ldd	r24, Z+4	; 0x04
     ab0:	81 34       	cpi	r24, 0x41	; 65
     ab2:	19 f0       	breq	.+6      	; 0xaba <main+0xde>
     ab4:	82 35       	cpi	r24, 0x52	; 82
     ab6:	09 f0       	breq	.+2      	; 0xaba <main+0xde>
     ab8:	db c0       	rjmp	.+438    	; 0xc70 <main+0x294>
								//break;
						//}
				//}
				//step(info_ptr);
			//}
			int16_t current = current_step();
     aba:	0e 94 5f 06 	call	0xcbe	; 0xcbe <current_step>
     abe:	7c 01       	movw	r14, r24
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     ac0:	f8 01       	movw	r30, r16
     ac2:	84 81       	ldd	r24, Z+4	; 0x04
     ac4:	1f 92       	push	r1
     ac6:	8f 93       	push	r24
     ac8:	81 81       	ldd	r24, Z+1	; 0x01
     aca:	28 2f       	mov	r18, r24
     acc:	08 2e       	mov	r0, r24
     ace:	00 0c       	add	r0, r0
     ad0:	33 0b       	sbc	r19, r19
     ad2:	3f 93       	push	r19
     ad4:	8f 93       	push	r24
     ad6:	ff 92       	push	r15
     ad8:	ef 92       	push	r14
     ada:	a4 e7       	ldi	r26, 0x74	; 116
     adc:	b1 e0       	ldi	r27, 0x01	; 1
     ade:	bf 93       	push	r27
     ae0:	af 93       	push	r26
     ae2:	5f 92       	push	r5
     ae4:	4f 92       	push	r4
     ae6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
			fputs(buffer, stdout);
     aea:	d6 01       	movw	r26, r12
     aec:	12 96       	adiw	r26, 0x02	; 2
     aee:	6d 91       	ld	r22, X+
     af0:	7c 91       	ld	r23, X
     af2:	13 97       	sbiw	r26, 0x03	; 3
     af4:	c2 01       	movw	r24, r4
     af6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	d8 01       	movw	r26, r16
     b06:	11 96       	adiw	r26, 0x01	; 1
     b08:	8c 91       	ld	r24, X
     b0a:	11 97       	sbiw	r26, 0x01	; 1
     b0c:	88 23       	and	r24, r24
     b0e:	fc f4       	brge	.+62     	; 0xb4e <main+0x172>
     b10:	14 96       	adiw	r26, 0x04	; 4
     b12:	8c 91       	ld	r24, X
     b14:	14 97       	sbiw	r26, 0x04	; 4
     b16:	82 35       	cpi	r24, 0x52	; 82
     b18:	d1 f4       	brne	.+52     	; 0xb4e <main+0x172>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	8d 91       	ld	r24, X+
     b1e:	9c 91       	ld	r25, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	e8 16       	cp	r14, r24
     b24:	f9 06       	cpc	r15, r25
     b26:	90 f1       	brcs	.+100    	; 0xb8c <main+0x1b0>
					step(info_ptr);
     b28:	c8 01       	movw	r24, r16
     b2a:	0e 94 0a 09 	call	0x1214	; 0x1214 <step>
					current = current_step();
     b2e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <current_step>
     b32:	7c 01       	movw	r14, r24
			//}
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     b34:	f8 01       	movw	r30, r16
     b36:	81 81       	ldd	r24, Z+1	; 0x01
     b38:	88 23       	and	r24, r24
     b3a:	4c f4       	brge	.+18     	; 0xb4e <main+0x172>
     b3c:	84 81       	ldd	r24, Z+4	; 0x04
     b3e:	82 35       	cpi	r24, 0x52	; 82
     b40:	31 f4       	brne	.+12     	; 0xb4e <main+0x172>
     b42:	82 81       	ldd	r24, Z+2	; 0x02
     b44:	93 81       	ldd	r25, Z+3	; 0x03
     b46:	e8 16       	cp	r14, r24
     b48:	f9 06       	cpc	r15, r25
     b4a:	70 f7       	brcc	.-36     	; 0xb28 <main+0x14c>
     b4c:	1f c0       	rjmp	.+62     	; 0xb8c <main+0x1b0>
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     b4e:	d8 01       	movw	r26, r16
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	8c 91       	ld	r24, X
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	18 16       	cp	r1, r24
     b58:	cc f4       	brge	.+50     	; 0xb8c <main+0x1b0>
     b5a:	14 96       	adiw	r26, 0x04	; 4
     b5c:	8c 91       	ld	r24, X
     b5e:	81 34       	cpi	r24, 0x41	; 65
     b60:	a9 f4       	brne	.+42     	; 0xb8c <main+0x1b0>
     b62:	1e 14       	cp	r1, r14
     b64:	1f 04       	cpc	r1, r15
     b66:	0c f4       	brge	.+2      	; 0xb6a <main+0x18e>
     b68:	8c c0       	rjmp	.+280    	; 0xc82 <main+0x2a6>
				step(info_ptr);
     b6a:	c8 01       	movw	r24, r16
     b6c:	0e 94 0a 09 	call	0x1214	; 0x1214 <step>
				current = current_step();
     b70:	0e 94 5f 06 	call	0xcbe	; 0xcbe <current_step>
     b74:	7c 01       	movw	r14, r24
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     b76:	f8 01       	movw	r30, r16
     b78:	81 81       	ldd	r24, Z+1	; 0x01
     b7a:	18 16       	cp	r1, r24
     b7c:	3c f4       	brge	.+14     	; 0xb8c <main+0x1b0>
     b7e:	84 81       	ldd	r24, Z+4	; 0x04
     b80:	81 34       	cpi	r24, 0x41	; 65
     b82:	21 f4       	brne	.+8      	; 0xb8c <main+0x1b0>
     b84:	1e 14       	cp	r1, r14
     b86:	1f 04       	cpc	r1, r15
     b88:	84 f7       	brge	.-32     	; 0xb6a <main+0x18e>
     b8a:	7b c0       	rjmp	.+246    	; 0xc82 <main+0x2a6>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     b8c:	d8 01       	movw	r26, r16
     b8e:	12 96       	adiw	r26, 0x02	; 2
     b90:	8d 91       	ld	r24, X+
     b92:	9c 91       	ld	r25, X
     b94:	13 97       	sbiw	r26, 0x03	; 3
     b96:	e8 16       	cp	r14, r24
     b98:	f9 06       	cpc	r15, r25
     b9a:	68 f5       	brcc	.+90     	; 0xbf6 <main+0x21a>
     b9c:	ff 20       	and	r15, r15
     b9e:	5c f1       	brlt	.+86     	; 0xbf6 <main+0x21a>
					if (serial_input_available()){
     ba0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <serial_input_available>
     ba4:	88 23       	and	r24, r24
     ba6:	c1 f0       	breq	.+48     	; 0xbd8 <main+0x1fc>
						char in = fgetc(stdin);
     ba8:	f6 01       	movw	r30, r12
     baa:	80 81       	ld	r24, Z
     bac:	91 81       	ldd	r25, Z+1	; 0x01
     bae:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <fgetc>
						if (in == ' '){
     bb2:	80 32       	cpi	r24, 0x20	; 32
     bb4:	89 f4       	brne	.+34     	; 0xbd8 <main+0x1fc>
							info_ptr->stepAct = '\0';
     bb6:	d8 01       	movw	r26, r16
     bb8:	14 96       	adiw	r26, 0x04	; 4
     bba:	1c 92       	st	X, r1
							hold_step();
     bbc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <hold_step>
							fputs("canceled\n", stdout);
     bc0:	f6 01       	movw	r30, r12
     bc2:	22 81       	ldd	r18, Z+2	; 0x02
     bc4:	33 81       	ldd	r19, Z+3	; 0x03
     bc6:	49 e0       	ldi	r20, 0x09	; 9
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	84 e8       	ldi	r24, 0x84	; 132
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fwrite>
							break;
     bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <main+0x21a>
						}
					}
					step(info_ptr);
     bd8:	c8 01       	movw	r24, r16
     bda:	0e 94 0a 09 	call	0x1214	; 0x1214 <step>
					current = current_step();				
     bde:	0e 94 5f 06 	call	0xcbe	; 0xcbe <current_step>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     be2:	d8 01       	movw	r26, r16
     be4:	12 96       	adiw	r26, 0x02	; 2
     be6:	2d 91       	ld	r18, X+
     be8:	3c 91       	ld	r19, X
     bea:	13 97       	sbiw	r26, 0x03	; 3
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	10 f4       	brcc	.+4      	; 0xbf6 <main+0x21a>
     bf2:	99 23       	and	r25, r25
     bf4:	ac f6       	brge	.-86     	; 0xba0 <main+0x1c4>
					step(info_ptr);
					current = current_step();				
				}
			/*************************************************************/
			//}
			current = current_step();
     bf6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <current_step>
			char buffer1[30];
			sprintf(buffer1, "step POS: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     bfa:	f8 01       	movw	r30, r16
     bfc:	24 81       	ldd	r18, Z+4	; 0x04
     bfe:	1f 92       	push	r1
     c00:	2f 93       	push	r18
     c02:	21 81       	ldd	r18, Z+1	; 0x01
     c04:	42 2f       	mov	r20, r18
     c06:	02 2e       	mov	r0, r18
     c08:	00 0c       	add	r0, r0
     c0a:	55 0b       	sbc	r21, r21
     c0c:	5f 93       	push	r21
     c0e:	2f 93       	push	r18
     c10:	9f 93       	push	r25
     c12:	8f 93       	push	r24
     c14:	ae e8       	ldi	r26, 0x8E	; 142
     c16:	b1 e0       	ldi	r27, 0x01	; 1
     c18:	bf 93       	push	r27
     c1a:	af 93       	push	r26
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	8c 0f       	add	r24, r28
     c22:	9d 1f       	adc	r25, r29
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 a9 0c 	call	0x1952	; 0x1952 <sprintf>
			fputs(buffer1, stdout);
     c2c:	d6 01       	movw	r26, r12
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	6d 91       	ld	r22, X+
     c32:	7c 91       	ld	r23, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputs>
			/****************************************************************/
			fputs("end step\n", stdout);
     c3e:	f6 01       	movw	r30, r12
     c40:	22 81       	ldd	r18, Z+2	; 0x02
     c42:	33 81       	ldd	r19, Z+3	; 0x03
     c44:	49 e0       	ldi	r20, 0x09	; 9
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	82 ea       	ldi	r24, 0xA2	; 162
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fwrite>
			info_ptr->stepAct = '\0';
     c54:	d8 01       	movw	r26, r16
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	1c 92       	st	X, r1
     c5a:	14 97       	sbiw	r26, 0x04	; 4
			info_ptr->stupidCount = 0;
     c5c:	19 96       	adiw	r26, 0x09	; 9
     c5e:	1c 92       	st	X, r1
			hold_step();
     c60:	0e 94 64 06 	call	0xcc8	; 0xcc8 <hold_step>
			}
			info_ptr->camera = 0;
			info_ptr->stopCommand = 0;
			info_ptr->stupidCount = 0;
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	e2 ce       	rjmp	.-572    	; 0xa34 <main+0x58>
			/****************************************************************/
			fputs("end step\n", stdout);
			info_ptr->stepAct = '\0';
			info_ptr->stupidCount = 0;
			hold_step();
		} else if (info_ptr->camera != 0){
     c70:	86 81       	ldd	r24, Z+6	; 0x06
     c72:	88 23       	and	r24, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <main+0x29c>
     c76:	de ce       	rjmp	.-580    	; 0xa34 <main+0x58>
			uint8_t pos = OCR0A;
     c78:	97 b5       	in	r25, 0x27	; 39
			pos += info_ptr->camera;
     c7a:	89 0f       	add	r24, r25
					pos = 0;
			} else if (pos > 255){
					pos = 255;
			}
			/*	adjust camera position */
			OCR0A = pos;
     c7c:	87 bd       	out	0x27, r24	; 39
			info_ptr->stupidCount = 0;
     c7e:	11 86       	std	Z+9, r1	; 0x09
     c80:	d9 ce       	rjmp	.-590    	; 0xa34 <main+0x58>
				current = current_step();
			}
			/****************************************************************/
			//for (int i = 0; i < 10; i++){
			/***************************************************************/
				while ((current < info_ptr->maxStep) && (current >= 0)){
     c82:	f8 01       	movw	r30, r16
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	e8 16       	cp	r14, r24
     c8a:	f9 06       	cpc	r15, r25
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <main+0x2b4>
     c8e:	88 cf       	rjmp	.-240    	; 0xba0 <main+0x1c4>
     c90:	b2 cf       	rjmp	.-156    	; 0xbf6 <main+0x21a>

00000c92 <init_step>:
 uint8_t RED;				// port for stepper red wire


 void init_step(void){
	/* sets the ports for the stepper motor and initializes the steps and phase	*/
	steps = 0;
     c92:	10 92 c7 02 	sts	0x02C7, r1
     c96:	10 92 c6 02 	sts	0x02C6, r1
	phase = 0;
     c9a:	10 92 c8 02 	sts	0x02C8, r1
	//GRE = PORTC5;
	//YEL = PORTC2;
	//RED = PORTC3;
	
	//changing one
	BLU = PORTC5;
     c9e:	85 e0       	ldi	r24, 0x05	; 5
     ca0:	80 93 cb 02 	sts	0x02CB, r24
	GRE = PORTC4;
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	80 93 ca 02 	sts	0x02CA, r24
	YEL = PORTC3;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	80 93 c9 02 	sts	0x02C9, r24
	RED = PORTC2;
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	80 93 cc 02 	sts	0x02CC, r24
	////BLU = PORTC2;
	////GRE = PORTC3;
	////YEL = PORTC4;
	////RED = PORTC5;

	DDRC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     cb6:	87 b1       	in	r24, 0x07	; 7
     cb8:	8c 63       	ori	r24, 0x3C	; 60
     cba:	87 b9       	out	0x07, r24	; 7
     cbc:	08 95       	ret

00000cbe <current_step>:
	*	can be modified to return an angle from origin using gear
	*	ratio
	*/
	int16_t returnValue = steps;
	return returnValue;
 }
     cbe:	80 91 c6 02 	lds	r24, 0x02C6
     cc2:	90 91 c7 02 	lds	r25, 0x02C7
     cc6:	08 95       	ret

00000cc8 <hold_step>:

void hold_step(void){
	
	PORTC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     cc8:	38 b1       	in	r19, 0x08	; 8
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	bc 01       	movw	r22, r24
     cd0:	00 90 cb 02 	lds	r0, 0x02CB
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <hold_step+0x12>
     cd6:	66 0f       	add	r22, r22
     cd8:	77 1f       	adc	r23, r23
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <hold_step+0xe>
     cde:	ac 01       	movw	r20, r24
     ce0:	00 90 ca 02 	lds	r0, 0x02CA
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <hold_step+0x22>
     ce6:	44 0f       	add	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <hold_step+0x1e>
     cee:	46 2b       	or	r20, r22
     cf0:	43 2b       	or	r20, r19
     cf2:	9c 01       	movw	r18, r24
     cf4:	00 90 c9 02 	lds	r0, 0x02C9
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <hold_step+0x36>
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <hold_step+0x32>
     d02:	24 2b       	or	r18, r20
     d04:	00 90 cc 02 	lds	r0, 0x02CC
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <hold_step+0x46>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <hold_step+0x42>
     d12:	82 2b       	or	r24, r18
     d14:	88 b9       	out	0x08, r24	; 8
     d16:	08 95       	ret

00000d18 <release_step>:
	
}

void release_step(void){
	
	PORTC &= ~((1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED));
     d18:	28 b1       	in	r18, 0x08	; 8
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	bc 01       	movw	r22, r24
     d20:	00 90 ca 02 	lds	r0, 0x02CA
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <release_step+0x12>
     d26:	66 0f       	add	r22, r22
     d28:	77 1f       	adc	r23, r23
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <release_step+0xe>
     d2e:	ac 01       	movw	r20, r24
     d30:	00 90 cb 02 	lds	r0, 0x02CB
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <release_step+0x22>
     d36:	44 0f       	add	r20, r20
     d38:	55 1f       	adc	r21, r21
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <release_step+0x1e>
     d3e:	36 2f       	mov	r19, r22
     d40:	34 2b       	or	r19, r20
     d42:	ac 01       	movw	r20, r24
     d44:	00 90 c9 02 	lds	r0, 0x02C9
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <release_step+0x36>
     d4a:	44 0f       	add	r20, r20
     d4c:	55 1f       	adc	r21, r21
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <release_step+0x32>
     d52:	43 2b       	or	r20, r19
     d54:	00 90 cc 02 	lds	r0, 0x02CC
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <release_step+0x46>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <release_step+0x42>
     d62:	84 2b       	or	r24, r20
     d64:	80 95       	com	r24
     d66:	82 23       	and	r24, r18
     d68:	88 b9       	out	0x08, r24	; 8
     d6a:	08 95       	ret

00000d6c <decrement_step>:
 }

/**************************************************************************************swapped increment and decrement so start with claw closed ****************/
 void decrement_step(void){
	/* the motor has turned one step, increase the count */
	--steps;
     d6c:	80 91 c6 02 	lds	r24, 0x02C6
     d70:	90 91 c7 02 	lds	r25, 0x02C7
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	90 93 c7 02 	sts	0x02C7, r25
     d7a:	80 93 c6 02 	sts	0x02C6, r24
     d7e:	08 95       	ret

00000d80 <increment_step>:
 }

 void increment_step(void){
	/* the motor has turned back one step, decrease the count */
	++steps;
     d80:	80 91 c6 02 	lds	r24, 0x02C6
     d84:	90 91 c7 02 	lds	r25, 0x02C7
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	90 93 c7 02 	sts	0x02C7, r25
     d8e:	80 93 c6 02 	sts	0x02C6, r24
     d92:	08 95       	ret

00000d94 <step_clockwise>:
 }
/**************************************************************************************************************************************************************/


 void step_clockwise(uint8_t time_on){
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */

	 uint32_t current_time;
	 
	 if(phase == 0){
     da2:	90 91 c8 02 	lds	r25, 0x02C8
     da6:	91 11       	cpse	r25, r1
     da8:	42 c0       	rjmp	.+132    	; 0xe2e <step_clockwise+0x9a>
		 current_time = get_tcnt1_ticks();
     daa:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     dae:	6b 01       	movw	r12, r22
     db0:	7c 01       	movw	r14, r24
     db2:	cc 0e       	add	r12, r28
     db4:	d1 1c       	adc	r13, r1
     db6:	e1 1c       	adc	r14, r1
     db8:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<YEL)|(1<<GRE);
     dba:	c1 e0       	ldi	r28, 0x01	; 1
     dbc:	d0 e0       	ldi	r29, 0x00	; 0

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     dbe:	2a c0       	rjmp	.+84     	; 0xe14 <step_clockwise+0x80>
			 PORTC |= (1<<YEL)|(1<<GRE);
     dc0:	98 b1       	in	r25, 0x08	; 8
     dc2:	ae 01       	movw	r20, r28
     dc4:	00 90 c9 02 	lds	r0, 0x02C9
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <step_clockwise+0x3a>
     dca:	44 0f       	add	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <step_clockwise+0x36>
     dd2:	9e 01       	movw	r18, r28
     dd4:	00 90 ca 02 	lds	r0, 0x02CA
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <step_clockwise+0x4a>
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	0a 94       	dec	r0
     de0:	e2 f7       	brpl	.-8      	; 0xdda <step_clockwise+0x46>
     de2:	84 2f       	mov	r24, r20
     de4:	82 2b       	or	r24, r18
     de6:	89 2b       	or	r24, r25
     de8:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
     dea:	28 b1       	in	r18, 0x08	; 8
     dec:	ae 01       	movw	r20, r28
     dee:	00 90 cc 02 	lds	r0, 0x02CC
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <step_clockwise+0x64>
     df4:	44 0f       	add	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <step_clockwise+0x60>
     dfc:	ce 01       	movw	r24, r28
     dfe:	00 90 cb 02 	lds	r0, 0x02CB
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <step_clockwise+0x74>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <step_clockwise+0x70>
     e0c:	84 2b       	or	r24, r20
     e0e:	80 95       	com	r24
     e10:	82 23       	and	r24, r18
     e12:	88 b9       	out	0x08, r24	; 8

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e14:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
     e18:	6c 15       	cp	r22, r12
     e1a:	7d 05       	cpc	r23, r13
     e1c:	8e 05       	cpc	r24, r14
     e1e:	9f 05       	cpc	r25, r15
     e20:	78 f2       	brcs	.-98     	; 0xdc0 <step_clockwise+0x2c>
			 PORTC |= (1<<YEL)|(1<<GRE);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 ++phase;
     e22:	80 91 c8 02 	lds	r24, 0x02C8
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 c8 02 	sts	0x02C8, r24
     e2c:	ca c0       	rjmp	.+404    	; 0xfc2 <step_clockwise+0x22e>
	 }
	 else if(phase == 1){
     e2e:	91 30       	cpi	r25, 0x01	; 1
     e30:	09 f0       	breq	.+2      	; 0xe34 <step_clockwise+0xa0>
     e32:	42 c0       	rjmp	.+132    	; 0xeb8 <step_clockwise+0x124>
		 current_time = get_tcnt1_ticks();
     e34:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e38:	6b 01       	movw	r12, r22
     e3a:	7c 01       	movw	r14, r24
     e3c:	cc 0e       	add	r12, r28
     e3e:	d1 1c       	adc	r13, r1
     e40:	e1 1c       	adc	r14, r1
     e42:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<RED)|(1<<GRE);
     e44:	c1 e0       	ldi	r28, 0x01	; 1
     e46:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e48:	2a c0       	rjmp	.+84     	; 0xe9e <step_clockwise+0x10a>
			 PORTC |= (1<<RED)|(1<<GRE);
     e4a:	98 b1       	in	r25, 0x08	; 8
     e4c:	ae 01       	movw	r20, r28
     e4e:	00 90 cc 02 	lds	r0, 0x02CC
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <step_clockwise+0xc4>
     e54:	44 0f       	add	r20, r20
     e56:	55 1f       	adc	r21, r21
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <step_clockwise+0xc0>
     e5c:	9e 01       	movw	r18, r28
     e5e:	00 90 ca 02 	lds	r0, 0x02CA
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <step_clockwise+0xd4>
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <step_clockwise+0xd0>
     e6c:	84 2f       	mov	r24, r20
     e6e:	82 2b       	or	r24, r18
     e70:	89 2b       	or	r24, r25
     e72:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
     e74:	28 b1       	in	r18, 0x08	; 8
     e76:	ae 01       	movw	r20, r28
     e78:	00 90 c9 02 	lds	r0, 0x02C9
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <step_clockwise+0xee>
     e7e:	44 0f       	add	r20, r20
     e80:	55 1f       	adc	r21, r21
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <step_clockwise+0xea>
     e86:	ce 01       	movw	r24, r28
     e88:	00 90 cb 02 	lds	r0, 0x02CB
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <step_clockwise+0xfe>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <step_clockwise+0xfa>
     e96:	84 2b       	or	r24, r20
     e98:	80 95       	com	r24
     e9a:	82 23       	and	r24, r18
     e9c:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     e9e:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
     ea2:	6c 15       	cp	r22, r12
     ea4:	7d 05       	cpc	r23, r13
     ea6:	8e 05       	cpc	r24, r14
     ea8:	9f 05       	cpc	r25, r15
     eaa:	78 f2       	brcs	.-98     	; 0xe4a <step_clockwise+0xb6>
			 PORTC |= (1<<RED)|(1<<GRE);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
     eac:	80 91 c8 02 	lds	r24, 0x02C8
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	80 93 c8 02 	sts	0x02C8, r24
     eb6:	85 c0       	rjmp	.+266    	; 0xfc2 <step_clockwise+0x22e>
	 }
	 else if(phase == 2){
     eb8:	92 30       	cpi	r25, 0x02	; 2
     eba:	09 f0       	breq	.+2      	; 0xebe <step_clockwise+0x12a>
     ebc:	42 c0       	rjmp	.+132    	; 0xf42 <step_clockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
     ebe:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ec2:	6b 01       	movw	r12, r22
     ec4:	7c 01       	movw	r14, r24
     ec6:	cc 0e       	add	r12, r28
     ec8:	d1 1c       	adc	r13, r1
     eca:	e1 1c       	adc	r14, r1
     ecc:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
     ece:	c1 e0       	ldi	r28, 0x01	; 1
     ed0:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ed2:	2a c0       	rjmp	.+84     	; 0xf28 <step_clockwise+0x194>
			 PORTC |= (1<<BLU)|(1<<RED);
     ed4:	98 b1       	in	r25, 0x08	; 8
     ed6:	ae 01       	movw	r20, r28
     ed8:	00 90 cb 02 	lds	r0, 0x02CB
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <step_clockwise+0x14e>
     ede:	44 0f       	add	r20, r20
     ee0:	55 1f       	adc	r21, r21
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <step_clockwise+0x14a>
     ee6:	9e 01       	movw	r18, r28
     ee8:	00 90 cc 02 	lds	r0, 0x02CC
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <step_clockwise+0x15e>
     eee:	22 0f       	add	r18, r18
     ef0:	33 1f       	adc	r19, r19
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <step_clockwise+0x15a>
     ef6:	84 2f       	mov	r24, r20
     ef8:	82 2b       	or	r24, r18
     efa:	89 2b       	or	r24, r25
     efc:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
     efe:	28 b1       	in	r18, 0x08	; 8
     f00:	ae 01       	movw	r20, r28
     f02:	00 90 c9 02 	lds	r0, 0x02C9
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <step_clockwise+0x178>
     f08:	44 0f       	add	r20, r20
     f0a:	55 1f       	adc	r21, r21
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <step_clockwise+0x174>
     f10:	ce 01       	movw	r24, r28
     f12:	00 90 ca 02 	lds	r0, 0x02CA
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <step_clockwise+0x188>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <step_clockwise+0x184>
     f20:	84 2b       	or	r24, r20
     f22:	80 95       	com	r24
     f24:	82 23       	and	r24, r18
     f26:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f28:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
     f2c:	6c 15       	cp	r22, r12
     f2e:	7d 05       	cpc	r23, r13
     f30:	8e 05       	cpc	r24, r14
     f32:	9f 05       	cpc	r25, r15
     f34:	78 f2       	brcs	.-98     	; 0xed4 <step_clockwise+0x140>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
     f36:	80 91 c8 02 	lds	r24, 0x02C8
     f3a:	8f 5f       	subi	r24, 0xFF	; 255
     f3c:	80 93 c8 02 	sts	0x02C8, r24
     f40:	40 c0       	rjmp	.+128    	; 0xfc2 <step_clockwise+0x22e>
	 }
	 else if(phase == 3){
     f42:	93 30       	cpi	r25, 0x03	; 3
     f44:	f1 f5       	brne	.+124    	; 0xfc2 <step_clockwise+0x22e>
		 current_time = get_tcnt1_ticks();
     f46:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f4a:	6b 01       	movw	r12, r22
     f4c:	7c 01       	movw	r14, r24
     f4e:	cc 0e       	add	r12, r28
     f50:	d1 1c       	adc	r13, r1
     f52:	e1 1c       	adc	r14, r1
     f54:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
     f56:	c1 e0       	ldi	r28, 0x01	; 1
     f58:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     f5a:	2a c0       	rjmp	.+84     	; 0xfb0 <step_clockwise+0x21c>
			 PORTC |= (1<<BLU)|(1<<YEL);
     f5c:	98 b1       	in	r25, 0x08	; 8
     f5e:	ae 01       	movw	r20, r28
     f60:	00 90 cb 02 	lds	r0, 0x02CB
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <step_clockwise+0x1d6>
     f66:	44 0f       	add	r20, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <step_clockwise+0x1d2>
     f6e:	9e 01       	movw	r18, r28
     f70:	00 90 c9 02 	lds	r0, 0x02C9
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <step_clockwise+0x1e6>
     f76:	22 0f       	add	r18, r18
     f78:	33 1f       	adc	r19, r19
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <step_clockwise+0x1e2>
     f7e:	84 2f       	mov	r24, r20
     f80:	82 2b       	or	r24, r18
     f82:	89 2b       	or	r24, r25
     f84:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
     f86:	28 b1       	in	r18, 0x08	; 8
     f88:	ae 01       	movw	r20, r28
     f8a:	00 90 cc 02 	lds	r0, 0x02CC
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <step_clockwise+0x200>
     f90:	44 0f       	add	r20, r20
     f92:	55 1f       	adc	r21, r21
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <step_clockwise+0x1fc>
     f98:	ce 01       	movw	r24, r28
     f9a:	00 90 ca 02 	lds	r0, 0x02CA
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <step_clockwise+0x210>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <step_clockwise+0x20c>
     fa8:	84 2b       	or	r24, r20
     faa:	80 95       	com	r24
     fac:	82 23       	and	r24, r18
     fae:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     fb0:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
     fb4:	6c 15       	cp	r22, r12
     fb6:	7d 05       	cpc	r23, r13
     fb8:	8e 05       	cpc	r24, r14
     fba:	9f 05       	cpc	r25, r15
     fbc:	78 f2       	brcs	.-98     	; 0xf5c <step_clockwise+0x1c8>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 phase = 0;
     fbe:	10 92 c8 02 	sts	0x02C8, r1
	 }
	 increment_step();
     fc2:	0e 94 c0 06 	call	0xd80	; 0xd80 <increment_step>
 }
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	08 95       	ret

00000fd4 <step_anticlockwise>:


 void step_anticlockwise(uint8_t time_on){
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */
	
	 uint32_t current_time;

	 if(phase == 0){
     fe2:	90 91 c8 02 	lds	r25, 0x02C8
     fe6:	91 11       	cpse	r25, r1
     fe8:	42 c0       	rjmp	.+132    	; 0x106e <step_anticlockwise+0x9a>
		 current_time = get_tcnt1_ticks();
     fea:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
     fee:	6b 01       	movw	r12, r22
     ff0:	7c 01       	movw	r14, r24
     ff2:	cc 0e       	add	r12, r28
     ff4:	d1 1c       	adc	r13, r1
     ff6:	e1 1c       	adc	r14, r1
     ff8:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
     ffa:	c1 e0       	ldi	r28, 0x01	; 1
     ffc:	d0 e0       	ldi	r29, 0x00	; 0
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
     ffe:	2a c0       	rjmp	.+84     	; 0x1054 <step_anticlockwise+0x80>
			 PORTC |= (1<<BLU)|(1<<YEL);
    1000:	98 b1       	in	r25, 0x08	; 8
    1002:	ae 01       	movw	r20, r28
    1004:	00 90 cb 02 	lds	r0, 0x02CB
    1008:	02 c0       	rjmp	.+4      	; 0x100e <step_anticlockwise+0x3a>
    100a:	44 0f       	add	r20, r20
    100c:	55 1f       	adc	r21, r21
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <step_anticlockwise+0x36>
    1012:	9e 01       	movw	r18, r28
    1014:	00 90 c9 02 	lds	r0, 0x02C9
    1018:	02 c0       	rjmp	.+4      	; 0x101e <step_anticlockwise+0x4a>
    101a:	22 0f       	add	r18, r18
    101c:	33 1f       	adc	r19, r19
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <step_anticlockwise+0x46>
    1022:	84 2f       	mov	r24, r20
    1024:	82 2b       	or	r24, r18
    1026:	89 2b       	or	r24, r25
    1028:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
    102a:	28 b1       	in	r18, 0x08	; 8
    102c:	ae 01       	movw	r20, r28
    102e:	00 90 cc 02 	lds	r0, 0x02CC
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <step_anticlockwise+0x64>
    1034:	44 0f       	add	r20, r20
    1036:	55 1f       	adc	r21, r21
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <step_anticlockwise+0x60>
    103c:	ce 01       	movw	r24, r28
    103e:	00 90 ca 02 	lds	r0, 0x02CA
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <step_anticlockwise+0x74>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <step_anticlockwise+0x70>
    104c:	84 2b       	or	r24, r20
    104e:	80 95       	com	r24
    1050:	82 23       	and	r24, r18
    1052:	88 b9       	out	0x08, r24	; 8
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1054:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
    1058:	6c 15       	cp	r22, r12
    105a:	7d 05       	cpc	r23, r13
    105c:	8e 05       	cpc	r24, r14
    105e:	9f 05       	cpc	r25, r15
    1060:	78 f2       	brcs	.-98     	; 0x1000 <step_anticlockwise+0x2c>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 ++phase;
    1062:	80 91 c8 02 	lds	r24, 0x02C8
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 93 c8 02 	sts	0x02C8, r24
    106c:	ca c0       	rjmp	.+404    	; 0x1202 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 1){
    106e:	91 30       	cpi	r25, 0x01	; 1
    1070:	09 f0       	breq	.+2      	; 0x1074 <step_anticlockwise+0xa0>
    1072:	42 c0       	rjmp	.+132    	; 0x10f8 <step_anticlockwise+0x124>
		 current_time = get_tcnt1_ticks();
    1074:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1078:	6b 01       	movw	r12, r22
    107a:	7c 01       	movw	r14, r24
    107c:	cc 0e       	add	r12, r28
    107e:	d1 1c       	adc	r13, r1
    1080:	e1 1c       	adc	r14, r1
    1082:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
    1084:	c1 e0       	ldi	r28, 0x01	; 1
    1086:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1088:	2a c0       	rjmp	.+84     	; 0x10de <step_anticlockwise+0x10a>
			 PORTC |= (1<<BLU)|(1<<RED);
    108a:	98 b1       	in	r25, 0x08	; 8
    108c:	ae 01       	movw	r20, r28
    108e:	00 90 cb 02 	lds	r0, 0x02CB
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <step_anticlockwise+0xc4>
    1094:	44 0f       	add	r20, r20
    1096:	55 1f       	adc	r21, r21
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <step_anticlockwise+0xc0>
    109c:	9e 01       	movw	r18, r28
    109e:	00 90 cc 02 	lds	r0, 0x02CC
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <step_anticlockwise+0xd4>
    10a4:	22 0f       	add	r18, r18
    10a6:	33 1f       	adc	r19, r19
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <step_anticlockwise+0xd0>
    10ac:	84 2f       	mov	r24, r20
    10ae:	82 2b       	or	r24, r18
    10b0:	89 2b       	or	r24, r25
    10b2:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
    10b4:	28 b1       	in	r18, 0x08	; 8
    10b6:	ae 01       	movw	r20, r28
    10b8:	00 90 c9 02 	lds	r0, 0x02C9
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <step_anticlockwise+0xee>
    10be:	44 0f       	add	r20, r20
    10c0:	55 1f       	adc	r21, r21
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <step_anticlockwise+0xea>
    10c6:	ce 01       	movw	r24, r28
    10c8:	00 90 ca 02 	lds	r0, 0x02CA
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <step_anticlockwise+0xfe>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <step_anticlockwise+0xfa>
    10d6:	84 2b       	or	r24, r20
    10d8:	80 95       	com	r24
    10da:	82 23       	and	r24, r18
    10dc:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    10de:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
    10e2:	6c 15       	cp	r22, r12
    10e4:	7d 05       	cpc	r23, r13
    10e6:	8e 05       	cpc	r24, r14
    10e8:	9f 05       	cpc	r25, r15
    10ea:	78 f2       	brcs	.-98     	; 0x108a <step_anticlockwise+0xb6>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
    10ec:	80 91 c8 02 	lds	r24, 0x02C8
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	80 93 c8 02 	sts	0x02C8, r24
    10f6:	85 c0       	rjmp	.+266    	; 0x1202 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 2){
    10f8:	92 30       	cpi	r25, 0x02	; 2
    10fa:	09 f0       	breq	.+2      	; 0x10fe <step_anticlockwise+0x12a>
    10fc:	42 c0       	rjmp	.+132    	; 0x1182 <step_anticlockwise+0x1ae>
		 current_time = get_tcnt1_ticks();
    10fe:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1102:	6b 01       	movw	r12, r22
    1104:	7c 01       	movw	r14, r24
    1106:	cc 0e       	add	r12, r28
    1108:	d1 1c       	adc	r13, r1
    110a:	e1 1c       	adc	r14, r1
    110c:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
    110e:	c1 e0       	ldi	r28, 0x01	; 1
    1110:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1112:	2a c0       	rjmp	.+84     	; 0x1168 <step_anticlockwise+0x194>
			 PORTC |= (1<<GRE)|(1<<RED);
    1114:	98 b1       	in	r25, 0x08	; 8
    1116:	ae 01       	movw	r20, r28
    1118:	00 90 ca 02 	lds	r0, 0x02CA
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <step_anticlockwise+0x14e>
    111e:	44 0f       	add	r20, r20
    1120:	55 1f       	adc	r21, r21
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <step_anticlockwise+0x14a>
    1126:	9e 01       	movw	r18, r28
    1128:	00 90 cc 02 	lds	r0, 0x02CC
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <step_anticlockwise+0x15e>
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <step_anticlockwise+0x15a>
    1136:	84 2f       	mov	r24, r20
    1138:	82 2b       	or	r24, r18
    113a:	89 2b       	or	r24, r25
    113c:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
    113e:	28 b1       	in	r18, 0x08	; 8
    1140:	ae 01       	movw	r20, r28
    1142:	00 90 c9 02 	lds	r0, 0x02C9
    1146:	02 c0       	rjmp	.+4      	; 0x114c <step_anticlockwise+0x178>
    1148:	44 0f       	add	r20, r20
    114a:	55 1f       	adc	r21, r21
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <step_anticlockwise+0x174>
    1150:	ce 01       	movw	r24, r28
    1152:	00 90 cb 02 	lds	r0, 0x02CB
    1156:	02 c0       	rjmp	.+4      	; 0x115c <step_anticlockwise+0x188>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <step_anticlockwise+0x184>
    1160:	84 2b       	or	r24, r20
    1162:	80 95       	com	r24
    1164:	82 23       	and	r24, r18
    1166:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    1168:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
    116c:	6c 15       	cp	r22, r12
    116e:	7d 05       	cpc	r23, r13
    1170:	8e 05       	cpc	r24, r14
    1172:	9f 05       	cpc	r25, r15
    1174:	78 f2       	brcs	.-98     	; 0x1114 <step_anticlockwise+0x140>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
    1176:	80 91 c8 02 	lds	r24, 0x02C8
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	80 93 c8 02 	sts	0x02C8, r24
    1180:	40 c0       	rjmp	.+128    	; 0x1202 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 3){
    1182:	93 30       	cpi	r25, 0x03	; 3
    1184:	f1 f5       	brne	.+124    	; 0x1202 <step_anticlockwise+0x22e>
		 current_time = get_tcnt1_ticks();
    1186:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
		 while((current_time + time_on) > get_tcnt1_ticks()){
    118a:	6b 01       	movw	r12, r22
    118c:	7c 01       	movw	r14, r24
    118e:	cc 0e       	add	r12, r28
    1190:	d1 1c       	adc	r13, r1
    1192:	e1 1c       	adc	r14, r1
    1194:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
    1196:	c1 e0       	ldi	r28, 0x01	; 1
    1198:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    119a:	2a c0       	rjmp	.+84     	; 0x11f0 <step_anticlockwise+0x21c>
			 PORTC |= (1<<GRE)|(1<<YEL);
    119c:	98 b1       	in	r25, 0x08	; 8
    119e:	ae 01       	movw	r20, r28
    11a0:	00 90 ca 02 	lds	r0, 0x02CA
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <step_anticlockwise+0x1d6>
    11a6:	44 0f       	add	r20, r20
    11a8:	55 1f       	adc	r21, r21
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <step_anticlockwise+0x1d2>
    11ae:	9e 01       	movw	r18, r28
    11b0:	00 90 c9 02 	lds	r0, 0x02C9
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <step_anticlockwise+0x1e6>
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <step_anticlockwise+0x1e2>
    11be:	84 2f       	mov	r24, r20
    11c0:	82 2b       	or	r24, r18
    11c2:	89 2b       	or	r24, r25
    11c4:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
    11c6:	28 b1       	in	r18, 0x08	; 8
    11c8:	ae 01       	movw	r20, r28
    11ca:	00 90 cc 02 	lds	r0, 0x02CC
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <step_anticlockwise+0x200>
    11d0:	44 0f       	add	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <step_anticlockwise+0x1fc>
    11d8:	ce 01       	movw	r24, r28
    11da:	00 90 cb 02 	lds	r0, 0x02CB
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <step_anticlockwise+0x210>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <step_anticlockwise+0x20c>
    11e8:	84 2b       	or	r24, r20
    11ea:	80 95       	com	r24
    11ec:	82 23       	and	r24, r18
    11ee:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt1_ticks();
		 while((current_time + time_on) > get_tcnt1_ticks()){
    11f0:	0e 94 81 09 	call	0x1302	; 0x1302 <get_tcnt1_ticks>
    11f4:	6c 15       	cp	r22, r12
    11f6:	7d 05       	cpc	r23, r13
    11f8:	8e 05       	cpc	r24, r14
    11fa:	9f 05       	cpc	r25, r15
    11fc:	78 f2       	brcs	.-98     	; 0x119c <step_anticlockwise+0x1c8>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 phase = 0;
    11fe:	10 92 c8 02 	sts	0x02C8, r1
	 }
	 decrement_step();
    1202:	0e 94 b6 06 	call	0xd6c	; 0xd6c <decrement_step>
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	08 95       	ret

00001214 <step>:
	//if ((steps > info_ptr->maxStep) || (steps < 0)){
		///*	dont move	*/
		//return;
	//}
	
	int8_t speed = info_ptr->stepSpeed;
    1214:	fc 01       	movw	r30, r24
    1216:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t time_on;
	if (speed >= 0){
    1218:	88 23       	and	r24, r24
    121a:	44 f1       	brlt	.+80     	; 0x126c <step+0x58>
			if (speed < 10){
    121c:	8a 30       	cpi	r24, 0x0A	; 10
    121e:	94 f0       	brlt	.+36     	; 0x1244 <step+0x30>
				time_on = 100;
			} else if (speed < 20) {
    1220:	84 31       	cpi	r24, 0x14	; 20
    1222:	94 f0       	brlt	.+36     	; 0x1248 <step+0x34>
				time_on = 90;
			} else if (speed < 30) {
    1224:	8e 31       	cpi	r24, 0x1E	; 30
    1226:	94 f0       	brlt	.+36     	; 0x124c <step+0x38>
				time_on = 80;
			} else if (speed < 40) {
    1228:	88 32       	cpi	r24, 0x28	; 40
    122a:	94 f0       	brlt	.+36     	; 0x1250 <step+0x3c>
				time_on = 70;
			} else if (speed < 50){
    122c:	82 33       	cpi	r24, 0x32	; 50
    122e:	94 f0       	brlt	.+36     	; 0x1254 <step+0x40>
				time_on = 60;
			} else if (speed < 60) {
    1230:	8c 33       	cpi	r24, 0x3C	; 60
    1232:	94 f0       	brlt	.+36     	; 0x1258 <step+0x44>
				time_on = 50;
			} else if (speed < 70){
    1234:	86 34       	cpi	r24, 0x46	; 70
    1236:	94 f0       	brlt	.+36     	; 0x125c <step+0x48>
				time_on = 40;
			} else if (speed < 80) {
    1238:	80 35       	cpi	r24, 0x50	; 80
    123a:	94 f0       	brlt	.+36     	; 0x1260 <step+0x4c>
				time_on = 30;
			} else if (speed < 90){
    123c:	8a 35       	cpi	r24, 0x5A	; 90
    123e:	94 f0       	brlt	.+36     	; 0x1264 <step+0x50>
				time_on = 20;
			} else {
				time_on = 5;
    1240:	85 e0       	ldi	r24, 0x05	; 5
    1242:	11 c0       	rjmp	.+34     	; 0x1266 <step+0x52>
	
	int8_t speed = info_ptr->stepSpeed;
	uint8_t time_on;
	if (speed >= 0){
			if (speed < 10){
				time_on = 100;
    1244:	84 e6       	ldi	r24, 0x64	; 100
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <step+0x52>
			} else if (speed < 20) {
				time_on = 90;
    1248:	8a e5       	ldi	r24, 0x5A	; 90
    124a:	0d c0       	rjmp	.+26     	; 0x1266 <step+0x52>
			} else if (speed < 30) {
				time_on = 80;
    124c:	80 e5       	ldi	r24, 0x50	; 80
    124e:	0b c0       	rjmp	.+22     	; 0x1266 <step+0x52>
			} else if (speed < 40) {
				time_on = 70;
    1250:	86 e4       	ldi	r24, 0x46	; 70
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <step+0x52>
			} else if (speed < 50){
				time_on = 60;
    1254:	8c e3       	ldi	r24, 0x3C	; 60
    1256:	07 c0       	rjmp	.+14     	; 0x1266 <step+0x52>
			} else if (speed < 60) {
				time_on = 50;
    1258:	82 e3       	ldi	r24, 0x32	; 50
    125a:	05 c0       	rjmp	.+10     	; 0x1266 <step+0x52>
			} else if (speed < 70){
				time_on = 40;
    125c:	88 e2       	ldi	r24, 0x28	; 40
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <step+0x52>
			} else if (speed < 80) {
				time_on = 30;
    1260:	8e e1       	ldi	r24, 0x1E	; 30
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <step+0x52>
			} else if (speed < 90){
				time_on = 20;
    1264:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 5;
			}
			step_clockwise(time_on);
    1266:	0e 94 ca 06 	call	0xd94	; 0xd94 <step_clockwise>
    126a:	08 95       	ret
	} else {
			if (speed > -10){
    126c:	87 3f       	cpi	r24, 0xF7	; 247
    126e:	94 f4       	brge	.+36     	; 0x1294 <step+0x80>
				time_on = 100;
			} else if (speed > -20) {
    1270:	8d 3e       	cpi	r24, 0xED	; 237
    1272:	94 f4       	brge	.+36     	; 0x1298 <step+0x84>
				time_on = 90;
			} else if (speed > -30) {
    1274:	83 3e       	cpi	r24, 0xE3	; 227
    1276:	94 f4       	brge	.+36     	; 0x129c <step+0x88>
				time_on = 80;
			} else if (speed > -40) {
    1278:	89 3d       	cpi	r24, 0xD9	; 217
    127a:	94 f4       	brge	.+36     	; 0x12a0 <step+0x8c>
				time_on = 70;
			} else if (speed > -50){
    127c:	8f 3c       	cpi	r24, 0xCF	; 207
    127e:	94 f4       	brge	.+36     	; 0x12a4 <step+0x90>
				time_on = 60;
			} else if (speed > -60) {
    1280:	85 3c       	cpi	r24, 0xC5	; 197
    1282:	94 f4       	brge	.+36     	; 0x12a8 <step+0x94>
				time_on = 50;
			} else if (speed > -70){
    1284:	8b 3b       	cpi	r24, 0xBB	; 187
    1286:	94 f4       	brge	.+36     	; 0x12ac <step+0x98>
				time_on = 40;
			} else if (speed > -80) {
    1288:	81 3b       	cpi	r24, 0xB1	; 177
    128a:	94 f4       	brge	.+36     	; 0x12b0 <step+0x9c>
				time_on = 30;
			} else if (speed > -90){
    128c:	87 3a       	cpi	r24, 0xA7	; 167
    128e:	94 f4       	brge	.+36     	; 0x12b4 <step+0xa0>
				time_on = 20;
			} else {
				time_on = 5;
    1290:	85 e0       	ldi	r24, 0x05	; 5
    1292:	11 c0       	rjmp	.+34     	; 0x12b6 <step+0xa2>
				time_on = 5;
			}
			step_clockwise(time_on);
	} else {
			if (speed > -10){
				time_on = 100;
    1294:	84 e6       	ldi	r24, 0x64	; 100
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <step+0xa2>
			} else if (speed > -20) {
				time_on = 90;
    1298:	8a e5       	ldi	r24, 0x5A	; 90
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <step+0xa2>
			} else if (speed > -30) {
				time_on = 80;
    129c:	80 e5       	ldi	r24, 0x50	; 80
    129e:	0b c0       	rjmp	.+22     	; 0x12b6 <step+0xa2>
			} else if (speed > -40) {
				time_on = 70;
    12a0:	86 e4       	ldi	r24, 0x46	; 70
    12a2:	09 c0       	rjmp	.+18     	; 0x12b6 <step+0xa2>
			} else if (speed > -50){
				time_on = 60;
    12a4:	8c e3       	ldi	r24, 0x3C	; 60
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <step+0xa2>
			} else if (speed > -60) {
				time_on = 50;
    12a8:	82 e3       	ldi	r24, 0x32	; 50
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <step+0xa2>
			} else if (speed > -70){
				time_on = 40;
    12ac:	88 e2       	ldi	r24, 0x28	; 40
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <step+0xa2>
			} else if (speed > -80) {
				time_on = 30;
    12b0:	8e e1       	ldi	r24, 0x1E	; 30
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <step+0xa2>
			} else if (speed > -90){
				time_on = 20;
    12b4:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 5;
			}
			step_anticlockwise(time_on);
    12b6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <step_anticlockwise>
    12ba:	08 95       	ret

000012bc <init_tcnt1>:

 void init_tcnt1(void){
	 /* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	 
	 //set button to be not pushed
	 Button_on = 0;
    12bc:	10 92 ad 01 	sts	0x01AD, r1
	 
	 // set global counter
	 tcnt1_ticks = 0L;
    12c0:	10 92 ae 01 	sts	0x01AE, r1
    12c4:	10 92 af 01 	sts	0x01AF, r1
    12c8:	10 92 b0 01 	sts	0x01B0, r1
    12cc:	10 92 b1 01 	sts	0x01B1, r1
	 
	 // set timer / counter
	 TCNT1 = 0;
    12d0:	10 92 85 00 	sts	0x0085, r1
    12d4:	10 92 84 00 	sts	0x0084, r1
	 
	 // set output compare resgister; value to execute ISR
	 OCR1A = 124; // between 1 and 255
    12d8:	8c e7       	ldi	r24, 0x7C	; 124
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	90 93 89 00 	sts	0x0089, r25
    12e0:	80 93 88 00 	sts	0x0088, r24
	 
	 // timer/counter control register A - set to clear when TCNT0 matches OCR0A
	 TCCR1A = (1<<WGM11);
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	80 93 80 00 	sts	0x0080, r24
	 
	 // set the timer to update at a fraction of a clock cycle
	 TCCR1B = (1<<CS11)|(1<<CS10);	// set to f(clk) / 64
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	80 93 81 00 	sts	0x0081, r24
	 
	 // timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK1 |= (1<<OCIE1A);
    12f0:	ef e6       	ldi	r30, 0x6F	; 111
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	82 60       	ori	r24, 0x02	; 2
    12f8:	80 83       	st	Z, r24
	 
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR1 &= (1<<OCF1A);
    12fa:	86 b3       	in	r24, 0x16	; 22
    12fc:	82 70       	andi	r24, 0x02	; 2
    12fe:	86 bb       	out	0x16, r24	; 22
    1300:	08 95       	ret

00001302 <get_tcnt1_ticks>:


 uint32_t get_tcnt1_ticks(void) {
	 /* internal reference clock, times how long the system has been on for	*/

	 uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
    1302:	2f b7       	in	r18, 0x3f	; 63
	 cli();
    1304:	f8 94       	cli
	 uint32_t return_value = tcnt1_ticks;
    1306:	60 91 ae 01 	lds	r22, 0x01AE
    130a:	70 91 af 01 	lds	r23, 0x01AF
    130e:	80 91 b0 01 	lds	r24, 0x01B0
    1312:	90 91 b1 01 	lds	r25, 0x01B1
	 if(interrupts_on) {
    1316:	22 23       	and	r18, r18
    1318:	0c f4       	brge	.+2      	; 0x131c <get_tcnt1_ticks+0x1a>
		 sei();
    131a:	78 94       	sei
	 }
	 return return_value;
 }
    131c:	08 95       	ret

0000131e <__vector_13>:



 ISR(TIMER1_COMPA_vect) {
    131e:	1f 92       	push	r1
    1320:	0f 92       	push	r0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 
	 tcnt1_ticks++;
    1330:	80 91 ae 01 	lds	r24, 0x01AE
    1334:	90 91 af 01 	lds	r25, 0x01AF
    1338:	a0 91 b0 01 	lds	r26, 0x01B0
    133c:	b0 91 b1 01 	lds	r27, 0x01B1
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	a1 1d       	adc	r26, r1
    1344:	b1 1d       	adc	r27, r1
    1346:	80 93 ae 01 	sts	0x01AE, r24
    134a:	90 93 af 01 	sts	0x01AF, r25
    134e:	a0 93 b0 01 	sts	0x01B0, r26
    1352:	b0 93 b1 01 	sts	0x01B1, r27

    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <winch_off>:
#define RED PORTC5
#define BLACK PORTC2

void winch_off(void){
		/*	turn the motor off	*/
		PORTC &= ~(1<<RED);
    1368:	45 98       	cbi	0x08, 5	; 8
		PORTC &= ~(1<<BLACK);
    136a:	42 98       	cbi	0x08, 2	; 8
    136c:	08 95       	ret

0000136e <move_worm>:

void move_worm(uint8_t percent, int8_t direction){
	/*	effective pwm to control DC motor for the claw */
	
	uint8_t duty = 20;
	if (direction){
    136e:	66 23       	and	r22, r22
    1370:	91 f0       	breq	.+36     	; 0x1396 <move_worm+0x28>
			// forward
			PORTC |= (1<<RED);
    1372:	45 9a       	sbi	0x08, 5	; 8
			PORTC &= ~(1<<BLACK);
    1374:	42 98       	cbi	0x08, 2	; 8
			custom_delay((20*percent)/100);
    1376:	24 e1       	ldi	r18, 0x14	; 20
    1378:	82 9f       	mul	r24, r18
    137a:	c0 01       	movw	r24, r0
    137c:	11 24       	eor	r1, r1
    137e:	64 e6       	ldi	r22, 0x64	; 100
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__divmodhi4>
    1386:	07 2e       	mov	r0, r23
    1388:	00 0c       	add	r0, r0
    138a:	88 0b       	sbc	r24, r24
    138c:	99 0b       	sbc	r25, r25
    138e:	0e 94 66 02 	call	0x4cc	; 0x4cc <custom_delay>
			PORTC &= ~(1<<RED);
    1392:	45 98       	cbi	0x08, 5	; 8
    1394:	08 95       	ret
	} else {
			// backwards
			PORTC |= (1<<BLACK);
    1396:	42 9a       	sbi	0x08, 2	; 8
			PORTC &= ~(1<<RED);
    1398:	45 98       	cbi	0x08, 5	; 8
			custom_delay((20*percent)/100);
    139a:	24 e1       	ldi	r18, 0x14	; 20
    139c:	82 9f       	mul	r24, r18
    139e:	c0 01       	movw	r24, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	64 e6       	ldi	r22, 0x64	; 100
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__divmodhi4>
    13aa:	07 2e       	mov	r0, r23
    13ac:	00 0c       	add	r0, r0
    13ae:	88 0b       	sbc	r24, r24
    13b0:	99 0b       	sbc	r25, r25
    13b2:	0e 94 66 02 	call	0x4cc	; 0x4cc <custom_delay>
			PORTC &= ~(1<<RED);
    13b6:	45 98       	cbi	0x08, 5	; 8
    13b8:	08 95       	ret

000013ba <__divmodhi4>:
    13ba:	97 fb       	bst	r25, 7
    13bc:	07 2e       	mov	r0, r23
    13be:	16 f4       	brtc	.+4      	; 0x13c4 <__divmodhi4+0xa>
    13c0:	00 94       	com	r0
    13c2:	07 d0       	rcall	.+14     	; 0x13d2 <__divmodhi4_neg1>
    13c4:	77 fd       	sbrc	r23, 7
    13c6:	09 d0       	rcall	.+18     	; 0x13da <__divmodhi4_neg2>
    13c8:	0e 94 16 0a 	call	0x142c	; 0x142c <__udivmodhi4>
    13cc:	07 fc       	sbrc	r0, 7
    13ce:	05 d0       	rcall	.+10     	; 0x13da <__divmodhi4_neg2>
    13d0:	3e f4       	brtc	.+14     	; 0x13e0 <__divmodhi4_exit>

000013d2 <__divmodhi4_neg1>:
    13d2:	90 95       	com	r25
    13d4:	81 95       	neg	r24
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	08 95       	ret

000013da <__divmodhi4_neg2>:
    13da:	70 95       	com	r23
    13dc:	61 95       	neg	r22
    13de:	7f 4f       	sbci	r23, 0xFF	; 255

000013e0 <__divmodhi4_exit>:
    13e0:	08 95       	ret

000013e2 <__divmodsi4>:
    13e2:	05 2e       	mov	r0, r21
    13e4:	97 fb       	bst	r25, 7
    13e6:	1e f4       	brtc	.+6      	; 0x13ee <__divmodsi4+0xc>
    13e8:	00 94       	com	r0
    13ea:	0e 94 08 0a 	call	0x1410	; 0x1410 <__negsi2>
    13ee:	57 fd       	sbrc	r21, 7
    13f0:	07 d0       	rcall	.+14     	; 0x1400 <__divmodsi4_neg2>
    13f2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__udivmodsi4>
    13f6:	07 fc       	sbrc	r0, 7
    13f8:	03 d0       	rcall	.+6      	; 0x1400 <__divmodsi4_neg2>
    13fa:	4e f4       	brtc	.+18     	; 0x140e <__divmodsi4_exit>
    13fc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__negsi2>

00001400 <__divmodsi4_neg2>:
    1400:	50 95       	com	r21
    1402:	40 95       	com	r20
    1404:	30 95       	com	r19
    1406:	21 95       	neg	r18
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	4f 4f       	sbci	r20, 0xFF	; 255
    140c:	5f 4f       	sbci	r21, 0xFF	; 255

0000140e <__divmodsi4_exit>:
    140e:	08 95       	ret

00001410 <__negsi2>:
    1410:	90 95       	com	r25
    1412:	80 95       	com	r24
    1414:	70 95       	com	r23
    1416:	61 95       	neg	r22
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	08 95       	ret

00001420 <__tablejump2__>:
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31
    1424:	05 90       	lpm	r0, Z+
    1426:	f4 91       	lpm	r31, Z
    1428:	e0 2d       	mov	r30, r0
    142a:	09 94       	ijmp

0000142c <__udivmodhi4>:
    142c:	aa 1b       	sub	r26, r26
    142e:	bb 1b       	sub	r27, r27
    1430:	51 e1       	ldi	r21, 0x11	; 17
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <__udivmodhi4_ep>

00001434 <__udivmodhi4_loop>:
    1434:	aa 1f       	adc	r26, r26
    1436:	bb 1f       	adc	r27, r27
    1438:	a6 17       	cp	r26, r22
    143a:	b7 07       	cpc	r27, r23
    143c:	10 f0       	brcs	.+4      	; 0x1442 <__udivmodhi4_ep>
    143e:	a6 1b       	sub	r26, r22
    1440:	b7 0b       	sbc	r27, r23

00001442 <__udivmodhi4_ep>:
    1442:	88 1f       	adc	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	5a 95       	dec	r21
    1448:	a9 f7       	brne	.-22     	; 0x1434 <__udivmodhi4_loop>
    144a:	80 95       	com	r24
    144c:	90 95       	com	r25
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	08 95       	ret

00001454 <__udivmodsi4>:
    1454:	a1 e2       	ldi	r26, 0x21	; 33
    1456:	1a 2e       	mov	r1, r26
    1458:	aa 1b       	sub	r26, r26
    145a:	bb 1b       	sub	r27, r27
    145c:	fd 01       	movw	r30, r26
    145e:	0d c0       	rjmp	.+26     	; 0x147a <__udivmodsi4_ep>

00001460 <__udivmodsi4_loop>:
    1460:	aa 1f       	adc	r26, r26
    1462:	bb 1f       	adc	r27, r27
    1464:	ee 1f       	adc	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	a2 17       	cp	r26, r18
    146a:	b3 07       	cpc	r27, r19
    146c:	e4 07       	cpc	r30, r20
    146e:	f5 07       	cpc	r31, r21
    1470:	20 f0       	brcs	.+8      	; 0x147a <__udivmodsi4_ep>
    1472:	a2 1b       	sub	r26, r18
    1474:	b3 0b       	sbc	r27, r19
    1476:	e4 0b       	sbc	r30, r20
    1478:	f5 0b       	sbc	r31, r21

0000147a <__udivmodsi4_ep>:
    147a:	66 1f       	adc	r22, r22
    147c:	77 1f       	adc	r23, r23
    147e:	88 1f       	adc	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	1a 94       	dec	r1
    1484:	69 f7       	brne	.-38     	; 0x1460 <__udivmodsi4_loop>
    1486:	60 95       	com	r22
    1488:	70 95       	com	r23
    148a:	80 95       	com	r24
    148c:	90 95       	com	r25
    148e:	9b 01       	movw	r18, r22
    1490:	ac 01       	movw	r20, r24
    1492:	bd 01       	movw	r22, r26
    1494:	cf 01       	movw	r24, r30
    1496:	08 95       	ret

00001498 <malloc>:
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	91 05       	cpc	r25, r1
    14a0:	10 f4       	brcc	.+4      	; 0x14a6 <malloc+0xe>
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	e0 91 cf 02 	lds	r30, 0x02CF
    14aa:	f0 91 d0 02 	lds	r31, 0x02D0
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	c0 e0       	ldi	r28, 0x00	; 0
    14b4:	d0 e0       	ldi	r29, 0x00	; 0
    14b6:	30 97       	sbiw	r30, 0x00	; 0
    14b8:	11 f1       	breq	.+68     	; 0x14fe <malloc+0x66>
    14ba:	40 81       	ld	r20, Z
    14bc:	51 81       	ldd	r21, Z+1	; 0x01
    14be:	48 17       	cp	r20, r24
    14c0:	59 07       	cpc	r21, r25
    14c2:	c0 f0       	brcs	.+48     	; 0x14f4 <malloc+0x5c>
    14c4:	48 17       	cp	r20, r24
    14c6:	59 07       	cpc	r21, r25
    14c8:	61 f4       	brne	.+24     	; 0x14e2 <malloc+0x4a>
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	20 97       	sbiw	r28, 0x00	; 0
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <malloc+0x40>
    14d2:	9b 83       	std	Y+3, r25	; 0x03
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	2b c0       	rjmp	.+86     	; 0x152e <malloc+0x96>
    14d8:	90 93 d0 02 	sts	0x02D0, r25
    14dc:	80 93 cf 02 	sts	0x02CF, r24
    14e0:	26 c0       	rjmp	.+76     	; 0x152e <malloc+0x96>
    14e2:	21 15       	cp	r18, r1
    14e4:	31 05       	cpc	r19, r1
    14e6:	19 f0       	breq	.+6      	; 0x14ee <malloc+0x56>
    14e8:	42 17       	cp	r20, r18
    14ea:	53 07       	cpc	r21, r19
    14ec:	18 f4       	brcc	.+6      	; 0x14f4 <malloc+0x5c>
    14ee:	9a 01       	movw	r18, r20
    14f0:	be 01       	movw	r22, r28
    14f2:	df 01       	movw	r26, r30
    14f4:	ef 01       	movw	r28, r30
    14f6:	02 80       	ldd	r0, Z+2	; 0x02
    14f8:	f3 81       	ldd	r31, Z+3	; 0x03
    14fa:	e0 2d       	mov	r30, r0
    14fc:	dc cf       	rjmp	.-72     	; 0x14b6 <malloc+0x1e>
    14fe:	21 15       	cp	r18, r1
    1500:	31 05       	cpc	r19, r1
    1502:	09 f1       	breq	.+66     	; 0x1546 <malloc+0xae>
    1504:	28 1b       	sub	r18, r24
    1506:	39 0b       	sbc	r19, r25
    1508:	24 30       	cpi	r18, 0x04	; 4
    150a:	31 05       	cpc	r19, r1
    150c:	90 f4       	brcc	.+36     	; 0x1532 <malloc+0x9a>
    150e:	12 96       	adiw	r26, 0x02	; 2
    1510:	8d 91       	ld	r24, X+
    1512:	9c 91       	ld	r25, X
    1514:	13 97       	sbiw	r26, 0x03	; 3
    1516:	61 15       	cp	r22, r1
    1518:	71 05       	cpc	r23, r1
    151a:	21 f0       	breq	.+8      	; 0x1524 <malloc+0x8c>
    151c:	fb 01       	movw	r30, r22
    151e:	93 83       	std	Z+3, r25	; 0x03
    1520:	82 83       	std	Z+2, r24	; 0x02
    1522:	04 c0       	rjmp	.+8      	; 0x152c <malloc+0x94>
    1524:	90 93 d0 02 	sts	0x02D0, r25
    1528:	80 93 cf 02 	sts	0x02CF, r24
    152c:	fd 01       	movw	r30, r26
    152e:	32 96       	adiw	r30, 0x02	; 2
    1530:	44 c0       	rjmp	.+136    	; 0x15ba <malloc+0x122>
    1532:	fd 01       	movw	r30, r26
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	81 93       	st	Z+, r24
    153a:	91 93       	st	Z+, r25
    153c:	22 50       	subi	r18, 0x02	; 2
    153e:	31 09       	sbc	r19, r1
    1540:	2d 93       	st	X+, r18
    1542:	3c 93       	st	X, r19
    1544:	3a c0       	rjmp	.+116    	; 0x15ba <malloc+0x122>
    1546:	20 91 cd 02 	lds	r18, 0x02CD
    154a:	30 91 ce 02 	lds	r19, 0x02CE
    154e:	23 2b       	or	r18, r19
    1550:	41 f4       	brne	.+16     	; 0x1562 <malloc+0xca>
    1552:	20 91 02 01 	lds	r18, 0x0102
    1556:	30 91 03 01 	lds	r19, 0x0103
    155a:	30 93 ce 02 	sts	0x02CE, r19
    155e:	20 93 cd 02 	sts	0x02CD, r18
    1562:	20 91 00 01 	lds	r18, 0x0100
    1566:	30 91 01 01 	lds	r19, 0x0101
    156a:	21 15       	cp	r18, r1
    156c:	31 05       	cpc	r19, r1
    156e:	41 f4       	brne	.+16     	; 0x1580 <malloc+0xe8>
    1570:	2d b7       	in	r18, 0x3d	; 61
    1572:	3e b7       	in	r19, 0x3e	; 62
    1574:	40 91 04 01 	lds	r20, 0x0104
    1578:	50 91 05 01 	lds	r21, 0x0105
    157c:	24 1b       	sub	r18, r20
    157e:	35 0b       	sbc	r19, r21
    1580:	e0 91 cd 02 	lds	r30, 0x02CD
    1584:	f0 91 ce 02 	lds	r31, 0x02CE
    1588:	e2 17       	cp	r30, r18
    158a:	f3 07       	cpc	r31, r19
    158c:	a0 f4       	brcc	.+40     	; 0x15b6 <malloc+0x11e>
    158e:	2e 1b       	sub	r18, r30
    1590:	3f 0b       	sbc	r19, r31
    1592:	28 17       	cp	r18, r24
    1594:	39 07       	cpc	r19, r25
    1596:	78 f0       	brcs	.+30     	; 0x15b6 <malloc+0x11e>
    1598:	ac 01       	movw	r20, r24
    159a:	4e 5f       	subi	r20, 0xFE	; 254
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	24 17       	cp	r18, r20
    15a0:	35 07       	cpc	r19, r21
    15a2:	48 f0       	brcs	.+18     	; 0x15b6 <malloc+0x11e>
    15a4:	4e 0f       	add	r20, r30
    15a6:	5f 1f       	adc	r21, r31
    15a8:	50 93 ce 02 	sts	0x02CE, r21
    15ac:	40 93 cd 02 	sts	0x02CD, r20
    15b0:	81 93       	st	Z+, r24
    15b2:	91 93       	st	Z+, r25
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <malloc+0x122>
    15b6:	e0 e0       	ldi	r30, 0x00	; 0
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	cf 01       	movw	r24, r30
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <free>:
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <free+0xe>
    15ce:	8c c0       	rjmp	.+280    	; 0x16e8 <free+0x126>
    15d0:	fc 01       	movw	r30, r24
    15d2:	32 97       	sbiw	r30, 0x02	; 2
    15d4:	13 82       	std	Z+3, r1	; 0x03
    15d6:	12 82       	std	Z+2, r1	; 0x02
    15d8:	00 91 cf 02 	lds	r16, 0x02CF
    15dc:	10 91 d0 02 	lds	r17, 0x02D0
    15e0:	01 15       	cp	r16, r1
    15e2:	11 05       	cpc	r17, r1
    15e4:	81 f4       	brne	.+32     	; 0x1606 <free+0x44>
    15e6:	20 81       	ld	r18, Z
    15e8:	31 81       	ldd	r19, Z+1	; 0x01
    15ea:	82 0f       	add	r24, r18
    15ec:	93 1f       	adc	r25, r19
    15ee:	20 91 cd 02 	lds	r18, 0x02CD
    15f2:	30 91 ce 02 	lds	r19, 0x02CE
    15f6:	28 17       	cp	r18, r24
    15f8:	39 07       	cpc	r19, r25
    15fa:	79 f5       	brne	.+94     	; 0x165a <free+0x98>
    15fc:	f0 93 ce 02 	sts	0x02CE, r31
    1600:	e0 93 cd 02 	sts	0x02CD, r30
    1604:	71 c0       	rjmp	.+226    	; 0x16e8 <free+0x126>
    1606:	d8 01       	movw	r26, r16
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	ae 17       	cp	r26, r30
    160e:	bf 07       	cpc	r27, r31
    1610:	50 f4       	brcc	.+20     	; 0x1626 <free+0x64>
    1612:	12 96       	adiw	r26, 0x02	; 2
    1614:	2d 91       	ld	r18, X+
    1616:	3c 91       	ld	r19, X
    1618:	13 97       	sbiw	r26, 0x03	; 3
    161a:	ad 01       	movw	r20, r26
    161c:	21 15       	cp	r18, r1
    161e:	31 05       	cpc	r19, r1
    1620:	09 f1       	breq	.+66     	; 0x1664 <free+0xa2>
    1622:	d9 01       	movw	r26, r18
    1624:	f3 cf       	rjmp	.-26     	; 0x160c <free+0x4a>
    1626:	9d 01       	movw	r18, r26
    1628:	da 01       	movw	r26, r20
    162a:	33 83       	std	Z+3, r19	; 0x03
    162c:	22 83       	std	Z+2, r18	; 0x02
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	86 0f       	add	r24, r22
    1634:	97 1f       	adc	r25, r23
    1636:	82 17       	cp	r24, r18
    1638:	93 07       	cpc	r25, r19
    163a:	69 f4       	brne	.+26     	; 0x1656 <free+0x94>
    163c:	ec 01       	movw	r28, r24
    163e:	28 81       	ld	r18, Y
    1640:	39 81       	ldd	r19, Y+1	; 0x01
    1642:	26 0f       	add	r18, r22
    1644:	37 1f       	adc	r19, r23
    1646:	2e 5f       	subi	r18, 0xFE	; 254
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	31 83       	std	Z+1, r19	; 0x01
    164c:	20 83       	st	Z, r18
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	93 83       	std	Z+3, r25	; 0x03
    1654:	82 83       	std	Z+2, r24	; 0x02
    1656:	45 2b       	or	r20, r21
    1658:	29 f4       	brne	.+10     	; 0x1664 <free+0xa2>
    165a:	f0 93 d0 02 	sts	0x02D0, r31
    165e:	e0 93 cf 02 	sts	0x02CF, r30
    1662:	42 c0       	rjmp	.+132    	; 0x16e8 <free+0x126>
    1664:	13 96       	adiw	r26, 0x03	; 3
    1666:	fc 93       	st	X, r31
    1668:	ee 93       	st	-X, r30
    166a:	12 97       	sbiw	r26, 0x02	; 2
    166c:	ed 01       	movw	r28, r26
    166e:	49 91       	ld	r20, Y+
    1670:	59 91       	ld	r21, Y+
    1672:	9e 01       	movw	r18, r28
    1674:	24 0f       	add	r18, r20
    1676:	35 1f       	adc	r19, r21
    1678:	e2 17       	cp	r30, r18
    167a:	f3 07       	cpc	r31, r19
    167c:	71 f4       	brne	.+28     	; 0x169a <free+0xd8>
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	84 0f       	add	r24, r20
    1684:	95 1f       	adc	r25, r21
    1686:	02 96       	adiw	r24, 0x02	; 2
    1688:	11 96       	adiw	r26, 0x01	; 1
    168a:	9c 93       	st	X, r25
    168c:	8e 93       	st	-X, r24
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	13 96       	adiw	r26, 0x03	; 3
    1694:	9c 93       	st	X, r25
    1696:	8e 93       	st	-X, r24
    1698:	12 97       	sbiw	r26, 0x02	; 2
    169a:	e0 e0       	ldi	r30, 0x00	; 0
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	d8 01       	movw	r26, r16
    16a0:	12 96       	adiw	r26, 0x02	; 2
    16a2:	8d 91       	ld	r24, X+
    16a4:	9c 91       	ld	r25, X
    16a6:	13 97       	sbiw	r26, 0x03	; 3
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <free+0xf0>
    16ac:	f8 01       	movw	r30, r16
    16ae:	8c 01       	movw	r16, r24
    16b0:	f6 cf       	rjmp	.-20     	; 0x169e <free+0xdc>
    16b2:	8d 91       	ld	r24, X+
    16b4:	9c 91       	ld	r25, X
    16b6:	98 01       	movw	r18, r16
    16b8:	2e 5f       	subi	r18, 0xFE	; 254
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	82 0f       	add	r24, r18
    16be:	93 1f       	adc	r25, r19
    16c0:	20 91 cd 02 	lds	r18, 0x02CD
    16c4:	30 91 ce 02 	lds	r19, 0x02CE
    16c8:	28 17       	cp	r18, r24
    16ca:	39 07       	cpc	r19, r25
    16cc:	69 f4       	brne	.+26     	; 0x16e8 <free+0x126>
    16ce:	30 97       	sbiw	r30, 0x00	; 0
    16d0:	29 f4       	brne	.+10     	; 0x16dc <free+0x11a>
    16d2:	10 92 d0 02 	sts	0x02D0, r1
    16d6:	10 92 cf 02 	sts	0x02CF, r1
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <free+0x11e>
    16dc:	13 82       	std	Z+3, r1	; 0x03
    16de:	12 82       	std	Z+2, r1	; 0x02
    16e0:	10 93 ce 02 	sts	0x02CE, r17
    16e4:	00 93 cd 02 	sts	0x02CD, r16
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	08 95       	ret

000016f2 <do_rand>:
    16f2:	8f 92       	push	r8
    16f4:	9f 92       	push	r9
    16f6:	af 92       	push	r10
    16f8:	bf 92       	push	r11
    16fa:	cf 92       	push	r12
    16fc:	df 92       	push	r13
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	ec 01       	movw	r28, r24
    1708:	68 81       	ld	r22, Y
    170a:	79 81       	ldd	r23, Y+1	; 0x01
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	61 15       	cp	r22, r1
    1712:	71 05       	cpc	r23, r1
    1714:	81 05       	cpc	r24, r1
    1716:	91 05       	cpc	r25, r1
    1718:	21 f4       	brne	.+8      	; 0x1722 <do_rand+0x30>
    171a:	64 e2       	ldi	r22, 0x24	; 36
    171c:	79 ed       	ldi	r23, 0xD9	; 217
    171e:	8b e5       	ldi	r24, 0x5B	; 91
    1720:	97 e0       	ldi	r25, 0x07	; 7
    1722:	2d e1       	ldi	r18, 0x1D	; 29
    1724:	33 ef       	ldi	r19, 0xF3	; 243
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__divmodsi4>
    172e:	49 01       	movw	r8, r18
    1730:	5a 01       	movw	r10, r20
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	a7 ea       	ldi	r26, 0xA7	; 167
    1738:	b1 e4       	ldi	r27, 0x41	; 65
    173a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__muluhisi3>
    173e:	6b 01       	movw	r12, r22
    1740:	7c 01       	movw	r14, r24
    1742:	ac ee       	ldi	r26, 0xEC	; 236
    1744:	b4 ef       	ldi	r27, 0xF4	; 244
    1746:	a5 01       	movw	r20, r10
    1748:	94 01       	movw	r18, r8
    174a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__mulohisi3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8c 0d       	add	r24, r12
    1754:	9d 1d       	adc	r25, r13
    1756:	ae 1d       	adc	r26, r14
    1758:	bf 1d       	adc	r27, r15
    175a:	b7 ff       	sbrs	r27, 7
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <do_rand+0x72>
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	a1 09       	sbc	r26, r1
    1762:	b0 48       	sbci	r27, 0x80	; 128
    1764:	88 83       	st	Y, r24
    1766:	99 83       	std	Y+1, r25	; 0x01
    1768:	aa 83       	std	Y+2, r26	; 0x02
    176a:	bb 83       	std	Y+3, r27	; 0x03
    176c:	9f 77       	andi	r25, 0x7F	; 127
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	08 95       	ret

00001784 <rand_r>:
    1784:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <do_rand>
    1788:	08 95       	ret

0000178a <rand>:
    178a:	86 e0       	ldi	r24, 0x06	; 6
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <do_rand>
    1792:	08 95       	ret

00001794 <srand>:
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	80 93 06 01 	sts	0x0106, r24
    179c:	90 93 07 01 	sts	0x0107, r25
    17a0:	a0 93 08 01 	sts	0x0108, r26
    17a4:	b0 93 09 01 	sts	0x0109, r27
    17a8:	08 95       	ret

000017aa <fgetc>:
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	ec 01       	movw	r28, r24
    17b0:	2b 81       	ldd	r18, Y+3	; 0x03
    17b2:	20 ff       	sbrs	r18, 0
    17b4:	33 c0       	rjmp	.+102    	; 0x181c <fgetc+0x72>
    17b6:	26 ff       	sbrs	r18, 6
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <fgetc+0x24>
    17ba:	2f 7b       	andi	r18, 0xBF	; 191
    17bc:	2b 83       	std	Y+3, r18	; 0x03
    17be:	8e 81       	ldd	r24, Y+6	; 0x06
    17c0:	9f 81       	ldd	r25, Y+7	; 0x07
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	9f 83       	std	Y+7, r25	; 0x07
    17c6:	8e 83       	std	Y+6, r24	; 0x06
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	29 c0       	rjmp	.+82     	; 0x1820 <fgetc+0x76>
    17ce:	22 ff       	sbrs	r18, 2
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <fgetc+0x46>
    17d2:	e8 81       	ld	r30, Y
    17d4:	f9 81       	ldd	r31, Y+1	; 0x01
    17d6:	80 81       	ld	r24, Z
    17d8:	08 2e       	mov	r0, r24
    17da:	00 0c       	add	r0, r0
    17dc:	99 0b       	sbc	r25, r25
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	19 f4       	brne	.+6      	; 0x17e8 <fgetc+0x3e>
    17e2:	20 62       	ori	r18, 0x20	; 32
    17e4:	2b 83       	std	Y+3, r18	; 0x03
    17e6:	1a c0       	rjmp	.+52     	; 0x181c <fgetc+0x72>
    17e8:	31 96       	adiw	r30, 0x01	; 1
    17ea:	f9 83       	std	Y+1, r31	; 0x01
    17ec:	e8 83       	st	Y, r30
    17ee:	0e c0       	rjmp	.+28     	; 0x180c <fgetc+0x62>
    17f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    17f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    17f4:	09 95       	icall
    17f6:	97 ff       	sbrs	r25, 7
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <fgetc+0x62>
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	11 f0       	breq	.+4      	; 0x1804 <fgetc+0x5a>
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <fgetc+0x5c>
    1804:	80 e1       	ldi	r24, 0x10	; 16
    1806:	82 2b       	or	r24, r18
    1808:	8b 83       	std	Y+3, r24	; 0x03
    180a:	08 c0       	rjmp	.+16     	; 0x181c <fgetc+0x72>
    180c:	2e 81       	ldd	r18, Y+6	; 0x06
    180e:	3f 81       	ldd	r19, Y+7	; 0x07
    1810:	2f 5f       	subi	r18, 0xFF	; 255
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	3f 83       	std	Y+7, r19	; 0x07
    1816:	2e 83       	std	Y+6, r18	; 0x06
    1818:	99 27       	eor	r25, r25
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <fgetc+0x76>
    181c:	8f ef       	ldi	r24, 0xFF	; 255
    181e:	9f ef       	ldi	r25, 0xFF	; 255
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <fputc>:
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	fb 01       	movw	r30, r22
    1830:	23 81       	ldd	r18, Z+3	; 0x03
    1832:	21 fd       	sbrc	r18, 1
    1834:	03 c0       	rjmp	.+6      	; 0x183c <fputc+0x16>
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	9f ef       	ldi	r25, 0xFF	; 255
    183a:	28 c0       	rjmp	.+80     	; 0x188c <fputc+0x66>
    183c:	22 ff       	sbrs	r18, 2
    183e:	16 c0       	rjmp	.+44     	; 0x186c <fputc+0x46>
    1840:	46 81       	ldd	r20, Z+6	; 0x06
    1842:	57 81       	ldd	r21, Z+7	; 0x07
    1844:	24 81       	ldd	r18, Z+4	; 0x04
    1846:	35 81       	ldd	r19, Z+5	; 0x05
    1848:	42 17       	cp	r20, r18
    184a:	53 07       	cpc	r21, r19
    184c:	44 f4       	brge	.+16     	; 0x185e <fputc+0x38>
    184e:	a0 81       	ld	r26, Z
    1850:	b1 81       	ldd	r27, Z+1	; 0x01
    1852:	9d 01       	movw	r18, r26
    1854:	2f 5f       	subi	r18, 0xFF	; 255
    1856:	3f 4f       	sbci	r19, 0xFF	; 255
    1858:	31 83       	std	Z+1, r19	; 0x01
    185a:	20 83       	st	Z, r18
    185c:	8c 93       	st	X, r24
    185e:	26 81       	ldd	r18, Z+6	; 0x06
    1860:	37 81       	ldd	r19, Z+7	; 0x07
    1862:	2f 5f       	subi	r18, 0xFF	; 255
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	37 83       	std	Z+7, r19	; 0x07
    1868:	26 83       	std	Z+6, r18	; 0x06
    186a:	10 c0       	rjmp	.+32     	; 0x188c <fputc+0x66>
    186c:	eb 01       	movw	r28, r22
    186e:	09 2f       	mov	r16, r25
    1870:	18 2f       	mov	r17, r24
    1872:	00 84       	ldd	r0, Z+8	; 0x08
    1874:	f1 85       	ldd	r31, Z+9	; 0x09
    1876:	e0 2d       	mov	r30, r0
    1878:	09 95       	icall
    187a:	89 2b       	or	r24, r25
    187c:	e1 f6       	brne	.-72     	; 0x1836 <fputc+0x10>
    187e:	8e 81       	ldd	r24, Y+6	; 0x06
    1880:	9f 81       	ldd	r25, Y+7	; 0x07
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	9f 83       	std	Y+7, r25	; 0x07
    1886:	8e 83       	std	Y+6, r24	; 0x06
    1888:	81 2f       	mov	r24, r17
    188a:	90 2f       	mov	r25, r16
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	08 95       	ret

00001896 <fputs>:
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	db 01       	movw	r26, r22
    18a4:	13 96       	adiw	r26, 0x03	; 3
    18a6:	2c 91       	ld	r18, X
    18a8:	21 ff       	sbrs	r18, 1
    18aa:	18 c0       	rjmp	.+48     	; 0x18dc <fputs+0x46>
    18ac:	8b 01       	movw	r16, r22
    18ae:	7c 01       	movw	r14, r24
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
    18b2:	c0 e0       	ldi	r28, 0x00	; 0
    18b4:	f7 01       	movw	r30, r14
    18b6:	81 91       	ld	r24, Z+
    18b8:	7f 01       	movw	r14, r30
    18ba:	88 23       	and	r24, r24
    18bc:	61 f0       	breq	.+24     	; 0x18d6 <fputs+0x40>
    18be:	d8 01       	movw	r26, r16
    18c0:	18 96       	adiw	r26, 0x08	; 8
    18c2:	ed 91       	ld	r30, X+
    18c4:	fc 91       	ld	r31, X
    18c6:	19 97       	sbiw	r26, 0x09	; 9
    18c8:	b8 01       	movw	r22, r16
    18ca:	09 95       	icall
    18cc:	89 2b       	or	r24, r25
    18ce:	91 f3       	breq	.-28     	; 0x18b4 <fputs+0x1e>
    18d0:	df ef       	ldi	r29, 0xFF	; 255
    18d2:	cf ef       	ldi	r28, 0xFF	; 255
    18d4:	ef cf       	rjmp	.-34     	; 0x18b4 <fputs+0x1e>
    18d6:	8d 2f       	mov	r24, r29
    18d8:	9c 2f       	mov	r25, r28
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <fputs+0x4a>
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
    18de:	9f ef       	ldi	r25, 0xFF	; 255
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	e6 e0       	ldi	r30, 0x06	; 6
    18e6:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__epilogue_restores__+0x18>

000018ea <fwrite>:
    18ea:	a0 e0       	ldi	r26, 0x00	; 0
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	eb e7       	ldi	r30, 0x7B	; 123
    18f0:	fc e0       	ldi	r31, 0x0C	; 12
    18f2:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__prologue_saves__+0xc>
    18f6:	5b 01       	movw	r10, r22
    18f8:	4a 01       	movw	r8, r20
    18fa:	79 01       	movw	r14, r18
    18fc:	d9 01       	movw	r26, r18
    18fe:	13 96       	adiw	r26, 0x03	; 3
    1900:	2c 91       	ld	r18, X
    1902:	21 ff       	sbrs	r18, 1
    1904:	1d c0       	rjmp	.+58     	; 0x1940 <fwrite+0x56>
    1906:	c0 e0       	ldi	r28, 0x00	; 0
    1908:	d0 e0       	ldi	r29, 0x00	; 0
    190a:	c8 15       	cp	r28, r8
    190c:	d9 05       	cpc	r29, r9
    190e:	d9 f0       	breq	.+54     	; 0x1946 <fwrite+0x5c>
    1910:	8c 01       	movw	r16, r24
    1912:	6c 01       	movw	r12, r24
    1914:	ca 0c       	add	r12, r10
    1916:	db 1c       	adc	r13, r11
    1918:	c8 01       	movw	r24, r16
    191a:	0c 15       	cp	r16, r12
    191c:	1d 05       	cpc	r17, r13
    191e:	71 f0       	breq	.+28     	; 0x193c <fwrite+0x52>
    1920:	0f 5f       	subi	r16, 0xFF	; 255
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	d7 01       	movw	r26, r14
    1926:	18 96       	adiw	r26, 0x08	; 8
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	19 97       	sbiw	r26, 0x09	; 9
    192e:	b7 01       	movw	r22, r14
    1930:	dc 01       	movw	r26, r24
    1932:	8c 91       	ld	r24, X
    1934:	09 95       	icall
    1936:	89 2b       	or	r24, r25
    1938:	79 f3       	breq	.-34     	; 0x1918 <fwrite+0x2e>
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <fwrite+0x5c>
    193c:	21 96       	adiw	r28, 0x01	; 1
    193e:	e5 cf       	rjmp	.-54     	; 0x190a <fwrite+0x20>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <fwrite+0x5e>
    1946:	ce 01       	movw	r24, r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	ec e0       	ldi	r30, 0x0C	; 12
    194e:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <__epilogue_restores__+0xc>

00001952 <sprintf>:
    1952:	ae e0       	ldi	r26, 0x0E	; 14
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef ea       	ldi	r30, 0xAF	; 175
    1958:	fc e0       	ldi	r31, 0x0C	; 12
    195a:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__prologue_saves__+0x1c>
    195e:	0d 89       	ldd	r16, Y+21	; 0x15
    1960:	1e 89       	ldd	r17, Y+22	; 0x16
    1962:	86 e0       	ldi	r24, 0x06	; 6
    1964:	8c 83       	std	Y+4, r24	; 0x04
    1966:	1a 83       	std	Y+2, r17	; 0x02
    1968:	09 83       	std	Y+1, r16	; 0x01
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	9f e7       	ldi	r25, 0x7F	; 127
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	ae 01       	movw	r20, r28
    1974:	47 5e       	subi	r20, 0xE7	; 231
    1976:	5f 4f       	sbci	r21, 0xFF	; 255
    1978:	6f 89       	ldd	r22, Y+23	; 0x17
    197a:	78 8d       	ldd	r23, Y+24	; 0x18
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	0e 94 cc 0c 	call	0x1998	; 0x1998 <vfprintf>
    1984:	2f 81       	ldd	r18, Y+7	; 0x07
    1986:	38 85       	ldd	r19, Y+8	; 0x08
    1988:	f8 01       	movw	r30, r16
    198a:	e2 0f       	add	r30, r18
    198c:	f3 1f       	adc	r31, r19
    198e:	10 82       	st	Z, r1
    1990:	2e 96       	adiw	r28, 0x0e	; 14
    1992:	e4 e0       	ldi	r30, 0x04	; 4
    1994:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <__epilogue_restores__+0x1c>

00001998 <vfprintf>:
    1998:	ac e0       	ldi	r26, 0x0C	; 12
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e2 ed       	ldi	r30, 0xD2	; 210
    199e:	fc e0       	ldi	r31, 0x0C	; 12
    19a0:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__prologue_saves__>
    19a4:	7c 01       	movw	r14, r24
    19a6:	6b 01       	movw	r12, r22
    19a8:	8a 01       	movw	r16, r20
    19aa:	fc 01       	movw	r30, r24
    19ac:	17 82       	std	Z+7, r1	; 0x07
    19ae:	16 82       	std	Z+6, r1	; 0x06
    19b0:	83 81       	ldd	r24, Z+3	; 0x03
    19b2:	81 ff       	sbrs	r24, 1
    19b4:	bd c1       	rjmp	.+890    	; 0x1d30 <vfprintf+0x398>
    19b6:	ce 01       	movw	r24, r28
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	4c 01       	movw	r8, r24
    19bc:	f7 01       	movw	r30, r14
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	f6 01       	movw	r30, r12
    19c2:	93 fd       	sbrc	r25, 3
    19c4:	85 91       	lpm	r24, Z+
    19c6:	93 ff       	sbrs	r25, 3
    19c8:	81 91       	ld	r24, Z+
    19ca:	6f 01       	movw	r12, r30
    19cc:	88 23       	and	r24, r24
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <vfprintf+0x3a>
    19d0:	ab c1       	rjmp	.+854    	; 0x1d28 <vfprintf+0x390>
    19d2:	85 32       	cpi	r24, 0x25	; 37
    19d4:	39 f4       	brne	.+14     	; 0x19e4 <vfprintf+0x4c>
    19d6:	93 fd       	sbrc	r25, 3
    19d8:	85 91       	lpm	r24, Z+
    19da:	93 ff       	sbrs	r25, 3
    19dc:	81 91       	ld	r24, Z+
    19de:	6f 01       	movw	r12, r30
    19e0:	85 32       	cpi	r24, 0x25	; 37
    19e2:	29 f4       	brne	.+10     	; 0x19ee <vfprintf+0x56>
    19e4:	b7 01       	movw	r22, r14
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    19ec:	e7 cf       	rjmp	.-50     	; 0x19bc <vfprintf+0x24>
    19ee:	51 2c       	mov	r5, r1
    19f0:	31 2c       	mov	r3, r1
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	20 32       	cpi	r18, 0x20	; 32
    19f6:	a0 f4       	brcc	.+40     	; 0x1a20 <vfprintf+0x88>
    19f8:	8b 32       	cpi	r24, 0x2B	; 43
    19fa:	69 f0       	breq	.+26     	; 0x1a16 <vfprintf+0x7e>
    19fc:	30 f4       	brcc	.+12     	; 0x1a0a <vfprintf+0x72>
    19fe:	80 32       	cpi	r24, 0x20	; 32
    1a00:	59 f0       	breq	.+22     	; 0x1a18 <vfprintf+0x80>
    1a02:	83 32       	cpi	r24, 0x23	; 35
    1a04:	69 f4       	brne	.+26     	; 0x1a20 <vfprintf+0x88>
    1a06:	20 61       	ori	r18, 0x10	; 16
    1a08:	2c c0       	rjmp	.+88     	; 0x1a62 <vfprintf+0xca>
    1a0a:	8d 32       	cpi	r24, 0x2D	; 45
    1a0c:	39 f0       	breq	.+14     	; 0x1a1c <vfprintf+0x84>
    1a0e:	80 33       	cpi	r24, 0x30	; 48
    1a10:	39 f4       	brne	.+14     	; 0x1a20 <vfprintf+0x88>
    1a12:	21 60       	ori	r18, 0x01	; 1
    1a14:	26 c0       	rjmp	.+76     	; 0x1a62 <vfprintf+0xca>
    1a16:	22 60       	ori	r18, 0x02	; 2
    1a18:	24 60       	ori	r18, 0x04	; 4
    1a1a:	23 c0       	rjmp	.+70     	; 0x1a62 <vfprintf+0xca>
    1a1c:	28 60       	ori	r18, 0x08	; 8
    1a1e:	21 c0       	rjmp	.+66     	; 0x1a62 <vfprintf+0xca>
    1a20:	27 fd       	sbrc	r18, 7
    1a22:	27 c0       	rjmp	.+78     	; 0x1a72 <vfprintf+0xda>
    1a24:	30 ed       	ldi	r19, 0xD0	; 208
    1a26:	38 0f       	add	r19, r24
    1a28:	3a 30       	cpi	r19, 0x0A	; 10
    1a2a:	78 f4       	brcc	.+30     	; 0x1a4a <vfprintf+0xb2>
    1a2c:	26 ff       	sbrs	r18, 6
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <vfprintf+0xa4>
    1a30:	fa e0       	ldi	r31, 0x0A	; 10
    1a32:	5f 9e       	mul	r5, r31
    1a34:	30 0d       	add	r19, r0
    1a36:	11 24       	eor	r1, r1
    1a38:	53 2e       	mov	r5, r19
    1a3a:	13 c0       	rjmp	.+38     	; 0x1a62 <vfprintf+0xca>
    1a3c:	8a e0       	ldi	r24, 0x0A	; 10
    1a3e:	38 9e       	mul	r3, r24
    1a40:	30 0d       	add	r19, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	33 2e       	mov	r3, r19
    1a46:	20 62       	ori	r18, 0x20	; 32
    1a48:	0c c0       	rjmp	.+24     	; 0x1a62 <vfprintf+0xca>
    1a4a:	8e 32       	cpi	r24, 0x2E	; 46
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <vfprintf+0xbe>
    1a4e:	26 fd       	sbrc	r18, 6
    1a50:	6b c1       	rjmp	.+726    	; 0x1d28 <vfprintf+0x390>
    1a52:	20 64       	ori	r18, 0x40	; 64
    1a54:	06 c0       	rjmp	.+12     	; 0x1a62 <vfprintf+0xca>
    1a56:	8c 36       	cpi	r24, 0x6C	; 108
    1a58:	11 f4       	brne	.+4      	; 0x1a5e <vfprintf+0xc6>
    1a5a:	20 68       	ori	r18, 0x80	; 128
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <vfprintf+0xca>
    1a5e:	88 36       	cpi	r24, 0x68	; 104
    1a60:	41 f4       	brne	.+16     	; 0x1a72 <vfprintf+0xda>
    1a62:	f6 01       	movw	r30, r12
    1a64:	93 fd       	sbrc	r25, 3
    1a66:	85 91       	lpm	r24, Z+
    1a68:	93 ff       	sbrs	r25, 3
    1a6a:	81 91       	ld	r24, Z+
    1a6c:	6f 01       	movw	r12, r30
    1a6e:	81 11       	cpse	r24, r1
    1a70:	c1 cf       	rjmp	.-126    	; 0x19f4 <vfprintf+0x5c>
    1a72:	98 2f       	mov	r25, r24
    1a74:	9f 7d       	andi	r25, 0xDF	; 223
    1a76:	95 54       	subi	r25, 0x45	; 69
    1a78:	93 30       	cpi	r25, 0x03	; 3
    1a7a:	28 f4       	brcc	.+10     	; 0x1a86 <vfprintf+0xee>
    1a7c:	0c 5f       	subi	r16, 0xFC	; 252
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	ff e3       	ldi	r31, 0x3F	; 63
    1a82:	f9 83       	std	Y+1, r31	; 0x01
    1a84:	0d c0       	rjmp	.+26     	; 0x1aa0 <vfprintf+0x108>
    1a86:	83 36       	cpi	r24, 0x63	; 99
    1a88:	31 f0       	breq	.+12     	; 0x1a96 <vfprintf+0xfe>
    1a8a:	83 37       	cpi	r24, 0x73	; 115
    1a8c:	71 f0       	breq	.+28     	; 0x1aaa <vfprintf+0x112>
    1a8e:	83 35       	cpi	r24, 0x53	; 83
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <vfprintf+0xfc>
    1a92:	5b c0       	rjmp	.+182    	; 0x1b4a <vfprintf+0x1b2>
    1a94:	22 c0       	rjmp	.+68     	; 0x1ada <vfprintf+0x142>
    1a96:	f8 01       	movw	r30, r16
    1a98:	80 81       	ld	r24, Z
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	0e 5f       	subi	r16, 0xFE	; 254
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	44 24       	eor	r4, r4
    1aa2:	43 94       	inc	r4
    1aa4:	51 2c       	mov	r5, r1
    1aa6:	54 01       	movw	r10, r8
    1aa8:	15 c0       	rjmp	.+42     	; 0x1ad4 <vfprintf+0x13c>
    1aaa:	38 01       	movw	r6, r16
    1aac:	f2 e0       	ldi	r31, 0x02	; 2
    1aae:	6f 0e       	add	r6, r31
    1ab0:	71 1c       	adc	r7, r1
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	a0 80       	ld	r10, Z
    1ab6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ab8:	26 ff       	sbrs	r18, 6
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <vfprintf+0x12a>
    1abc:	65 2d       	mov	r22, r5
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <vfprintf+0x12e>
    1ac2:	6f ef       	ldi	r22, 0xFF	; 255
    1ac4:	7f ef       	ldi	r23, 0xFF	; 255
    1ac6:	c5 01       	movw	r24, r10
    1ac8:	2c 87       	std	Y+12, r18	; 0x0c
    1aca:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <strnlen>
    1ace:	2c 01       	movw	r4, r24
    1ad0:	83 01       	movw	r16, r6
    1ad2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ad4:	2f 77       	andi	r18, 0x7F	; 127
    1ad6:	22 2e       	mov	r2, r18
    1ad8:	17 c0       	rjmp	.+46     	; 0x1b08 <vfprintf+0x170>
    1ada:	38 01       	movw	r6, r16
    1adc:	f2 e0       	ldi	r31, 0x02	; 2
    1ade:	6f 0e       	add	r6, r31
    1ae0:	71 1c       	adc	r7, r1
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	a0 80       	ld	r10, Z
    1ae6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ae8:	26 ff       	sbrs	r18, 6
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <vfprintf+0x15a>
    1aec:	65 2d       	mov	r22, r5
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0x15e>
    1af2:	6f ef       	ldi	r22, 0xFF	; 255
    1af4:	7f ef       	ldi	r23, 0xFF	; 255
    1af6:	c5 01       	movw	r24, r10
    1af8:	2c 87       	std	Y+12, r18	; 0x0c
    1afa:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <strnlen_P>
    1afe:	2c 01       	movw	r4, r24
    1b00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b02:	20 68       	ori	r18, 0x80	; 128
    1b04:	22 2e       	mov	r2, r18
    1b06:	83 01       	movw	r16, r6
    1b08:	23 fc       	sbrc	r2, 3
    1b0a:	1b c0       	rjmp	.+54     	; 0x1b42 <vfprintf+0x1aa>
    1b0c:	83 2d       	mov	r24, r3
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	48 16       	cp	r4, r24
    1b12:	59 06       	cpc	r5, r25
    1b14:	b0 f4       	brcc	.+44     	; 0x1b42 <vfprintf+0x1aa>
    1b16:	b7 01       	movw	r22, r14
    1b18:	80 e2       	ldi	r24, 0x20	; 32
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    1b20:	3a 94       	dec	r3
    1b22:	f4 cf       	rjmp	.-24     	; 0x1b0c <vfprintf+0x174>
    1b24:	f5 01       	movw	r30, r10
    1b26:	27 fc       	sbrc	r2, 7
    1b28:	85 91       	lpm	r24, Z+
    1b2a:	27 fe       	sbrs	r2, 7
    1b2c:	81 91       	ld	r24, Z+
    1b2e:	5f 01       	movw	r10, r30
    1b30:	b7 01       	movw	r22, r14
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    1b38:	31 10       	cpse	r3, r1
    1b3a:	3a 94       	dec	r3
    1b3c:	f1 e0       	ldi	r31, 0x01	; 1
    1b3e:	4f 1a       	sub	r4, r31
    1b40:	51 08       	sbc	r5, r1
    1b42:	41 14       	cp	r4, r1
    1b44:	51 04       	cpc	r5, r1
    1b46:	71 f7       	brne	.-36     	; 0x1b24 <vfprintf+0x18c>
    1b48:	e5 c0       	rjmp	.+458    	; 0x1d14 <vfprintf+0x37c>
    1b4a:	84 36       	cpi	r24, 0x64	; 100
    1b4c:	11 f0       	breq	.+4      	; 0x1b52 <vfprintf+0x1ba>
    1b4e:	89 36       	cpi	r24, 0x69	; 105
    1b50:	39 f5       	brne	.+78     	; 0x1ba0 <vfprintf+0x208>
    1b52:	f8 01       	movw	r30, r16
    1b54:	27 ff       	sbrs	r18, 7
    1b56:	07 c0       	rjmp	.+14     	; 0x1b66 <vfprintf+0x1ce>
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	0c 5f       	subi	r16, 0xFC	; 252
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	08 c0       	rjmp	.+16     	; 0x1b76 <vfprintf+0x1de>
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	07 2e       	mov	r0, r23
    1b6c:	00 0c       	add	r0, r0
    1b6e:	88 0b       	sbc	r24, r24
    1b70:	99 0b       	sbc	r25, r25
    1b72:	0e 5f       	subi	r16, 0xFE	; 254
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	2f 76       	andi	r18, 0x6F	; 111
    1b78:	72 2e       	mov	r7, r18
    1b7a:	97 ff       	sbrs	r25, 7
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <vfprintf+0x1f8>
    1b7e:	90 95       	com	r25
    1b80:	80 95       	com	r24
    1b82:	70 95       	com	r23
    1b84:	61 95       	neg	r22
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	20 68       	ori	r18, 0x80	; 128
    1b8e:	72 2e       	mov	r7, r18
    1b90:	2a e0       	ldi	r18, 0x0A	; 10
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	a4 01       	movw	r20, r8
    1b96:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__ultoa_invert>
    1b9a:	a8 2e       	mov	r10, r24
    1b9c:	a8 18       	sub	r10, r8
    1b9e:	44 c0       	rjmp	.+136    	; 0x1c28 <vfprintf+0x290>
    1ba0:	85 37       	cpi	r24, 0x75	; 117
    1ba2:	29 f4       	brne	.+10     	; 0x1bae <vfprintf+0x216>
    1ba4:	2f 7e       	andi	r18, 0xEF	; 239
    1ba6:	b2 2e       	mov	r11, r18
    1ba8:	2a e0       	ldi	r18, 0x0A	; 10
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	25 c0       	rjmp	.+74     	; 0x1bf8 <vfprintf+0x260>
    1bae:	f2 2f       	mov	r31, r18
    1bb0:	f9 7f       	andi	r31, 0xF9	; 249
    1bb2:	bf 2e       	mov	r11, r31
    1bb4:	8f 36       	cpi	r24, 0x6F	; 111
    1bb6:	c1 f0       	breq	.+48     	; 0x1be8 <vfprintf+0x250>
    1bb8:	18 f4       	brcc	.+6      	; 0x1bc0 <vfprintf+0x228>
    1bba:	88 35       	cpi	r24, 0x58	; 88
    1bbc:	79 f0       	breq	.+30     	; 0x1bdc <vfprintf+0x244>
    1bbe:	b4 c0       	rjmp	.+360    	; 0x1d28 <vfprintf+0x390>
    1bc0:	80 37       	cpi	r24, 0x70	; 112
    1bc2:	19 f0       	breq	.+6      	; 0x1bca <vfprintf+0x232>
    1bc4:	88 37       	cpi	r24, 0x78	; 120
    1bc6:	21 f0       	breq	.+8      	; 0x1bd0 <vfprintf+0x238>
    1bc8:	af c0       	rjmp	.+350    	; 0x1d28 <vfprintf+0x390>
    1bca:	2f 2f       	mov	r18, r31
    1bcc:	20 61       	ori	r18, 0x10	; 16
    1bce:	b2 2e       	mov	r11, r18
    1bd0:	b4 fe       	sbrs	r11, 4
    1bd2:	0d c0       	rjmp	.+26     	; 0x1bee <vfprintf+0x256>
    1bd4:	8b 2d       	mov	r24, r11
    1bd6:	84 60       	ori	r24, 0x04	; 4
    1bd8:	b8 2e       	mov	r11, r24
    1bda:	09 c0       	rjmp	.+18     	; 0x1bee <vfprintf+0x256>
    1bdc:	24 ff       	sbrs	r18, 4
    1bde:	0a c0       	rjmp	.+20     	; 0x1bf4 <vfprintf+0x25c>
    1be0:	9f 2f       	mov	r25, r31
    1be2:	96 60       	ori	r25, 0x06	; 6
    1be4:	b9 2e       	mov	r11, r25
    1be6:	06 c0       	rjmp	.+12     	; 0x1bf4 <vfprintf+0x25c>
    1be8:	28 e0       	ldi	r18, 0x08	; 8
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <vfprintf+0x260>
    1bee:	20 e1       	ldi	r18, 0x10	; 16
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <vfprintf+0x260>
    1bf4:	20 e1       	ldi	r18, 0x10	; 16
    1bf6:	32 e0       	ldi	r19, 0x02	; 2
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	b7 fe       	sbrs	r11, 7
    1bfc:	07 c0       	rjmp	.+14     	; 0x1c0c <vfprintf+0x274>
    1bfe:	60 81       	ld	r22, Z
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	0c 5f       	subi	r16, 0xFC	; 252
    1c08:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <vfprintf+0x280>
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 5f       	subi	r16, 0xFE	; 254
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	a4 01       	movw	r20, r8
    1c1a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__ultoa_invert>
    1c1e:	a8 2e       	mov	r10, r24
    1c20:	a8 18       	sub	r10, r8
    1c22:	fb 2d       	mov	r31, r11
    1c24:	ff 77       	andi	r31, 0x7F	; 127
    1c26:	7f 2e       	mov	r7, r31
    1c28:	76 fe       	sbrs	r7, 6
    1c2a:	0b c0       	rjmp	.+22     	; 0x1c42 <vfprintf+0x2aa>
    1c2c:	37 2d       	mov	r19, r7
    1c2e:	3e 7f       	andi	r19, 0xFE	; 254
    1c30:	a5 14       	cp	r10, r5
    1c32:	50 f4       	brcc	.+20     	; 0x1c48 <vfprintf+0x2b0>
    1c34:	74 fe       	sbrs	r7, 4
    1c36:	0a c0       	rjmp	.+20     	; 0x1c4c <vfprintf+0x2b4>
    1c38:	72 fc       	sbrc	r7, 2
    1c3a:	08 c0       	rjmp	.+16     	; 0x1c4c <vfprintf+0x2b4>
    1c3c:	37 2d       	mov	r19, r7
    1c3e:	3e 7e       	andi	r19, 0xEE	; 238
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <vfprintf+0x2b4>
    1c42:	ba 2c       	mov	r11, r10
    1c44:	37 2d       	mov	r19, r7
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <vfprintf+0x2b6>
    1c48:	ba 2c       	mov	r11, r10
    1c4a:	01 c0       	rjmp	.+2      	; 0x1c4e <vfprintf+0x2b6>
    1c4c:	b5 2c       	mov	r11, r5
    1c4e:	34 ff       	sbrs	r19, 4
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <vfprintf+0x2d4>
    1c52:	fe 01       	movw	r30, r28
    1c54:	ea 0d       	add	r30, r10
    1c56:	f1 1d       	adc	r31, r1
    1c58:	80 81       	ld	r24, Z
    1c5a:	80 33       	cpi	r24, 0x30	; 48
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <vfprintf+0x2ca>
    1c5e:	39 7e       	andi	r19, 0xE9	; 233
    1c60:	09 c0       	rjmp	.+18     	; 0x1c74 <vfprintf+0x2dc>
    1c62:	32 ff       	sbrs	r19, 2
    1c64:	06 c0       	rjmp	.+12     	; 0x1c72 <vfprintf+0x2da>
    1c66:	b3 94       	inc	r11
    1c68:	b3 94       	inc	r11
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <vfprintf+0x2dc>
    1c6c:	83 2f       	mov	r24, r19
    1c6e:	86 78       	andi	r24, 0x86	; 134
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <vfprintf+0x2dc>
    1c72:	b3 94       	inc	r11
    1c74:	33 fd       	sbrc	r19, 3
    1c76:	13 c0       	rjmp	.+38     	; 0x1c9e <vfprintf+0x306>
    1c78:	30 ff       	sbrs	r19, 0
    1c7a:	06 c0       	rjmp	.+12     	; 0x1c88 <vfprintf+0x2f0>
    1c7c:	5a 2c       	mov	r5, r10
    1c7e:	b3 14       	cp	r11, r3
    1c80:	18 f4       	brcc	.+6      	; 0x1c88 <vfprintf+0x2f0>
    1c82:	53 0c       	add	r5, r3
    1c84:	5b 18       	sub	r5, r11
    1c86:	b3 2c       	mov	r11, r3
    1c88:	b3 14       	cp	r11, r3
    1c8a:	68 f4       	brcc	.+26     	; 0x1ca6 <vfprintf+0x30e>
    1c8c:	b7 01       	movw	r22, r14
    1c8e:	80 e2       	ldi	r24, 0x20	; 32
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	3c 87       	std	Y+12, r19	; 0x0c
    1c94:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    1c98:	b3 94       	inc	r11
    1c9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c9c:	f5 cf       	rjmp	.-22     	; 0x1c88 <vfprintf+0x2f0>
    1c9e:	b3 14       	cp	r11, r3
    1ca0:	10 f4       	brcc	.+4      	; 0x1ca6 <vfprintf+0x30e>
    1ca2:	3b 18       	sub	r3, r11
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <vfprintf+0x310>
    1ca6:	31 2c       	mov	r3, r1
    1ca8:	34 ff       	sbrs	r19, 4
    1caa:	12 c0       	rjmp	.+36     	; 0x1cd0 <vfprintf+0x338>
    1cac:	b7 01       	movw	r22, r14
    1cae:	80 e3       	ldi	r24, 0x30	; 48
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	3c 87       	std	Y+12, r19	; 0x0c
    1cb4:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    1cb8:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cba:	32 ff       	sbrs	r19, 2
    1cbc:	17 c0       	rjmp	.+46     	; 0x1cec <vfprintf+0x354>
    1cbe:	31 fd       	sbrc	r19, 1
    1cc0:	03 c0       	rjmp	.+6      	; 0x1cc8 <vfprintf+0x330>
    1cc2:	88 e7       	ldi	r24, 0x78	; 120
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <vfprintf+0x334>
    1cc8:	88 e5       	ldi	r24, 0x58	; 88
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	b7 01       	movw	r22, r14
    1cce:	0c c0       	rjmp	.+24     	; 0x1ce8 <vfprintf+0x350>
    1cd0:	83 2f       	mov	r24, r19
    1cd2:	86 78       	andi	r24, 0x86	; 134
    1cd4:	59 f0       	breq	.+22     	; 0x1cec <vfprintf+0x354>
    1cd6:	31 ff       	sbrs	r19, 1
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x346>
    1cda:	8b e2       	ldi	r24, 0x2B	; 43
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <vfprintf+0x348>
    1cde:	80 e2       	ldi	r24, 0x20	; 32
    1ce0:	37 fd       	sbrc	r19, 7
    1ce2:	8d e2       	ldi	r24, 0x2D	; 45
    1ce4:	b7 01       	movw	r22, r14
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    1cec:	a5 14       	cp	r10, r5
    1cee:	38 f4       	brcc	.+14     	; 0x1cfe <vfprintf+0x366>
    1cf0:	b7 01       	movw	r22, r14
    1cf2:	80 e3       	ldi	r24, 0x30	; 48
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    1cfa:	5a 94       	dec	r5
    1cfc:	f7 cf       	rjmp	.-18     	; 0x1cec <vfprintf+0x354>
    1cfe:	aa 94       	dec	r10
    1d00:	f4 01       	movw	r30, r8
    1d02:	ea 0d       	add	r30, r10
    1d04:	f1 1d       	adc	r31, r1
    1d06:	80 81       	ld	r24, Z
    1d08:	b7 01       	movw	r22, r14
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    1d10:	a1 10       	cpse	r10, r1
    1d12:	f5 cf       	rjmp	.-22     	; 0x1cfe <vfprintf+0x366>
    1d14:	33 20       	and	r3, r3
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <vfprintf+0x382>
    1d18:	51 ce       	rjmp	.-862    	; 0x19bc <vfprintf+0x24>
    1d1a:	b7 01       	movw	r22, r14
    1d1c:	80 e2       	ldi	r24, 0x20	; 32
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 13 0c 	call	0x1826	; 0x1826 <fputc>
    1d24:	3a 94       	dec	r3
    1d26:	f6 cf       	rjmp	.-20     	; 0x1d14 <vfprintf+0x37c>
    1d28:	f7 01       	movw	r30, r14
    1d2a:	86 81       	ldd	r24, Z+6	; 0x06
    1d2c:	97 81       	ldd	r25, Z+7	; 0x07
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <vfprintf+0x39c>
    1d30:	8f ef       	ldi	r24, 0xFF	; 255
    1d32:	9f ef       	ldi	r25, 0xFF	; 255
    1d34:	2c 96       	adiw	r28, 0x0c	; 12
    1d36:	e2 e1       	ldi	r30, 0x12	; 18
    1d38:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__epilogue_restores__>

00001d3c <strnlen_P>:
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	05 90       	lpm	r0, Z+
    1d40:	61 50       	subi	r22, 0x01	; 1
    1d42:	70 40       	sbci	r23, 0x00	; 0
    1d44:	01 10       	cpse	r0, r1
    1d46:	d8 f7       	brcc	.-10     	; 0x1d3e <strnlen_P+0x2>
    1d48:	80 95       	com	r24
    1d4a:	90 95       	com	r25
    1d4c:	8e 0f       	add	r24, r30
    1d4e:	9f 1f       	adc	r25, r31
    1d50:	08 95       	ret

00001d52 <strnlen>:
    1d52:	fc 01       	movw	r30, r24
    1d54:	61 50       	subi	r22, 0x01	; 1
    1d56:	70 40       	sbci	r23, 0x00	; 0
    1d58:	01 90       	ld	r0, Z+
    1d5a:	01 10       	cpse	r0, r1
    1d5c:	d8 f7       	brcc	.-10     	; 0x1d54 <strnlen+0x2>
    1d5e:	80 95       	com	r24
    1d60:	90 95       	com	r25
    1d62:	8e 0f       	add	r24, r30
    1d64:	9f 1f       	adc	r25, r31
    1d66:	08 95       	ret

00001d68 <__ultoa_invert>:
    1d68:	fa 01       	movw	r30, r20
    1d6a:	aa 27       	eor	r26, r26
    1d6c:	28 30       	cpi	r18, 0x08	; 8
    1d6e:	51 f1       	breq	.+84     	; 0x1dc4 <__ultoa_invert+0x5c>
    1d70:	20 31       	cpi	r18, 0x10	; 16
    1d72:	81 f1       	breq	.+96     	; 0x1dd4 <__ultoa_invert+0x6c>
    1d74:	e8 94       	clt
    1d76:	6f 93       	push	r22
    1d78:	6e 7f       	andi	r22, 0xFE	; 254
    1d7a:	6e 5f       	subi	r22, 0xFE	; 254
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	af 4f       	sbci	r26, 0xFF	; 255
    1d84:	b1 e0       	ldi	r27, 0x01	; 1
    1d86:	3e d0       	rcall	.+124    	; 0x1e04 <__ultoa_invert+0x9c>
    1d88:	b4 e0       	ldi	r27, 0x04	; 4
    1d8a:	3c d0       	rcall	.+120    	; 0x1e04 <__ultoa_invert+0x9c>
    1d8c:	67 0f       	add	r22, r23
    1d8e:	78 1f       	adc	r23, r24
    1d90:	89 1f       	adc	r24, r25
    1d92:	9a 1f       	adc	r25, r26
    1d94:	a1 1d       	adc	r26, r1
    1d96:	68 0f       	add	r22, r24
    1d98:	79 1f       	adc	r23, r25
    1d9a:	8a 1f       	adc	r24, r26
    1d9c:	91 1d       	adc	r25, r1
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	6a 0f       	add	r22, r26
    1da2:	71 1d       	adc	r23, r1
    1da4:	81 1d       	adc	r24, r1
    1da6:	91 1d       	adc	r25, r1
    1da8:	a1 1d       	adc	r26, r1
    1daa:	20 d0       	rcall	.+64     	; 0x1dec <__ultoa_invert+0x84>
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <__ultoa_invert+0x48>
    1dae:	68 94       	set
    1db0:	3f 91       	pop	r19
    1db2:	2a e0       	ldi	r18, 0x0A	; 10
    1db4:	26 9f       	mul	r18, r22
    1db6:	11 24       	eor	r1, r1
    1db8:	30 19       	sub	r19, r0
    1dba:	30 5d       	subi	r19, 0xD0	; 208
    1dbc:	31 93       	st	Z+, r19
    1dbe:	de f6       	brtc	.-74     	; 0x1d76 <__ultoa_invert+0xe>
    1dc0:	cf 01       	movw	r24, r30
    1dc2:	08 95       	ret
    1dc4:	46 2f       	mov	r20, r22
    1dc6:	47 70       	andi	r20, 0x07	; 7
    1dc8:	40 5d       	subi	r20, 0xD0	; 208
    1dca:	41 93       	st	Z+, r20
    1dcc:	b3 e0       	ldi	r27, 0x03	; 3
    1dce:	0f d0       	rcall	.+30     	; 0x1dee <__ultoa_invert+0x86>
    1dd0:	c9 f7       	brne	.-14     	; 0x1dc4 <__ultoa_invert+0x5c>
    1dd2:	f6 cf       	rjmp	.-20     	; 0x1dc0 <__ultoa_invert+0x58>
    1dd4:	46 2f       	mov	r20, r22
    1dd6:	4f 70       	andi	r20, 0x0F	; 15
    1dd8:	40 5d       	subi	r20, 0xD0	; 208
    1dda:	4a 33       	cpi	r20, 0x3A	; 58
    1ddc:	18 f0       	brcs	.+6      	; 0x1de4 <__ultoa_invert+0x7c>
    1dde:	49 5d       	subi	r20, 0xD9	; 217
    1de0:	31 fd       	sbrc	r19, 1
    1de2:	40 52       	subi	r20, 0x20	; 32
    1de4:	41 93       	st	Z+, r20
    1de6:	02 d0       	rcall	.+4      	; 0x1dec <__ultoa_invert+0x84>
    1de8:	a9 f7       	brne	.-22     	; 0x1dd4 <__ultoa_invert+0x6c>
    1dea:	ea cf       	rjmp	.-44     	; 0x1dc0 <__ultoa_invert+0x58>
    1dec:	b4 e0       	ldi	r27, 0x04	; 4
    1dee:	a6 95       	lsr	r26
    1df0:	97 95       	ror	r25
    1df2:	87 95       	ror	r24
    1df4:	77 95       	ror	r23
    1df6:	67 95       	ror	r22
    1df8:	ba 95       	dec	r27
    1dfa:	c9 f7       	brne	.-14     	; 0x1dee <__ultoa_invert+0x86>
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	61 05       	cpc	r22, r1
    1e00:	71 05       	cpc	r23, r1
    1e02:	08 95       	ret
    1e04:	9b 01       	movw	r18, r22
    1e06:	ac 01       	movw	r20, r24
    1e08:	0a 2e       	mov	r0, r26
    1e0a:	06 94       	lsr	r0
    1e0c:	57 95       	ror	r21
    1e0e:	47 95       	ror	r20
    1e10:	37 95       	ror	r19
    1e12:	27 95       	ror	r18
    1e14:	ba 95       	dec	r27
    1e16:	c9 f7       	brne	.-14     	; 0x1e0a <__ultoa_invert+0xa2>
    1e18:	62 0f       	add	r22, r18
    1e1a:	73 1f       	adc	r23, r19
    1e1c:	84 1f       	adc	r24, r20
    1e1e:	95 1f       	adc	r25, r21
    1e20:	a0 1d       	adc	r26, r0
    1e22:	08 95       	ret

00001e24 <__muluhisi3>:
    1e24:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__umulhisi3>
    1e28:	a5 9f       	mul	r26, r21
    1e2a:	90 0d       	add	r25, r0
    1e2c:	b4 9f       	mul	r27, r20
    1e2e:	90 0d       	add	r25, r0
    1e30:	a4 9f       	mul	r26, r20
    1e32:	80 0d       	add	r24, r0
    1e34:	91 1d       	adc	r25, r1
    1e36:	11 24       	eor	r1, r1
    1e38:	08 95       	ret

00001e3a <__mulshisi3>:
    1e3a:	b7 ff       	sbrs	r27, 7
    1e3c:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <__muluhisi3>

00001e40 <__mulohisi3>:
    1e40:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__muluhisi3>
    1e44:	82 1b       	sub	r24, r18
    1e46:	93 0b       	sbc	r25, r19
    1e48:	08 95       	ret

00001e4a <__prologue_saves__>:
    1e4a:	2f 92       	push	r2
    1e4c:	3f 92       	push	r3
    1e4e:	4f 92       	push	r4
    1e50:	5f 92       	push	r5
    1e52:	6f 92       	push	r6
    1e54:	7f 92       	push	r7
    1e56:	8f 92       	push	r8
    1e58:	9f 92       	push	r9
    1e5a:	af 92       	push	r10
    1e5c:	bf 92       	push	r11
    1e5e:	cf 92       	push	r12
    1e60:	df 92       	push	r13
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	ca 1b       	sub	r28, r26
    1e74:	db 0b       	sbc	r29, r27
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	09 94       	ijmp

00001e82 <__epilogue_restores__>:
    1e82:	2a 88       	ldd	r2, Y+18	; 0x12
    1e84:	39 88       	ldd	r3, Y+17	; 0x11
    1e86:	48 88       	ldd	r4, Y+16	; 0x10
    1e88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e94:	b9 84       	ldd	r11, Y+9	; 0x09
    1e96:	c8 84       	ldd	r12, Y+8	; 0x08
    1e98:	df 80       	ldd	r13, Y+7	; 0x07
    1e9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ea2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ea4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ea6:	ce 0f       	add	r28, r30
    1ea8:	d1 1d       	adc	r29, r1
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	ed 01       	movw	r28, r26
    1eb6:	08 95       	ret

00001eb8 <__umulhisi3>:
    1eb8:	a2 9f       	mul	r26, r18
    1eba:	b0 01       	movw	r22, r0
    1ebc:	b3 9f       	mul	r27, r19
    1ebe:	c0 01       	movw	r24, r0
    1ec0:	a3 9f       	mul	r26, r19
    1ec2:	70 0d       	add	r23, r0
    1ec4:	81 1d       	adc	r24, r1
    1ec6:	11 24       	eor	r1, r1
    1ec8:	91 1d       	adc	r25, r1
    1eca:	b2 9f       	mul	r27, r18
    1ecc:	70 0d       	add	r23, r0
    1ece:	81 1d       	adc	r24, r1
    1ed0:	11 24       	eor	r1, r1
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	08 95       	ret

00001ed6 <_exit>:
    1ed6:	f8 94       	cli

00001ed8 <__stop_program>:
    1ed8:	ff cf       	rjmp	.-2      	; 0x1ed8 <__stop_program>
