
Project_0_0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000308  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000003a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000306  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d7  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000292  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e2  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010c  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a4 e0       	ldi	r26, 0x04	; 4
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a9 30       	cpi	r26, 0x09	; 9
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a4 30       	cpi	r26, 0x04	; 4
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
  ae:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  b2:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initialise>:
}


void initialise(void){
	
	init_tcnt0();
  ba:	0e 94 6e 00 	call	0xdc	; 0xdc <init_tcnt0>
	sei();
  be:	78 94       	sei
	srand(get_tcnt0_ticks());
  c0:	0e 94 86 00 	call	0x10c	; 0x10c <get_tcnt0_ticks>
  c4:	cb 01       	movw	r24, r22
  c6:	0e 94 14 01 	call	0x228	; 0x228 <srand>
	
	// set pins C to input; default
	DDRC = 0x00;
  ca:	17 b8       	out	0x07, r1	; 7
	
	while(!get_button_()){; /* wait to be turned on by PINC5 */}
  cc:	0e 94 94 00 	call	0x128	; 0x128 <get_button_>
  d0:	88 23       	and	r24, r24
  d2:	e1 f3       	breq	.-8      	; 0xcc <initialise+0x12>
	
}
  d4:	08 95       	ret

000000d6 <main>:


/* functional code	*/
int main(void)
{
	initialise();
  d6:	0e 94 5d 00 	call	0xba	; 0xba <initialise>
	
    while(1)
    {
        //TODO:: Please write your application code 
    }
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x4>

000000dc <init_tcnt0>:


void init_tcnt0(void){
	
	// set global counter
	tcnt0_ticks = 0L;
  dc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
  e0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
  e4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end+0x2>
  e8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x3>
	
	// set timer / counter
	TCNT0 = 0;
  ec:	16 bc       	out	0x26, r1	; 38
	
	// set output compare resgister; value to execute ISR
	OCR0A = 124; // between 1 and 255
  ee:	8c e7       	ldi	r24, 0x7C	; 124
  f0:	87 bd       	out	0x27, r24	; 39
	
	// timer/counter control register A - set to clear when TCNT0 matches OCR0A
	TCCR0A = (1<<WGM01);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	84 bd       	out	0x24, r24	; 36
	
	// set the timer to update at a fraction of a clock cycle
	TCCR0B = (1<<CS01)|(1<<CS00);	// set to f(clk) / 64
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	85 bd       	out	0x25, r24	; 37
	
	// timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	TIMSK0 |= (1<<OCIE0A);
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
	
	// if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	TIFR0 &= (1<<OCF0A);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	82 70       	andi	r24, 0x02	; 2
 108:	85 bb       	out	0x15, r24	; 21
 10a:	08 95       	ret

0000010c <get_tcnt0_ticks>:


uint32_t get_tcnt0_ticks(void) {
	//uint32_t return_value;

	uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
 10c:	2f b7       	in	r18, 0x3f	; 63
	cli();
 10e:	f8 94       	cli
	uint32_t return_value = tcnt0_ticks;
 110:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 114:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 118:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
 11c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
	if(interrupts_on) {
 120:	22 23       	and	r18, r18
 122:	0c f4       	brge	.+2      	; 0x126 <get_tcnt0_ticks+0x1a>
		sei();
 124:	78 94       	sei
	}
	return return_value;
}
 126:	08 95       	ret

00000128 <get_button_>:


uint8_t	get_button_(void){
	/* checks if PINC5 is active */
	uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
 128:	9f b7       	in	r25, 0x3f	; 63
	cli();
 12a:	f8 94       	cli
	uint8_t return_value = Button_on;
 12c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Button_on>
	if(interrupts_on){
 130:	99 23       	and	r25, r25
 132:	0c f4       	brge	.+2      	; 0x136 <get_button_+0xe>
		sei();
 134:	78 94       	sei
	}
	return return_value;
}
 136:	08 95       	ret

00000138 <__vector_16>:


ISR(TIMER0_COMPA_vect) {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
	/* Increment our clock tick count */
	tcnt0_ticks++;
 14a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 14e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 152:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 156:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	a1 1d       	adc	r26, r1
 15e:	b1 1d       	adc	r27, r1
 160:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 164:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 168:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 16c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	// check PINC5
	if(button && (1<<BTN)){
		Button_on = 1;
	}
	else{
		Button_on = 0;
 170:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Button_on>
	}
}
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <do_rand>:
 186:	8f 92       	push	r8
 188:	9f 92       	push	r9
 18a:	af 92       	push	r10
 18c:	bf 92       	push	r11
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
 19c:	68 81       	ld	r22, Y
 19e:	79 81       	ldd	r23, Y+1	; 0x01
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	9b 81       	ldd	r25, Y+3	; 0x03
 1a4:	61 15       	cp	r22, r1
 1a6:	71 05       	cpc	r23, r1
 1a8:	81 05       	cpc	r24, r1
 1aa:	91 05       	cpc	r25, r1
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <do_rand+0x30>
 1ae:	64 e2       	ldi	r22, 0x24	; 36
 1b0:	79 ed       	ldi	r23, 0xD9	; 217
 1b2:	8b e5       	ldi	r24, 0x5B	; 91
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	2d e1       	ldi	r18, 0x1D	; 29
 1b8:	33 ef       	ldi	r19, 0xF3	; 243
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	0e 94 1f 01 	call	0x23e	; 0x23e <__divmodsi4>
 1c2:	49 01       	movw	r8, r18
 1c4:	5a 01       	movw	r10, r20
 1c6:	9b 01       	movw	r18, r22
 1c8:	ac 01       	movw	r20, r24
 1ca:	a7 ea       	ldi	r26, 0xA7	; 167
 1cc:	b1 e4       	ldi	r27, 0x41	; 65
 1ce:	0e 94 3e 01 	call	0x27c	; 0x27c <__muluhisi3>
 1d2:	6b 01       	movw	r12, r22
 1d4:	7c 01       	movw	r14, r24
 1d6:	ac ee       	ldi	r26, 0xEC	; 236
 1d8:	b4 ef       	ldi	r27, 0xF4	; 244
 1da:	a5 01       	movw	r20, r10
 1dc:	94 01       	movw	r18, r8
 1de:	0e 94 4c 01 	call	0x298	; 0x298 <__mulohisi3>
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22
 1e6:	8c 0d       	add	r24, r12
 1e8:	9d 1d       	adc	r25, r13
 1ea:	ae 1d       	adc	r26, r14
 1ec:	bf 1d       	adc	r27, r15
 1ee:	b7 ff       	sbrs	r27, 7
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <do_rand+0x72>
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	a1 09       	sbc	r26, r1
 1f6:	b0 48       	sbci	r27, 0x80	; 128
 1f8:	88 83       	st	Y, r24
 1fa:	99 83       	std	Y+1, r25	; 0x01
 1fc:	aa 83       	std	Y+2, r26	; 0x02
 1fe:	bb 83       	std	Y+3, r27	; 0x03
 200:	9f 77       	andi	r25, 0x7F	; 127
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	cf 90       	pop	r12
 20e:	bf 90       	pop	r11
 210:	af 90       	pop	r10
 212:	9f 90       	pop	r9
 214:	8f 90       	pop	r8
 216:	08 95       	ret

00000218 <rand_r>:
 218:	0e 94 c3 00 	call	0x186	; 0x186 <do_rand>
 21c:	08 95       	ret

0000021e <rand>:
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 c3 00 	call	0x186	; 0x186 <do_rand>
 226:	08 95       	ret

00000228 <srand>:
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 230:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 234:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 238:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 23c:	08 95       	ret

0000023e <__divmodsi4>:
 23e:	05 2e       	mov	r0, r21
 240:	97 fb       	bst	r25, 7
 242:	1e f4       	brtc	.+6      	; 0x24a <__divmodsi4+0xc>
 244:	00 94       	com	r0
 246:	0e 94 36 01 	call	0x26c	; 0x26c <__negsi2>
 24a:	57 fd       	sbrc	r21, 7
 24c:	07 d0       	rcall	.+14     	; 0x25c <__divmodsi4_neg2>
 24e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__udivmodsi4>
 252:	07 fc       	sbrc	r0, 7
 254:	03 d0       	rcall	.+6      	; 0x25c <__divmodsi4_neg2>
 256:	4e f4       	brtc	.+18     	; 0x26a <__divmodsi4_exit>
 258:	0c 94 36 01 	jmp	0x26c	; 0x26c <__negsi2>

0000025c <__divmodsi4_neg2>:
 25c:	50 95       	com	r21
 25e:	40 95       	com	r20
 260:	30 95       	com	r19
 262:	21 95       	neg	r18
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	4f 4f       	sbci	r20, 0xFF	; 255
 268:	5f 4f       	sbci	r21, 0xFF	; 255

0000026a <__divmodsi4_exit>:
 26a:	08 95       	ret

0000026c <__negsi2>:
 26c:	90 95       	com	r25
 26e:	80 95       	com	r24
 270:	70 95       	com	r23
 272:	61 95       	neg	r22
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	8f 4f       	sbci	r24, 0xFF	; 255
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	08 95       	ret

0000027c <__muluhisi3>:
 27c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__umulhisi3>
 280:	a5 9f       	mul	r26, r21
 282:	90 0d       	add	r25, r0
 284:	b4 9f       	mul	r27, r20
 286:	90 0d       	add	r25, r0
 288:	a4 9f       	mul	r26, r20
 28a:	80 0d       	add	r24, r0
 28c:	91 1d       	adc	r25, r1
 28e:	11 24       	eor	r1, r1
 290:	08 95       	ret

00000292 <__mulshisi3>:
 292:	b7 ff       	sbrs	r27, 7
 294:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__muluhisi3>

00000298 <__mulohisi3>:
 298:	0e 94 3e 01 	call	0x27c	; 0x27c <__muluhisi3>
 29c:	82 1b       	sub	r24, r18
 29e:	93 0b       	sbc	r25, r19
 2a0:	08 95       	ret

000002a2 <__udivmodsi4>:
 2a2:	a1 e2       	ldi	r26, 0x21	; 33
 2a4:	1a 2e       	mov	r1, r26
 2a6:	aa 1b       	sub	r26, r26
 2a8:	bb 1b       	sub	r27, r27
 2aa:	fd 01       	movw	r30, r26
 2ac:	0d c0       	rjmp	.+26     	; 0x2c8 <__udivmodsi4_ep>

000002ae <__udivmodsi4_loop>:
 2ae:	aa 1f       	adc	r26, r26
 2b0:	bb 1f       	adc	r27, r27
 2b2:	ee 1f       	adc	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	a2 17       	cp	r26, r18
 2b8:	b3 07       	cpc	r27, r19
 2ba:	e4 07       	cpc	r30, r20
 2bc:	f5 07       	cpc	r31, r21
 2be:	20 f0       	brcs	.+8      	; 0x2c8 <__udivmodsi4_ep>
 2c0:	a2 1b       	sub	r26, r18
 2c2:	b3 0b       	sbc	r27, r19
 2c4:	e4 0b       	sbc	r30, r20
 2c6:	f5 0b       	sbc	r31, r21

000002c8 <__udivmodsi4_ep>:
 2c8:	66 1f       	adc	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	88 1f       	adc	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	1a 94       	dec	r1
 2d2:	69 f7       	brne	.-38     	; 0x2ae <__udivmodsi4_loop>
 2d4:	60 95       	com	r22
 2d6:	70 95       	com	r23
 2d8:	80 95       	com	r24
 2da:	90 95       	com	r25
 2dc:	9b 01       	movw	r18, r22
 2de:	ac 01       	movw	r20, r24
 2e0:	bd 01       	movw	r22, r26
 2e2:	cf 01       	movw	r24, r30
 2e4:	08 95       	ret

000002e6 <__umulhisi3>:
 2e6:	a2 9f       	mul	r26, r18
 2e8:	b0 01       	movw	r22, r0
 2ea:	b3 9f       	mul	r27, r19
 2ec:	c0 01       	movw	r24, r0
 2ee:	a3 9f       	mul	r26, r19
 2f0:	70 0d       	add	r23, r0
 2f2:	81 1d       	adc	r24, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	91 1d       	adc	r25, r1
 2f8:	b2 9f       	mul	r27, r18
 2fa:	70 0d       	add	r23, r0
 2fc:	81 1d       	adc	r24, r1
 2fe:	11 24       	eor	r1, r1
 300:	91 1d       	adc	r25, r1
 302:	08 95       	ret

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
