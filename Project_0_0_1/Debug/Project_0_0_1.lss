
Project_0_0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003ac  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000518  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e6  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a2  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f4  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_20>
  54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a4 e0       	ldi	r26, 0x04	; 4
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	af 30       	cpi	r26, 0x0F	; 15
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a4 30       	cpi	r26, 0x04	; 4
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
  ae:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  b2:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initialise>:
void initialise(void){
		
		
	

	DDRB = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 b9       	out	0x04, r24	; 4
	DDRA = 0xFF;
  be:	81 b9       	out	0x01, r24	; 1

	DDRC = 0x00;
  c0:	17 b8       	out	0x07, r1	; 7


	pwm_initialiser();
  c2:	0e 94 bb 00 	call	0x176	; 0x176 <pwm_initialiser>
	//init_tcnt0();
	
	
	//set Global Interrupt Enable flag
	sei();
  c6:	78 94       	sei
	srand(get_tcnt0_ticks());
  c8:	0e 94 70 00 	call	0xe0	; 0xe0 <get_tcnt0_ticks>
  cc:	cb 01       	movw	r24, r22
  ce:	0e 94 66 01 	call	0x2cc	; 0x2cc <srand>

	USART_init(BAUDREG);
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <USART_init>
		else{
				PORTB = (0<<PORTB1);
				PORTA = (1<<PORTA0);
		}*/
		
	}
  da:	ff cf       	rjmp	.-2      	; 0xda <initialise+0x20>

000000dc <main>:
/* functional code	*/
int main(void)
{
	//initialise();
	
	initialise();
  dc:	0e 94 5d 00 	call	0xba	; 0xba <initialise>

000000e0 <get_tcnt0_ticks>:


uint32_t get_tcnt0_ticks(void) {
	//uint32_t return_value;

	uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
  e0:	2f b7       	in	r18, 0x3f	; 63
	cli();
  e2:	f8 94       	cli
	uint32_t return_value = tcnt0_ticks;
  e4:	60 91 09 01 	lds	r22, 0x0109
  e8:	70 91 0a 01 	lds	r23, 0x010A
  ec:	80 91 0b 01 	lds	r24, 0x010B
  f0:	90 91 0c 01 	lds	r25, 0x010C
	if(interrupts_on) {
  f4:	22 23       	and	r18, r18
  f6:	0c f4       	brge	.+2      	; 0xfa <get_tcnt0_ticks+0x1a>
		sei();
  f8:	78 94       	sei
	}
	return return_value;
}
  fa:	08 95       	ret

000000fc <__vector_16>:
	return return_value;
}



ISR(TIMER0_COMPA_vect) {
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
	/* Increment our clock tick count */
	tcnt0_ticks++;
 10e:	80 91 09 01 	lds	r24, 0x0109
 112:	90 91 0a 01 	lds	r25, 0x010A
 116:	a0 91 0b 01 	lds	r26, 0x010B
 11a:	b0 91 0c 01 	lds	r27, 0x010C
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	a1 1d       	adc	r26, r1
 122:	b1 1d       	adc	r27, r1
 124:	80 93 09 01 	sts	0x0109, r24
 128:	90 93 0a 01 	sts	0x010A, r25
 12c:	a0 93 0b 01 	sts	0x010B, r26
 130:	b0 93 0c 01 	sts	0x010C, r27
	uint8_t temp = PINC & (1<<PORTC0);
	// check PINCD7
		if (temp != 0x00){
 134:	30 9b       	sbis	0x06, 0	; 6
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_16+0x44>
			Button_on = 1;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 04 01 	sts	0x0104, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__vector_16+0x48>
		} else {
		Button_on = 0;
 140:	10 92 04 01 	sts	0x0104, r1
		}
		currentTic = tcnt0_ticks;
 144:	80 91 09 01 	lds	r24, 0x0109
 148:	90 91 0a 01 	lds	r25, 0x010A
 14c:	a0 91 0b 01 	lds	r26, 0x010B
 150:	b0 91 0c 01 	lds	r27, 0x010C
 154:	80 93 05 01 	sts	0x0105, r24
 158:	90 93 06 01 	sts	0x0106, r25
 15c:	a0 93 07 01 	sts	0x0107, r26
 160:	b0 93 08 01 	sts	0x0108, r27
}
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <pwm_initialiser>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
 176:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 160;
 17a:	80 ea       	ldi	r24, 0xA0	; 160
 17c:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 120;
 180:	88 e7       	ldi	r24, 0x78	; 120
 182:	80 93 b4 00 	sts	0x00B4, r24
	
	DDRD |= (1<<PORTD7)|(1<<PORTD6);
 186:	8a b1       	in	r24, 0x0a	; 10
 188:	80 6c       	ori	r24, 0xC0	; 192
 18a:	8a b9       	out	0x0a, r24	; 10
	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
 18c:	e0 eb       	ldi	r30, 0xB0	; 176
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	83 6a       	ori	r24, 0xA3	; 163
 194:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
 196:	e1 eb       	ldi	r30, 0xB1	; 177
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <USART_init>:


 void USART_init(unsigned int ubrr){
	 // UBRR0 is split into two; store the high 4 bits of the baud rate
	 // in UBRR0H and then rest in UBRR0L
	 receivedByte = 0x00;
 1a2:	10 92 0d 01 	sts	0x010D, r1
	 
	 UBRR0H = (unsigned char)(ubrr>>8);
 1a6:	90 93 c5 00 	sts	0x00C5, r25
	 UBRR0L = (unsigned char)(ubrr);
 1aa:	80 93 c4 00 	sts	0x00C4, r24

	 // set up receiver and transmitter
	 UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
	 // enable interrupt reciever
	 UCSR0B |= (1<<RXCIE0);
 1b8:	80 81       	ld	r24, Z
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	80 83       	st	Z, r24
	 //UCSR0A |= (1<<TXC);

	 // control status register, keep asynchronous, parity disabled, 8-bit
	 UCSR0C = (1<<UCSZ11)|(1<<UCSZ10);
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	80 93 c2 00 	sts	0x00C2, r24
 1c4:	08 95       	ret

000001c6 <__vector_21>:
		sei();
	}
 }


 ISR(USART0_UDRE_vect){
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31

	// send the transmitByte
	if (transmitByte != 0x00){
 1d6:	80 91 0e 01 	lds	r24, 0x010E
 1da:	88 23       	and	r24, r24
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <__vector_21+0x22>
		UDR0 = transmitByte;
 1de:	80 91 0e 01 	lds	r24, 0x010E
 1e2:	80 93 c6 00 	sts	0x00C6, r24
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <__vector_21+0x2c>
	} else {
		// disable UART as transmission complete
		UCSR0B &= ~(1<<UDRIE0);	
 1e8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 7d       	andi	r24, 0xDF	; 223
 1f0:	80 83       	st	Z, r24
	}
 }
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_20>:



 ISR(USART0_RX_vect){
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
	// code to execute when the USART receives a byte here
	//uint8_t recievedByte;
	receivedByte = UDR0;
 20e:	80 91 c6 00 	lds	r24, 0x00C6
 212:	80 93 0d 01 	sts	0x010D, r24


	// turn all pins in A on -> displays received byte to LEDs
	PORTA = ~receivedByte;
 216:	80 91 0d 01 	lds	r24, 0x010D
 21a:	80 95       	com	r24
 21c:	82 b9       	out	0x02, r24	; 2
	// if statements here
 }
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <do_rand>:
 22a:	8f 92       	push	r8
 22c:	9f 92       	push	r9
 22e:	af 92       	push	r10
 230:	bf 92       	push	r11
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
 240:	68 81       	ld	r22, Y
 242:	79 81       	ldd	r23, Y+1	; 0x01
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	9b 81       	ldd	r25, Y+3	; 0x03
 248:	61 15       	cp	r22, r1
 24a:	71 05       	cpc	r23, r1
 24c:	81 05       	cpc	r24, r1
 24e:	91 05       	cpc	r25, r1
 250:	21 f4       	brne	.+8      	; 0x25a <do_rand+0x30>
 252:	64 e2       	ldi	r22, 0x24	; 36
 254:	79 ed       	ldi	r23, 0xD9	; 217
 256:	8b e5       	ldi	r24, 0x5B	; 91
 258:	97 e0       	ldi	r25, 0x07	; 7
 25a:	2d e1       	ldi	r18, 0x1D	; 29
 25c:	33 ef       	ldi	r19, 0xF3	; 243
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__divmodsi4>
 266:	49 01       	movw	r8, r18
 268:	5a 01       	movw	r10, r20
 26a:	9b 01       	movw	r18, r22
 26c:	ac 01       	movw	r20, r24
 26e:	a7 ea       	ldi	r26, 0xA7	; 167
 270:	b1 e4       	ldi	r27, 0x41	; 65
 272:	0e 94 90 01 	call	0x320	; 0x320 <__muluhisi3>
 276:	6b 01       	movw	r12, r22
 278:	7c 01       	movw	r14, r24
 27a:	ac ee       	ldi	r26, 0xEC	; 236
 27c:	b4 ef       	ldi	r27, 0xF4	; 244
 27e:	a5 01       	movw	r20, r10
 280:	94 01       	movw	r18, r8
 282:	0e 94 9e 01 	call	0x33c	; 0x33c <__mulohisi3>
 286:	dc 01       	movw	r26, r24
 288:	cb 01       	movw	r24, r22
 28a:	8c 0d       	add	r24, r12
 28c:	9d 1d       	adc	r25, r13
 28e:	ae 1d       	adc	r26, r14
 290:	bf 1d       	adc	r27, r15
 292:	b7 ff       	sbrs	r27, 7
 294:	03 c0       	rjmp	.+6      	; 0x29c <do_rand+0x72>
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	a1 09       	sbc	r26, r1
 29a:	b0 48       	sbci	r27, 0x80	; 128
 29c:	88 83       	st	Y, r24
 29e:	99 83       	std	Y+1, r25	; 0x01
 2a0:	aa 83       	std	Y+2, r26	; 0x02
 2a2:	bb 83       	std	Y+3, r27	; 0x03
 2a4:	9f 77       	andi	r25, 0x7F	; 127
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	df 90       	pop	r13
 2b0:	cf 90       	pop	r12
 2b2:	bf 90       	pop	r11
 2b4:	af 90       	pop	r10
 2b6:	9f 90       	pop	r9
 2b8:	8f 90       	pop	r8
 2ba:	08 95       	ret

000002bc <rand_r>:
 2bc:	0e 94 15 01 	call	0x22a	; 0x22a <do_rand>
 2c0:	08 95       	ret

000002c2 <rand>:
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 15 01 	call	0x22a	; 0x22a <do_rand>
 2ca:	08 95       	ret

000002cc <srand>:
 2cc:	a0 e0       	ldi	r26, 0x00	; 0
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	80 93 00 01 	sts	0x0100, r24
 2d4:	90 93 01 01 	sts	0x0101, r25
 2d8:	a0 93 02 01 	sts	0x0102, r26
 2dc:	b0 93 03 01 	sts	0x0103, r27
 2e0:	08 95       	ret

000002e2 <__divmodsi4>:
 2e2:	05 2e       	mov	r0, r21
 2e4:	97 fb       	bst	r25, 7
 2e6:	1e f4       	brtc	.+6      	; 0x2ee <__divmodsi4+0xc>
 2e8:	00 94       	com	r0
 2ea:	0e 94 88 01 	call	0x310	; 0x310 <__negsi2>
 2ee:	57 fd       	sbrc	r21, 7
 2f0:	07 d0       	rcall	.+14     	; 0x300 <__divmodsi4_neg2>
 2f2:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodsi4>
 2f6:	07 fc       	sbrc	r0, 7
 2f8:	03 d0       	rcall	.+6      	; 0x300 <__divmodsi4_neg2>
 2fa:	4e f4       	brtc	.+18     	; 0x30e <__divmodsi4_exit>
 2fc:	0c 94 88 01 	jmp	0x310	; 0x310 <__negsi2>

00000300 <__divmodsi4_neg2>:
 300:	50 95       	com	r21
 302:	40 95       	com	r20
 304:	30 95       	com	r19
 306:	21 95       	neg	r18
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	4f 4f       	sbci	r20, 0xFF	; 255
 30c:	5f 4f       	sbci	r21, 0xFF	; 255

0000030e <__divmodsi4_exit>:
 30e:	08 95       	ret

00000310 <__negsi2>:
 310:	90 95       	com	r25
 312:	80 95       	com	r24
 314:	70 95       	com	r23
 316:	61 95       	neg	r22
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	8f 4f       	sbci	r24, 0xFF	; 255
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	08 95       	ret

00000320 <__muluhisi3>:
 320:	0e 94 c5 01 	call	0x38a	; 0x38a <__umulhisi3>
 324:	a5 9f       	mul	r26, r21
 326:	90 0d       	add	r25, r0
 328:	b4 9f       	mul	r27, r20
 32a:	90 0d       	add	r25, r0
 32c:	a4 9f       	mul	r26, r20
 32e:	80 0d       	add	r24, r0
 330:	91 1d       	adc	r25, r1
 332:	11 24       	eor	r1, r1
 334:	08 95       	ret

00000336 <__mulshisi3>:
 336:	b7 ff       	sbrs	r27, 7
 338:	0c 94 90 01 	jmp	0x320	; 0x320 <__muluhisi3>

0000033c <__mulohisi3>:
 33c:	0e 94 90 01 	call	0x320	; 0x320 <__muluhisi3>
 340:	82 1b       	sub	r24, r18
 342:	93 0b       	sbc	r25, r19
 344:	08 95       	ret

00000346 <__udivmodsi4>:
 346:	a1 e2       	ldi	r26, 0x21	; 33
 348:	1a 2e       	mov	r1, r26
 34a:	aa 1b       	sub	r26, r26
 34c:	bb 1b       	sub	r27, r27
 34e:	fd 01       	movw	r30, r26
 350:	0d c0       	rjmp	.+26     	; 0x36c <__udivmodsi4_ep>

00000352 <__udivmodsi4_loop>:
 352:	aa 1f       	adc	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	ee 1f       	adc	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	a2 17       	cp	r26, r18
 35c:	b3 07       	cpc	r27, r19
 35e:	e4 07       	cpc	r30, r20
 360:	f5 07       	cpc	r31, r21
 362:	20 f0       	brcs	.+8      	; 0x36c <__udivmodsi4_ep>
 364:	a2 1b       	sub	r26, r18
 366:	b3 0b       	sbc	r27, r19
 368:	e4 0b       	sbc	r30, r20
 36a:	f5 0b       	sbc	r31, r21

0000036c <__udivmodsi4_ep>:
 36c:	66 1f       	adc	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	1a 94       	dec	r1
 376:	69 f7       	brne	.-38     	; 0x352 <__udivmodsi4_loop>
 378:	60 95       	com	r22
 37a:	70 95       	com	r23
 37c:	80 95       	com	r24
 37e:	90 95       	com	r25
 380:	9b 01       	movw	r18, r22
 382:	ac 01       	movw	r20, r24
 384:	bd 01       	movw	r22, r26
 386:	cf 01       	movw	r24, r30
 388:	08 95       	ret

0000038a <__umulhisi3>:
 38a:	a2 9f       	mul	r26, r18
 38c:	b0 01       	movw	r22, r0
 38e:	b3 9f       	mul	r27, r19
 390:	c0 01       	movw	r24, r0
 392:	a3 9f       	mul	r26, r19
 394:	70 0d       	add	r23, r0
 396:	81 1d       	adc	r24, r1
 398:	11 24       	eor	r1, r1
 39a:	91 1d       	adc	r25, r1
 39c:	b2 9f       	mul	r27, r18
 39e:	70 0d       	add	r23, r0
 3a0:	81 1d       	adc	r24, r1
 3a2:	11 24       	eor	r1, r1
 3a4:	91 1d       	adc	r25, r1
 3a6:	08 95       	ret

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
