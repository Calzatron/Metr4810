
Project_0_0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800104  00800104  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b33  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c7  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045a  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f4  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002617  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_20>
  54:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a4 e0       	ldi	r26, 0x04	; 4
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 31       	cpi	r26, 0x13	; 19
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a4 30       	cpi	r26, 0x04	; 4
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
  ae:	0e 94 76 00 	call	0xec	; 0xec <main>
  b2:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initialise>:
void initialise(void){
		
		
	

	DDRB = 0xFF;
  ba:	cf ef       	ldi	r28, 0xFF	; 255
  bc:	c4 b9       	out	0x04, r28	; 4
	DDRA = 0xFF;
  be:	c1 b9       	out	0x01, r28	; 1

	DDRC = 0x00;
  c0:	17 b8       	out	0x07, r1	; 7


	//pwm_initialiser();
	init_tcnt0();
  c2:	0e 94 78 00 	call	0xf0	; 0xf0 <init_tcnt0>
	
	
	//set Global Interrupt Enable flag
	sei();
  c6:	78 94       	sei
	srand(get_tcnt0_ticks());
  c8:	0e 94 ae 00 	call	0x15c	; 0x15c <get_tcnt0_ticks>
  cc:	cb 01       	movw	r24, r22
  ce:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <srand>

	//USART_init(BAUDREG);
	
	//init_step();

	DDRD |= (1<<PORTD0)|(1<<PORTD1);
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	8a b9       	out	0x0a, r24	; 10
	//PORTD &= ~(1<<PORTD1);
	PORTD |= (1<<PORTD1);
  d8:	59 9a       	sbi	0x0b, 1	; 11
	DDRD &= ~(1<<PORTD1);
  da:	51 98       	cbi	0x0a, 1	; 10
	DDRA = 0xFF;
  dc:	c1 b9       	out	0x01, r28	; 1
	while(1){
		
		if (PIND & (1<<PIND1)){
				PORTA = 0xFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
	PORTD |= (1<<PORTD1);
	DDRD &= ~(1<<PORTD1);
	DDRA = 0xFF;
	while(1){
		
		if (PIND & (1<<PIND1)){
  e0:	49 9b       	sbis	0x09, 1	; 9
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <initialise+0x2e>
				PORTA = 0xFF;
  e4:	82 b9       	out	0x02, r24	; 2
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <initialise+0x26>
		} else {
				PORTA = 0x00;
  e8:	12 b8       	out	0x02, r1	; 2
  ea:	fa cf       	rjmp	.-12     	; 0xe0 <initialise+0x26>

000000ec <main>:
/* functional code	*/
int main(void)
{
	//initialise();
	
	initialise();
  ec:	0e 94 5d 00 	call	0xba	; 0xba <initialise>

000000f0 <init_tcnt0>:
	uint8_t return_value = Button_on;
	if(interrupts_on){
		sei();
	}
	return return_value;
}
  f0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
  f4:	84 e6       	ldi	r24, 0x64	; 100
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tic>
 100:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <tic+0x1>
 104:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <tic+0x2>
 108:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <tic+0x3>
 10c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tcnt0_ticks>
 110:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tcnt0_ticks+0x1>
 114:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <tcnt0_ticks+0x2>
 118:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <tcnt0_ticks+0x3>
 11c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <currentTic>
 120:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <currentTic+0x1>
 124:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <currentTic+0x2>
 128:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <currentTic+0x3>
 12c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <tcnt0_ticks>
 130:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tcnt0_ticks+0x1>
 134:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <tcnt0_ticks+0x2>
 138:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <tcnt0_ticks+0x3>
 13c:	16 bc       	out	0x26, r1	; 38
 13e:	8c e7       	ldi	r24, 0x7C	; 124
 140:	87 bd       	out	0x27, r24	; 39
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	84 bd       	out	0x24, r24	; 36
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	85 bd       	out	0x25, r24	; 37
 14a:	ee e6       	ldi	r30, 0x6E	; 110
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
 154:	85 b3       	in	r24, 0x15	; 21
 156:	82 70       	andi	r24, 0x02	; 2
 158:	85 bb       	out	0x15, r24	; 21
 15a:	08 95       	ret

0000015c <get_tcnt0_ticks>:
 15c:	2f b7       	in	r18, 0x3f	; 63
 15e:	f8 94       	cli
 160:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <tcnt0_ticks>
 164:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <tcnt0_ticks+0x1>
 168:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tcnt0_ticks+0x2>
 16c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tcnt0_ticks+0x3>
 170:	22 23       	and	r18, r18
 172:	0c f4       	brge	.+2      	; 0x176 <get_tcnt0_ticks+0x1a>
 174:	78 94       	sei
 176:	08 95       	ret

00000178 <__vector_16>:



ISR(TIMER0_COMPA_vect) {
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
	/* Increment our clock tick count */
	tcnt0_ticks++;
 18a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tcnt0_ticks>
 18e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tcnt0_ticks+0x1>
 192:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <tcnt0_ticks+0x2>
 196:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <tcnt0_ticks+0x3>
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	a1 1d       	adc	r26, r1
 19e:	b1 1d       	adc	r27, r1
 1a0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tcnt0_ticks>
 1a4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <tcnt0_ticks+0x1>
 1a8:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <tcnt0_ticks+0x2>
 1ac:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <tcnt0_ticks+0x3>
	uint8_t temp = PINC & (1<<PORTC0);
	// check PINCD7
		if (temp != 0x00){
 1b0:	30 9b       	sbis	0x06, 0	; 6
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <__vector_16+0x44>
			Button_on = 1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__vector_16+0x48>
		} else {
		Button_on = 0;
 1bc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		}
		currentTic = tcnt0_ticks;
 1c0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tcnt0_ticks>
 1c4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tcnt0_ticks+0x1>
 1c8:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <tcnt0_ticks+0x2>
 1cc:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <tcnt0_ticks+0x3>
 1d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <currentTic>
 1d4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <currentTic+0x1>
 1d8:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <currentTic+0x2>
 1dc:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <currentTic+0x3>
}
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_21>:
		sei();
	}
 }


 ISR(USART0_UDRE_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31

	// send the transmitByte
	if (transmitByte != 0x00){
 202:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <transmitByte>
 206:	88 23       	and	r24, r24
 208:	29 f0       	breq	.+10     	; 0x214 <__vector_21+0x22>
		UDR0 = transmitByte;
 20a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <transmitByte>
 20e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 212:	05 c0       	rjmp	.+10     	; 0x21e <__vector_21+0x2c>
	} else {
		// disable UART as transmission complete
		UCSR0B &= ~(1<<UDRIE0);	
 214:	e1 ec       	ldi	r30, 0xC1	; 193
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8f 7d       	andi	r24, 0xDF	; 223
 21c:	80 83       	st	Z, r24
	}
 }
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_20>:



 ISR(USART0_RX_vect){
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
	// code to execute when the USART receives a byte here
	//uint8_t recievedByte;
	receivedByte = UDR0;
 23a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 23e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <receivedByte>


	// turn all pins in A on -> displays received byte to LEDs
	PORTA = ~receivedByte;
 242:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <receivedByte>
 246:	80 95       	com	r24
 248:	82 b9       	out	0x02, r24	; 2
	// if statements here
 }
 24a:	8f 91       	pop	r24
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <do_rand>:
 256:	8f 92       	push	r8
 258:	9f 92       	push	r9
 25a:	af 92       	push	r10
 25c:	bf 92       	push	r11
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ec 01       	movw	r28, r24
 26c:	68 81       	ld	r22, Y
 26e:	79 81       	ldd	r23, Y+1	; 0x01
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	9b 81       	ldd	r25, Y+3	; 0x03
 274:	61 15       	cp	r22, r1
 276:	71 05       	cpc	r23, r1
 278:	81 05       	cpc	r24, r1
 27a:	91 05       	cpc	r25, r1
 27c:	21 f4       	brne	.+8      	; 0x286 <do_rand+0x30>
 27e:	64 e2       	ldi	r22, 0x24	; 36
 280:	79 ed       	ldi	r23, 0xD9	; 217
 282:	8b e5       	ldi	r24, 0x5B	; 91
 284:	97 e0       	ldi	r25, 0x07	; 7
 286:	2d e1       	ldi	r18, 0x1D	; 29
 288:	33 ef       	ldi	r19, 0xF3	; 243
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodsi4>
 292:	49 01       	movw	r8, r18
 294:	5a 01       	movw	r10, r20
 296:	9b 01       	movw	r18, r22
 298:	ac 01       	movw	r20, r24
 29a:	a7 ea       	ldi	r26, 0xA7	; 167
 29c:	b1 e4       	ldi	r27, 0x41	; 65
 29e:	0e 94 a6 01 	call	0x34c	; 0x34c <__muluhisi3>
 2a2:	6b 01       	movw	r12, r22
 2a4:	7c 01       	movw	r14, r24
 2a6:	ac ee       	ldi	r26, 0xEC	; 236
 2a8:	b4 ef       	ldi	r27, 0xF4	; 244
 2aa:	a5 01       	movw	r20, r10
 2ac:	94 01       	movw	r18, r8
 2ae:	0e 94 b4 01 	call	0x368	; 0x368 <__mulohisi3>
 2b2:	dc 01       	movw	r26, r24
 2b4:	cb 01       	movw	r24, r22
 2b6:	8c 0d       	add	r24, r12
 2b8:	9d 1d       	adc	r25, r13
 2ba:	ae 1d       	adc	r26, r14
 2bc:	bf 1d       	adc	r27, r15
 2be:	b7 ff       	sbrs	r27, 7
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <do_rand+0x72>
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	a1 09       	sbc	r26, r1
 2c6:	b0 48       	sbci	r27, 0x80	; 128
 2c8:	88 83       	st	Y, r24
 2ca:	99 83       	std	Y+1, r25	; 0x01
 2cc:	aa 83       	std	Y+2, r26	; 0x02
 2ce:	bb 83       	std	Y+3, r27	; 0x03
 2d0:	9f 77       	andi	r25, 0x7F	; 127
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	df 90       	pop	r13
 2dc:	cf 90       	pop	r12
 2de:	bf 90       	pop	r11
 2e0:	af 90       	pop	r10
 2e2:	9f 90       	pop	r9
 2e4:	8f 90       	pop	r8
 2e6:	08 95       	ret

000002e8 <rand_r>:
 2e8:	0e 94 2b 01 	call	0x256	; 0x256 <do_rand>
 2ec:	08 95       	ret

000002ee <rand>:
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 2b 01 	call	0x256	; 0x256 <do_rand>
 2f6:	08 95       	ret

000002f8 <srand>:
 2f8:	a0 e0       	ldi	r26, 0x00	; 0
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 300:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 304:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 308:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 30c:	08 95       	ret

0000030e <__divmodsi4>:
 30e:	05 2e       	mov	r0, r21
 310:	97 fb       	bst	r25, 7
 312:	1e f4       	brtc	.+6      	; 0x31a <__divmodsi4+0xc>
 314:	00 94       	com	r0
 316:	0e 94 9e 01 	call	0x33c	; 0x33c <__negsi2>
 31a:	57 fd       	sbrc	r21, 7
 31c:	07 d0       	rcall	.+14     	; 0x32c <__divmodsi4_neg2>
 31e:	0e 94 b9 01 	call	0x372	; 0x372 <__udivmodsi4>
 322:	07 fc       	sbrc	r0, 7
 324:	03 d0       	rcall	.+6      	; 0x32c <__divmodsi4_neg2>
 326:	4e f4       	brtc	.+18     	; 0x33a <__divmodsi4_exit>
 328:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__negsi2>

0000032c <__divmodsi4_neg2>:
 32c:	50 95       	com	r21
 32e:	40 95       	com	r20
 330:	30 95       	com	r19
 332:	21 95       	neg	r18
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	4f 4f       	sbci	r20, 0xFF	; 255
 338:	5f 4f       	sbci	r21, 0xFF	; 255

0000033a <__divmodsi4_exit>:
 33a:	08 95       	ret

0000033c <__negsi2>:
 33c:	90 95       	com	r25
 33e:	80 95       	com	r24
 340:	70 95       	com	r23
 342:	61 95       	neg	r22
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	8f 4f       	sbci	r24, 0xFF	; 255
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	08 95       	ret

0000034c <__muluhisi3>:
 34c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__umulhisi3>
 350:	a5 9f       	mul	r26, r21
 352:	90 0d       	add	r25, r0
 354:	b4 9f       	mul	r27, r20
 356:	90 0d       	add	r25, r0
 358:	a4 9f       	mul	r26, r20
 35a:	80 0d       	add	r24, r0
 35c:	91 1d       	adc	r25, r1
 35e:	11 24       	eor	r1, r1
 360:	08 95       	ret

00000362 <__mulshisi3>:
 362:	b7 ff       	sbrs	r27, 7
 364:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__muluhisi3>

00000368 <__mulohisi3>:
 368:	0e 94 a6 01 	call	0x34c	; 0x34c <__muluhisi3>
 36c:	82 1b       	sub	r24, r18
 36e:	93 0b       	sbc	r25, r19
 370:	08 95       	ret

00000372 <__udivmodsi4>:
 372:	a1 e2       	ldi	r26, 0x21	; 33
 374:	1a 2e       	mov	r1, r26
 376:	aa 1b       	sub	r26, r26
 378:	bb 1b       	sub	r27, r27
 37a:	fd 01       	movw	r30, r26
 37c:	0d c0       	rjmp	.+26     	; 0x398 <__udivmodsi4_ep>

0000037e <__udivmodsi4_loop>:
 37e:	aa 1f       	adc	r26, r26
 380:	bb 1f       	adc	r27, r27
 382:	ee 1f       	adc	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	a2 17       	cp	r26, r18
 388:	b3 07       	cpc	r27, r19
 38a:	e4 07       	cpc	r30, r20
 38c:	f5 07       	cpc	r31, r21
 38e:	20 f0       	brcs	.+8      	; 0x398 <__udivmodsi4_ep>
 390:	a2 1b       	sub	r26, r18
 392:	b3 0b       	sbc	r27, r19
 394:	e4 0b       	sbc	r30, r20
 396:	f5 0b       	sbc	r31, r21

00000398 <__udivmodsi4_ep>:
 398:	66 1f       	adc	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	88 1f       	adc	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	1a 94       	dec	r1
 3a2:	69 f7       	brne	.-38     	; 0x37e <__udivmodsi4_loop>
 3a4:	60 95       	com	r22
 3a6:	70 95       	com	r23
 3a8:	80 95       	com	r24
 3aa:	90 95       	com	r25
 3ac:	9b 01       	movw	r18, r22
 3ae:	ac 01       	movw	r20, r24
 3b0:	bd 01       	movw	r22, r26
 3b2:	cf 01       	movw	r24, r30
 3b4:	08 95       	ret

000003b6 <__umulhisi3>:
 3b6:	a2 9f       	mul	r26, r18
 3b8:	b0 01       	movw	r22, r0
 3ba:	b3 9f       	mul	r27, r19
 3bc:	c0 01       	movw	r24, r0
 3be:	a3 9f       	mul	r26, r19
 3c0:	70 0d       	add	r23, r0
 3c2:	81 1d       	adc	r24, r1
 3c4:	11 24       	eor	r1, r1
 3c6:	91 1d       	adc	r25, r1
 3c8:	b2 9f       	mul	r27, r18
 3ca:	70 0d       	add	r23, r0
 3cc:	81 1d       	adc	r24, r1
 3ce:	11 24       	eor	r1, r1
 3d0:	91 1d       	adc	r25, r1
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
