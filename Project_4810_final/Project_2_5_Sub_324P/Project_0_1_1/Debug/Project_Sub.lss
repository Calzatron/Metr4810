
Project_Sub.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800100  00002088  0000211c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002088  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  008001ee  008001ee  0000220a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021fe  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe5  00000000  00000000  00004676  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001488  00000000  00000000  0000565b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00006ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c4  00000000  00000000  00006edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d59  00000000  00000000  000076a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000083f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__ctors_end>
       4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      10:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      14:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      18:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      1c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      20:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      24:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      28:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      30:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      34:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      38:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      3c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      40:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_16>
      44:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      4c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      50:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_20>
      54:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_21>
      58:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      5c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      60:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      64:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      68:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      6c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      70:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      74:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      78:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      7c:	cb 04       	cpc	r12, r11
      7e:	0d 05       	cpc	r16, r13
      80:	0d 05       	cpc	r16, r13
      82:	0d 05       	cpc	r16, r13
      84:	0d 05       	cpc	r16, r13
      86:	0d 05       	cpc	r16, r13
      88:	0d 05       	cpc	r16, r13
      8a:	0d 05       	cpc	r16, r13
      8c:	0d 05       	cpc	r16, r13
      8e:	0d 05       	cpc	r16, r13
      90:	0d 05       	cpc	r16, r13
      92:	2f 05       	cpc	r18, r15
      94:	0d 05       	cpc	r16, r13
      96:	c1 03       	fmuls	r20, r17
      98:	0d 05       	cpc	r16, r13
      9a:	0d 05       	cpc	r16, r13
      9c:	2f 04       	cpc	r2, r15
      9e:	34 04       	cpc	r3, r4
      a0:	3a 04       	cpc	r3, r10
      a2:	40 04       	cpc	r4, r0
      a4:	46 04       	cpc	r4, r6
      a6:	4c 04       	cpc	r4, r12
      a8:	0d 05       	cpc	r16, r13
      aa:	0d 05       	cpc	r16, r13
      ac:	0d 05       	cpc	r16, r13
      ae:	0d 05       	cpc	r16, r13
      b0:	0d 05       	cpc	r16, r13
      b2:	0d 05       	cpc	r16, r13
      b4:	0d 05       	cpc	r16, r13
      b6:	ac 03       	fmulsu	r18, r20
      b8:	0d 05       	cpc	r16, r13
      ba:	2f 05       	cpc	r18, r15
      bc:	0d 05       	cpc	r16, r13
      be:	0d 05       	cpc	r16, r13
      c0:	0d 05       	cpc	r16, r13
      c2:	0d 05       	cpc	r16, r13
      c4:	0d 05       	cpc	r16, r13
      c6:	0d 05       	cpc	r16, r13
      c8:	0d 05       	cpc	r16, r13
      ca:	0d 05       	cpc	r16, r13
      cc:	01 05       	cpc	r16, r1
      ce:	0d 05       	cpc	r16, r13
      d0:	0d 05       	cpc	r16, r13
      d2:	0d 05       	cpc	r16, r13
      d4:	d8 04       	cpc	r13, r8
      d6:	0d 05       	cpc	r16, r13
      d8:	0d 05       	cpc	r16, r13
      da:	0d 05       	cpc	r16, r13
      dc:	0d 05       	cpc	r16, r13
      de:	0d 05       	cpc	r16, r13
      e0:	0d 05       	cpc	r16, r13
      e2:	0d 05       	cpc	r16, r13
      e4:	0d 05       	cpc	r16, r13
      e6:	0d 05       	cpc	r16, r13
      e8:	0d 05       	cpc	r16, r13
      ea:	0d 05       	cpc	r16, r13
      ec:	fd 04       	cpc	r15, r13
      ee:	0d 05       	cpc	r16, r13
      f0:	0d 05       	cpc	r16, r13
      f2:	ad 04       	cpc	r10, r13
      f4:	0d 05       	cpc	r16, r13
      f6:	bc 04       	cpc	r11, r12
      f8:	0d 05       	cpc	r16, r13
      fa:	0d 05       	cpc	r16, r13
      fc:	2a 04       	cpc	r2, r10
      fe:	93 03       	fmuls	r17, r19
     100:	0d 05       	cpc	r16, r13
     102:	ed 04       	cpc	r14, r13
     104:	9d 03       	fmulsu	r17, r21
     106:	d6 03       	fmuls	r21, r22
     108:	0d 05       	cpc	r16, r13
     10a:	0d 05       	cpc	r16, r13
     10c:	0d 05       	cpc	r16, r13
     10e:	0d 05       	cpc	r16, r13
     110:	da 04       	cpc	r13, r10
     112:	de 04       	cpc	r13, r14
     114:	d2 04       	cpc	r13, r2
     116:	0d 05       	cpc	r16, r13
     118:	0d 05       	cpc	r16, r13
     11a:	f0 04       	cpc	r15, r0
     11c:	0d 05       	cpc	r16, r13
     11e:	00 04       	cpc	r0, r0
     120:	a7 03       	fmuls	r18, r23
     122:	a2 03       	fmuls	r18, r18
     124:	0d 05       	cpc	r16, r13
     126:	0d 05       	cpc	r16, r13
     128:	ea 04       	cpc	r14, r10
     12a:	98 03       	fmulsu	r17, r16
     12c:	e6 04       	cpc	r14, r6
     12e:	0d 05       	cpc	r16, r13
     130:	e2 04       	cpc	r14, r2
     132:	52 04       	cpc	r5, r2
     134:	0d 05       	cpc	r16, r13
     136:	80 04       	cpc	r8, r0

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	d8 e0       	ldi	r29, 0x08	; 8
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e8 e8       	ldi	r30, 0x88	; 136
     14c:	f0 e2       	ldi	r31, 0x20	; 32
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	ae 3e       	cpi	r26, 0xEE	; 238
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	23 e0       	ldi	r18, 0x03	; 3
     15c:	ae ee       	ldi	r26, 0xEE	; 238
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	aa 31       	cpi	r26, 0x1A	; 26
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <main>
     16e:	0c 94 42 10 	jmp	0x2084	; 0x2084 <_exit>

00000172 <__bad_interrupt>:
     172:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000176 <pivot_off>:
#define RED_P PORTC3
#define BLACK_P PORTC4

void pivot_off(void){
		/*	turn the motor off	*/
		if (PORTC & (1<<RED_P)){
     176:	43 99       	sbic	0x08, 3	; 8
			PORTC &= ~(1<<RED_P);
     178:	43 98       	cbi	0x08, 3	; 8
		}
		if (PORTC & (1<<BLACK_P)){
     17a:	44 99       	sbic	0x08, 4	; 8
			PORTC &= ~(1<<BLACK_P);
     17c:	44 98       	cbi	0x08, 4	; 8
		}
		
		fputs("Pivot motor off\n", stdout);
     17e:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <__iob+0x2>
     182:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <__iob+0x3>
     186:	40 e1       	ldi	r20, 0x10	; 16
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	88 e1       	ldi	r24, 0x18	; 24
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
     196:	08 95       	ret

00000198 <move_pivot>:
}

void move_pivot(int8_t direction){
	/*	actuates DC motor to tilt the submersible */
	if (direction){
     198:	88 23       	and	r24, r24
     19a:	19 f0       	breq	.+6      	; 0x1a2 <move_pivot+0xa>
			// forward
			PORTC |= (1<<RED_P);
     19c:	43 9a       	sbi	0x08, 3	; 8
			PORTC &= ~(1<<BLACK_P);
     19e:	44 98       	cbi	0x08, 4	; 8
     1a0:	08 95       	ret
	} else {
			// backwards
			PORTC |= (1<<BLACK_P);
     1a2:	44 9a       	sbi	0x08, 4	; 8
			PORTC &= ~(1<<RED_P);
     1a4:	43 98       	cbi	0x08, 3	; 8
     1a6:	08 95       	ret

000001a8 <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     1a8:	2f b7       	in	r18, 0x3f	; 63
     1aa:	20 78       	andi	r18, 0x80	; 128
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <uart_put_char+0xa>
     1ae:	22 23       	and	r18, r18
     1b0:	29 f1       	breq	.+74     	; 0x1fc <uart_put_char+0x54>
     1b2:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <bytes_in_out_buffer>
     1b6:	9f 3f       	cpi	r25, 0xFF	; 255
     1b8:	d1 f3       	breq	.-12     	; 0x1ae <uart_put_char+0x6>
     1ba:	f8 94       	cli
     1bc:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <out_insert_pos>
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	9e 0f       	add	r25, r30
     1c4:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <out_insert_pos>
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	e9 50       	subi	r30, 0x09	; 9
     1cc:	fe 4f       	sbci	r31, 0xFE	; 254
     1ce:	80 83       	st	Z, r24
     1d0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <bytes_in_out_buffer>
     1d4:	8f 5f       	subi	r24, 0xFF	; 255
     1d6:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <bytes_in_out_buffer>
     1da:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <out_insert_pos>
     1de:	8f 3f       	cpi	r24, 0xFF	; 255
     1e0:	11 f4       	brne	.+4      	; 0x1e6 <uart_put_char+0x3e>
     1e2:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <out_insert_pos>
     1e6:	e1 ec       	ldi	r30, 0xC1	; 193
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	80 62       	ori	r24, 0x20	; 32
     1ee:	80 83       	st	Z, r24
     1f0:	22 23       	and	r18, r18
     1f2:	39 f0       	breq	.+14     	; 0x202 <uart_put_char+0x5a>
     1f4:	78 94       	sei
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	08 95       	ret
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	08 95       	ret
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	08 95       	ret

00000208 <uart_get_char>:
     208:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <bytes_in_input_buffer>
     20c:	88 23       	and	r24, r24
     20e:	e1 f3       	breq	.-8      	; 0x208 <uart_get_char>
     210:	2f b7       	in	r18, 0x3f	; 63
     212:	20 78       	andi	r18, 0x80	; 128
     214:	f8 94       	cli
     216:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <input_insert_pos>
     21a:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <bytes_in_input_buffer>
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	83 1b       	sub	r24, r19
     222:	91 09       	sbc	r25, r1
     224:	5a f4       	brpl	.+22     	; 0x23c <uart_get_char+0x34>
     226:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <input_insert_pos>
     22a:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <bytes_in_input_buffer>
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	e8 1b       	sub	r30, r24
     232:	f1 09       	sbc	r31, r1
     234:	e9 5f       	subi	r30, 0xF9	; 249
     236:	fc 4f       	sbci	r31, 0xFC	; 252
     238:	80 81       	ld	r24, Z
     23a:	0a c0       	rjmp	.+20     	; 0x250 <uart_get_char+0x48>
     23c:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <input_insert_pos>
     240:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <bytes_in_input_buffer>
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	e8 1b       	sub	r30, r24
     248:	f1 09       	sbc	r31, r1
     24a:	e9 50       	subi	r30, 0x09	; 9
     24c:	fd 4f       	sbci	r31, 0xFD	; 253
     24e:	80 81       	ld	r24, Z
     250:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <bytes_in_input_buffer>
     254:	91 50       	subi	r25, 0x01	; 1
     256:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <bytes_in_input_buffer>
     25a:	22 23       	and	r18, r18
     25c:	09 f0       	breq	.+2      	; 0x260 <uart_get_char+0x58>
     25e:	78 94       	sei
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	08 95       	ret

00000264 <init_serial_stdio>:
     264:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <out_insert_pos>
     268:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <bytes_in_out_buffer>
     26c:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <input_insert_pos>
     270:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <bytes_in_input_buffer>
     274:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <input_overrun>
     278:	40 93 ee 01 	sts	0x01EE, r20	; 0x8001ee <__data_end>
     27c:	dc 01       	movw	r26, r24
     27e:	cb 01       	movw	r24, r22
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	aa 1f       	adc	r26, r26
     286:	bb 1f       	adc	r27, r27
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	aa 1f       	adc	r26, r26
     28e:	bb 1f       	adc	r27, r27
     290:	9c 01       	movw	r18, r24
     292:	ad 01       	movw	r20, r26
     294:	22 0f       	add	r18, r18
     296:	33 1f       	adc	r19, r19
     298:	44 1f       	adc	r20, r20
     29a:	55 1f       	adc	r21, r21
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	72 e1       	ldi	r23, 0x12	; 18
     2a0:	8a e7       	ldi	r24, 0x7A	; 122
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divmodsi4>
     2a8:	ba 01       	movw	r22, r20
     2aa:	a9 01       	movw	r20, r18
     2ac:	4f 5f       	subi	r20, 0xFF	; 255
     2ae:	5f 4f       	sbci	r21, 0xFF	; 255
     2b0:	6f 4f       	sbci	r22, 0xFF	; 255
     2b2:	7f 4f       	sbci	r23, 0xFF	; 255
     2b4:	db 01       	movw	r26, r22
     2b6:	ca 01       	movw	r24, r20
     2b8:	1a f4       	brpl	.+6      	; 0x2c0 <init_serial_stdio+0x5c>
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	a1 1d       	adc	r26, r1
     2be:	b1 1d       	adc	r27, r1
     2c0:	b5 95       	asr	r27
     2c2:	a7 95       	ror	r26
     2c4:	97 95       	ror	r25
     2c6:	87 95       	ror	r24
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2d2:	e1 ec       	ldi	r30, 0xC1	; 193
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	88 e1       	ldi	r24, 0x18	; 24
     2d8:	80 83       	st	Z, r24
     2da:	80 81       	ld	r24, Z
     2dc:	80 68       	ori	r24, 0x80	; 128
     2de:	80 83       	st	Z, r24
     2e0:	e4 e1       	ldi	r30, 0x14	; 20
     2e2:	f3 e0       	ldi	r31, 0x03	; 3
     2e4:	8a e0       	ldi	r24, 0x0A	; 10
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	93 83       	std	Z+3, r25	; 0x03
     2ea:	82 83       	std	Z+2, r24	; 0x02
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	80 83       	st	Z, r24
     2f0:	08 95       	ret

000002f2 <serial_input_available>:
     2f2:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <bytes_in_input_buffer>
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	91 11       	cpse	r25, r1
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <serial_input_available+0xc>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	2f 93       	push	r18
     30c:	8f 93       	push	r24
     30e:	9f 93       	push	r25
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     314:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <bytes_in_out_buffer>
     318:	88 23       	and	r24, r24
     31a:	29 f1       	breq	.+74     	; 0x366 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     31c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <out_insert_pos>
     320:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <bytes_in_out_buffer>
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	82 1b       	sub	r24, r18
     328:	91 09       	sbc	r25, r1
     32a:	5a f4       	brpl	.+22     	; 0x342 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     32c:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <out_insert_pos>
     330:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	e8 1b       	sub	r30, r24
     338:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     33a:	ea 50       	subi	r30, 0x0A	; 10
     33c:	fd 4f       	sbci	r31, 0xFD	; 253
     33e:	90 81       	ld	r25, Z
     340:	0a c0       	rjmp	.+20     	; 0x356 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     342:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <out_insert_pos>
     346:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <bytes_in_out_buffer>
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	e8 1b       	sub	r30, r24
     34e:	f1 09       	sbc	r31, r1
     350:	e9 50       	subi	r30, 0x09	; 9
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     356:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <bytes_in_out_buffer>
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     360:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     364:	05 c0       	rjmp	.+10     	; 0x370 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     366:	e1 ec       	ldi	r30, 0xC1	; 193
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	80 83       	st	Z, r24
	}
}
     370:	ff 91       	pop	r31
     372:	ef 91       	pop	r30
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	2f 91       	pop	r18
     37a:	0f 90       	pop	r0
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	0f 90       	pop	r0
     380:	1f 90       	pop	r1
     382:	18 95       	reti

00000384 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     384:	1f 92       	push	r1
     386:	0f 92       	push	r0
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	0f 92       	push	r0
     38c:	11 24       	eor	r1, r1
     38e:	2f 93       	push	r18
     390:	3f 93       	push	r19
     392:	4f 93       	push	r20
     394:	5f 93       	push	r21
     396:	6f 93       	push	r22
     398:	7f 93       	push	r23
     39a:	8f 93       	push	r24
     39c:	9f 93       	push	r25
     39e:	af 93       	push	r26
     3a0:	bf 93       	push	r27
     3a2:	cf 93       	push	r28
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     3a8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     3ac:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <__data_end>
     3b0:	88 23       	and	r24, r24
     3b2:	49 f0       	breq	.+18     	; 0x3c6 <__vector_20+0x42>
     3b4:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <bytes_in_out_buffer>
     3b8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ba:	29 f0       	breq	.+10     	; 0x3c6 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	8c 2f       	mov	r24, r28
     3c2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     3c6:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <bytes_in_input_buffer>
     3ca:	80 31       	cpi	r24, 0x10	; 16
     3cc:	20 f0       	brcs	.+8      	; 0x3d6 <__vector_20+0x52>
		input_overrun = 1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <input_overrun>
     3d4:	18 c0       	rjmp	.+48     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     3d6:	cd 30       	cpi	r28, 0x0D	; 13
     3d8:	09 f4       	brne	.+2      	; 0x3dc <__vector_20+0x58>
			c = '\n';
     3da:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     3dc:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <input_insert_pos>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	8e 0f       	add	r24, r30
     3e4:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <input_insert_pos>
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	e9 50       	subi	r30, 0x09	; 9
     3ec:	fd 4f       	sbci	r31, 0xFD	; 253
     3ee:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     3f0:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <bytes_in_input_buffer>
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
     3f6:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     3fa:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <input_insert_pos>
     3fe:	80 31       	cpi	r24, 0x10	; 16
     400:	11 f4       	brne	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     402:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <input_insert_pos>
		}
	}
}
     406:	ff 91       	pop	r31
     408:	ef 91       	pop	r30
     40a:	cf 91       	pop	r28
     40c:	bf 91       	pop	r27
     40e:	af 91       	pop	r26
     410:	9f 91       	pop	r25
     412:	8f 91       	pop	r24
     414:	7f 91       	pop	r23
     416:	6f 91       	pop	r22
     418:	5f 91       	pop	r21
     41a:	4f 91       	pop	r20
     41c:	3f 91       	pop	r19
     41e:	2f 91       	pop	r18
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <init_servo>:
#include "Project.h"
static uint16_t dutyVal;

void init_servo(void){
	/*	set up servo motor PWM for 50Hz on OC1A pin		*/
	dutyVal = 19999;
     42a:	8f e1       	ldi	r24, 0x1F	; 31
     42c:	9e e4       	ldi	r25, 0x4E	; 78
     42e:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <dutyVal+0x1>
     432:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <dutyVal>
	TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1A0);		/* Inverted Mode */
     436:	e0 e8       	ldi	r30, 0x80	; 128
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	82 6c       	ori	r24, 0xC2	; 194
     43e:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11);		/* Fast PWM setup. Prescaler of 8 */
     440:	e1 e8       	ldi	r30, 0x81	; 129
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	8a 61       	ori	r24, 0x1A	; 26
     448:	80 83       	st	Z, r24
	ICR1 = dutyVal;		/* Maximum timer count */
     44a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <dutyVal>
     44e:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <dutyVal+0x1>
     452:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     456:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     45a:	08 95       	ret

0000045c <move_up>:
}

void move_up(void) {
	/*	move the camera upwards an increment		*/
	uint16_t outputCom = OCR1A;
     45c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     460:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	if ((outputCom + 200) > (dutyVal - 800)){				// (20199-200) > 19199
     464:	88 53       	subi	r24, 0x38	; 56
     466:	9f 4f       	sbci	r25, 0xFF	; 255
     468:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <dutyVal>
     46c:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <dutyVal+0x1>
     470:	a9 01       	movw	r20, r18
     472:	40 52       	subi	r20, 0x20	; 32
     474:	53 40       	sbci	r21, 0x03	; 3
     476:	48 17       	cp	r20, r24
     478:	59 07       	cpc	r21, r25
     47a:	28 f4       	brcc	.+10     	; 0x486 <move_up+0x2a>
		OCR1A = dutyVal - 800;								//	make equal 19199
     47c:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     480:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     484:	08 95       	ret
	//} else if ((outputCom + 200) < (dutyVal - 2200)) {
	} else if ((outputCom + 200) < (dutyVal - 3000)) {
     486:	28 5b       	subi	r18, 0xB8	; 184
     488:	3b 40       	sbci	r19, 0x0B	; 11
     48a:	82 17       	cp	r24, r18
     48c:	93 07       	cpc	r25, r19
     48e:	28 f4       	brcc	.+10     	; 0x49a <move_up+0x3e>
		OCR1A = dutyVal - 3000;
     490:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     494:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     498:	08 95       	ret
		//OCR1A = dutyVal - 2200;
	} else {
		OCR1A += 200;										// otherwise increase between 19199 -> 17799
     49a:	e8 e8       	ldi	r30, 0x88	; 136
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	91 81       	ldd	r25, Z+1	; 0x01
     4a2:	88 53       	subi	r24, 0x38	; 56
     4a4:	9f 4f       	sbci	r25, 0xFF	; 255
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	80 83       	st	Z, r24
     4aa:	08 95       	ret

000004ac <move_down>:
	}
}

void move_down(void) {
	/* move the camera downwards	*/
	uint16_t outputCom = OCR1A;
     4ac:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4b0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	if ((outputCom - 200) > (dutyVal - 800)){				// (20199-200) > 19199
     4b4:	88 5c       	subi	r24, 0xC8	; 200
     4b6:	91 09       	sbc	r25, r1
     4b8:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <dutyVal>
     4bc:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <dutyVal+0x1>
     4c0:	a9 01       	movw	r20, r18
     4c2:	40 52       	subi	r20, 0x20	; 32
     4c4:	53 40       	sbci	r21, 0x03	; 3
     4c6:	48 17       	cp	r20, r24
     4c8:	59 07       	cpc	r21, r25
     4ca:	28 f4       	brcc	.+10     	; 0x4d6 <move_down+0x2a>
		OCR1A = dutyVal - 800;								//	make equal 19199
     4cc:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4d0:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4d4:	08 95       	ret
	//} else if ((outputCom - 200) < (dutyVal - 2200)) {
	} else if ((outputCom - 200) < (dutyVal - 3000)) {
     4d6:	28 5b       	subi	r18, 0xB8	; 184
     4d8:	3b 40       	sbci	r19, 0x0B	; 11
     4da:	82 17       	cp	r24, r18
     4dc:	93 07       	cpc	r25, r19
     4de:	28 f4       	brcc	.+10     	; 0x4ea <move_down+0x3e>
		OCR1A = dutyVal - 3000;
     4e0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4e4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4e8:	08 95       	ret
	} else {
		OCR1A -= 200;										// otherwise decrease between 19199 -> 17799
     4ea:	e8 e8       	ldi	r30, 0x88	; 136
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	88 5c       	subi	r24, 0xC8	; 200
     4f4:	91 09       	sbc	r25, r1
     4f6:	91 83       	std	Z+1, r25	; 0x01
     4f8:	80 83       	st	Z, r24
     4fa:	08 95       	ret

000004fc <init_tcnt0>:


 void init_tcnt0(void){
	 /* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	 // set global counter
	 tcnt0_ticks = 0L;
     4fc:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <tcnt0_ticks>
     500:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <tcnt0_ticks+0x1>
     504:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <tcnt0_ticks+0x2>
     508:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <tcnt0_ticks+0x3>
	 // set timer / counter
	 TCNT0 = 0;
     50c:	16 bc       	out	0x26, r1	; 38
	 // set output compare resgister; value to execute ISR
	 OCR0A = 124;
     50e:	8c e7       	ldi	r24, 0x7C	; 124
     510:	87 bd       	out	0x27, r24	; 39
	 // timer/counter control register A - set to clear when TCNT0 matches OCR0A
	 TCCR0A = (1<<WGM01);
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	84 bd       	out	0x24, r24	; 36
	 // set the timer to update at a fraction of a clock cycle
	 TCCR0B = (1<<CS01)|(1<<CS00);	// set to f(clk) / 64
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	85 bd       	out	0x25, r24	; 37
	 // timer/counter 1 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK0 |= (1<<OCIE0A);
     51a:	ee e6       	ldi	r30, 0x6E	; 110
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	82 60       	ori	r24, 0x02	; 2
     522:	80 83       	st	Z, r24
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR0 &= (1<<OCF0A);
     524:	85 b3       	in	r24, 0x15	; 21
     526:	82 70       	andi	r24, 0x02	; 2
     528:	85 bb       	out	0x15, r24	; 21
     52a:	08 95       	ret

0000052c <get_tcnt0_ticks>:
 }


 uint32_t get_tcnt0_ticks(void) {
	 /* internal reference clock, times how long the system has been on for	*/
	 uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
     52c:	2f b7       	in	r18, 0x3f	; 63
	 cli();
     52e:	f8 94       	cli
	 uint32_t return_value = tcnt0_ticks;
     530:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <tcnt0_ticks>
     534:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <tcnt0_ticks+0x1>
     538:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <tcnt0_ticks+0x2>
     53c:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <tcnt0_ticks+0x3>
	 if(interrupts_on) {
     540:	22 23       	and	r18, r18
     542:	0c f4       	brge	.+2      	; 0x546 <get_tcnt0_ticks+0x1a>
		 sei();
     544:	78 94       	sei
	 }
	 return return_value;
 }
     546:	08 95       	ret

00000548 <__vector_16>:


 ISR(TIMER0_COMPA_vect) {
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	af 93       	push	r26
     558:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 tcnt0_ticks++;
     55a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <tcnt0_ticks>
     55e:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <tcnt0_ticks+0x1>
     562:	a0 91 f3 01 	lds	r26, 0x01F3	; 0x8001f3 <tcnt0_ticks+0x2>
     566:	b0 91 f4 01 	lds	r27, 0x01F4	; 0x8001f4 <tcnt0_ticks+0x3>
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	a1 1d       	adc	r26, r1
     56e:	b1 1d       	adc	r27, r1
     570:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <tcnt0_ticks>
     574:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <tcnt0_ticks+0x1>
     578:	a0 93 f3 01 	sts	0x01F3, r26	; 0x8001f3 <tcnt0_ticks+0x2>
     57c:	b0 93 f4 01 	sts	0x01F4, r27	; 0x8001f4 <tcnt0_ticks+0x3>
 }
     580:	bf 91       	pop	r27
     582:	af 91       	pop	r26
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <init_tcnt2>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
     592:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 124;
     596:	8c e7       	ldi	r24, 0x7C	; 124
     598:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 124;
     59c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
     5a0:	e0 eb       	ldi	r30, 0xB0	; 176
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	83 6a       	ori	r24, 0xA3	; 163
     5a8:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
     5aa:	e1 eb       	ldi	r30, 0xB1	; 177
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	81 60       	ori	r24, 0x01	; 1
     5b2:	80 83       	st	Z, r24
     5b4:	08 95       	ret

000005b6 <makeInfo>:
}

info* makeInfo(void) {
	/* initialise the submersible's information struct,
	* which will contain all the necessary information to operate */
	info* info_ptr = malloc(sizeof(info));
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 1d 0b 	call	0x163a	; 0x163a <malloc>
	return info_ptr;
}
     5be:	08 95       	ret

000005c0 <initialise>:
			}
			break;
	}
}

void initialise(info* info_ptr){
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	8c 01       	movw	r16, r24
	
	/* Port initialisation */
	DDRA = (1<<PORTA0)|(1<<PORTA1);						/* Led and switch */
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	81 b9       	out	0x01, r24	; 1
	DDRB = (1<<PORTB3)|(1<<PORTB0)|(1<<PINB1);			/*	PWM camera, buttons	*/
     5ce:	8b e0       	ldi	r24, 0x0B	; 11
     5d0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB1)|(1<<PORTB0);								/* set button to be high */
     5d2:	85 b1       	in	r24, 0x05	; 5
     5d4:	83 60       	ori	r24, 0x03	; 3
     5d6:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~((1<<PORTB1)|(1<<PORTB0));								/*	make input	*/
     5d8:	84 b1       	in	r24, 0x04	; 4
     5da:	8c 7f       	andi	r24, 0xFC	; 252
     5dc:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5)|(1<<PORTC6)|(1<<PORTC7);
     5de:	8c ef       	ldi	r24, 0xFC	; 252
     5e0:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);			/* Servo */
     5e2:	8e ef       	ldi	r24, 0xFE	; 254
     5e4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND0);
     5e6:	50 98       	cbi	0x0a, 0	; 10
	init_serial_stdio(9600,0);											
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	60 e8       	ldi	r22, 0x80	; 128
     5ec:	75 e2       	ldi	r23, 0x25	; 37
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 32 01 	call	0x264	; 0x264 <init_serial_stdio>
	init_tcnt0();				/*	Timer		*/
     5f6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <init_tcnt0>
	init_tcnt2();				/*	Motor PWM	*/
     5fa:	0e 94 c9 02 	call	0x592	; 0x592 <init_tcnt2>
	init_servo();				/*	tcnt1 for servo PWM	*/
     5fe:	0e 94 15 02 	call	0x42a	; 0x42a <init_servo>
	srand(get_tcnt0_ticks());
     602:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
     606:	cb 01       	movw	r24, r22
     608:	0e 94 8f 0c 	call	0x191e	; 0x191e <srand>
	sei();
     60c:	78 94       	sei
	/****************************************************************************************************************************************************************/
	uint8_t check = 1;
	
	while (check){
		if (serial_input_available()){
			char start = fgetc(stdin);
     60e:	c4 e1       	ldi	r28, 0x14	; 20
     610:	d3 e0       	ldi	r29, 0x03	; 3
	move_up();
	*/
	/****************************************************************************************************************************************************************/
	uint8_t check = 1;
	
	while (check){
     612:	24 c0       	rjmp	.+72     	; 0x65c <initialise+0x9c>
		if (serial_input_available()){
			char start = fgetc(stdin);
     614:	88 81       	ld	r24, Y
     616:	99 81       	ldd	r25, Y+1	; 0x01
     618:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fgetc>
			if (start == 'o'){
     61c:	8f 36       	cpi	r24, 0x6F	; 111
     61e:	f1 f4       	brne	.+60     	; 0x65c <initialise+0x9c>
				fputs("Start\n", stdout);
     620:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <__iob+0x2>
     624:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <__iob+0x3>
     628:	46 e0       	ldi	r20, 0x06	; 6
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	89 e2       	ldi	r24, 0x29	; 41
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
				break;			/*	make sure it exits	*/
			}		
		}		
	}
	/* Structure information initialisation */
	info_ptr->start = 1;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	f8 01       	movw	r30, r16
     63c:	86 83       	std	Z+6, r24	; 0x06
	info_ptr->stepAct = '\0';
     63e:	14 82       	std	Z+4, r1	; 0x04
	info_ptr->maxStep = 150;
     640:	86 e9       	ldi	r24, 0x96	; 150
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	93 83       	std	Z+3, r25	; 0x03
     646:	82 83       	std	Z+2, r24	; 0x02
	//info_ptr->camera = 0;
	info_ptr->pwmSpeed = 0;
     648:	10 82       	st	Z, r1
	info_ptr->wormStop = '\0';
     64a:	12 86       	std	Z+10, r1	; 0x0a
	info_ptr->wormButtonOff = 0;
     64c:	13 86       	std	Z+11, r1	; 0x0b
	PORTC &= ~((1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5));
     64e:	88 b1       	in	r24, 0x08	; 8
     650:	83 7c       	andi	r24, 0xC3	; 195
     652:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable claw motors
     654:	8b b1       	in	r24, 0x0b	; 11
     656:	80 63       	ori	r24, 0x30	; 48
     658:	8b b9       	out	0x0b, r24	; 11
}
     65a:	05 c0       	rjmp	.+10     	; 0x666 <initialise+0xa6>
	*/
	/****************************************************************************************************************************************************************/
	uint8_t check = 1;
	
	while (check){
		if (serial_input_available()){
     65c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <serial_input_available>
     660:	88 23       	and	r24, r24
     662:	e1 f3       	breq	.-8      	; 0x65c <initialise+0x9c>
     664:	d7 cf       	rjmp	.-82     	; 0x614 <initialise+0x54>
	info_ptr->pwmSpeed = 0;
	info_ptr->wormStop = '\0';
	info_ptr->wormButtonOff = 0;
	PORTC &= ~((1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5));
	PORTD |= (1<<PORTD4)|(1<<PORTD5);	//enable claw motors
}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <custom_delay>:

void custom_delay(uint32_t ticks){
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	6b 01       	movw	r12, r22
     67a:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt1 updates every 0.002 seconds */
	uint32_t current_time;
	current_time = get_tcnt0_ticks();
     67c:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
	while((current_time + ticks) > get_tcnt0_ticks()){
     680:	c6 0e       	add	r12, r22
     682:	d7 1e       	adc	r13, r23
     684:	e8 1e       	adc	r14, r24
     686:	f9 1e       	adc	r15, r25
     688:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
     68c:	6c 15       	cp	r22, r12
     68e:	7d 05       	cpc	r23, r13
     690:	8e 05       	cpc	r24, r14
     692:	9f 05       	cpc	r25, r15
     694:	c8 f3       	brcs	.-14     	; 0x688 <custom_delay+0x18>
		;
	}
}
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	08 95       	ret

000006a0 <input>:
	* which will contain all the necessary information to operate */
	info* info_ptr = malloc(sizeof(info));
	return info_ptr;
}

void input(info* info_ptr){
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	64 97       	sbiw	r28, 0x14	; 20
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	7c 01       	movw	r14, r24
	if(!serial_input_available()){
     6c2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <serial_input_available>
     6c6:	88 23       	and	r24, r24
     6c8:	09 f4       	brne	.+2      	; 0x6cc <input+0x2c>
     6ca:	c9 c1       	rjmp	.+914    	; 0xa5e <__stack+0x15f>
		return;
	}
	char c = fgetc(stdin);
     6cc:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <__iob>
     6d0:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <__iob+0x1>
     6d4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fgetc>
     6d8:	8c 01       	movw	r16, r24
	
	/* echo character to next micro */
	if ((c != '-') && (c != '=')){
     6da:	8f 7e       	andi	r24, 0xEF	; 239
     6dc:	8d 32       	cpi	r24, 0x2D	; 45
     6de:	c1 f0       	breq	.+48     	; 0x710 <input+0x70>
		fputc(c, stdout);
     6e0:	0f 2e       	mov	r0, r31
     6e2:	f4 e1       	ldi	r31, 0x14	; 20
     6e4:	cf 2e       	mov	r12, r31
     6e6:	f3 e0       	ldi	r31, 0x03	; 3
     6e8:	df 2e       	mov	r13, r31
     6ea:	f0 2d       	mov	r31, r0
     6ec:	f6 01       	movw	r30, r12
     6ee:	62 81       	ldd	r22, Z+2	; 0x02
     6f0:	73 81       	ldd	r23, Z+3	; 0x03
     6f2:	80 2f       	mov	r24, r16
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
		fputs(": ", stdout);	
     6fa:	f6 01       	movw	r30, r12
     6fc:	22 81       	ldd	r18, Z+2	; 0x02
     6fe:	33 81       	ldd	r19, Z+3	; 0x03
     700:	42 e0       	ldi	r20, 0x02	; 2
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	80 e3       	ldi	r24, 0x30	; 48
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
	/*	initialise case constants	*/
	int16_t speed;								/*	speed of stepper / direction of worm gear (depending on which is used)	*/
	/*	output buffer	*/
	char buffer[20];
	/*	check received command	*/
	switch(c){
     710:	f8 01       	movw	r30, r16
     712:	ff 27       	eor	r31, r31
     714:	b0 97       	sbiw	r30, 0x20	; 32
     716:	ee 35       	cpi	r30, 0x5E	; 94
     718:	f1 05       	cpc	r31, r1
     71a:	08 f0       	brcs	.+2      	; 0x71e <input+0x7e>
     71c:	7e c1       	rjmp	.+764    	; 0xa1a <__stack+0x11b>
     71e:	e2 5c       	subi	r30, 0xC2	; 194
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__tablejump2__>
		case 'a' :
			// turn left
			PORTD &= ~(1<<PORTD2);
     726:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     728:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     72a:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     72c:	47 98       	cbi	0x08, 7	; 8
			break;
     72e:	97 c1       	rjmp	.+814    	; 0xa5e <__stack+0x15f>
		case 'w' :
			// backwards
			PORTD &= ~(1<<PORTD2);
     730:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD3);
     732:	5b 9a       	sbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     734:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     736:	47 9a       	sbi	0x08, 7	; 8
			break;
     738:	92 c1       	rjmp	.+804    	; 0xa5e <__stack+0x15f>
		case 'd' :
			// turn right
			PORTD |= (1<<PORTD2);
     73a:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     73c:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     73e:	46 98       	cbi	0x08, 6	; 8
			PORTC |= (1<<PORTC7);
     740:	47 9a       	sbi	0x08, 7	; 8
			break;
     742:	8d c1       	rjmp	.+794    	; 0xa5e <__stack+0x15f>
		case 's' :
			// forward
			PORTD |= (1<<PORTD2);
     744:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     746:	5b 98       	cbi	0x0b, 3	; 11
			PORTC |= (1<<PORTC6);
     748:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     74a:	47 98       	cbi	0x08, 7	; 8
			break;
     74c:	88 c1       	rjmp	.+784    	; 0xa5e <__stack+0x15f>
		case 'r' :
			// release claw
			release_step();
     74e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <release_step>
			info_ptr->stepAct = '\0';
     752:	f7 01       	movw	r30, r14
     754:	14 82       	std	Z+4, r1	; 0x04
			break;
     756:	83 c1       	rjmp	.+774    	; 0xa5e <__stack+0x15f>
		case '+' :
			// relay to winch to lift up
			break;
		case '=' :
			// someone panic'd; winch to lift up
			fputc('+', stdout);
     758:	04 e1       	ldi	r16, 0x14	; 20
     75a:	13 e0       	ldi	r17, 0x03	; 3
     75c:	f8 01       	movw	r30, r16
     75e:	62 81       	ldd	r22, Z+2	; 0x02
     760:	73 81       	ldd	r23, Z+3	; 0x03
     762:	8b e2       	ldi	r24, 0x2B	; 43
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
			fputs(": ", stdout);
     76a:	f8 01       	movw	r30, r16
     76c:	22 81       	ldd	r18, Z+2	; 0x02
     76e:	33 81       	ldd	r19, Z+3	; 0x03
     770:	42 e0       	ldi	r20, 0x02	; 2
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 e3       	ldi	r24, 0x30	; 48
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
			break;
     780:	6e c1       	rjmp	.+732    	; 0xa5e <__stack+0x15f>
		case '-' :
			// lower winch
			fputc('_', stdout);
     782:	04 e1       	ldi	r16, 0x14	; 20
     784:	13 e0       	ldi	r17, 0x03	; 3
     786:	f8 01       	movw	r30, r16
     788:	62 81       	ldd	r22, Z+2	; 0x02
     78a:	73 81       	ldd	r23, Z+3	; 0x03
     78c:	8f e5       	ldi	r24, 0x5F	; 95
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
			fputs(": ", stdout);
     794:	f8 01       	movw	r30, r16
     796:	22 81       	ldd	r18, Z+2	; 0x02
     798:	33 81       	ldd	r19, Z+3	; 0x03
     79a:	42 e0       	ldi	r20, 0x02	; 2
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	80 e3       	ldi	r24, 0x30	; 48
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
			break;
     7aa:	59 c1       	rjmp	.+690    	; 0xa5e <__stack+0x15f>
		case 'e' :
			// activate claw
			if (info_ptr->stepSpeed < 0){
     7ac:	f7 01       	movw	r30, r14
     7ae:	81 81       	ldd	r24, Z+1	; 0x01
     7b0:	88 23       	and	r24, r24
     7b2:	14 f4       	brge	.+4      	; 0x7b8 <input+0x118>
				info_ptr->stepSpeed = -info_ptr->stepSpeed;
     7b4:	81 95       	neg	r24
     7b6:	81 83       	std	Z+1, r24	; 0x01
			}
			sprintf(buffer, "activate %d\n", info_ptr->stepSpeed);
     7b8:	f7 01       	movw	r30, r14
     7ba:	81 81       	ldd	r24, Z+1	; 0x01
     7bc:	28 2f       	mov	r18, r24
     7be:	08 2e       	mov	r0, r24
     7c0:	00 0c       	add	r0, r0
     7c2:	33 0b       	sbc	r19, r19
     7c4:	3f 93       	push	r19
     7c6:	8f 93       	push	r24
     7c8:	83 e3       	ldi	r24, 0x33	; 51
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	8e 01       	movw	r16, r28
     7d2:	0f 5f       	subi	r16, 0xFF	; 255
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	1f 93       	push	r17
     7d8:	0f 93       	push	r16
     7da:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
			fputs(buffer, stdout);
     7de:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <__iob+0x2>
     7e2:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <__iob+0x3>
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
			info_ptr->stepAct = 'A';
     7ec:	81 e4       	ldi	r24, 0x41	; 65
     7ee:	f7 01       	movw	r30, r14
     7f0:	84 83       	std	Z+4, r24	; 0x04
			break;
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	2f c1       	rjmp	.+606    	; 0xa5e <__stack+0x15f>
		case 'q' :
			// retract claw
			if (info_ptr->stepSpeed > 0){
     800:	f7 01       	movw	r30, r14
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	18 16       	cp	r1, r24
     806:	14 f4       	brge	.+4      	; 0x80c <input+0x16c>
					info_ptr->stepSpeed = -info_ptr->stepSpeed;
     808:	81 95       	neg	r24
     80a:	81 83       	std	Z+1, r24	; 0x01
			}
			sprintf(buffer, "retract %d\n", info_ptr->stepSpeed);
     80c:	f7 01       	movw	r30, r14
     80e:	81 81       	ldd	r24, Z+1	; 0x01
     810:	28 2f       	mov	r18, r24
     812:	08 2e       	mov	r0, r24
     814:	00 0c       	add	r0, r0
     816:	33 0b       	sbc	r19, r19
     818:	3f 93       	push	r19
     81a:	8f 93       	push	r24
     81c:	80 e4       	ldi	r24, 0x40	; 64
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	8e 01       	movw	r16, r28
     826:	0f 5f       	subi	r16, 0xFF	; 255
     828:	1f 4f       	sbci	r17, 0xFF	; 255
     82a:	1f 93       	push	r17
     82c:	0f 93       	push	r16
     82e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
			fputs(buffer, stdout);
     832:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <__iob+0x2>
     836:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <__iob+0x3>
     83a:	c8 01       	movw	r24, r16
     83c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
			info_ptr->stepAct = 'R';
     840:	82 e5       	ldi	r24, 0x52	; 82
     842:	f7 01       	movw	r30, r14
     844:	84 83       	std	Z+4, r24	; 0x04
			break;
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	05 c1       	rjmp	.+522    	; 0xa5e <__stack+0x15f>
		case '`' :
			info_ptr->pwmSpeed = 0;
     854:	f7 01       	movw	r30, r14
     856:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	87 83       	std	Z+7, r24	; 0x07
			break;
     85c:	00 c1       	rjmp	.+512    	; 0xa5e <__stack+0x15f>
		case '0' :
			info_ptr->pwmSpeed = 0;
     85e:	f7 01       	movw	r30, r14
     860:	10 82       	st	Z, r1
			info_ptr->motorAct = 1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	87 83       	std	Z+7, r24	; 0x07
			break;
     866:	fb c0       	rjmp	.+502    	; 0xa5e <__stack+0x15f>
		case '1' :
			info_ptr->pwmSpeed = 20;
     868:	84 e1       	ldi	r24, 0x14	; 20
     86a:	f7 01       	movw	r30, r14
     86c:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	87 83       	std	Z+7, r24	; 0x07
			break;
     872:	f5 c0       	rjmp	.+490    	; 0xa5e <__stack+0x15f>
		case '2' :
			info_ptr->pwmSpeed = 40;
     874:	88 e2       	ldi	r24, 0x28	; 40
     876:	f7 01       	movw	r30, r14
     878:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	87 83       	std	Z+7, r24	; 0x07
			break;
     87e:	ef c0       	rjmp	.+478    	; 0xa5e <__stack+0x15f>
		case '3' :
			info_ptr->pwmSpeed = 60;
     880:	8c e3       	ldi	r24, 0x3C	; 60
     882:	f7 01       	movw	r30, r14
     884:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	87 83       	std	Z+7, r24	; 0x07
			break;
     88a:	e9 c0       	rjmp	.+466    	; 0xa5e <__stack+0x15f>
		case '4' :
			info_ptr->pwmSpeed = 80;
     88c:	80 e5       	ldi	r24, 0x50	; 80
     88e:	f7 01       	movw	r30, r14
     890:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	87 83       	std	Z+7, r24	; 0x07
			break;
     896:	e3 c0       	rjmp	.+454    	; 0xa5e <__stack+0x15f>
		case '5' :
			info_ptr->pwmSpeed = 100;
     898:	84 e6       	ldi	r24, 0x64	; 100
     89a:	f7 01       	movw	r30, r14
     89c:	80 83       	st	Z, r24
			info_ptr->motorAct = 1;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	87 83       	std	Z+7, r24	; 0x07
			break;
     8a2:	dd c0       	rjmp	.+442    	; 0xa5e <__stack+0x15f>
		case '{' :
			speed = info_ptr->stepSpeed - 10;
     8a4:	f7 01       	movw	r30, r14
     8a6:	21 81       	ldd	r18, Z+1	; 0x01
			if (speed > -110){
     8a8:	82 2f       	mov	r24, r18
     8aa:	02 2e       	mov	r0, r18
     8ac:	00 0c       	add	r0, r0
     8ae:	99 0b       	sbc	r25, r25
     8b0:	0a 97       	sbiw	r24, 0x0a	; 10
     8b2:	83 39       	cpi	r24, 0x93	; 147
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	1c f0       	brlt	.+6      	; 0x8be <input+0x21e>
				info_ptr->stepSpeed -= 10;
     8b8:	2a 50       	subi	r18, 0x0A	; 10
     8ba:	f7 01       	movw	r30, r14
     8bc:	21 83       	std	Z+1, r18	; 0x01
			}
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     8be:	f7 01       	movw	r30, r14
     8c0:	81 81       	ldd	r24, Z+1	; 0x01
     8c2:	28 2f       	mov	r18, r24
     8c4:	08 2e       	mov	r0, r24
     8c6:	00 0c       	add	r0, r0
     8c8:	33 0b       	sbc	r19, r19
     8ca:	3f 93       	push	r19
     8cc:	8f 93       	push	r24
     8ce:	8c e4       	ldi	r24, 0x4C	; 76
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	8e 01       	movw	r16, r28
     8d8:	0f 5f       	subi	r16, 0xFF	; 255
     8da:	1f 4f       	sbci	r17, 0xFF	; 255
     8dc:	1f 93       	push	r17
     8de:	0f 93       	push	r16
     8e0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
			fputs(buffer, stdout);
     8e4:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <__iob+0x2>
     8e8:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <__iob+0x3>
     8ec:	c8 01       	movw	r24, r16
     8ee:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
			break;
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	af c0       	rjmp	.+350    	; 0xa5e <__stack+0x15f>
		case '}' :
			speed = info_ptr->stepSpeed - 10;
     900:	f7 01       	movw	r30, r14
     902:	21 81       	ldd	r18, Z+1	; 0x01
			if (speed < 110){
     904:	82 2f       	mov	r24, r18
     906:	02 2e       	mov	r0, r18
     908:	00 0c       	add	r0, r0
     90a:	99 0b       	sbc	r25, r25
     90c:	0a 97       	sbiw	r24, 0x0a	; 10
     90e:	8e 36       	cpi	r24, 0x6E	; 110
     910:	91 05       	cpc	r25, r1
     912:	14 f4       	brge	.+4      	; 0x918 <__stack+0x19>
				info_ptr->stepSpeed += 10;
     914:	26 5f       	subi	r18, 0xF6	; 246
     916:	21 83       	std	Z+1, r18	; 0x01
			}
			sprintf(buffer, "Step speed %d\n", info_ptr->stepSpeed);
     918:	f7 01       	movw	r30, r14
     91a:	81 81       	ldd	r24, Z+1	; 0x01
     91c:	28 2f       	mov	r18, r24
     91e:	08 2e       	mov	r0, r24
     920:	00 0c       	add	r0, r0
     922:	33 0b       	sbc	r19, r19
     924:	3f 93       	push	r19
     926:	8f 93       	push	r24
     928:	8c e4       	ldi	r24, 0x4C	; 76
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	9f 93       	push	r25
     92e:	8f 93       	push	r24
     930:	8e 01       	movw	r16, r28
     932:	0f 5f       	subi	r16, 0xFF	; 255
     934:	1f 4f       	sbci	r17, 0xFF	; 255
     936:	1f 93       	push	r17
     938:	0f 93       	push	r16
     93a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
			fputs(buffer, stdout);
     93e:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <__iob+0x2>
     942:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <__iob+0x3>
     946:	c8 01       	movw	r24, r16
     948:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
			break;
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	82 c0       	rjmp	.+260    	; 0xa5e <__stack+0x15f>
		case '[' :
			move_up();
     95a:	0e 94 2e 02 	call	0x45c	; 0x45c <move_up>
			fputs("Camera up \n", stdout);
     95e:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <__iob+0x2>
     962:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <__iob+0x3>
     966:	4b e0       	ldi	r20, 0x0B	; 11
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	8b e5       	ldi	r24, 0x5B	; 91
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
			break;
     976:	73 c0       	rjmp	.+230    	; 0xa5e <__stack+0x15f>
		case ']' :
			move_down();
     978:	0e 94 56 02 	call	0x4ac	; 0x4ac <move_down>
			fputs("Camera down \n", stdout);
     97c:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <__iob+0x2>
     980:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <__iob+0x3>
     984:	4d e0       	ldi	r20, 0x0D	; 13
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	87 e6       	ldi	r24, 0x67	; 103
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
			break;
     994:	64 c0       	rjmp	.+200    	; 0xa5e <__stack+0x15f>
		case ' ' :
			/*	stop command activate	*/
			info_ptr->pwmSpeed = 0;
     996:	f7 01       	movw	r30, r14
     998:	10 82       	st	Z, r1
			info_ptr->stopCommand = 1;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	85 83       	std	Z+5, r24	; 0x05
			info_ptr->motorAct = 0;
     99e:	17 82       	std	Z+7, r1	; 0x07
			info_ptr->stepAct = '\0';
     9a0:	14 82       	std	Z+4, r1	; 0x04
			//fputc(' ', stdout);
			break;
     9a2:	5d c0       	rjmp	.+186    	; 0xa5e <__stack+0x15f>
		case 'l' :
			/*	toggle light	*/
			if (PORTA & (1<<PORTA1)){
     9a4:	11 9b       	sbis	0x02, 1	; 2
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0xad>
				PORTA &= ~(1<<PORTA1);
     9a8:	11 98       	cbi	0x02, 1	; 2
     9aa:	59 c0       	rjmp	.+178    	; 0xa5e <__stack+0x15f>
			} else {
				PORTA |= (1<<PORTA1);
     9ac:	11 9a       	sbi	0x02, 1	; 2
     9ae:	57 c0       	rjmp	.+174    	; 0xa5e <__stack+0x15f>
			}
			break;
		case 'L' :
			PORTA |= (1<<PORTA1);
     9b0:	11 9a       	sbi	0x02, 1	; 2
			break;
     9b2:	55 c0       	rjmp	.+170    	; 0xa5e <__stack+0x15f>
		case 'j' : 
			/* move claw backwards	*/
			info_ptr->wormCom = 'j';
     9b4:	8a e6       	ldi	r24, 0x6A	; 106
     9b6:	f7 01       	movw	r30, r14
     9b8:	81 87       	std	Z+9, r24	; 0x09
			break;
     9ba:	51 c0       	rjmp	.+162    	; 0xa5e <__stack+0x15f>
		case 'k' : 
			/* move claw forwards	*/
			info_ptr->wormCom = 'k';
     9bc:	8b e6       	ldi	r24, 0x6B	; 107
     9be:	f7 01       	movw	r30, r14
     9c0:	81 87       	std	Z+9, r24	; 0x09
			break;
     9c2:	4d c0       	rjmp	.+154    	; 0xa5e <__stack+0x15f>
		case 'z' :
			/*	drive the submersible's nose downwards	*/
			info_ptr->pivotCom = 'z';
     9c4:	8a e7       	ldi	r24, 0x7A	; 122
     9c6:	f7 01       	movw	r30, r14
     9c8:	84 87       	std	Z+12, r24	; 0x0c
			break;
     9ca:	49 c0       	rjmp	.+146    	; 0xa5e <__stack+0x15f>
		case 'x' :
			/*	drive the submersible's nose upwards	*/
			info_ptr->pivotCom = 'x';
     9cc:	88 e7       	ldi	r24, 0x78	; 120
     9ce:	f7 01       	movw	r30, r14
     9d0:	84 87       	std	Z+12, r24	; 0x0c
			break;
     9d2:	45 c0       	rjmp	.+138    	; 0xa5e <__stack+0x15f>
		case 'v' :
			/*		cancel pivot motor actuation	*/
			//PORTC |= (1<<PORTC3)|(1<<PORTC4);
			pivot_off();
     9d4:	0e 94 bb 00 	call	0x176	; 0x176 <pivot_off>
			break;
     9d8:	42 c0       	rjmp	.+132    	; 0xa5e <__stack+0x15f>
		case 'c' :
			/*		cancel pivot motor actuation	*/
			//PORTC |= (1<<PORTC3)|(1<<PORTC4);
			pivot_off();
     9da:	0e 94 bb 00 	call	0x176	; 0x176 <pivot_off>
			break;
     9de:	3f c0       	rjmp	.+126    	; 0xa5e <__stack+0x15f>
		case '?' :
			// send sense command up
			break;
		case 'o' :
			/*		restart		*/
			fputs("started\n", stdout);
     9e0:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <__iob+0x2>
     9e4:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <__iob+0x3>
     9e8:	48 e0       	ldi	r20, 0x08	; 8
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	85 e7       	ldi	r24, 0x75	; 117
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
			break;
     9f8:	32 c0       	rjmp	.+100    	; 0xa5e <__stack+0x15f>
		case 'X' :
			/*	buttons are shorting for no reason, disable button control for claw */
			info_ptr->wormButtonOff = 1;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	f7 01       	movw	r30, r14
     9fe:	83 87       	std	Z+11, r24	; 0x0b
			break;
     a00:	2e c0       	rjmp	.+92     	; 0xa5e <__stack+0x15f>
		case 'H' :
			/*	software restart	*/
			PORTA = 0x00;
     a02:	12 b8       	out	0x02, r1	; 2
			PORTB = 0x00;
     a04:	15 b8       	out	0x05, r1	; 5
			PORTC = 0x00;
     a06:	18 b8       	out	0x08, r1	; 8
			PORTD = 0x00;
     a08:	1b b8       	out	0x0b, r1	; 11
			DDRA = 0x00;
     a0a:	11 b8       	out	0x01, r1	; 1
			DDRB = 0x00;
     a0c:	14 b8       	out	0x04, r1	; 4
			DDRC = 0x00;
     a0e:	17 b8       	out	0x07, r1	; 7
			DDRD = 0x00;
     a10:	1a b8       	out	0x0a, r1	; 10
			initialise(info_ptr);
     a12:	c7 01       	movw	r24, r14
     a14:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <initialise>
			break;
     a18:	22 c0       	rjmp	.+68     	; 0xa5e <__stack+0x15f>
		default:
			fputs("stupid.\n", stdout);
     a1a:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <__iob+0x2>
     a1e:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <__iob+0x3>
     a22:	48 e0       	ldi	r20, 0x08	; 8
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	8e e7       	ldi	r24, 0x7E	; 126
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
			++info_ptr->stupidCount;
     a32:	f7 01       	movw	r30, r14
     a34:	80 85       	ldd	r24, Z+8	; 0x08
     a36:	8f 5f       	subi	r24, 0xFF	; 255
     a38:	80 87       	std	Z+8, r24	; 0x08
			if (info_ptr->stupidCount >= 10){
     a3a:	8a 30       	cpi	r24, 0x0A	; 10
     a3c:	80 f0       	brcs	.+32     	; 0xa5e <__stack+0x15f>
					fputc('H', stdout);
     a3e:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <__iob+0x2>
     a42:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <__iob+0x3>
     a46:	88 e4       	ldi	r24, 0x48	; 72
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
					custom_delay(1000);
     a4e:	68 ee       	ldi	r22, 0xE8	; 232
     a50:	73 e0       	ldi	r23, 0x03	; 3
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 38 03 	call	0x670	; 0x670 <custom_delay>
					info_ptr->stupidCount = 0;
     a5a:	f7 01       	movw	r30, r14
     a5c:	10 86       	std	Z+8, r1	; 0x08
			}
			break;
	}
}
     a5e:	64 96       	adiw	r28, 0x14	; 20
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	08 95       	ret

00000a7c <main>:
void initialise(info* info_ptr);
void input(info* info_ptr);


/* functional code	*/
int main(void) {
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	e4 97       	sbiw	r28, 0x34	; 52
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
	/* initialise the submersible's information struct */
	info* info_ptr = makeInfo();
     a90:	0e 94 db 02 	call	0x5b6	; 0x5b6 <makeInfo>
     a94:	8c 01       	movw	r16, r24
	initialise(info_ptr);
     a96:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <initialise>
		if(serial_input_available()){
			input(info_ptr);
		}
		/* Controls propulsion motor speeds from received serial */
		if (info_ptr->motorAct){
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     a9a:	33 24       	eor	r3, r3
     a9c:	3a 94       	dec	r3
     a9e:	0f 2e       	mov	r0, r31
     aa0:	f4 e6       	ldi	r31, 0x64	; 100
     aa2:	af 2e       	mov	r10, r31
     aa4:	b1 2c       	mov	r11, r1
     aa6:	f0 2d       	mov	r31, r0
     aa8:	0f 2e       	mov	r0, r31
     aaa:	f3 eb       	ldi	r31, 0xB3	; 179
     aac:	6f 2e       	mov	r6, r31
     aae:	71 2c       	mov	r7, r1
     ab0:	f0 2d       	mov	r31, r0
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     ab2:	0f 2e       	mov	r0, r31
     ab4:	f4 eb       	ldi	r31, 0xB4	; 180
     ab6:	4f 2e       	mov	r4, r31
     ab8:	51 2c       	mov	r5, r1
     aba:	f0 2d       	mov	r31, r0
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
			/*	run stepper motor	*/
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     abc:	ce 01       	movw	r24, r28
     abe:	4f 96       	adiw	r24, 0x1f	; 31
     ac0:	9c ab       	std	Y+52, r25	; 0x34
     ac2:	8b ab       	std	Y+51, r24	; 0x33
			fputs(buffer, stdout);
     ac4:	0f 2e       	mov	r0, r31
     ac6:	f4 e1       	ldi	r31, 0x14	; 20
     ac8:	cf 2e       	mov	r12, r31
     aca:	f3 e0       	ldi	r31, 0x03	; 3
     acc:	df 2e       	mov	r13, r31
     ace:	f0 2d       	mov	r31, r0
				step(info_ptr);
				current = current_step();				
			}
			current = current_step();
			char buffer1[30];
			sprintf(buffer1, "step POS: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     ad0:	fe 01       	movw	r30, r28
     ad2:	31 96       	adiw	r30, 0x01	; 1
     ad4:	4f 01       	movw	r8, r30
					direction = 0;
			} else {
					direction = 1;
			}
			/*	actuate pivot motor at full power	*/
			move_pivot(direction);
     ad6:	22 24       	eor	r2, r2
     ad8:	23 94       	inc	r2
	initialise(info_ptr);
	
	/* Reads serial input and executes commands based on input */	
	while(1) {
		/* Executes submersible commands and transmits serial to float micro controller  */
		if(serial_input_available()){
     ada:	0e 94 79 01 	call	0x2f2	; 0x2f2 <serial_input_available>
     ade:	88 23       	and	r24, r24
     ae0:	19 f0       	breq	.+6      	; 0xae8 <main+0x6c>
			input(info_ptr);
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <input>
		}
		/* Controls propulsion motor speeds from received serial */
		if (info_ptr->motorAct){
     ae8:	f8 01       	movw	r30, r16
     aea:	87 81       	ldd	r24, Z+7	; 0x07
     aec:	88 23       	and	r24, r24
     aee:	b1 f0       	breq	.+44     	; 0xb1c <main+0xa0>
			OCR2A = (255 * info_ptr->pwmSpeed)/100;
     af0:	80 81       	ld	r24, Z
     af2:	38 9e       	mul	r3, r24
     af4:	c0 01       	movw	r24, r0
     af6:	11 24       	eor	r1, r1
     af8:	b5 01       	movw	r22, r10
     afa:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     afe:	f3 01       	movw	r30, r6
     b00:	60 83       	st	Z, r22
			OCR2B = (255 * info_ptr->pwmSpeed)/100;
     b02:	f8 01       	movw	r30, r16
     b04:	80 81       	ld	r24, Z
     b06:	38 9e       	mul	r3, r24
     b08:	c0 01       	movw	r24, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	b5 01       	movw	r22, r10
     b0e:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     b12:	f2 01       	movw	r30, r4
     b14:	60 83       	st	Z, r22
			info_ptr->motorAct = 0;
     b16:	f8 01       	movw	r30, r16
     b18:	17 82       	std	Z+7, r1	; 0x07
			info_ptr->stupidCount = 0;
     b1a:	10 86       	std	Z+8, r1	; 0x08
		}
		/* Stops all submersible systems, holds claw in place */
		if (info_ptr->stopCommand){
     b1c:	f8 01       	movw	r30, r16
     b1e:	85 81       	ldd	r24, Z+5	; 0x05
     b20:	88 23       	and	r24, r24
     b22:	89 f0       	breq	.+34     	; 0xb46 <main+0xca>
			/* stop everything */
			PORTD &= ~(1<<PORTD2);
     b24:	5a 98       	cbi	0x0b, 2	; 11
			PORTD &= ~(1<<PORTD3);
     b26:	5b 98       	cbi	0x0b, 3	; 11
			PORTC &= ~(1<<PORTC6);
     b28:	46 98       	cbi	0x08, 6	; 8
			PORTC &= ~(1<<PORTC7);
     b2a:	47 98       	cbi	0x08, 7	; 8
			if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     b2c:	84 81       	ldd	r24, Z+4	; 0x04
     b2e:	81 34       	cpi	r24, 0x41	; 65
     b30:	11 f0       	breq	.+4      	; 0xb36 <main+0xba>
     b32:	82 35       	cpi	r24, 0x52	; 82
     b34:	21 f4       	brne	.+8      	; 0xb3e <main+0xc2>
				hold_step();
     b36:	0e 94 7f 07 	call	0xefe	; 0xefe <hold_step>
				info_ptr->stepAct = '\0';
     b3a:	f8 01       	movw	r30, r16
     b3c:	14 82       	std	Z+4, r1	; 0x04
			}
			info_ptr->stopCommand = 0;
     b3e:	f8 01       	movw	r30, r16
     b40:	15 82       	std	Z+5, r1	; 0x05
			info_ptr->stupidCount = 0;
     b42:	10 86       	std	Z+8, r1	; 0x08
     b44:	cc c1       	rjmp	.+920    	; 0xede <main+0x462>
			//worm_off();						/*	claw off, should already be 	*/
			//pivot_off();					/*	pivot control motor off */
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     b46:	f8 01       	movw	r30, r16
     b48:	84 81       	ldd	r24, Z+4	; 0x04
     b4a:	81 34       	cpi	r24, 0x41	; 65
     b4c:	19 f0       	breq	.+6      	; 0xb54 <main+0xd8>
     b4e:	82 35       	cpi	r24, 0x52	; 82
     b50:	09 f0       	breq	.+2      	; 0xb54 <main+0xd8>
     b52:	c4 c0       	rjmp	.+392    	; 0xcdc <main+0x260>
			/*	run stepper motor	*/
			int16_t current = current_step();
     b54:	0e 94 7a 07 	call	0xef4	; 0xef4 <current_step>
     b58:	7c 01       	movw	r14, r24
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     b5a:	f8 01       	movw	r30, r16
     b5c:	84 81       	ldd	r24, Z+4	; 0x04
     b5e:	1f 92       	push	r1
     b60:	8f 93       	push	r24
     b62:	81 81       	ldd	r24, Z+1	; 0x01
     b64:	28 2f       	mov	r18, r24
     b66:	08 2e       	mov	r0, r24
     b68:	00 0c       	add	r0, r0
     b6a:	33 0b       	sbc	r19, r19
     b6c:	3f 93       	push	r19
     b6e:	8f 93       	push	r24
     b70:	ff 92       	push	r15
     b72:	ef 92       	push	r14
     b74:	87 e8       	ldi	r24, 0x87	; 135
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	9f 93       	push	r25
     b7a:	8f 93       	push	r24
     b7c:	fc a9       	ldd	r31, Y+52	; 0x34
     b7e:	ff 93       	push	r31
     b80:	2b a9       	ldd	r18, Y+51	; 0x33
     b82:	2f 93       	push	r18
     b84:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
			fputs(buffer, stdout);
     b88:	f6 01       	movw	r30, r12
     b8a:	62 81       	ldd	r22, Z+2	; 0x02
     b8c:	73 81       	ldd	r23, Z+3	; 0x03
     b8e:	ce 01       	movw	r24, r28
     b90:	4f 96       	adiw	r24, 0x1f	; 31
     b92:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	f8 01       	movw	r30, r16
     ba2:	81 81       	ldd	r24, Z+1	; 0x01
     ba4:	88 23       	and	r24, r24
     ba6:	dc f4       	brge	.+54     	; 0xbde <main+0x162>
     ba8:	84 81       	ldd	r24, Z+4	; 0x04
     baa:	82 35       	cpi	r24, 0x52	; 82
     bac:	c1 f4       	brne	.+48     	; 0xbde <main+0x162>
     bae:	82 81       	ldd	r24, Z+2	; 0x02
     bb0:	93 81       	ldd	r25, Z+3	; 0x03
     bb2:	e8 16       	cp	r14, r24
     bb4:	f9 06       	cpc	r15, r25
     bb6:	a8 f1       	brcs	.+106    	; 0xc22 <main+0x1a6>
				/*	stepper is at a limit, but wants to turn the right way -> move claw	off limit   */
					step(info_ptr);
     bb8:	c8 01       	movw	r24, r16
     bba:	0e 94 25 0a 	call	0x144a	; 0x144a <step>
					current = current_step();
     bbe:	0e 94 7a 07 	call	0xef4	; 0xef4 <current_step>
     bc2:	7c 01       	movw	r14, r24
			/*	run stepper motor	*/
			int16_t current = current_step();
			char buffer[20];
			sprintf(buffer, "step: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
			fputs(buffer, stdout);
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
     bc4:	f8 01       	movw	r30, r16
     bc6:	81 81       	ldd	r24, Z+1	; 0x01
     bc8:	88 23       	and	r24, r24
     bca:	4c f4       	brge	.+18     	; 0xbde <main+0x162>
     bcc:	84 81       	ldd	r24, Z+4	; 0x04
     bce:	82 35       	cpi	r24, 0x52	; 82
     bd0:	31 f4       	brne	.+12     	; 0xbde <main+0x162>
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	93 81       	ldd	r25, Z+3	; 0x03
     bd6:	e8 16       	cp	r14, r24
     bd8:	f9 06       	cpc	r15, r25
     bda:	70 f7       	brcc	.-36     	; 0xbb8 <main+0x13c>
     bdc:	22 c0       	rjmp	.+68     	; 0xc22 <main+0x1a6>
				/*	stepper is at a limit, but wants to turn the right way -> move claw	off limit   */
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     bde:	f8 01       	movw	r30, r16
     be0:	81 81       	ldd	r24, Z+1	; 0x01
     be2:	18 16       	cp	r1, r24
     be4:	c4 f4       	brge	.+48     	; 0xc16 <main+0x19a>
     be6:	84 81       	ldd	r24, Z+4	; 0x04
     be8:	81 34       	cpi	r24, 0x41	; 65
     bea:	a9 f4       	brne	.+42     	; 0xc16 <main+0x19a>
     bec:	1e 14       	cp	r1, r14
     bee:	1f 04       	cpc	r1, r15
     bf0:	0c f4       	brge	.+2      	; 0xbf4 <main+0x178>
     bf2:	78 c1       	rjmp	.+752    	; 0xee4 <main+0x468>
				/*	stepper is at a limit, but wants to turn the right way -> move claw off limit	*/
				step(info_ptr);
     bf4:	c8 01       	movw	r24, r16
     bf6:	0e 94 25 0a 	call	0x144a	; 0x144a <step>
				current = current_step();
     bfa:	0e 94 7a 07 	call	0xef4	; 0xef4 <current_step>
     bfe:	7c 01       	movw	r14, r24
			while ((info_ptr->stepSpeed < 0) && (info_ptr->stepAct == 'R') && (current >= info_ptr->maxStep)){
				/*	stepper is at a limit, but wants to turn the right way -> move claw	off limit   */
					step(info_ptr);
					current = current_step();
			}
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
     c00:	f8 01       	movw	r30, r16
     c02:	81 81       	ldd	r24, Z+1	; 0x01
     c04:	18 16       	cp	r1, r24
     c06:	3c f4       	brge	.+14     	; 0xc16 <main+0x19a>
     c08:	84 81       	ldd	r24, Z+4	; 0x04
     c0a:	81 34       	cpi	r24, 0x41	; 65
     c0c:	21 f4       	brne	.+8      	; 0xc16 <main+0x19a>
     c0e:	1e 14       	cp	r1, r14
     c10:	1f 04       	cpc	r1, r15
     c12:	84 f7       	brge	.-32     	; 0xbf4 <main+0x178>
     c14:	67 c1       	rjmp	.+718    	; 0xee4 <main+0x468>
				/*	stepper is at a limit, but wants to turn the right way -> move claw off limit	*/
				step(info_ptr);
				current = current_step();
			}
			while ((current < info_ptr->maxStep) && (current >= 0)){
     c16:	f8 01       	movw	r30, r16
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	e8 16       	cp	r14, r24
     c1e:	f9 06       	cpc	r15, r25
     c20:	50 f5       	brcc	.+84     	; 0xc76 <main+0x1fa>
     c22:	ff 20       	and	r15, r15
     c24:	44 f1       	brlt	.+80     	; 0xc76 <main+0x1fa>
				/*	stepper is not at a limit and wants to move -> allow it		*/
				if (serial_input_available()){
     c26:	0e 94 79 01 	call	0x2f2	; 0x2f2 <serial_input_available>
     c2a:	88 23       	and	r24, r24
     c2c:	b9 f0       	breq	.+46     	; 0xc5c <main+0x1e0>
					char in = fgetc(stdin);
     c2e:	f6 01       	movw	r30, r12
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fgetc>
					if (in == ' '){
     c38:	80 32       	cpi	r24, 0x20	; 32
     c3a:	81 f4       	brne	.+32     	; 0xc5c <main+0x1e0>
						/*	cancel command received, hold stepper in current position	*/
						info_ptr->stepAct = '\0';
     c3c:	f8 01       	movw	r30, r16
     c3e:	14 82       	std	Z+4, r1	; 0x04
						hold_step();
     c40:	0e 94 7f 07 	call	0xefe	; 0xefe <hold_step>
						fputs("canceled\n", stdout);
     c44:	f6 01       	movw	r30, r12
     c46:	22 81       	ldd	r18, Z+2	; 0x02
     c48:	33 81       	ldd	r19, Z+3	; 0x03
     c4a:	49 e0       	ldi	r20, 0x09	; 9
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	87 e9       	ldi	r24, 0x97	; 151
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
						break;
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <main+0x1fa>
					}
				}
				step(info_ptr);
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 25 0a 	call	0x144a	; 0x144a <step>
				current = current_step();				
     c62:	0e 94 7a 07 	call	0xef4	; 0xef4 <current_step>
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
				/*	stepper is at a limit, but wants to turn the right way -> move claw off limit	*/
				step(info_ptr);
				current = current_step();
			}
			while ((current < info_ptr->maxStep) && (current >= 0)){
     c66:	f8 01       	movw	r30, r16
     c68:	22 81       	ldd	r18, Z+2	; 0x02
     c6a:	33 81       	ldd	r19, Z+3	; 0x03
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	10 f4       	brcc	.+4      	; 0xc76 <main+0x1fa>
     c72:	99 23       	and	r25, r25
     c74:	c4 f6       	brge	.-80     	; 0xc26 <main+0x1aa>
					}
				}
				step(info_ptr);
				current = current_step();				
			}
			current = current_step();
     c76:	0e 94 7a 07 	call	0xef4	; 0xef4 <current_step>
			char buffer1[30];
			sprintf(buffer1, "step POS: %d %d %c\n", current, info_ptr->stepSpeed, info_ptr->stepAct);
     c7a:	f8 01       	movw	r30, r16
     c7c:	24 81       	ldd	r18, Z+4	; 0x04
     c7e:	1f 92       	push	r1
     c80:	2f 93       	push	r18
     c82:	21 81       	ldd	r18, Z+1	; 0x01
     c84:	42 2f       	mov	r20, r18
     c86:	02 2e       	mov	r0, r18
     c88:	00 0c       	add	r0, r0
     c8a:	55 0b       	sbc	r21, r21
     c8c:	5f 93       	push	r21
     c8e:	2f 93       	push	r18
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	81 ea       	ldi	r24, 0xA1	; 161
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	9f 92       	push	r9
     c9e:	8f 92       	push	r8
     ca0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
			fputs(buffer1, stdout);
     ca4:	f6 01       	movw	r30, r12
     ca6:	62 81       	ldd	r22, Z+2	; 0x02
     ca8:	73 81       	ldd	r23, Z+3	; 0x03
     caa:	c4 01       	movw	r24, r8
     cac:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
			fputs("end step\n", stdout);
     cb0:	f6 01       	movw	r30, r12
     cb2:	22 81       	ldd	r18, Z+2	; 0x02
     cb4:	33 81       	ldd	r19, Z+3	; 0x03
     cb6:	49 e0       	ldi	r20, 0x09	; 9
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	85 eb       	ldi	r24, 0xB5	; 181
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
			info_ptr->stepAct = '\0';		/*	stepper reached it's final position -> not activating or retracting */
     cc6:	f8 01       	movw	r30, r16
     cc8:	14 82       	std	Z+4, r1	; 0x04
			info_ptr->stupidCount = 0;		/*	valid command received and acted on */
     cca:	10 86       	std	Z+8, r1	; 0x08
			hold_step();
     ccc:	0e 94 7f 07 	call	0xefe	; 0xefe <hold_step>
			info_ptr->stopCommand = 0;
			info_ptr->stupidCount = 0;
			//worm_off();						/*	claw off, should already be 	*/
			//pivot_off();					/*	pivot control motor off */
		}
		else if ((info_ptr->stepAct == 'A')||(info_ptr->stepAct == 'R')){
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	01 c1       	rjmp	.+514    	; 0xede <main+0x462>
			fputs(buffer1, stdout);
			fputs("end step\n", stdout);
			info_ptr->stepAct = '\0';		/*	stepper reached it's final position -> not activating or retracting */
			info_ptr->stupidCount = 0;		/*	valid command received and acted on */
			hold_step();
		} else if (info_ptr->wormCom == 'k'){
     cdc:	f8 01       	movw	r30, r16
     cde:	81 85       	ldd	r24, Z+9	; 0x09
     ce0:	8b 36       	cpi	r24, 0x6B	; 107
     ce2:	09 f0       	breq	.+2      	; 0xce6 <main+0x26a>
     ce4:	76 c0       	rjmp	.+236    	; 0xdd2 <main+0x356>
			/*	received command to move claw	*/
			if (info_ptr->wormButtonOff){
     ce6:	83 85       	ldd	r24, Z+11	; 0x0b
     ce8:	81 11       	cpse	r24, r1
     cea:	f7 ce       	rjmp	.-530    	; 0xada <main+0x5e>
			}
			uint8_t percent = 60;
			int8_t speed = 1;
			char in;
			char buffer[18];
			move_worm(percent, speed);
     cec:	62 2d       	mov	r22, r2
     cee:	8c e3       	ldi	r24, 0x3C	; 60
     cf0:	0e 94 88 0a 	call	0x1510	; 0x1510 <move_worm>
			while (info_ptr->wormStop != 'k') {
     cf4:	f8 01       	movw	r30, r16
     cf6:	82 85       	ldd	r24, Z+10	; 0x0a
     cf8:	8b 36       	cpi	r24, 0x6B	; 107
     cfa:	09 f4       	brne	.+2      	; 0xcfe <main+0x282>
     cfc:	66 c0       	rjmp	.+204    	; 0xdca <main+0x34e>
     cfe:	0f 2e       	mov	r0, r31
     d00:	fc e3       	ldi	r31, 0x3C	; 60
     d02:	ff 2e       	mov	r15, r31
     d04:	f0 2d       	mov	r31, r0
				if(serial_input_available()){
     d06:	0e 94 79 01 	call	0x2f2	; 0x2f2 <serial_input_available>
     d0a:	88 23       	and	r24, r24
     d0c:	09 f4       	brne	.+2      	; 0xd10 <main+0x294>
     d0e:	54 c0       	rjmp	.+168    	; 0xdb8 <main+0x33c>
					in = fgetc(stdin);
     d10:	f6 01       	movw	r30, r12
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fgetc>
					if (in == ' '){
     d1a:	80 32       	cpi	r24, 0x20	; 32
     d1c:	71 f4       	brne	.+28     	; 0xd3a <main+0x2be>
						/*	cancel command received -> stop claw	*/
						fputs("claw off\n", stdout);
     d1e:	f6 01       	movw	r30, r12
     d20:	22 81       	ldd	r18, Z+2	; 0x02
     d22:	33 81       	ldd	r19, Z+3	; 0x03
     d24:	49 e0       	ldi	r20, 0x09	; 9
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	8f eb       	ldi	r24, 0xBF	; 191
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
						worm_off();
     d34:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <worm_off>
						break;
     d38:	48 c0       	rjmp	.+144    	; 0xdca <main+0x34e>
					} else if (in == 'k'){
     d3a:	8b 36       	cpi	r24, 0x6B	; 107
     d3c:	f9 f4       	brne	.+62     	; 0xd7c <main+0x300>
						/*	same command received, increase speed	*/
						if ((percent + 10) < 100){
     d3e:	8f 2d       	mov	r24, r15
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0a 96       	adiw	r24, 0x0a	; 10
     d44:	84 36       	cpi	r24, 0x64	; 100
     d46:	91 05       	cpc	r25, r1
     d48:	bc f5       	brge	.+110    	; 0xdb8 <main+0x33c>
							percent += 10;
     d4a:	fa e0       	ldi	r31, 0x0A	; 10
     d4c:	ff 0e       	add	r15, r31
							sprintf(buffer, "Worm speed %d\n", percent);
     d4e:	1f 92       	push	r1
     d50:	ff 92       	push	r15
     d52:	89 ec       	ldi	r24, 0xC9	; 201
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	9f 92       	push	r9
     d5c:	8f 92       	push	r8
     d5e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
							fputs(buffer, stdout);
     d62:	f6 01       	movw	r30, r12
     d64:	62 81       	ldd	r22, Z+2	; 0x02
     d66:	73 81       	ldd	r23, Z+3	; 0x03
     d68:	c4 01       	movw	r24, r8
     d6a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	1e c0       	rjmp	.+60     	; 0xdb8 <main+0x33c>
						}
					} else if (in == 'j'){
     d7c:	8a 36       	cpi	r24, 0x6A	; 106
     d7e:	e1 f4       	brne	.+56     	; 0xdb8 <main+0x33c>
						/*	decrease speed command received	*/
						if ((percent -10) >=0){
     d80:	8f 2d       	mov	r24, r15
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0a 97       	sbiw	r24, 0x0a	; 10
     d86:	c2 f0       	brmi	.+48     	; 0xdb8 <main+0x33c>
							percent -= 10;
     d88:	f6 ef       	ldi	r31, 0xF6	; 246
     d8a:	ff 0e       	add	r15, r31
							sprintf(buffer, "Worm speed %d\n", percent);
     d8c:	1f 92       	push	r1
     d8e:	ff 92       	push	r15
     d90:	89 ec       	ldi	r24, 0xC9	; 201
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	9f 93       	push	r25
     d96:	8f 93       	push	r24
     d98:	9f 92       	push	r9
     d9a:	8f 92       	push	r8
     d9c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
							fputs(buffer, stdout);
     da0:	f6 01       	movw	r30, r12
     da2:	62 81       	ldd	r22, Z+2	; 0x02
     da4:	73 81       	ldd	r23, Z+3	; 0x03
     da6:	c4 01       	movw	r24, r8
     da8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
					//info_ptr->wormStop = 'k';
					//worm_off();
					//break;
				//}
				/*	checks and speeds are in place, move worm gear for claw */
				move_worm(percent, speed);
     db8:	62 2d       	mov	r22, r2
     dba:	8f 2d       	mov	r24, r15
     dbc:	0e 94 88 0a 	call	0x1510	; 0x1510 <move_worm>
			uint8_t percent = 60;
			int8_t speed = 1;
			char in;
			char buffer[18];
			move_worm(percent, speed);
			while (info_ptr->wormStop != 'k') {
     dc0:	f8 01       	movw	r30, r16
     dc2:	82 85       	ldd	r24, Z+10	; 0x0a
     dc4:	8b 36       	cpi	r24, 0x6B	; 107
     dc6:	09 f0       	breq	.+2      	; 0xdca <main+0x34e>
     dc8:	9e cf       	rjmp	.-196    	; 0xd06 <main+0x28a>
					//break;
				//}
				/*	checks and speeds are in place, move worm gear for claw */
				move_worm(percent, speed);
			}
			info_ptr->wormCom = '\0';
     dca:	f8 01       	movw	r30, r16
     dcc:	11 86       	std	Z+9, r1	; 0x09
			info_ptr->stupidCount = 0;
     dce:	10 86       	std	Z+8, r1	; 0x08
     dd0:	86 c0       	rjmp	.+268    	; 0xede <main+0x462>
		} else if (info_ptr->wormCom == 'j'){
     dd2:	8a 36       	cpi	r24, 0x6A	; 106
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <main+0x35c>
     dd6:	77 c0       	rjmp	.+238    	; 0xec6 <main+0x44a>
			/*		move the claw opposite to 'k' command	*/
			if (info_ptr->wormButtonOff){
     dd8:	f8 01       	movw	r30, r16
     dda:	83 85       	ldd	r24, Z+11	; 0x0b
     ddc:	81 11       	cpse	r24, r1
     dde:	7d ce       	rjmp	.-774    	; 0xada <main+0x5e>
			}
			uint8_t percent = 60;
			int8_t speed = 0;
			char in;
			char buffer[18];
			move_worm(percent, speed);
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	8c e3       	ldi	r24, 0x3C	; 60
     de4:	0e 94 88 0a 	call	0x1510	; 0x1510 <move_worm>
			while (info_ptr->wormStop != 'j') {
     de8:	f8 01       	movw	r30, r16
     dea:	82 85       	ldd	r24, Z+10	; 0x0a
     dec:	8a 36       	cpi	r24, 0x6A	; 106
     dee:	09 f4       	brne	.+2      	; 0xdf2 <main+0x376>
     df0:	66 c0       	rjmp	.+204    	; 0xebe <main+0x442>
     df2:	0f 2e       	mov	r0, r31
     df4:	fc e3       	ldi	r31, 0x3C	; 60
     df6:	ff 2e       	mov	r15, r31
     df8:	f0 2d       	mov	r31, r0
				if(serial_input_available()){
     dfa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <serial_input_available>
     dfe:	88 23       	and	r24, r24
     e00:	09 f4       	brne	.+2      	; 0xe04 <main+0x388>
     e02:	54 c0       	rjmp	.+168    	; 0xeac <main+0x430>
					in = fgetc(stdin);
     e04:	f6 01       	movw	r30, r12
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fgetc>
					if (in == ' '){
     e0e:	80 32       	cpi	r24, 0x20	; 32
     e10:	71 f4       	brne	.+28     	; 0xe2e <main+0x3b2>
						fputs("claw1 off\n", stdout);
     e12:	f6 01       	movw	r30, r12
     e14:	22 81       	ldd	r18, Z+2	; 0x02
     e16:	33 81       	ldd	r19, Z+3	; 0x03
     e18:	4a e0       	ldi	r20, 0x0A	; 10
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	88 ed       	ldi	r24, 0xD8	; 216
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
						worm_off();
     e28:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <worm_off>
						break;
     e2c:	48 c0       	rjmp	.+144    	; 0xebe <main+0x442>
						} else if (in == 'k'){
     e2e:	8b 36       	cpi	r24, 0x6B	; 107
     e30:	f9 f4       	brne	.+62     	; 0xe70 <main+0x3f4>
							if ((percent + 10) < 100){
     e32:	8f 2d       	mov	r24, r15
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0a 96       	adiw	r24, 0x0a	; 10
     e38:	84 36       	cpi	r24, 0x64	; 100
     e3a:	91 05       	cpc	r25, r1
     e3c:	bc f5       	brge	.+110    	; 0xeac <main+0x430>
								percent += 10;
     e3e:	fa e0       	ldi	r31, 0x0A	; 10
     e40:	ff 0e       	add	r15, r31
								sprintf(buffer, "Worm speed %d\n", percent);
     e42:	1f 92       	push	r1
     e44:	ff 92       	push	r15
     e46:	89 ec       	ldi	r24, 0xC9	; 201
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	9f 93       	push	r25
     e4c:	8f 93       	push	r24
     e4e:	9f 92       	push	r9
     e50:	8f 92       	push	r8
     e52:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
								fputs(buffer, stdout);
     e56:	f6 01       	movw	r30, r12
     e58:	62 81       	ldd	r22, Z+2	; 0x02
     e5a:	73 81       	ldd	r23, Z+3	; 0x03
     e5c:	c4 01       	movw	r24, r8
     e5e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	1e c0       	rjmp	.+60     	; 0xeac <main+0x430>
							}
						} else if ( in == 'j'){
     e70:	8a 36       	cpi	r24, 0x6A	; 106
     e72:	e1 f4       	brne	.+56     	; 0xeac <main+0x430>
						if ((percent -10) >=0){
     e74:	8f 2d       	mov	r24, r15
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0a 97       	sbiw	r24, 0x0a	; 10
     e7a:	c2 f0       	brmi	.+48     	; 0xeac <main+0x430>
							percent -= 10;
     e7c:	f6 ef       	ldi	r31, 0xF6	; 246
     e7e:	ff 0e       	add	r15, r31
							sprintf(buffer, "Worm speed %d\n", percent);
     e80:	1f 92       	push	r1
     e82:	ff 92       	push	r15
     e84:	89 ec       	ldi	r24, 0xC9	; 201
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	9f 93       	push	r25
     e8a:	8f 93       	push	r24
     e8c:	9f 92       	push	r9
     e8e:	8f 92       	push	r8
     e90:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <sprintf>
							fputs(buffer, stdout);
     e94:	f6 01       	movw	r30, r12
     e96:	62 81       	ldd	r22, Z+2	; 0x02
     e98:	73 81       	ldd	r23, Z+3	; 0x03
     e9a:	c4 01       	movw	r24, r8
     e9c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <fputs>
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
					///*	button actuated -> stop claw from moving and exit loop	*/
					//info_ptr->wormStop = 'j';
					//worm_off();
					//break;
				//}
				move_worm(percent, speed);
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	8f 2d       	mov	r24, r15
     eb0:	0e 94 88 0a 	call	0x1510	; 0x1510 <move_worm>
			uint8_t percent = 60;
			int8_t speed = 0;
			char in;
			char buffer[18];
			move_worm(percent, speed);
			while (info_ptr->wormStop != 'j') {
     eb4:	f8 01       	movw	r30, r16
     eb6:	82 85       	ldd	r24, Z+10	; 0x0a
     eb8:	8a 36       	cpi	r24, 0x6A	; 106
     eba:	09 f0       	breq	.+2      	; 0xebe <main+0x442>
     ebc:	9e cf       	rjmp	.-196    	; 0xdfa <main+0x37e>
					//worm_off();
					//break;
				//}
				move_worm(percent, speed);
			}
			info_ptr->wormCom = '\0';
     ebe:	f8 01       	movw	r30, r16
     ec0:	11 86       	std	Z+9, r1	; 0x09
			info_ptr->stupidCount = 0;
     ec2:	10 86       	std	Z+8, r1	; 0x08
     ec4:	0c c0       	rjmp	.+24     	; 0xede <main+0x462>
		} else if ((info_ptr->pivotCom == 'z') || (info_ptr->pivotCom == 'x')){
     ec6:	f8 01       	movw	r30, r16
     ec8:	94 85       	ldd	r25, Z+12	; 0x0c
     eca:	89 2f       	mov	r24, r25
     ecc:	8d 7f       	andi	r24, 0xFD	; 253
     ece:	88 37       	cpi	r24, 0x78	; 120
     ed0:	31 f4       	brne	.+12     	; 0xede <main+0x462>
					direction = 0;
			} else {
					direction = 1;
			}
			/*	actuate pivot motor at full power	*/
			move_pivot(direction);
     ed2:	82 2d       	mov	r24, r2
     ed4:	9a 37       	cpi	r25, 0x7A	; 122
     ed6:	09 f4       	brne	.+2      	; 0xeda <main+0x45e>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	0e 94 cc 00 	call	0x198	; 0x198 <move_pivot>
			////if ((!(PORTC & (1<<PORTC2))) && (!(PORTC & (1<<PORTC5)))){
				////worm_off();
			////}
		//} else {
			/*	worm gear hasn't hit button and is free to use in both directions	*/
			info_ptr->wormStop = '\0';
     ede:	f8 01       	movw	r30, r16
     ee0:	12 86       	std	Z+10, r1	; 0x0a
     ee2:	fb cd       	rjmp	.-1034   	; 0xada <main+0x5e>
			while ((info_ptr->stepSpeed > 0) && (info_ptr->stepAct == 'A') && (current <= 0)){
				/*	stepper is at a limit, but wants to turn the right way -> move claw off limit	*/
				step(info_ptr);
				current = current_step();
			}
			while ((current < info_ptr->maxStep) && (current >= 0)){
     ee4:	f8 01       	movw	r30, r16
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	e8 16       	cp	r14, r24
     eec:	f9 06       	cpc	r15, r25
     eee:	08 f4       	brcc	.+2      	; 0xef2 <main+0x476>
     ef0:	9a ce       	rjmp	.-716    	; 0xc26 <main+0x1aa>
     ef2:	c1 ce       	rjmp	.-638    	; 0xc76 <main+0x1fa>

00000ef4 <current_step>:
	*	can be modified to return an angle from origin using gear
	*	ratio
	*/
	int16_t returnValue = steps;
	return returnValue;
 }
     ef4:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <steps>
     ef8:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <steps+0x1>
     efc:	08 95       	ret

00000efe <hold_step>:

void hold_step(void){
	
	PORTC |= (1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED);
     efe:	38 b1       	in	r19, 0x08	; 8
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	bc 01       	movw	r22, r24
     f06:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <hold_step+0x12>
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <hold_step+0xe>
     f14:	ac 01       	movw	r20, r24
     f16:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <hold_step+0x22>
     f1c:	44 0f       	add	r20, r20
     f1e:	55 1f       	adc	r21, r21
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <hold_step+0x1e>
     f24:	46 2b       	or	r20, r22
     f26:	43 2b       	or	r20, r19
     f28:	9c 01       	movw	r18, r24
     f2a:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <hold_step+0x36>
     f30:	22 0f       	add	r18, r18
     f32:	33 1f       	adc	r19, r19
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <hold_step+0x32>
     f38:	24 2b       	or	r18, r20
     f3a:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <hold_step+0x46>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <hold_step+0x42>
     f48:	82 2b       	or	r24, r18
     f4a:	88 b9       	out	0x08, r24	; 8
     f4c:	08 95       	ret

00000f4e <release_step>:
	
}

void release_step(void){
	
	PORTC &= ~((1<<BLU)|(1<<GRE)|(1<<YEL)|(1<<RED));
     f4e:	28 b1       	in	r18, 0x08	; 8
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	bc 01       	movw	r22, r24
     f56:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <release_step+0x12>
     f5c:	66 0f       	add	r22, r22
     f5e:	77 1f       	adc	r23, r23
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <release_step+0xe>
     f64:	ac 01       	movw	r20, r24
     f66:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <release_step+0x22>
     f6c:	44 0f       	add	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <release_step+0x1e>
     f74:	36 2f       	mov	r19, r22
     f76:	34 2b       	or	r19, r20
     f78:	ac 01       	movw	r20, r24
     f7a:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <release_step+0x36>
     f80:	44 0f       	add	r20, r20
     f82:	55 1f       	adc	r21, r21
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <release_step+0x32>
     f88:	43 2b       	or	r20, r19
     f8a:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <release_step+0x46>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <release_step+0x42>
     f98:	84 2b       	or	r24, r20
     f9a:	80 95       	com	r24
     f9c:	82 23       	and	r24, r18
     f9e:	88 b9       	out	0x08, r24	; 8
     fa0:	08 95       	ret

00000fa2 <decrement_step>:
 }

/**************************************************************************************swapped increment and decrement so start with claw closed ****************/
 void decrement_step(void){
	/* the motor has turned one step, increase the count */
	--steps;
     fa2:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <steps>
     fa6:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <steps+0x1>
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <steps+0x1>
     fb0:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <steps>
     fb4:	08 95       	ret

00000fb6 <increment_step>:
 }

 void increment_step(void){
	/* the motor has turned back one step, decrease the count */
	++steps;
     fb6:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <steps>
     fba:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <steps+0x1>
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <steps+0x1>
     fc4:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <steps>
     fc8:	08 95       	ret

00000fca <step_clockwise>:
 }
/**************************************************************************************************************************************************************/


 void step_clockwise(uint8_t time_on){
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */

	 uint32_t current_time;
	 
	 if(phase == 0){
     fd8:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <phase>
     fdc:	81 11       	cpse	r24, r1
     fde:	42 c0       	rjmp	.+132    	; 0x1064 <step_clockwise+0x9a>
		 current_time = get_tcnt0_ticks();
     fe0:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
		 while((current_time + time_on) > get_tcnt0_ticks()){
     fe4:	6b 01       	movw	r12, r22
     fe6:	7c 01       	movw	r14, r24
     fe8:	cc 0e       	add	r12, r28
     fea:	d1 1c       	adc	r13, r1
     fec:	e1 1c       	adc	r14, r1
     fee:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<YEL)|(1<<GRE);
     ff0:	c1 e0       	ldi	r28, 0x01	; 1
     ff2:	d0 e0       	ldi	r29, 0x00	; 0

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
     ff4:	2a c0       	rjmp	.+84     	; 0x104a <step_clockwise+0x80>
			 PORTC |= (1<<YEL)|(1<<GRE);
     ff6:	98 b1       	in	r25, 0x08	; 8
     ff8:	ae 01       	movw	r20, r28
     ffa:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <step_clockwise+0x3a>
    1000:	44 0f       	add	r20, r20
    1002:	55 1f       	adc	r21, r21
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <step_clockwise+0x36>
    1008:	9e 01       	movw	r18, r28
    100a:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <step_clockwise+0x4a>
    1010:	22 0f       	add	r18, r18
    1012:	33 1f       	adc	r19, r19
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <step_clockwise+0x46>
    1018:	84 2f       	mov	r24, r20
    101a:	82 2b       	or	r24, r18
    101c:	89 2b       	or	r24, r25
    101e:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
    1020:	28 b1       	in	r18, 0x08	; 8
    1022:	ae 01       	movw	r20, r28
    1024:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
    1028:	02 c0       	rjmp	.+4      	; 0x102e <step_clockwise+0x64>
    102a:	44 0f       	add	r20, r20
    102c:	55 1f       	adc	r21, r21
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <step_clockwise+0x60>
    1032:	ce 01       	movw	r24, r28
    1034:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
    1038:	02 c0       	rjmp	.+4      	; 0x103e <step_clockwise+0x74>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <step_clockwise+0x70>
    1042:	84 2b       	or	r24, r20
    1044:	80 95       	com	r24
    1046:	82 23       	and	r24, r18
    1048:	88 b9       	out	0x08, r24	; 8

	 uint32_t current_time;
	 
	 if(phase == 0){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    104a:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
    104e:	6c 15       	cp	r22, r12
    1050:	7d 05       	cpc	r23, r13
    1052:	8e 05       	cpc	r24, r14
    1054:	9f 05       	cpc	r25, r15
    1056:	78 f2       	brcs	.-98     	; 0xff6 <step_clockwise+0x2c>
			 PORTC |= (1<<YEL)|(1<<GRE);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 ++phase;
    1058:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <phase>
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <phase>
    1062:	ca c0       	rjmp	.+404    	; 0x11f8 <step_clockwise+0x22e>
	 }
	 else if(phase == 1){
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	09 f0       	breq	.+2      	; 0x106a <step_clockwise+0xa0>
    1068:	42 c0       	rjmp	.+132    	; 0x10ee <step_clockwise+0x124>
		 current_time = get_tcnt0_ticks();
    106a:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
		 while((current_time + time_on) > get_tcnt0_ticks()){
    106e:	6b 01       	movw	r12, r22
    1070:	7c 01       	movw	r14, r24
    1072:	cc 0e       	add	r12, r28
    1074:	d1 1c       	adc	r13, r1
    1076:	e1 1c       	adc	r14, r1
    1078:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<RED)|(1<<GRE);
    107a:	c1 e0       	ldi	r28, 0x01	; 1
    107c:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    107e:	2a c0       	rjmp	.+84     	; 0x10d4 <step_clockwise+0x10a>
			 PORTC |= (1<<RED)|(1<<GRE);
    1080:	98 b1       	in	r25, 0x08	; 8
    1082:	ae 01       	movw	r20, r28
    1084:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
    1088:	02 c0       	rjmp	.+4      	; 0x108e <step_clockwise+0xc4>
    108a:	44 0f       	add	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <step_clockwise+0xc0>
    1092:	9e 01       	movw	r18, r28
    1094:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
    1098:	02 c0       	rjmp	.+4      	; 0x109e <step_clockwise+0xd4>
    109a:	22 0f       	add	r18, r18
    109c:	33 1f       	adc	r19, r19
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <step_clockwise+0xd0>
    10a2:	84 2f       	mov	r24, r20
    10a4:	82 2b       	or	r24, r18
    10a6:	89 2b       	or	r24, r25
    10a8:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
    10aa:	28 b1       	in	r18, 0x08	; 8
    10ac:	ae 01       	movw	r20, r28
    10ae:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <step_clockwise+0xee>
    10b4:	44 0f       	add	r20, r20
    10b6:	55 1f       	adc	r21, r21
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <step_clockwise+0xea>
    10bc:	ce 01       	movw	r24, r28
    10be:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <step_clockwise+0xfe>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <step_clockwise+0xfa>
    10cc:	84 2b       	or	r24, r20
    10ce:	80 95       	com	r24
    10d0:	82 23       	and	r24, r18
    10d2:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    10d4:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
    10d8:	6c 15       	cp	r22, r12
    10da:	7d 05       	cpc	r23, r13
    10dc:	8e 05       	cpc	r24, r14
    10de:	9f 05       	cpc	r25, r15
    10e0:	78 f2       	brcs	.-98     	; 0x1080 <step_clockwise+0xb6>
			 PORTC |= (1<<RED)|(1<<GRE);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
    10e2:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <phase>
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <phase>
    10ec:	85 c0       	rjmp	.+266    	; 0x11f8 <step_clockwise+0x22e>
	 }
	 else if(phase == 2){
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <step_clockwise+0x12a>
    10f2:	42 c0       	rjmp	.+132    	; 0x1178 <step_clockwise+0x1ae>
		 current_time = get_tcnt0_ticks();
    10f4:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
		 while((current_time + time_on) > get_tcnt0_ticks()){
    10f8:	6b 01       	movw	r12, r22
    10fa:	7c 01       	movw	r14, r24
    10fc:	cc 0e       	add	r12, r28
    10fe:	d1 1c       	adc	r13, r1
    1100:	e1 1c       	adc	r14, r1
    1102:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
    1104:	c1 e0       	ldi	r28, 0x01	; 1
    1106:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1108:	2a c0       	rjmp	.+84     	; 0x115e <step_clockwise+0x194>
			 PORTC |= (1<<BLU)|(1<<RED);
    110a:	98 b1       	in	r25, 0x08	; 8
    110c:	ae 01       	movw	r20, r28
    110e:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <step_clockwise+0x14e>
    1114:	44 0f       	add	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <step_clockwise+0x14a>
    111c:	9e 01       	movw	r18, r28
    111e:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <step_clockwise+0x15e>
    1124:	22 0f       	add	r18, r18
    1126:	33 1f       	adc	r19, r19
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <step_clockwise+0x15a>
    112c:	84 2f       	mov	r24, r20
    112e:	82 2b       	or	r24, r18
    1130:	89 2b       	or	r24, r25
    1132:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
    1134:	28 b1       	in	r18, 0x08	; 8
    1136:	ae 01       	movw	r20, r28
    1138:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <step_clockwise+0x178>
    113e:	44 0f       	add	r20, r20
    1140:	55 1f       	adc	r21, r21
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <step_clockwise+0x174>
    1146:	ce 01       	movw	r24, r28
    1148:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <step_clockwise+0x188>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <step_clockwise+0x184>
    1156:	84 2b       	or	r24, r20
    1158:	80 95       	com	r24
    115a:	82 23       	and	r24, r18
    115c:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    115e:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
    1162:	6c 15       	cp	r22, r12
    1164:	7d 05       	cpc	r23, r13
    1166:	8e 05       	cpc	r24, r14
    1168:	9f 05       	cpc	r25, r15
    116a:	78 f2       	brcs	.-98     	; 0x110a <step_clockwise+0x140>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
    116c:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <phase>
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <phase>
    1176:	40 c0       	rjmp	.+128    	; 0x11f8 <step_clockwise+0x22e>
	 }
	 else if(phase == 3){
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	f1 f5       	brne	.+124    	; 0x11f8 <step_clockwise+0x22e>
		 current_time = get_tcnt0_ticks();
    117c:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1180:	6b 01       	movw	r12, r22
    1182:	7c 01       	movw	r14, r24
    1184:	cc 0e       	add	r12, r28
    1186:	d1 1c       	adc	r13, r1
    1188:	e1 1c       	adc	r14, r1
    118a:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
    118c:	c1 e0       	ldi	r28, 0x01	; 1
    118e:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1190:	2a c0       	rjmp	.+84     	; 0x11e6 <step_clockwise+0x21c>
			 PORTC |= (1<<BLU)|(1<<YEL);
    1192:	98 b1       	in	r25, 0x08	; 8
    1194:	ae 01       	movw	r20, r28
    1196:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <step_clockwise+0x1d6>
    119c:	44 0f       	add	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <step_clockwise+0x1d2>
    11a4:	9e 01       	movw	r18, r28
    11a6:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <step_clockwise+0x1e6>
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <step_clockwise+0x1e2>
    11b4:	84 2f       	mov	r24, r20
    11b6:	82 2b       	or	r24, r18
    11b8:	89 2b       	or	r24, r25
    11ba:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
    11bc:	28 b1       	in	r18, 0x08	; 8
    11be:	ae 01       	movw	r20, r28
    11c0:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <step_clockwise+0x200>
    11c6:	44 0f       	add	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <step_clockwise+0x1fc>
    11ce:	ce 01       	movw	r24, r28
    11d0:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <step_clockwise+0x210>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <step_clockwise+0x20c>
    11de:	84 2b       	or	r24, r20
    11e0:	80 95       	com	r24
    11e2:	82 23       	and	r24, r18
    11e4:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    11e6:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
    11ea:	6c 15       	cp	r22, r12
    11ec:	7d 05       	cpc	r23, r13
    11ee:	8e 05       	cpc	r24, r14
    11f0:	9f 05       	cpc	r25, r15
    11f2:	78 f2       	brcs	.-98     	; 0x1192 <step_clockwise+0x1c8>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 phase = 0;
    11f4:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <phase>
	 }
	 increment_step();
    11f8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <increment_step>
 }
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	08 95       	ret

0000120a <step_anticlockwise>:


 void step_anticlockwise(uint8_t time_on){
    120a:	cf 92       	push	r12
    120c:	df 92       	push	r13
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	c8 2f       	mov	r28, r24
	/* turns stepper motor clockwise */
	
	 uint32_t current_time;

	 if(phase == 0){
    1218:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <phase>
    121c:	81 11       	cpse	r24, r1
    121e:	42 c0       	rjmp	.+132    	; 0x12a4 <step_anticlockwise+0x9a>
		 current_time = get_tcnt0_ticks();
    1220:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1224:	6b 01       	movw	r12, r22
    1226:	7c 01       	movw	r14, r24
    1228:	cc 0e       	add	r12, r28
    122a:	d1 1c       	adc	r13, r1
    122c:	e1 1c       	adc	r14, r1
    122e:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<YEL);
    1230:	c1 e0       	ldi	r28, 0x01	; 1
    1232:	d0 e0       	ldi	r29, 0x00	; 0
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1234:	2a c0       	rjmp	.+84     	; 0x128a <step_anticlockwise+0x80>
			 PORTC |= (1<<BLU)|(1<<YEL);
    1236:	98 b1       	in	r25, 0x08	; 8
    1238:	ae 01       	movw	r20, r28
    123a:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <step_anticlockwise+0x3a>
    1240:	44 0f       	add	r20, r20
    1242:	55 1f       	adc	r21, r21
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <step_anticlockwise+0x36>
    1248:	9e 01       	movw	r18, r28
    124a:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <step_anticlockwise+0x4a>
    1250:	22 0f       	add	r18, r18
    1252:	33 1f       	adc	r19, r19
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <step_anticlockwise+0x46>
    1258:	84 2f       	mov	r24, r20
    125a:	82 2b       	or	r24, r18
    125c:	89 2b       	or	r24, r25
    125e:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<RED));
    1260:	28 b1       	in	r18, 0x08	; 8
    1262:	ae 01       	movw	r20, r28
    1264:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
    1268:	02 c0       	rjmp	.+4      	; 0x126e <step_anticlockwise+0x64>
    126a:	44 0f       	add	r20, r20
    126c:	55 1f       	adc	r21, r21
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <step_anticlockwise+0x60>
    1272:	ce 01       	movw	r24, r28
    1274:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
    1278:	02 c0       	rjmp	.+4      	; 0x127e <step_anticlockwise+0x74>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <step_anticlockwise+0x70>
    1282:	84 2b       	or	r24, r20
    1284:	80 95       	com	r24
    1286:	82 23       	and	r24, r18
    1288:	88 b9       	out	0x08, r24	; 8
	
	 uint32_t current_time;

	 if(phase == 0){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    128a:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
    128e:	6c 15       	cp	r22, r12
    1290:	7d 05       	cpc	r23, r13
    1292:	8e 05       	cpc	r24, r14
    1294:	9f 05       	cpc	r25, r15
    1296:	78 f2       	brcs	.-98     	; 0x1236 <step_anticlockwise+0x2c>
			 PORTC |= (1<<BLU)|(1<<YEL);
			 PORTC &= ~((1<<GRE)|(1<<RED));
		 }
		 ++phase;
    1298:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <phase>
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <phase>
    12a2:	ca c0       	rjmp	.+404    	; 0x1438 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 1){
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	09 f0       	breq	.+2      	; 0x12aa <step_anticlockwise+0xa0>
    12a8:	42 c0       	rjmp	.+132    	; 0x132e <step_anticlockwise+0x124>
		 current_time = get_tcnt0_ticks();
    12aa:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
		 while((current_time + time_on) > get_tcnt0_ticks()){
    12ae:	6b 01       	movw	r12, r22
    12b0:	7c 01       	movw	r14, r24
    12b2:	cc 0e       	add	r12, r28
    12b4:	d1 1c       	adc	r13, r1
    12b6:	e1 1c       	adc	r14, r1
    12b8:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<BLU)|(1<<RED);
    12ba:	c1 e0       	ldi	r28, 0x01	; 1
    12bc:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    12be:	2a c0       	rjmp	.+84     	; 0x1314 <step_anticlockwise+0x10a>
			 PORTC |= (1<<BLU)|(1<<RED);
    12c0:	98 b1       	in	r25, 0x08	; 8
    12c2:	ae 01       	movw	r20, r28
    12c4:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <step_anticlockwise+0xc4>
    12ca:	44 0f       	add	r20, r20
    12cc:	55 1f       	adc	r21, r21
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <step_anticlockwise+0xc0>
    12d2:	9e 01       	movw	r18, r28
    12d4:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <step_anticlockwise+0xd4>
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <step_anticlockwise+0xd0>
    12e2:	84 2f       	mov	r24, r20
    12e4:	82 2b       	or	r24, r18
    12e6:	89 2b       	or	r24, r25
    12e8:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<GRE)|(1<<YEL));
    12ea:	28 b1       	in	r18, 0x08	; 8
    12ec:	ae 01       	movw	r20, r28
    12ee:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <step_anticlockwise+0xee>
    12f4:	44 0f       	add	r20, r20
    12f6:	55 1f       	adc	r21, r21
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <step_anticlockwise+0xea>
    12fc:	ce 01       	movw	r24, r28
    12fe:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <step_anticlockwise+0xfe>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <step_anticlockwise+0xfa>
    130c:	84 2b       	or	r24, r20
    130e:	80 95       	com	r24
    1310:	82 23       	and	r24, r18
    1312:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 1){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1314:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
    1318:	6c 15       	cp	r22, r12
    131a:	7d 05       	cpc	r23, r13
    131c:	8e 05       	cpc	r24, r14
    131e:	9f 05       	cpc	r25, r15
    1320:	78 f2       	brcs	.-98     	; 0x12c0 <step_anticlockwise+0xb6>
			 PORTC |= (1<<BLU)|(1<<RED);
			 PORTC &= ~((1<<GRE)|(1<<YEL));
		 }
		 ++phase;
    1322:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <phase>
    1326:	8f 5f       	subi	r24, 0xFF	; 255
    1328:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <phase>
    132c:	85 c0       	rjmp	.+266    	; 0x1438 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 2){
    132e:	82 30       	cpi	r24, 0x02	; 2
    1330:	09 f0       	breq	.+2      	; 0x1334 <step_anticlockwise+0x12a>
    1332:	42 c0       	rjmp	.+132    	; 0x13b8 <step_anticlockwise+0x1ae>
		 current_time = get_tcnt0_ticks();
    1334:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1338:	6b 01       	movw	r12, r22
    133a:	7c 01       	movw	r14, r24
    133c:	cc 0e       	add	r12, r28
    133e:	d1 1c       	adc	r13, r1
    1340:	e1 1c       	adc	r14, r1
    1342:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<RED);
    1344:	c1 e0       	ldi	r28, 0x01	; 1
    1346:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1348:	2a c0       	rjmp	.+84     	; 0x139e <step_anticlockwise+0x194>
			 PORTC |= (1<<GRE)|(1<<RED);
    134a:	98 b1       	in	r25, 0x08	; 8
    134c:	ae 01       	movw	r20, r28
    134e:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <step_anticlockwise+0x14e>
    1354:	44 0f       	add	r20, r20
    1356:	55 1f       	adc	r21, r21
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <step_anticlockwise+0x14a>
    135c:	9e 01       	movw	r18, r28
    135e:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <step_anticlockwise+0x15e>
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <step_anticlockwise+0x15a>
    136c:	84 2f       	mov	r24, r20
    136e:	82 2b       	or	r24, r18
    1370:	89 2b       	or	r24, r25
    1372:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<YEL));
    1374:	28 b1       	in	r18, 0x08	; 8
    1376:	ae 01       	movw	r20, r28
    1378:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <step_anticlockwise+0x178>
    137e:	44 0f       	add	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <step_anticlockwise+0x174>
    1386:	ce 01       	movw	r24, r28
    1388:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <step_anticlockwise+0x188>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <step_anticlockwise+0x184>
    1396:	84 2b       	or	r24, r20
    1398:	80 95       	com	r24
    139a:	82 23       	and	r24, r18
    139c:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 2){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    139e:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
    13a2:	6c 15       	cp	r22, r12
    13a4:	7d 05       	cpc	r23, r13
    13a6:	8e 05       	cpc	r24, r14
    13a8:	9f 05       	cpc	r25, r15
    13aa:	78 f2       	brcs	.-98     	; 0x134a <step_anticlockwise+0x140>
			 PORTC |= (1<<GRE)|(1<<RED);
			 PORTC &= ~((1<<BLU)|(1<<YEL));
		 }
		 ++phase;
    13ac:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <phase>
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <phase>
    13b6:	40 c0       	rjmp	.+128    	; 0x1438 <step_anticlockwise+0x22e>
	 }
	 else if(phase == 3){
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	f1 f5       	brne	.+124    	; 0x1438 <step_anticlockwise+0x22e>
		 current_time = get_tcnt0_ticks();
    13bc:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
		 while((current_time + time_on) > get_tcnt0_ticks()){
    13c0:	6b 01       	movw	r12, r22
    13c2:	7c 01       	movw	r14, r24
    13c4:	cc 0e       	add	r12, r28
    13c6:	d1 1c       	adc	r13, r1
    13c8:	e1 1c       	adc	r14, r1
    13ca:	f1 1c       	adc	r15, r1
			 PORTC |= (1<<GRE)|(1<<YEL);
    13cc:	c1 e0       	ldi	r28, 0x01	; 1
    13ce:	d0 e0       	ldi	r29, 0x00	; 0
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    13d0:	2a c0       	rjmp	.+84     	; 0x1426 <step_anticlockwise+0x21c>
			 PORTC |= (1<<GRE)|(1<<YEL);
    13d2:	98 b1       	in	r25, 0x08	; 8
    13d4:	ae 01       	movw	r20, r28
    13d6:	00 90 0d 03 	lds	r0, 0x030D	; 0x80030d <GRE>
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <step_anticlockwise+0x1d6>
    13dc:	44 0f       	add	r20, r20
    13de:	55 1f       	adc	r21, r21
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <step_anticlockwise+0x1d2>
    13e4:	9e 01       	movw	r18, r28
    13e6:	00 90 0c 03 	lds	r0, 0x030C	; 0x80030c <YEL>
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <step_anticlockwise+0x1e6>
    13ec:	22 0f       	add	r18, r18
    13ee:	33 1f       	adc	r19, r19
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <step_anticlockwise+0x1e2>
    13f4:	84 2f       	mov	r24, r20
    13f6:	82 2b       	or	r24, r18
    13f8:	89 2b       	or	r24, r25
    13fa:	88 b9       	out	0x08, r24	; 8
			 PORTC &= ~((1<<BLU)|(1<<RED));
    13fc:	28 b1       	in	r18, 0x08	; 8
    13fe:	ae 01       	movw	r20, r28
    1400:	00 90 0e 03 	lds	r0, 0x030E	; 0x80030e <BLU>
    1404:	02 c0       	rjmp	.+4      	; 0x140a <step_anticlockwise+0x200>
    1406:	44 0f       	add	r20, r20
    1408:	55 1f       	adc	r21, r21
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <step_anticlockwise+0x1fc>
    140e:	ce 01       	movw	r24, r28
    1410:	00 90 0f 03 	lds	r0, 0x030F	; 0x80030f <RED>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <step_anticlockwise+0x210>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <step_anticlockwise+0x20c>
    141e:	84 2b       	or	r24, r20
    1420:	80 95       	com	r24
    1422:	82 23       	and	r24, r18
    1424:	88 b9       	out	0x08, r24	; 8
		 }
		 ++phase;
	 }
	 else if(phase == 3){
		 current_time = get_tcnt0_ticks();
		 while((current_time + time_on) > get_tcnt0_ticks()){
    1426:	0e 94 96 02 	call	0x52c	; 0x52c <get_tcnt0_ticks>
    142a:	6c 15       	cp	r22, r12
    142c:	7d 05       	cpc	r23, r13
    142e:	8e 05       	cpc	r24, r14
    1430:	9f 05       	cpc	r25, r15
    1432:	78 f2       	brcs	.-98     	; 0x13d2 <step_anticlockwise+0x1c8>
			 PORTC |= (1<<GRE)|(1<<YEL);
			 PORTC &= ~((1<<BLU)|(1<<RED));
		 }
		 phase = 0;
    1434:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <phase>
	 }
	 decrement_step();
    1438:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <decrement_step>
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	08 95       	ret

0000144a <step>:
	//if ((steps > info_ptr->maxStep) || (steps < 0)){
		///*	dont move	*/
		//return;
	//}
	
	int8_t speed = info_ptr->stepSpeed;
    144a:	fc 01       	movw	r30, r24
    144c:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t time_on;
	if (speed >= 0){
    144e:	88 23       	and	r24, r24
    1450:	44 f1       	brlt	.+80     	; 0x14a2 <step+0x58>
			if (speed < 10){
    1452:	8a 30       	cpi	r24, 0x0A	; 10
    1454:	94 f0       	brlt	.+36     	; 0x147a <step+0x30>
				time_on = 100;
			} else if (speed < 20) {
    1456:	84 31       	cpi	r24, 0x14	; 20
    1458:	94 f0       	brlt	.+36     	; 0x147e <step+0x34>
				time_on = 90;
			} else if (speed < 30) {
    145a:	8e 31       	cpi	r24, 0x1E	; 30
    145c:	94 f0       	brlt	.+36     	; 0x1482 <step+0x38>
				time_on = 80;
			} else if (speed < 40) {
    145e:	88 32       	cpi	r24, 0x28	; 40
    1460:	94 f0       	brlt	.+36     	; 0x1486 <step+0x3c>
				time_on = 70;
			} else if (speed < 50){
    1462:	82 33       	cpi	r24, 0x32	; 50
    1464:	94 f0       	brlt	.+36     	; 0x148a <step+0x40>
				time_on = 60;
			} else if (speed < 60) {
    1466:	8c 33       	cpi	r24, 0x3C	; 60
    1468:	94 f0       	brlt	.+36     	; 0x148e <step+0x44>
				time_on = 50;
			} else if (speed < 70){
    146a:	86 34       	cpi	r24, 0x46	; 70
    146c:	94 f0       	brlt	.+36     	; 0x1492 <step+0x48>
				time_on = 40;
			} else if (speed < 80) {
    146e:	80 35       	cpi	r24, 0x50	; 80
    1470:	94 f0       	brlt	.+36     	; 0x1496 <step+0x4c>
				time_on = 30;
			} else if (speed < 90){
    1472:	8a 35       	cpi	r24, 0x5A	; 90
    1474:	94 f0       	brlt	.+36     	; 0x149a <step+0x50>
				time_on = 20;
			} else {
				time_on = 5;
    1476:	85 e0       	ldi	r24, 0x05	; 5
    1478:	11 c0       	rjmp	.+34     	; 0x149c <step+0x52>
	
	int8_t speed = info_ptr->stepSpeed;
	uint8_t time_on;
	if (speed >= 0){
			if (speed < 10){
				time_on = 100;
    147a:	84 e6       	ldi	r24, 0x64	; 100
    147c:	0f c0       	rjmp	.+30     	; 0x149c <step+0x52>
			} else if (speed < 20) {
				time_on = 90;
    147e:	8a e5       	ldi	r24, 0x5A	; 90
    1480:	0d c0       	rjmp	.+26     	; 0x149c <step+0x52>
			} else if (speed < 30) {
				time_on = 80;
    1482:	80 e5       	ldi	r24, 0x50	; 80
    1484:	0b c0       	rjmp	.+22     	; 0x149c <step+0x52>
			} else if (speed < 40) {
				time_on = 70;
    1486:	86 e4       	ldi	r24, 0x46	; 70
    1488:	09 c0       	rjmp	.+18     	; 0x149c <step+0x52>
			} else if (speed < 50){
				time_on = 60;
    148a:	8c e3       	ldi	r24, 0x3C	; 60
    148c:	07 c0       	rjmp	.+14     	; 0x149c <step+0x52>
			} else if (speed < 60) {
				time_on = 50;
    148e:	82 e3       	ldi	r24, 0x32	; 50
    1490:	05 c0       	rjmp	.+10     	; 0x149c <step+0x52>
			} else if (speed < 70){
				time_on = 40;
    1492:	88 e2       	ldi	r24, 0x28	; 40
    1494:	03 c0       	rjmp	.+6      	; 0x149c <step+0x52>
			} else if (speed < 80) {
				time_on = 30;
    1496:	8e e1       	ldi	r24, 0x1E	; 30
    1498:	01 c0       	rjmp	.+2      	; 0x149c <step+0x52>
			} else if (speed < 90){
				time_on = 20;
    149a:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 5;
			}
			step_clockwise(time_on);
    149c:	0e 94 e5 07 	call	0xfca	; 0xfca <step_clockwise>
    14a0:	08 95       	ret
	} else {
			if (speed > -10){
    14a2:	87 3f       	cpi	r24, 0xF7	; 247
    14a4:	94 f4       	brge	.+36     	; 0x14ca <step+0x80>
				time_on = 100;
			} else if (speed > -20) {
    14a6:	8d 3e       	cpi	r24, 0xED	; 237
    14a8:	94 f4       	brge	.+36     	; 0x14ce <step+0x84>
				time_on = 90;
			} else if (speed > -30) {
    14aa:	83 3e       	cpi	r24, 0xE3	; 227
    14ac:	94 f4       	brge	.+36     	; 0x14d2 <step+0x88>
				time_on = 80;
			} else if (speed > -40) {
    14ae:	89 3d       	cpi	r24, 0xD9	; 217
    14b0:	94 f4       	brge	.+36     	; 0x14d6 <step+0x8c>
				time_on = 70;
			} else if (speed > -50){
    14b2:	8f 3c       	cpi	r24, 0xCF	; 207
    14b4:	94 f4       	brge	.+36     	; 0x14da <step+0x90>
				time_on = 60;
			} else if (speed > -60) {
    14b6:	85 3c       	cpi	r24, 0xC5	; 197
    14b8:	94 f4       	brge	.+36     	; 0x14de <step+0x94>
				time_on = 50;
			} else if (speed > -70){
    14ba:	8b 3b       	cpi	r24, 0xBB	; 187
    14bc:	94 f4       	brge	.+36     	; 0x14e2 <step+0x98>
				time_on = 40;
			} else if (speed > -80) {
    14be:	81 3b       	cpi	r24, 0xB1	; 177
    14c0:	94 f4       	brge	.+36     	; 0x14e6 <step+0x9c>
				time_on = 30;
			} else if (speed > -90){
    14c2:	87 3a       	cpi	r24, 0xA7	; 167
    14c4:	94 f4       	brge	.+36     	; 0x14ea <step+0xa0>
				time_on = 20;
			} else {
				time_on = 5;
    14c6:	85 e0       	ldi	r24, 0x05	; 5
    14c8:	11 c0       	rjmp	.+34     	; 0x14ec <step+0xa2>
				time_on = 5;
			}
			step_clockwise(time_on);
	} else {
			if (speed > -10){
				time_on = 100;
    14ca:	84 e6       	ldi	r24, 0x64	; 100
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <step+0xa2>
			} else if (speed > -20) {
				time_on = 90;
    14ce:	8a e5       	ldi	r24, 0x5A	; 90
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <step+0xa2>
			} else if (speed > -30) {
				time_on = 80;
    14d2:	80 e5       	ldi	r24, 0x50	; 80
    14d4:	0b c0       	rjmp	.+22     	; 0x14ec <step+0xa2>
			} else if (speed > -40) {
				time_on = 70;
    14d6:	86 e4       	ldi	r24, 0x46	; 70
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <step+0xa2>
			} else if (speed > -50){
				time_on = 60;
    14da:	8c e3       	ldi	r24, 0x3C	; 60
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <step+0xa2>
			} else if (speed > -60) {
				time_on = 50;
    14de:	82 e3       	ldi	r24, 0x32	; 50
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <step+0xa2>
			} else if (speed > -70){
				time_on = 40;
    14e2:	88 e2       	ldi	r24, 0x28	; 40
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <step+0xa2>
			} else if (speed > -80) {
				time_on = 30;
    14e6:	8e e1       	ldi	r24, 0x1E	; 30
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <step+0xa2>
			} else if (speed > -90){
				time_on = 20;
    14ea:	84 e1       	ldi	r24, 0x14	; 20
			} else {
				time_on = 5;
			}
			step_anticlockwise(time_on);
    14ec:	0e 94 05 09 	call	0x120a	; 0x120a <step_anticlockwise>
    14f0:	08 95       	ret

000014f2 <worm_off>:
#define RED PORTC5
#define BLACK PORTC2

void worm_off(void){
		/*	turn the motor off	*/
		PORTC &= ~(1<<RED);
    14f2:	45 98       	cbi	0x08, 5	; 8
		PORTC &= ~(1<<BLACK);
    14f4:	42 98       	cbi	0x08, 2	; 8
		fputs("Worm1 off\n", stdout);
    14f6:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <__iob+0x2>
    14fa:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <__iob+0x3>
    14fe:	4a e0       	ldi	r20, 0x0A	; 10
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	83 ee       	ldi	r24, 0xE3	; 227
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <fwrite>
    150e:	08 95       	ret

00001510 <move_worm>:
}

void move_worm(uint8_t percent, int8_t direction){
	/*	effective pwm to control DC motor for the claw */
	uint8_t duty = 20;
		if (direction){
    1510:	66 23       	and	r22, r22
    1512:	91 f0       	breq	.+36     	; 0x1538 <move_worm+0x28>
				// forward
				PORTC |= (1<<RED);
    1514:	45 9a       	sbi	0x08, 5	; 8
				PORTC &= ~(1<<BLACK);
    1516:	42 98       	cbi	0x08, 2	; 8
				custom_delay((duty*percent)/100);
    1518:	24 e1       	ldi	r18, 0x14	; 20
    151a:	82 9f       	mul	r24, r18
    151c:	c0 01       	movw	r24, r0
    151e:	11 24       	eor	r1, r1
    1520:	64 e6       	ldi	r22, 0x64	; 100
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
    1528:	07 2e       	mov	r0, r23
    152a:	00 0c       	add	r0, r0
    152c:	88 0b       	sbc	r24, r24
    152e:	99 0b       	sbc	r25, r25
    1530:	0e 94 38 03 	call	0x670	; 0x670 <custom_delay>
				PORTC &= ~(1<<RED);
    1534:	45 98       	cbi	0x08, 5	; 8
    1536:	08 95       	ret
		} else {
				// backwards
				PORTC |= (1<<BLACK);
    1538:	42 9a       	sbi	0x08, 2	; 8
				PORTC &= ~(1<<RED);
    153a:	45 98       	cbi	0x08, 5	; 8
				custom_delay((duty*percent)/100);
    153c:	24 e1       	ldi	r18, 0x14	; 20
    153e:	82 9f       	mul	r24, r18
    1540:	c0 01       	movw	r24, r0
    1542:	11 24       	eor	r1, r1
    1544:	64 e6       	ldi	r22, 0x64	; 100
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
    154c:	07 2e       	mov	r0, r23
    154e:	00 0c       	add	r0, r0
    1550:	88 0b       	sbc	r24, r24
    1552:	99 0b       	sbc	r25, r25
    1554:	0e 94 38 03 	call	0x670	; 0x670 <custom_delay>
				PORTC &= ~(1<<RED);
    1558:	45 98       	cbi	0x08, 5	; 8
    155a:	08 95       	ret

0000155c <__divmodhi4>:
    155c:	97 fb       	bst	r25, 7
    155e:	07 2e       	mov	r0, r23
    1560:	16 f4       	brtc	.+4      	; 0x1566 <__divmodhi4+0xa>
    1562:	00 94       	com	r0
    1564:	07 d0       	rcall	.+14     	; 0x1574 <__divmodhi4_neg1>
    1566:	77 fd       	sbrc	r23, 7
    1568:	09 d0       	rcall	.+18     	; 0x157c <__divmodhi4_neg2>
    156a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__udivmodhi4>
    156e:	07 fc       	sbrc	r0, 7
    1570:	05 d0       	rcall	.+10     	; 0x157c <__divmodhi4_neg2>
    1572:	3e f4       	brtc	.+14     	; 0x1582 <__divmodhi4_exit>

00001574 <__divmodhi4_neg1>:
    1574:	90 95       	com	r25
    1576:	81 95       	neg	r24
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	08 95       	ret

0000157c <__divmodhi4_neg2>:
    157c:	70 95       	com	r23
    157e:	61 95       	neg	r22
    1580:	7f 4f       	sbci	r23, 0xFF	; 255

00001582 <__divmodhi4_exit>:
    1582:	08 95       	ret

00001584 <__divmodsi4>:
    1584:	05 2e       	mov	r0, r21
    1586:	97 fb       	bst	r25, 7
    1588:	1e f4       	brtc	.+6      	; 0x1590 <__divmodsi4+0xc>
    158a:	00 94       	com	r0
    158c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__negsi2>
    1590:	57 fd       	sbrc	r21, 7
    1592:	07 d0       	rcall	.+14     	; 0x15a2 <__divmodsi4_neg2>
    1594:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__udivmodsi4>
    1598:	07 fc       	sbrc	r0, 7
    159a:	03 d0       	rcall	.+6      	; 0x15a2 <__divmodsi4_neg2>
    159c:	4e f4       	brtc	.+18     	; 0x15b0 <__divmodsi4_exit>
    159e:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__negsi2>

000015a2 <__divmodsi4_neg2>:
    15a2:	50 95       	com	r21
    15a4:	40 95       	com	r20
    15a6:	30 95       	com	r19
    15a8:	21 95       	neg	r18
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	4f 4f       	sbci	r20, 0xFF	; 255
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255

000015b0 <__divmodsi4_exit>:
    15b0:	08 95       	ret

000015b2 <__negsi2>:
    15b2:	90 95       	com	r25
    15b4:	80 95       	com	r24
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	08 95       	ret

000015c2 <__tablejump2__>:
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	05 90       	lpm	r0, Z+
    15c8:	f4 91       	lpm	r31, Z
    15ca:	e0 2d       	mov	r30, r0
    15cc:	09 94       	ijmp

000015ce <__udivmodhi4>:
    15ce:	aa 1b       	sub	r26, r26
    15d0:	bb 1b       	sub	r27, r27
    15d2:	51 e1       	ldi	r21, 0x11	; 17
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <__udivmodhi4_ep>

000015d6 <__udivmodhi4_loop>:
    15d6:	aa 1f       	adc	r26, r26
    15d8:	bb 1f       	adc	r27, r27
    15da:	a6 17       	cp	r26, r22
    15dc:	b7 07       	cpc	r27, r23
    15de:	10 f0       	brcs	.+4      	; 0x15e4 <__udivmodhi4_ep>
    15e0:	a6 1b       	sub	r26, r22
    15e2:	b7 0b       	sbc	r27, r23

000015e4 <__udivmodhi4_ep>:
    15e4:	88 1f       	adc	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	5a 95       	dec	r21
    15ea:	a9 f7       	brne	.-22     	; 0x15d6 <__udivmodhi4_loop>
    15ec:	80 95       	com	r24
    15ee:	90 95       	com	r25
    15f0:	bc 01       	movw	r22, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	08 95       	ret

000015f6 <__udivmodsi4>:
    15f6:	a1 e2       	ldi	r26, 0x21	; 33
    15f8:	1a 2e       	mov	r1, r26
    15fa:	aa 1b       	sub	r26, r26
    15fc:	bb 1b       	sub	r27, r27
    15fe:	fd 01       	movw	r30, r26
    1600:	0d c0       	rjmp	.+26     	; 0x161c <__udivmodsi4_ep>

00001602 <__udivmodsi4_loop>:
    1602:	aa 1f       	adc	r26, r26
    1604:	bb 1f       	adc	r27, r27
    1606:	ee 1f       	adc	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	a2 17       	cp	r26, r18
    160c:	b3 07       	cpc	r27, r19
    160e:	e4 07       	cpc	r30, r20
    1610:	f5 07       	cpc	r31, r21
    1612:	20 f0       	brcs	.+8      	; 0x161c <__udivmodsi4_ep>
    1614:	a2 1b       	sub	r26, r18
    1616:	b3 0b       	sbc	r27, r19
    1618:	e4 0b       	sbc	r30, r20
    161a:	f5 0b       	sbc	r31, r21

0000161c <__udivmodsi4_ep>:
    161c:	66 1f       	adc	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	1a 94       	dec	r1
    1626:	69 f7       	brne	.-38     	; 0x1602 <__udivmodsi4_loop>
    1628:	60 95       	com	r22
    162a:	70 95       	com	r23
    162c:	80 95       	com	r24
    162e:	90 95       	com	r25
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	bd 01       	movw	r22, r26
    1636:	cf 01       	movw	r24, r30
    1638:	08 95       	ret

0000163a <malloc>:
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	82 30       	cpi	r24, 0x02	; 2
    1644:	91 05       	cpc	r25, r1
    1646:	10 f4       	brcc	.+4      	; 0x164c <malloc+0x12>
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <__flp>
    1650:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <__flp+0x1>
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	a0 e0       	ldi	r26, 0x00	; 0
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	30 97       	sbiw	r30, 0x00	; 0
    165e:	19 f1       	breq	.+70     	; 0x16a6 <malloc+0x6c>
    1660:	40 81       	ld	r20, Z
    1662:	51 81       	ldd	r21, Z+1	; 0x01
    1664:	02 81       	ldd	r16, Z+2	; 0x02
    1666:	13 81       	ldd	r17, Z+3	; 0x03
    1668:	48 17       	cp	r20, r24
    166a:	59 07       	cpc	r21, r25
    166c:	c8 f0       	brcs	.+50     	; 0x16a0 <malloc+0x66>
    166e:	84 17       	cp	r24, r20
    1670:	95 07       	cpc	r25, r21
    1672:	69 f4       	brne	.+26     	; 0x168e <malloc+0x54>
    1674:	10 97       	sbiw	r26, 0x00	; 0
    1676:	31 f0       	breq	.+12     	; 0x1684 <malloc+0x4a>
    1678:	12 96       	adiw	r26, 0x02	; 2
    167a:	0c 93       	st	X, r16
    167c:	12 97       	sbiw	r26, 0x02	; 2
    167e:	13 96       	adiw	r26, 0x03	; 3
    1680:	1c 93       	st	X, r17
    1682:	27 c0       	rjmp	.+78     	; 0x16d2 <malloc+0x98>
    1684:	00 93 12 03 	sts	0x0312, r16	; 0x800312 <__flp>
    1688:	10 93 13 03 	sts	0x0313, r17	; 0x800313 <__flp+0x1>
    168c:	22 c0       	rjmp	.+68     	; 0x16d2 <malloc+0x98>
    168e:	21 15       	cp	r18, r1
    1690:	31 05       	cpc	r19, r1
    1692:	19 f0       	breq	.+6      	; 0x169a <malloc+0x60>
    1694:	42 17       	cp	r20, r18
    1696:	53 07       	cpc	r21, r19
    1698:	18 f4       	brcc	.+6      	; 0x16a0 <malloc+0x66>
    169a:	9a 01       	movw	r18, r20
    169c:	bd 01       	movw	r22, r26
    169e:	ef 01       	movw	r28, r30
    16a0:	df 01       	movw	r26, r30
    16a2:	f8 01       	movw	r30, r16
    16a4:	db cf       	rjmp	.-74     	; 0x165c <malloc+0x22>
    16a6:	21 15       	cp	r18, r1
    16a8:	31 05       	cpc	r19, r1
    16aa:	f9 f0       	breq	.+62     	; 0x16ea <malloc+0xb0>
    16ac:	28 1b       	sub	r18, r24
    16ae:	39 0b       	sbc	r19, r25
    16b0:	24 30       	cpi	r18, 0x04	; 4
    16b2:	31 05       	cpc	r19, r1
    16b4:	80 f4       	brcc	.+32     	; 0x16d6 <malloc+0x9c>
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	61 15       	cp	r22, r1
    16bc:	71 05       	cpc	r23, r1
    16be:	21 f0       	breq	.+8      	; 0x16c8 <malloc+0x8e>
    16c0:	fb 01       	movw	r30, r22
    16c2:	93 83       	std	Z+3, r25	; 0x03
    16c4:	82 83       	std	Z+2, r24	; 0x02
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <malloc+0x96>
    16c8:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <__flp+0x1>
    16cc:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <__flp>
    16d0:	fe 01       	movw	r30, r28
    16d2:	32 96       	adiw	r30, 0x02	; 2
    16d4:	44 c0       	rjmp	.+136    	; 0x175e <malloc+0x124>
    16d6:	fe 01       	movw	r30, r28
    16d8:	e2 0f       	add	r30, r18
    16da:	f3 1f       	adc	r31, r19
    16dc:	81 93       	st	Z+, r24
    16de:	91 93       	st	Z+, r25
    16e0:	22 50       	subi	r18, 0x02	; 2
    16e2:	31 09       	sbc	r19, r1
    16e4:	39 83       	std	Y+1, r19	; 0x01
    16e6:	28 83       	st	Y, r18
    16e8:	3a c0       	rjmp	.+116    	; 0x175e <malloc+0x124>
    16ea:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <__brkval>
    16ee:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <__brkval+0x1>
    16f2:	23 2b       	or	r18, r19
    16f4:	41 f4       	brne	.+16     	; 0x1706 <malloc+0xcc>
    16f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    16fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    16fe:	30 93 11 03 	sts	0x0311, r19	; 0x800311 <__brkval+0x1>
    1702:	20 93 10 03 	sts	0x0310, r18	; 0x800310 <__brkval>
    1706:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    170a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    170e:	21 15       	cp	r18, r1
    1710:	31 05       	cpc	r19, r1
    1712:	41 f4       	brne	.+16     	; 0x1724 <malloc+0xea>
    1714:	2d b7       	in	r18, 0x3d	; 61
    1716:	3e b7       	in	r19, 0x3e	; 62
    1718:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    171c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1720:	24 1b       	sub	r18, r20
    1722:	35 0b       	sbc	r19, r21
    1724:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <__brkval>
    1728:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <__brkval+0x1>
    172c:	e2 17       	cp	r30, r18
    172e:	f3 07       	cpc	r31, r19
    1730:	a0 f4       	brcc	.+40     	; 0x175a <malloc+0x120>
    1732:	2e 1b       	sub	r18, r30
    1734:	3f 0b       	sbc	r19, r31
    1736:	28 17       	cp	r18, r24
    1738:	39 07       	cpc	r19, r25
    173a:	78 f0       	brcs	.+30     	; 0x175a <malloc+0x120>
    173c:	ac 01       	movw	r20, r24
    173e:	4e 5f       	subi	r20, 0xFE	; 254
    1740:	5f 4f       	sbci	r21, 0xFF	; 255
    1742:	24 17       	cp	r18, r20
    1744:	35 07       	cpc	r19, r21
    1746:	48 f0       	brcs	.+18     	; 0x175a <malloc+0x120>
    1748:	4e 0f       	add	r20, r30
    174a:	5f 1f       	adc	r21, r31
    174c:	50 93 11 03 	sts	0x0311, r21	; 0x800311 <__brkval+0x1>
    1750:	40 93 10 03 	sts	0x0310, r20	; 0x800310 <__brkval>
    1754:	81 93       	st	Z+, r24
    1756:	91 93       	st	Z+, r25
    1758:	02 c0       	rjmp	.+4      	; 0x175e <malloc+0x124>
    175a:	e0 e0       	ldi	r30, 0x00	; 0
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	cf 01       	movw	r24, r30
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	08 95       	ret

0000176a <free>:
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	09 f4       	brne	.+2      	; 0x1774 <free+0xa>
    1772:	81 c0       	rjmp	.+258    	; 0x1876 <free+0x10c>
    1774:	fc 01       	movw	r30, r24
    1776:	32 97       	sbiw	r30, 0x02	; 2
    1778:	13 82       	std	Z+3, r1	; 0x03
    177a:	12 82       	std	Z+2, r1	; 0x02
    177c:	a0 91 12 03 	lds	r26, 0x0312	; 0x800312 <__flp>
    1780:	b0 91 13 03 	lds	r27, 0x0313	; 0x800313 <__flp+0x1>
    1784:	10 97       	sbiw	r26, 0x00	; 0
    1786:	81 f4       	brne	.+32     	; 0x17a8 <free+0x3e>
    1788:	20 81       	ld	r18, Z
    178a:	31 81       	ldd	r19, Z+1	; 0x01
    178c:	82 0f       	add	r24, r18
    178e:	93 1f       	adc	r25, r19
    1790:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <__brkval>
    1794:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <__brkval+0x1>
    1798:	28 17       	cp	r18, r24
    179a:	39 07       	cpc	r19, r25
    179c:	51 f5       	brne	.+84     	; 0x17f2 <free+0x88>
    179e:	f0 93 11 03 	sts	0x0311, r31	; 0x800311 <__brkval+0x1>
    17a2:	e0 93 10 03 	sts	0x0310, r30	; 0x800310 <__brkval>
    17a6:	67 c0       	rjmp	.+206    	; 0x1876 <free+0x10c>
    17a8:	ed 01       	movw	r28, r26
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	ce 17       	cp	r28, r30
    17b0:	df 07       	cpc	r29, r31
    17b2:	40 f4       	brcc	.+16     	; 0x17c4 <free+0x5a>
    17b4:	4a 81       	ldd	r20, Y+2	; 0x02
    17b6:	5b 81       	ldd	r21, Y+3	; 0x03
    17b8:	9e 01       	movw	r18, r28
    17ba:	41 15       	cp	r20, r1
    17bc:	51 05       	cpc	r21, r1
    17be:	f1 f0       	breq	.+60     	; 0x17fc <free+0x92>
    17c0:	ea 01       	movw	r28, r20
    17c2:	f5 cf       	rjmp	.-22     	; 0x17ae <free+0x44>
    17c4:	d3 83       	std	Z+3, r29	; 0x03
    17c6:	c2 83       	std	Z+2, r28	; 0x02
    17c8:	40 81       	ld	r20, Z
    17ca:	51 81       	ldd	r21, Z+1	; 0x01
    17cc:	84 0f       	add	r24, r20
    17ce:	95 1f       	adc	r25, r21
    17d0:	c8 17       	cp	r28, r24
    17d2:	d9 07       	cpc	r29, r25
    17d4:	59 f4       	brne	.+22     	; 0x17ec <free+0x82>
    17d6:	88 81       	ld	r24, Y
    17d8:	99 81       	ldd	r25, Y+1	; 0x01
    17da:	84 0f       	add	r24, r20
    17dc:	95 1f       	adc	r25, r21
    17de:	02 96       	adiw	r24, 0x02	; 2
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	93 83       	std	Z+3, r25	; 0x03
    17ea:	82 83       	std	Z+2, r24	; 0x02
    17ec:	21 15       	cp	r18, r1
    17ee:	31 05       	cpc	r19, r1
    17f0:	29 f4       	brne	.+10     	; 0x17fc <free+0x92>
    17f2:	f0 93 13 03 	sts	0x0313, r31	; 0x800313 <__flp+0x1>
    17f6:	e0 93 12 03 	sts	0x0312, r30	; 0x800312 <__flp>
    17fa:	3d c0       	rjmp	.+122    	; 0x1876 <free+0x10c>
    17fc:	e9 01       	movw	r28, r18
    17fe:	fb 83       	std	Y+3, r31	; 0x03
    1800:	ea 83       	std	Y+2, r30	; 0x02
    1802:	49 91       	ld	r20, Y+
    1804:	59 91       	ld	r21, Y+
    1806:	c4 0f       	add	r28, r20
    1808:	d5 1f       	adc	r29, r21
    180a:	ec 17       	cp	r30, r28
    180c:	fd 07       	cpc	r31, r29
    180e:	61 f4       	brne	.+24     	; 0x1828 <free+0xbe>
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	84 0f       	add	r24, r20
    1816:	95 1f       	adc	r25, r21
    1818:	02 96       	adiw	r24, 0x02	; 2
    181a:	e9 01       	movw	r28, r18
    181c:	99 83       	std	Y+1, r25	; 0x01
    181e:	88 83       	st	Y, r24
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	9b 83       	std	Y+3, r25	; 0x03
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	e0 e0       	ldi	r30, 0x00	; 0
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	12 96       	adiw	r26, 0x02	; 2
    182e:	8d 91       	ld	r24, X+
    1830:	9c 91       	ld	r25, X
    1832:	13 97       	sbiw	r26, 0x03	; 3
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	19 f0       	breq	.+6      	; 0x183e <free+0xd4>
    1838:	fd 01       	movw	r30, r26
    183a:	dc 01       	movw	r26, r24
    183c:	f7 cf       	rjmp	.-18     	; 0x182c <free+0xc2>
    183e:	8d 91       	ld	r24, X+
    1840:	9c 91       	ld	r25, X
    1842:	11 97       	sbiw	r26, 0x01	; 1
    1844:	9d 01       	movw	r18, r26
    1846:	2e 5f       	subi	r18, 0xFE	; 254
    1848:	3f 4f       	sbci	r19, 0xFF	; 255
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <__brkval>
    1852:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <__brkval+0x1>
    1856:	28 17       	cp	r18, r24
    1858:	39 07       	cpc	r19, r25
    185a:	69 f4       	brne	.+26     	; 0x1876 <free+0x10c>
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	29 f4       	brne	.+10     	; 0x186a <free+0x100>
    1860:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__flp+0x1>
    1864:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <__flp>
    1868:	02 c0       	rjmp	.+4      	; 0x186e <free+0x104>
    186a:	13 82       	std	Z+3, r1	; 0x03
    186c:	12 82       	std	Z+2, r1	; 0x02
    186e:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <__brkval+0x1>
    1872:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <__brkval>
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <do_rand>:
    187c:	8f 92       	push	r8
    187e:	9f 92       	push	r9
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	ec 01       	movw	r28, r24
    1892:	68 81       	ld	r22, Y
    1894:	79 81       	ldd	r23, Y+1	; 0x01
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	61 15       	cp	r22, r1
    189c:	71 05       	cpc	r23, r1
    189e:	81 05       	cpc	r24, r1
    18a0:	91 05       	cpc	r25, r1
    18a2:	21 f4       	brne	.+8      	; 0x18ac <do_rand+0x30>
    18a4:	64 e2       	ldi	r22, 0x24	; 36
    18a6:	79 ed       	ldi	r23, 0xD9	; 217
    18a8:	8b e5       	ldi	r24, 0x5B	; 91
    18aa:	97 e0       	ldi	r25, 0x07	; 7
    18ac:	2d e1       	ldi	r18, 0x1D	; 29
    18ae:	33 ef       	ldi	r19, 0xF3	; 243
    18b0:	41 e0       	ldi	r20, 0x01	; 1
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divmodsi4>
    18b8:	49 01       	movw	r8, r18
    18ba:	5a 01       	movw	r10, r20
    18bc:	9b 01       	movw	r18, r22
    18be:	ac 01       	movw	r20, r24
    18c0:	a7 ea       	ldi	r26, 0xA7	; 167
    18c2:	b1 e4       	ldi	r27, 0x41	; 65
    18c4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__muluhisi3>
    18c8:	6b 01       	movw	r12, r22
    18ca:	7c 01       	movw	r14, r24
    18cc:	ac ee       	ldi	r26, 0xEC	; 236
    18ce:	b4 ef       	ldi	r27, 0xF4	; 244
    18d0:	a5 01       	movw	r20, r10
    18d2:	94 01       	movw	r18, r8
    18d4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__mulohisi3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8c 0d       	add	r24, r12
    18de:	9d 1d       	adc	r25, r13
    18e0:	ae 1d       	adc	r26, r14
    18e2:	bf 1d       	adc	r27, r15
    18e4:	b7 ff       	sbrs	r27, 7
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <do_rand+0x72>
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	a1 09       	sbc	r26, r1
    18ec:	b0 48       	sbci	r27, 0x80	; 128
    18ee:	88 83       	st	Y, r24
    18f0:	99 83       	std	Y+1, r25	; 0x01
    18f2:	aa 83       	std	Y+2, r26	; 0x02
    18f4:	bb 83       	std	Y+3, r27	; 0x03
    18f6:	9f 77       	andi	r25, 0x7F	; 127
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	ff 90       	pop	r15
    18fe:	ef 90       	pop	r14
    1900:	df 90       	pop	r13
    1902:	cf 90       	pop	r12
    1904:	bf 90       	pop	r11
    1906:	af 90       	pop	r10
    1908:	9f 90       	pop	r9
    190a:	8f 90       	pop	r8
    190c:	08 95       	ret

0000190e <rand_r>:
    190e:	0e 94 3e 0c 	call	0x187c	; 0x187c <do_rand>
    1912:	08 95       	ret

00001914 <rand>:
    1914:	86 e0       	ldi	r24, 0x06	; 6
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	0e 94 3e 0c 	call	0x187c	; 0x187c <do_rand>
    191c:	08 95       	ret

0000191e <srand>:
    191e:	a0 e0       	ldi	r26, 0x00	; 0
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1926:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    192a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    192e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1932:	08 95       	ret

00001934 <fgetc>:
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	20 ff       	sbrs	r18, 0
    193e:	33 c0       	rjmp	.+102    	; 0x19a6 <fgetc+0x72>
    1940:	26 ff       	sbrs	r18, 6
    1942:	0a c0       	rjmp	.+20     	; 0x1958 <fgetc+0x24>
    1944:	2f 7b       	andi	r18, 0xBF	; 191
    1946:	2b 83       	std	Y+3, r18	; 0x03
    1948:	8e 81       	ldd	r24, Y+6	; 0x06
    194a:	9f 81       	ldd	r25, Y+7	; 0x07
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	9f 83       	std	Y+7, r25	; 0x07
    1950:	8e 83       	std	Y+6, r24	; 0x06
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	29 c0       	rjmp	.+82     	; 0x19aa <fgetc+0x76>
    1958:	22 ff       	sbrs	r18, 2
    195a:	0f c0       	rjmp	.+30     	; 0x197a <fgetc+0x46>
    195c:	e8 81       	ld	r30, Y
    195e:	f9 81       	ldd	r31, Y+1	; 0x01
    1960:	80 81       	ld	r24, Z
    1962:	08 2e       	mov	r0, r24
    1964:	00 0c       	add	r0, r0
    1966:	99 0b       	sbc	r25, r25
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	19 f4       	brne	.+6      	; 0x1972 <fgetc+0x3e>
    196c:	20 62       	ori	r18, 0x20	; 32
    196e:	2b 83       	std	Y+3, r18	; 0x03
    1970:	1a c0       	rjmp	.+52     	; 0x19a6 <fgetc+0x72>
    1972:	31 96       	adiw	r30, 0x01	; 1
    1974:	f9 83       	std	Y+1, r31	; 0x01
    1976:	e8 83       	st	Y, r30
    1978:	0e c0       	rjmp	.+28     	; 0x1996 <fgetc+0x62>
    197a:	ea 85       	ldd	r30, Y+10	; 0x0a
    197c:	fb 85       	ldd	r31, Y+11	; 0x0b
    197e:	09 95       	icall
    1980:	97 ff       	sbrs	r25, 7
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <fgetc+0x62>
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	11 f0       	breq	.+4      	; 0x198e <fgetc+0x5a>
    198a:	80 e2       	ldi	r24, 0x20	; 32
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <fgetc+0x5c>
    198e:	80 e1       	ldi	r24, 0x10	; 16
    1990:	82 2b       	or	r24, r18
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	08 c0       	rjmp	.+16     	; 0x19a6 <fgetc+0x72>
    1996:	2e 81       	ldd	r18, Y+6	; 0x06
    1998:	3f 81       	ldd	r19, Y+7	; 0x07
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	3f 83       	std	Y+7, r19	; 0x07
    19a0:	2e 83       	std	Y+6, r18	; 0x06
    19a2:	99 27       	eor	r25, r25
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <fgetc+0x76>
    19a6:	8f ef       	ldi	r24, 0xFF	; 255
    19a8:	9f ef       	ldi	r25, 0xFF	; 255
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <fputc>:
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	fb 01       	movw	r30, r22
    19ba:	23 81       	ldd	r18, Z+3	; 0x03
    19bc:	21 fd       	sbrc	r18, 1
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <fputc+0x16>
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	9f ef       	ldi	r25, 0xFF	; 255
    19c4:	2c c0       	rjmp	.+88     	; 0x1a1e <fputc+0x6e>
    19c6:	22 ff       	sbrs	r18, 2
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <fputc+0x46>
    19ca:	46 81       	ldd	r20, Z+6	; 0x06
    19cc:	57 81       	ldd	r21, Z+7	; 0x07
    19ce:	24 81       	ldd	r18, Z+4	; 0x04
    19d0:	35 81       	ldd	r19, Z+5	; 0x05
    19d2:	42 17       	cp	r20, r18
    19d4:	53 07       	cpc	r21, r19
    19d6:	44 f4       	brge	.+16     	; 0x19e8 <fputc+0x38>
    19d8:	a0 81       	ld	r26, Z
    19da:	b1 81       	ldd	r27, Z+1	; 0x01
    19dc:	9d 01       	movw	r18, r26
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	31 83       	std	Z+1, r19	; 0x01
    19e4:	20 83       	st	Z, r18
    19e6:	8c 93       	st	X, r24
    19e8:	26 81       	ldd	r18, Z+6	; 0x06
    19ea:	37 81       	ldd	r19, Z+7	; 0x07
    19ec:	2f 5f       	subi	r18, 0xFF	; 255
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	37 83       	std	Z+7, r19	; 0x07
    19f2:	26 83       	std	Z+6, r18	; 0x06
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <fputc+0x6e>
    19f6:	8b 01       	movw	r16, r22
    19f8:	ec 01       	movw	r28, r24
    19fa:	fb 01       	movw	r30, r22
    19fc:	00 84       	ldd	r0, Z+8	; 0x08
    19fe:	f1 85       	ldd	r31, Z+9	; 0x09
    1a00:	e0 2d       	mov	r30, r0
    1a02:	09 95       	icall
    1a04:	89 2b       	or	r24, r25
    1a06:	e1 f6       	brne	.-72     	; 0x19c0 <fputc+0x10>
    1a08:	d8 01       	movw	r26, r16
    1a0a:	16 96       	adiw	r26, 0x06	; 6
    1a0c:	8d 91       	ld	r24, X+
    1a0e:	9c 91       	ld	r25, X
    1a10:	17 97       	sbiw	r26, 0x07	; 7
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	17 96       	adiw	r26, 0x07	; 7
    1a16:	9c 93       	st	X, r25
    1a18:	8e 93       	st	-X, r24
    1a1a:	16 97       	sbiw	r26, 0x06	; 6
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <fputs>:
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	db 01       	movw	r26, r22
    1a36:	13 96       	adiw	r26, 0x03	; 3
    1a38:	2c 91       	ld	r18, X
    1a3a:	21 ff       	sbrs	r18, 1
    1a3c:	18 c0       	rjmp	.+48     	; 0x1a6e <fputs+0x46>
    1a3e:	8b 01       	movw	r16, r22
    1a40:	7c 01       	movw	r14, r24
    1a42:	d0 e0       	ldi	r29, 0x00	; 0
    1a44:	c0 e0       	ldi	r28, 0x00	; 0
    1a46:	f7 01       	movw	r30, r14
    1a48:	81 91       	ld	r24, Z+
    1a4a:	7f 01       	movw	r14, r30
    1a4c:	88 23       	and	r24, r24
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <fputs+0x40>
    1a50:	d8 01       	movw	r26, r16
    1a52:	18 96       	adiw	r26, 0x08	; 8
    1a54:	ed 91       	ld	r30, X+
    1a56:	fc 91       	ld	r31, X
    1a58:	19 97       	sbiw	r26, 0x09	; 9
    1a5a:	b8 01       	movw	r22, r16
    1a5c:	09 95       	icall
    1a5e:	89 2b       	or	r24, r25
    1a60:	91 f3       	breq	.-28     	; 0x1a46 <fputs+0x1e>
    1a62:	df ef       	ldi	r29, 0xFF	; 255
    1a64:	cf ef       	ldi	r28, 0xFF	; 255
    1a66:	ef cf       	rjmp	.-34     	; 0x1a46 <fputs+0x1e>
    1a68:	8d 2f       	mov	r24, r29
    1a6a:	9c 2f       	mov	r25, r28
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <fputs+0x4a>
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	e6 e0       	ldi	r30, 0x06	; 6
    1a78:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x18>

00001a7c <fwrite>:
    1a7c:	a0 e0       	ldi	r26, 0x00	; 0
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e4 e4       	ldi	r30, 0x44	; 68
    1a82:	fd e0       	ldi	r31, 0x0D	; 13
    1a84:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__prologue_saves__+0xc>
    1a88:	5b 01       	movw	r10, r22
    1a8a:	4a 01       	movw	r8, r20
    1a8c:	79 01       	movw	r14, r18
    1a8e:	d9 01       	movw	r26, r18
    1a90:	13 96       	adiw	r26, 0x03	; 3
    1a92:	2c 91       	ld	r18, X
    1a94:	21 ff       	sbrs	r18, 1
    1a96:	1d c0       	rjmp	.+58     	; 0x1ad2 <fwrite+0x56>
    1a98:	c0 e0       	ldi	r28, 0x00	; 0
    1a9a:	d0 e0       	ldi	r29, 0x00	; 0
    1a9c:	c8 15       	cp	r28, r8
    1a9e:	d9 05       	cpc	r29, r9
    1aa0:	d9 f0       	breq	.+54     	; 0x1ad8 <fwrite+0x5c>
    1aa2:	8c 01       	movw	r16, r24
    1aa4:	6c 01       	movw	r12, r24
    1aa6:	ca 0c       	add	r12, r10
    1aa8:	db 1c       	adc	r13, r11
    1aaa:	c8 01       	movw	r24, r16
    1aac:	0c 15       	cp	r16, r12
    1aae:	1d 05       	cpc	r17, r13
    1ab0:	71 f0       	breq	.+28     	; 0x1ace <fwrite+0x52>
    1ab2:	0f 5f       	subi	r16, 0xFF	; 255
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	d7 01       	movw	r26, r14
    1ab8:	18 96       	adiw	r26, 0x08	; 8
    1aba:	ed 91       	ld	r30, X+
    1abc:	fc 91       	ld	r31, X
    1abe:	19 97       	sbiw	r26, 0x09	; 9
    1ac0:	b7 01       	movw	r22, r14
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	8c 91       	ld	r24, X
    1ac6:	09 95       	icall
    1ac8:	89 2b       	or	r24, r25
    1aca:	79 f3       	breq	.-34     	; 0x1aaa <fwrite+0x2e>
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <fwrite+0x5c>
    1ace:	21 96       	adiw	r28, 0x01	; 1
    1ad0:	e5 cf       	rjmp	.-54     	; 0x1a9c <fwrite+0x20>
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <fwrite+0x5e>
    1ad8:	ce 01       	movw	r24, r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	ec e0       	ldi	r30, 0x0C	; 12
    1ae0:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__epilogue_restores__+0xc>

00001ae4 <sprintf>:
    1ae4:	ae e0       	ldi	r26, 0x0E	; 14
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e8 e7       	ldi	r30, 0x78	; 120
    1aea:	fd e0       	ldi	r31, 0x0D	; 13
    1aec:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__prologue_saves__+0x1c>
    1af0:	0d 89       	ldd	r16, Y+21	; 0x15
    1af2:	1e 89       	ldd	r17, Y+22	; 0x16
    1af4:	86 e0       	ldi	r24, 0x06	; 6
    1af6:	8c 83       	std	Y+4, r24	; 0x04
    1af8:	1a 83       	std	Y+2, r17	; 0x02
    1afa:	09 83       	std	Y+1, r16	; 0x01
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	9f e7       	ldi	r25, 0x7F	; 127
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	ae 01       	movw	r20, r28
    1b06:	47 5e       	subi	r20, 0xE7	; 231
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	6f 89       	ldd	r22, Y+23	; 0x17
    1b0c:	78 8d       	ldd	r23, Y+24	; 0x18
    1b0e:	ce 01       	movw	r24, r28
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <vfprintf>
    1b16:	ef 81       	ldd	r30, Y+7	; 0x07
    1b18:	f8 85       	ldd	r31, Y+8	; 0x08
    1b1a:	e0 0f       	add	r30, r16
    1b1c:	f1 1f       	adc	r31, r17
    1b1e:	10 82       	st	Z, r1
    1b20:	2e 96       	adiw	r28, 0x0e	; 14
    1b22:	e4 e0       	ldi	r30, 0x04	; 4
    1b24:	0c 94 26 10 	jmp	0x204c	; 0x204c <__epilogue_restores__+0x1c>

00001b28 <vfprintf>:
    1b28:	ab e0       	ldi	r26, 0x0B	; 11
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ea e9       	ldi	r30, 0x9A	; 154
    1b2e:	fd e0       	ldi	r31, 0x0D	; 13
    1b30:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__prologue_saves__>
    1b34:	6c 01       	movw	r12, r24
    1b36:	7b 01       	movw	r14, r22
    1b38:	8a 01       	movw	r16, r20
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	17 82       	std	Z+7, r1	; 0x07
    1b3e:	16 82       	std	Z+6, r1	; 0x06
    1b40:	83 81       	ldd	r24, Z+3	; 0x03
    1b42:	81 ff       	sbrs	r24, 1
    1b44:	cc c1       	rjmp	.+920    	; 0x1ede <vfprintf+0x3b6>
    1b46:	ce 01       	movw	r24, r28
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	3c 01       	movw	r6, r24
    1b4c:	f6 01       	movw	r30, r12
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	f7 01       	movw	r30, r14
    1b52:	93 fd       	sbrc	r25, 3
    1b54:	85 91       	lpm	r24, Z+
    1b56:	93 ff       	sbrs	r25, 3
    1b58:	81 91       	ld	r24, Z+
    1b5a:	7f 01       	movw	r14, r30
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <vfprintf+0x3a>
    1b60:	ba c1       	rjmp	.+884    	; 0x1ed6 <vfprintf+0x3ae>
    1b62:	85 32       	cpi	r24, 0x25	; 37
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <vfprintf+0x4c>
    1b66:	93 fd       	sbrc	r25, 3
    1b68:	85 91       	lpm	r24, Z+
    1b6a:	93 ff       	sbrs	r25, 3
    1b6c:	81 91       	ld	r24, Z+
    1b6e:	7f 01       	movw	r14, r30
    1b70:	85 32       	cpi	r24, 0x25	; 37
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <vfprintf+0x56>
    1b74:	b6 01       	movw	r22, r12
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1b7c:	e7 cf       	rjmp	.-50     	; 0x1b4c <vfprintf+0x24>
    1b7e:	91 2c       	mov	r9, r1
    1b80:	21 2c       	mov	r2, r1
    1b82:	31 2c       	mov	r3, r1
    1b84:	ff e1       	ldi	r31, 0x1F	; 31
    1b86:	f3 15       	cp	r31, r3
    1b88:	d8 f0       	brcs	.+54     	; 0x1bc0 <vfprintf+0x98>
    1b8a:	8b 32       	cpi	r24, 0x2B	; 43
    1b8c:	79 f0       	breq	.+30     	; 0x1bac <vfprintf+0x84>
    1b8e:	38 f4       	brcc	.+14     	; 0x1b9e <vfprintf+0x76>
    1b90:	80 32       	cpi	r24, 0x20	; 32
    1b92:	79 f0       	breq	.+30     	; 0x1bb2 <vfprintf+0x8a>
    1b94:	83 32       	cpi	r24, 0x23	; 35
    1b96:	a1 f4       	brne	.+40     	; 0x1bc0 <vfprintf+0x98>
    1b98:	23 2d       	mov	r18, r3
    1b9a:	20 61       	ori	r18, 0x10	; 16
    1b9c:	1d c0       	rjmp	.+58     	; 0x1bd8 <vfprintf+0xb0>
    1b9e:	8d 32       	cpi	r24, 0x2D	; 45
    1ba0:	61 f0       	breq	.+24     	; 0x1bba <vfprintf+0x92>
    1ba2:	80 33       	cpi	r24, 0x30	; 48
    1ba4:	69 f4       	brne	.+26     	; 0x1bc0 <vfprintf+0x98>
    1ba6:	23 2d       	mov	r18, r3
    1ba8:	21 60       	ori	r18, 0x01	; 1
    1baa:	16 c0       	rjmp	.+44     	; 0x1bd8 <vfprintf+0xb0>
    1bac:	83 2d       	mov	r24, r3
    1bae:	82 60       	ori	r24, 0x02	; 2
    1bb0:	38 2e       	mov	r3, r24
    1bb2:	e3 2d       	mov	r30, r3
    1bb4:	e4 60       	ori	r30, 0x04	; 4
    1bb6:	3e 2e       	mov	r3, r30
    1bb8:	2a c0       	rjmp	.+84     	; 0x1c0e <vfprintf+0xe6>
    1bba:	f3 2d       	mov	r31, r3
    1bbc:	f8 60       	ori	r31, 0x08	; 8
    1bbe:	1d c0       	rjmp	.+58     	; 0x1bfa <vfprintf+0xd2>
    1bc0:	37 fc       	sbrc	r3, 7
    1bc2:	2d c0       	rjmp	.+90     	; 0x1c1e <vfprintf+0xf6>
    1bc4:	20 ed       	ldi	r18, 0xD0	; 208
    1bc6:	28 0f       	add	r18, r24
    1bc8:	2a 30       	cpi	r18, 0x0A	; 10
    1bca:	40 f0       	brcs	.+16     	; 0x1bdc <vfprintf+0xb4>
    1bcc:	8e 32       	cpi	r24, 0x2E	; 46
    1bce:	b9 f4       	brne	.+46     	; 0x1bfe <vfprintf+0xd6>
    1bd0:	36 fc       	sbrc	r3, 6
    1bd2:	81 c1       	rjmp	.+770    	; 0x1ed6 <vfprintf+0x3ae>
    1bd4:	23 2d       	mov	r18, r3
    1bd6:	20 64       	ori	r18, 0x40	; 64
    1bd8:	32 2e       	mov	r3, r18
    1bda:	19 c0       	rjmp	.+50     	; 0x1c0e <vfprintf+0xe6>
    1bdc:	36 fe       	sbrs	r3, 6
    1bde:	06 c0       	rjmp	.+12     	; 0x1bec <vfprintf+0xc4>
    1be0:	8a e0       	ldi	r24, 0x0A	; 10
    1be2:	98 9e       	mul	r9, r24
    1be4:	20 0d       	add	r18, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	92 2e       	mov	r9, r18
    1bea:	11 c0       	rjmp	.+34     	; 0x1c0e <vfprintf+0xe6>
    1bec:	ea e0       	ldi	r30, 0x0A	; 10
    1bee:	2e 9e       	mul	r2, r30
    1bf0:	20 0d       	add	r18, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	22 2e       	mov	r2, r18
    1bf6:	f3 2d       	mov	r31, r3
    1bf8:	f0 62       	ori	r31, 0x20	; 32
    1bfa:	3f 2e       	mov	r3, r31
    1bfc:	08 c0       	rjmp	.+16     	; 0x1c0e <vfprintf+0xe6>
    1bfe:	8c 36       	cpi	r24, 0x6C	; 108
    1c00:	21 f4       	brne	.+8      	; 0x1c0a <vfprintf+0xe2>
    1c02:	83 2d       	mov	r24, r3
    1c04:	80 68       	ori	r24, 0x80	; 128
    1c06:	38 2e       	mov	r3, r24
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <vfprintf+0xe6>
    1c0a:	88 36       	cpi	r24, 0x68	; 104
    1c0c:	41 f4       	brne	.+16     	; 0x1c1e <vfprintf+0xf6>
    1c0e:	f7 01       	movw	r30, r14
    1c10:	93 fd       	sbrc	r25, 3
    1c12:	85 91       	lpm	r24, Z+
    1c14:	93 ff       	sbrs	r25, 3
    1c16:	81 91       	ld	r24, Z+
    1c18:	7f 01       	movw	r14, r30
    1c1a:	81 11       	cpse	r24, r1
    1c1c:	b3 cf       	rjmp	.-154    	; 0x1b84 <vfprintf+0x5c>
    1c1e:	98 2f       	mov	r25, r24
    1c20:	9f 7d       	andi	r25, 0xDF	; 223
    1c22:	95 54       	subi	r25, 0x45	; 69
    1c24:	93 30       	cpi	r25, 0x03	; 3
    1c26:	28 f4       	brcc	.+10     	; 0x1c32 <vfprintf+0x10a>
    1c28:	0c 5f       	subi	r16, 0xFC	; 252
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	9f e3       	ldi	r25, 0x3F	; 63
    1c2e:	99 83       	std	Y+1, r25	; 0x01
    1c30:	0d c0       	rjmp	.+26     	; 0x1c4c <vfprintf+0x124>
    1c32:	83 36       	cpi	r24, 0x63	; 99
    1c34:	31 f0       	breq	.+12     	; 0x1c42 <vfprintf+0x11a>
    1c36:	83 37       	cpi	r24, 0x73	; 115
    1c38:	71 f0       	breq	.+28     	; 0x1c56 <vfprintf+0x12e>
    1c3a:	83 35       	cpi	r24, 0x53	; 83
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <vfprintf+0x118>
    1c3e:	59 c0       	rjmp	.+178    	; 0x1cf2 <vfprintf+0x1ca>
    1c40:	21 c0       	rjmp	.+66     	; 0x1c84 <vfprintf+0x15c>
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 81       	ld	r24, Z
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	0e 5f       	subi	r16, 0xFE	; 254
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	88 24       	eor	r8, r8
    1c4e:	83 94       	inc	r8
    1c50:	91 2c       	mov	r9, r1
    1c52:	53 01       	movw	r10, r6
    1c54:	13 c0       	rjmp	.+38     	; 0x1c7c <vfprintf+0x154>
    1c56:	28 01       	movw	r4, r16
    1c58:	f2 e0       	ldi	r31, 0x02	; 2
    1c5a:	4f 0e       	add	r4, r31
    1c5c:	51 1c       	adc	r5, r1
    1c5e:	f8 01       	movw	r30, r16
    1c60:	a0 80       	ld	r10, Z
    1c62:	b1 80       	ldd	r11, Z+1	; 0x01
    1c64:	36 fe       	sbrs	r3, 6
    1c66:	03 c0       	rjmp	.+6      	; 0x1c6e <vfprintf+0x146>
    1c68:	69 2d       	mov	r22, r9
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <vfprintf+0x14a>
    1c6e:	6f ef       	ldi	r22, 0xFF	; 255
    1c70:	7f ef       	ldi	r23, 0xFF	; 255
    1c72:	c5 01       	movw	r24, r10
    1c74:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <strnlen>
    1c78:	4c 01       	movw	r8, r24
    1c7a:	82 01       	movw	r16, r4
    1c7c:	f3 2d       	mov	r31, r3
    1c7e:	ff 77       	andi	r31, 0x7F	; 127
    1c80:	3f 2e       	mov	r3, r31
    1c82:	16 c0       	rjmp	.+44     	; 0x1cb0 <vfprintf+0x188>
    1c84:	28 01       	movw	r4, r16
    1c86:	22 e0       	ldi	r18, 0x02	; 2
    1c88:	42 0e       	add	r4, r18
    1c8a:	51 1c       	adc	r5, r1
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	a0 80       	ld	r10, Z
    1c90:	b1 80       	ldd	r11, Z+1	; 0x01
    1c92:	36 fe       	sbrs	r3, 6
    1c94:	03 c0       	rjmp	.+6      	; 0x1c9c <vfprintf+0x174>
    1c96:	69 2d       	mov	r22, r9
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <vfprintf+0x178>
    1c9c:	6f ef       	ldi	r22, 0xFF	; 255
    1c9e:	7f ef       	ldi	r23, 0xFF	; 255
    1ca0:	c5 01       	movw	r24, r10
    1ca2:	0e 94 75 0f 	call	0x1eea	; 0x1eea <strnlen_P>
    1ca6:	4c 01       	movw	r8, r24
    1ca8:	f3 2d       	mov	r31, r3
    1caa:	f0 68       	ori	r31, 0x80	; 128
    1cac:	3f 2e       	mov	r3, r31
    1cae:	82 01       	movw	r16, r4
    1cb0:	33 fc       	sbrc	r3, 3
    1cb2:	1b c0       	rjmp	.+54     	; 0x1cea <vfprintf+0x1c2>
    1cb4:	82 2d       	mov	r24, r2
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	88 16       	cp	r8, r24
    1cba:	99 06       	cpc	r9, r25
    1cbc:	b0 f4       	brcc	.+44     	; 0x1cea <vfprintf+0x1c2>
    1cbe:	b6 01       	movw	r22, r12
    1cc0:	80 e2       	ldi	r24, 0x20	; 32
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1cc8:	2a 94       	dec	r2
    1cca:	f4 cf       	rjmp	.-24     	; 0x1cb4 <vfprintf+0x18c>
    1ccc:	f5 01       	movw	r30, r10
    1cce:	37 fc       	sbrc	r3, 7
    1cd0:	85 91       	lpm	r24, Z+
    1cd2:	37 fe       	sbrs	r3, 7
    1cd4:	81 91       	ld	r24, Z+
    1cd6:	5f 01       	movw	r10, r30
    1cd8:	b6 01       	movw	r22, r12
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1ce0:	21 10       	cpse	r2, r1
    1ce2:	2a 94       	dec	r2
    1ce4:	21 e0       	ldi	r18, 0x01	; 1
    1ce6:	82 1a       	sub	r8, r18
    1ce8:	91 08       	sbc	r9, r1
    1cea:	81 14       	cp	r8, r1
    1cec:	91 04       	cpc	r9, r1
    1cee:	71 f7       	brne	.-36     	; 0x1ccc <vfprintf+0x1a4>
    1cf0:	e8 c0       	rjmp	.+464    	; 0x1ec2 <vfprintf+0x39a>
    1cf2:	84 36       	cpi	r24, 0x64	; 100
    1cf4:	11 f0       	breq	.+4      	; 0x1cfa <vfprintf+0x1d2>
    1cf6:	89 36       	cpi	r24, 0x69	; 105
    1cf8:	41 f5       	brne	.+80     	; 0x1d4a <vfprintf+0x222>
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	37 fe       	sbrs	r3, 7
    1cfe:	07 c0       	rjmp	.+14     	; 0x1d0e <vfprintf+0x1e6>
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	0c 5f       	subi	r16, 0xFC	; 252
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	08 c0       	rjmp	.+16     	; 0x1d1e <vfprintf+0x1f6>
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	07 2e       	mov	r0, r23
    1d14:	00 0c       	add	r0, r0
    1d16:	88 0b       	sbc	r24, r24
    1d18:	99 0b       	sbc	r25, r25
    1d1a:	0e 5f       	subi	r16, 0xFE	; 254
    1d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1e:	f3 2d       	mov	r31, r3
    1d20:	ff 76       	andi	r31, 0x6F	; 111
    1d22:	3f 2e       	mov	r3, r31
    1d24:	97 ff       	sbrs	r25, 7
    1d26:	09 c0       	rjmp	.+18     	; 0x1d3a <vfprintf+0x212>
    1d28:	90 95       	com	r25
    1d2a:	80 95       	com	r24
    1d2c:	70 95       	com	r23
    1d2e:	61 95       	neg	r22
    1d30:	7f 4f       	sbci	r23, 0xFF	; 255
    1d32:	8f 4f       	sbci	r24, 0xFF	; 255
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	f0 68       	ori	r31, 0x80	; 128
    1d38:	3f 2e       	mov	r3, r31
    1d3a:	2a e0       	ldi	r18, 0x0A	; 10
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	a3 01       	movw	r20, r6
    1d40:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__ultoa_invert>
    1d44:	88 2e       	mov	r8, r24
    1d46:	86 18       	sub	r8, r6
    1d48:	45 c0       	rjmp	.+138    	; 0x1dd4 <vfprintf+0x2ac>
    1d4a:	85 37       	cpi	r24, 0x75	; 117
    1d4c:	31 f4       	brne	.+12     	; 0x1d5a <vfprintf+0x232>
    1d4e:	23 2d       	mov	r18, r3
    1d50:	2f 7e       	andi	r18, 0xEF	; 239
    1d52:	b2 2e       	mov	r11, r18
    1d54:	2a e0       	ldi	r18, 0x0A	; 10
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	25 c0       	rjmp	.+74     	; 0x1da4 <vfprintf+0x27c>
    1d5a:	93 2d       	mov	r25, r3
    1d5c:	99 7f       	andi	r25, 0xF9	; 249
    1d5e:	b9 2e       	mov	r11, r25
    1d60:	8f 36       	cpi	r24, 0x6F	; 111
    1d62:	c1 f0       	breq	.+48     	; 0x1d94 <vfprintf+0x26c>
    1d64:	18 f4       	brcc	.+6      	; 0x1d6c <vfprintf+0x244>
    1d66:	88 35       	cpi	r24, 0x58	; 88
    1d68:	79 f0       	breq	.+30     	; 0x1d88 <vfprintf+0x260>
    1d6a:	b5 c0       	rjmp	.+362    	; 0x1ed6 <vfprintf+0x3ae>
    1d6c:	80 37       	cpi	r24, 0x70	; 112
    1d6e:	19 f0       	breq	.+6      	; 0x1d76 <vfprintf+0x24e>
    1d70:	88 37       	cpi	r24, 0x78	; 120
    1d72:	21 f0       	breq	.+8      	; 0x1d7c <vfprintf+0x254>
    1d74:	b0 c0       	rjmp	.+352    	; 0x1ed6 <vfprintf+0x3ae>
    1d76:	e9 2f       	mov	r30, r25
    1d78:	e0 61       	ori	r30, 0x10	; 16
    1d7a:	be 2e       	mov	r11, r30
    1d7c:	b4 fe       	sbrs	r11, 4
    1d7e:	0d c0       	rjmp	.+26     	; 0x1d9a <vfprintf+0x272>
    1d80:	fb 2d       	mov	r31, r11
    1d82:	f4 60       	ori	r31, 0x04	; 4
    1d84:	bf 2e       	mov	r11, r31
    1d86:	09 c0       	rjmp	.+18     	; 0x1d9a <vfprintf+0x272>
    1d88:	34 fe       	sbrs	r3, 4
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <vfprintf+0x278>
    1d8c:	29 2f       	mov	r18, r25
    1d8e:	26 60       	ori	r18, 0x06	; 6
    1d90:	b2 2e       	mov	r11, r18
    1d92:	06 c0       	rjmp	.+12     	; 0x1da0 <vfprintf+0x278>
    1d94:	28 e0       	ldi	r18, 0x08	; 8
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <vfprintf+0x27c>
    1d9a:	20 e1       	ldi	r18, 0x10	; 16
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <vfprintf+0x27c>
    1da0:	20 e1       	ldi	r18, 0x10	; 16
    1da2:	32 e0       	ldi	r19, 0x02	; 2
    1da4:	f8 01       	movw	r30, r16
    1da6:	b7 fe       	sbrs	r11, 7
    1da8:	07 c0       	rjmp	.+14     	; 0x1db8 <vfprintf+0x290>
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	0c 5f       	subi	r16, 0xFC	; 252
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <vfprintf+0x29c>
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 5f       	subi	r16, 0xFE	; 254
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	a3 01       	movw	r20, r6
    1dc6:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__ultoa_invert>
    1dca:	88 2e       	mov	r8, r24
    1dcc:	86 18       	sub	r8, r6
    1dce:	fb 2d       	mov	r31, r11
    1dd0:	ff 77       	andi	r31, 0x7F	; 127
    1dd2:	3f 2e       	mov	r3, r31
    1dd4:	36 fe       	sbrs	r3, 6
    1dd6:	0d c0       	rjmp	.+26     	; 0x1df2 <vfprintf+0x2ca>
    1dd8:	23 2d       	mov	r18, r3
    1dda:	2e 7f       	andi	r18, 0xFE	; 254
    1ddc:	a2 2e       	mov	r10, r18
    1dde:	89 14       	cp	r8, r9
    1de0:	58 f4       	brcc	.+22     	; 0x1df8 <vfprintf+0x2d0>
    1de2:	34 fe       	sbrs	r3, 4
    1de4:	0b c0       	rjmp	.+22     	; 0x1dfc <vfprintf+0x2d4>
    1de6:	32 fc       	sbrc	r3, 2
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <vfprintf+0x2d4>
    1dea:	83 2d       	mov	r24, r3
    1dec:	8e 7e       	andi	r24, 0xEE	; 238
    1dee:	a8 2e       	mov	r10, r24
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <vfprintf+0x2d4>
    1df2:	b8 2c       	mov	r11, r8
    1df4:	a3 2c       	mov	r10, r3
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <vfprintf+0x2d6>
    1df8:	b8 2c       	mov	r11, r8
    1dfa:	01 c0       	rjmp	.+2      	; 0x1dfe <vfprintf+0x2d6>
    1dfc:	b9 2c       	mov	r11, r9
    1dfe:	a4 fe       	sbrs	r10, 4
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <vfprintf+0x2f8>
    1e02:	fe 01       	movw	r30, r28
    1e04:	e8 0d       	add	r30, r8
    1e06:	f1 1d       	adc	r31, r1
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 33       	cpi	r24, 0x30	; 48
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <vfprintf+0x2ee>
    1e0e:	9a 2d       	mov	r25, r10
    1e10:	99 7e       	andi	r25, 0xE9	; 233
    1e12:	a9 2e       	mov	r10, r25
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <vfprintf+0x300>
    1e16:	a2 fe       	sbrs	r10, 2
    1e18:	06 c0       	rjmp	.+12     	; 0x1e26 <vfprintf+0x2fe>
    1e1a:	b3 94       	inc	r11
    1e1c:	b3 94       	inc	r11
    1e1e:	04 c0       	rjmp	.+8      	; 0x1e28 <vfprintf+0x300>
    1e20:	8a 2d       	mov	r24, r10
    1e22:	86 78       	andi	r24, 0x86	; 134
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <vfprintf+0x300>
    1e26:	b3 94       	inc	r11
    1e28:	a3 fc       	sbrc	r10, 3
    1e2a:	11 c0       	rjmp	.+34     	; 0x1e4e <vfprintf+0x326>
    1e2c:	a0 fe       	sbrs	r10, 0
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <vfprintf+0x314>
    1e30:	b2 14       	cp	r11, r2
    1e32:	88 f4       	brcc	.+34     	; 0x1e56 <vfprintf+0x32e>
    1e34:	28 0c       	add	r2, r8
    1e36:	92 2c       	mov	r9, r2
    1e38:	9b 18       	sub	r9, r11
    1e3a:	0e c0       	rjmp	.+28     	; 0x1e58 <vfprintf+0x330>
    1e3c:	b2 14       	cp	r11, r2
    1e3e:	60 f4       	brcc	.+24     	; 0x1e58 <vfprintf+0x330>
    1e40:	b6 01       	movw	r22, r12
    1e42:	80 e2       	ldi	r24, 0x20	; 32
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1e4a:	b3 94       	inc	r11
    1e4c:	f7 cf       	rjmp	.-18     	; 0x1e3c <vfprintf+0x314>
    1e4e:	b2 14       	cp	r11, r2
    1e50:	18 f4       	brcc	.+6      	; 0x1e58 <vfprintf+0x330>
    1e52:	2b 18       	sub	r2, r11
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <vfprintf+0x332>
    1e56:	98 2c       	mov	r9, r8
    1e58:	21 2c       	mov	r2, r1
    1e5a:	a4 fe       	sbrs	r10, 4
    1e5c:	10 c0       	rjmp	.+32     	; 0x1e7e <vfprintf+0x356>
    1e5e:	b6 01       	movw	r22, r12
    1e60:	80 e3       	ldi	r24, 0x30	; 48
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1e68:	a2 fe       	sbrs	r10, 2
    1e6a:	17 c0       	rjmp	.+46     	; 0x1e9a <vfprintf+0x372>
    1e6c:	a1 fc       	sbrc	r10, 1
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <vfprintf+0x34e>
    1e70:	88 e7       	ldi	r24, 0x78	; 120
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <vfprintf+0x352>
    1e76:	88 e5       	ldi	r24, 0x58	; 88
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	b6 01       	movw	r22, r12
    1e7c:	0c c0       	rjmp	.+24     	; 0x1e96 <vfprintf+0x36e>
    1e7e:	8a 2d       	mov	r24, r10
    1e80:	86 78       	andi	r24, 0x86	; 134
    1e82:	59 f0       	breq	.+22     	; 0x1e9a <vfprintf+0x372>
    1e84:	a1 fe       	sbrs	r10, 1
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <vfprintf+0x364>
    1e88:	8b e2       	ldi	r24, 0x2B	; 43
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <vfprintf+0x366>
    1e8c:	80 e2       	ldi	r24, 0x20	; 32
    1e8e:	a7 fc       	sbrc	r10, 7
    1e90:	8d e2       	ldi	r24, 0x2D	; 45
    1e92:	b6 01       	movw	r22, r12
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1e9a:	89 14       	cp	r8, r9
    1e9c:	38 f4       	brcc	.+14     	; 0x1eac <vfprintf+0x384>
    1e9e:	b6 01       	movw	r22, r12
    1ea0:	80 e3       	ldi	r24, 0x30	; 48
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1ea8:	9a 94       	dec	r9
    1eaa:	f7 cf       	rjmp	.-18     	; 0x1e9a <vfprintf+0x372>
    1eac:	8a 94       	dec	r8
    1eae:	f3 01       	movw	r30, r6
    1eb0:	e8 0d       	add	r30, r8
    1eb2:	f1 1d       	adc	r31, r1
    1eb4:	80 81       	ld	r24, Z
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1ebe:	81 10       	cpse	r8, r1
    1ec0:	f5 cf       	rjmp	.-22     	; 0x1eac <vfprintf+0x384>
    1ec2:	22 20       	and	r2, r2
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <vfprintf+0x3a0>
    1ec6:	42 ce       	rjmp	.-892    	; 0x1b4c <vfprintf+0x24>
    1ec8:	b6 01       	movw	r22, r12
    1eca:	80 e2       	ldi	r24, 0x20	; 32
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fputc>
    1ed2:	2a 94       	dec	r2
    1ed4:	f6 cf       	rjmp	.-20     	; 0x1ec2 <vfprintf+0x39a>
    1ed6:	f6 01       	movw	r30, r12
    1ed8:	86 81       	ldd	r24, Z+6	; 0x06
    1eda:	97 81       	ldd	r25, Z+7	; 0x07
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <vfprintf+0x3ba>
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	9f ef       	ldi	r25, 0xFF	; 255
    1ee2:	2b 96       	adiw	r28, 0x0b	; 11
    1ee4:	e2 e1       	ldi	r30, 0x12	; 18
    1ee6:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__epilogue_restores__>

00001eea <strnlen_P>:
    1eea:	fc 01       	movw	r30, r24
    1eec:	05 90       	lpm	r0, Z+
    1eee:	61 50       	subi	r22, 0x01	; 1
    1ef0:	70 40       	sbci	r23, 0x00	; 0
    1ef2:	01 10       	cpse	r0, r1
    1ef4:	d8 f7       	brcc	.-10     	; 0x1eec <strnlen_P+0x2>
    1ef6:	80 95       	com	r24
    1ef8:	90 95       	com	r25
    1efa:	8e 0f       	add	r24, r30
    1efc:	9f 1f       	adc	r25, r31
    1efe:	08 95       	ret

00001f00 <strnlen>:
    1f00:	fc 01       	movw	r30, r24
    1f02:	61 50       	subi	r22, 0x01	; 1
    1f04:	70 40       	sbci	r23, 0x00	; 0
    1f06:	01 90       	ld	r0, Z+
    1f08:	01 10       	cpse	r0, r1
    1f0a:	d8 f7       	brcc	.-10     	; 0x1f02 <strnlen+0x2>
    1f0c:	80 95       	com	r24
    1f0e:	90 95       	com	r25
    1f10:	8e 0f       	add	r24, r30
    1f12:	9f 1f       	adc	r25, r31
    1f14:	08 95       	ret

00001f16 <__ultoa_invert>:
    1f16:	fa 01       	movw	r30, r20
    1f18:	aa 27       	eor	r26, r26
    1f1a:	28 30       	cpi	r18, 0x08	; 8
    1f1c:	51 f1       	breq	.+84     	; 0x1f72 <__ultoa_invert+0x5c>
    1f1e:	20 31       	cpi	r18, 0x10	; 16
    1f20:	81 f1       	breq	.+96     	; 0x1f82 <__ultoa_invert+0x6c>
    1f22:	e8 94       	clt
    1f24:	6f 93       	push	r22
    1f26:	6e 7f       	andi	r22, 0xFE	; 254
    1f28:	6e 5f       	subi	r22, 0xFE	; 254
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	af 4f       	sbci	r26, 0xFF	; 255
    1f32:	b1 e0       	ldi	r27, 0x01	; 1
    1f34:	3e d0       	rcall	.+124    	; 0x1fb2 <__ultoa_invert+0x9c>
    1f36:	b4 e0       	ldi	r27, 0x04	; 4
    1f38:	3c d0       	rcall	.+120    	; 0x1fb2 <__ultoa_invert+0x9c>
    1f3a:	67 0f       	add	r22, r23
    1f3c:	78 1f       	adc	r23, r24
    1f3e:	89 1f       	adc	r24, r25
    1f40:	9a 1f       	adc	r25, r26
    1f42:	a1 1d       	adc	r26, r1
    1f44:	68 0f       	add	r22, r24
    1f46:	79 1f       	adc	r23, r25
    1f48:	8a 1f       	adc	r24, r26
    1f4a:	91 1d       	adc	r25, r1
    1f4c:	a1 1d       	adc	r26, r1
    1f4e:	6a 0f       	add	r22, r26
    1f50:	71 1d       	adc	r23, r1
    1f52:	81 1d       	adc	r24, r1
    1f54:	91 1d       	adc	r25, r1
    1f56:	a1 1d       	adc	r26, r1
    1f58:	20 d0       	rcall	.+64     	; 0x1f9a <__ultoa_invert+0x84>
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <__ultoa_invert+0x48>
    1f5c:	68 94       	set
    1f5e:	3f 91       	pop	r19
    1f60:	2a e0       	ldi	r18, 0x0A	; 10
    1f62:	26 9f       	mul	r18, r22
    1f64:	11 24       	eor	r1, r1
    1f66:	30 19       	sub	r19, r0
    1f68:	30 5d       	subi	r19, 0xD0	; 208
    1f6a:	31 93       	st	Z+, r19
    1f6c:	de f6       	brtc	.-74     	; 0x1f24 <__ultoa_invert+0xe>
    1f6e:	cf 01       	movw	r24, r30
    1f70:	08 95       	ret
    1f72:	46 2f       	mov	r20, r22
    1f74:	47 70       	andi	r20, 0x07	; 7
    1f76:	40 5d       	subi	r20, 0xD0	; 208
    1f78:	41 93       	st	Z+, r20
    1f7a:	b3 e0       	ldi	r27, 0x03	; 3
    1f7c:	0f d0       	rcall	.+30     	; 0x1f9c <__ultoa_invert+0x86>
    1f7e:	c9 f7       	brne	.-14     	; 0x1f72 <__ultoa_invert+0x5c>
    1f80:	f6 cf       	rjmp	.-20     	; 0x1f6e <__ultoa_invert+0x58>
    1f82:	46 2f       	mov	r20, r22
    1f84:	4f 70       	andi	r20, 0x0F	; 15
    1f86:	40 5d       	subi	r20, 0xD0	; 208
    1f88:	4a 33       	cpi	r20, 0x3A	; 58
    1f8a:	18 f0       	brcs	.+6      	; 0x1f92 <__ultoa_invert+0x7c>
    1f8c:	49 5d       	subi	r20, 0xD9	; 217
    1f8e:	31 fd       	sbrc	r19, 1
    1f90:	40 52       	subi	r20, 0x20	; 32
    1f92:	41 93       	st	Z+, r20
    1f94:	02 d0       	rcall	.+4      	; 0x1f9a <__ultoa_invert+0x84>
    1f96:	a9 f7       	brne	.-22     	; 0x1f82 <__ultoa_invert+0x6c>
    1f98:	ea cf       	rjmp	.-44     	; 0x1f6e <__ultoa_invert+0x58>
    1f9a:	b4 e0       	ldi	r27, 0x04	; 4
    1f9c:	a6 95       	lsr	r26
    1f9e:	97 95       	ror	r25
    1fa0:	87 95       	ror	r24
    1fa2:	77 95       	ror	r23
    1fa4:	67 95       	ror	r22
    1fa6:	ba 95       	dec	r27
    1fa8:	c9 f7       	brne	.-14     	; 0x1f9c <__ultoa_invert+0x86>
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	61 05       	cpc	r22, r1
    1fae:	71 05       	cpc	r23, r1
    1fb0:	08 95       	ret
    1fb2:	9b 01       	movw	r18, r22
    1fb4:	ac 01       	movw	r20, r24
    1fb6:	0a 2e       	mov	r0, r26
    1fb8:	06 94       	lsr	r0
    1fba:	57 95       	ror	r21
    1fbc:	47 95       	ror	r20
    1fbe:	37 95       	ror	r19
    1fc0:	27 95       	ror	r18
    1fc2:	ba 95       	dec	r27
    1fc4:	c9 f7       	brne	.-14     	; 0x1fb8 <__ultoa_invert+0xa2>
    1fc6:	62 0f       	add	r22, r18
    1fc8:	73 1f       	adc	r23, r19
    1fca:	84 1f       	adc	r24, r20
    1fcc:	95 1f       	adc	r25, r21
    1fce:	a0 1d       	adc	r26, r0
    1fd0:	08 95       	ret

00001fd2 <__muluhisi3>:
    1fd2:	0e 94 33 10 	call	0x2066	; 0x2066 <__umulhisi3>
    1fd6:	a5 9f       	mul	r26, r21
    1fd8:	90 0d       	add	r25, r0
    1fda:	b4 9f       	mul	r27, r20
    1fdc:	90 0d       	add	r25, r0
    1fde:	a4 9f       	mul	r26, r20
    1fe0:	80 0d       	add	r24, r0
    1fe2:	91 1d       	adc	r25, r1
    1fe4:	11 24       	eor	r1, r1
    1fe6:	08 95       	ret

00001fe8 <__mulshisi3>:
    1fe8:	b7 ff       	sbrs	r27, 7
    1fea:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__muluhisi3>

00001fee <__mulohisi3>:
    1fee:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__muluhisi3>
    1ff2:	82 1b       	sub	r24, r18
    1ff4:	93 0b       	sbc	r25, r19
    1ff6:	08 95       	ret

00001ff8 <__prologue_saves__>:
    1ff8:	2f 92       	push	r2
    1ffa:	3f 92       	push	r3
    1ffc:	4f 92       	push	r4
    1ffe:	5f 92       	push	r5
    2000:	6f 92       	push	r6
    2002:	7f 92       	push	r7
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	ca 1b       	sub	r28, r26
    2022:	db 0b       	sbc	r29, r27
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	09 94       	ijmp

00002030 <__epilogue_restores__>:
    2030:	2a 88       	ldd	r2, Y+18	; 0x12
    2032:	39 88       	ldd	r3, Y+17	; 0x11
    2034:	48 88       	ldd	r4, Y+16	; 0x10
    2036:	5f 84       	ldd	r5, Y+15	; 0x0f
    2038:	6e 84       	ldd	r6, Y+14	; 0x0e
    203a:	7d 84       	ldd	r7, Y+13	; 0x0d
    203c:	8c 84       	ldd	r8, Y+12	; 0x0c
    203e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2040:	aa 84       	ldd	r10, Y+10	; 0x0a
    2042:	b9 84       	ldd	r11, Y+9	; 0x09
    2044:	c8 84       	ldd	r12, Y+8	; 0x08
    2046:	df 80       	ldd	r13, Y+7	; 0x07
    2048:	ee 80       	ldd	r14, Y+6	; 0x06
    204a:	fd 80       	ldd	r15, Y+5	; 0x05
    204c:	0c 81       	ldd	r16, Y+4	; 0x04
    204e:	1b 81       	ldd	r17, Y+3	; 0x03
    2050:	aa 81       	ldd	r26, Y+2	; 0x02
    2052:	b9 81       	ldd	r27, Y+1	; 0x01
    2054:	ce 0f       	add	r28, r30
    2056:	d1 1d       	adc	r29, r1
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	ed 01       	movw	r28, r26
    2064:	08 95       	ret

00002066 <__umulhisi3>:
    2066:	a2 9f       	mul	r26, r18
    2068:	b0 01       	movw	r22, r0
    206a:	b3 9f       	mul	r27, r19
    206c:	c0 01       	movw	r24, r0
    206e:	a3 9f       	mul	r26, r19
    2070:	70 0d       	add	r23, r0
    2072:	81 1d       	adc	r24, r1
    2074:	11 24       	eor	r1, r1
    2076:	91 1d       	adc	r25, r1
    2078:	b2 9f       	mul	r27, r18
    207a:	70 0d       	add	r23, r0
    207c:	81 1d       	adc	r24, r1
    207e:	11 24       	eor	r1, r1
    2080:	91 1d       	adc	r25, r1
    2082:	08 95       	ret

00002084 <_exit>:
    2084:	f8 94       	cli

00002086 <__stop_program>:
    2086:	ff cf       	rjmp	.-2      	; 0x2086 <__stop_program>
