
Project_0_1_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000e7e  00000f12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  00800118  00800118  00000f2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a15  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a22  00000000  00000000  00003b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001257  00000000  00000000  000045ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00005804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060d  00000000  00000000  00005d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001be5  00000000  00000000  000063a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007f86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_20>
  54:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e7       	ldi	r30, 0x7E	; 126
  90:	fe e0       	ldi	r31, 0x0E	; 14
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 31       	cpi	r26, 0x18	; 24
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a8 e1       	ldi	r26, 0x18	; 24
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ac 33       	cpi	r26, 0x3C	; 60
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <main>
  b2:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
  ba:	af 92       	push	r10
  bc:	bf 92       	push	r11
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	66 23       	and	r22, r22
  ce:	c9 f1       	breq	.+114    	; 0x142 <mpu6050_readBytes+0x88>
  d0:	c5 2f       	mov	r28, r21
  d2:	d4 2f       	mov	r29, r20
  d4:	d6 2e       	mov	r13, r22
  d6:	18 2f       	mov	r17, r24
  d8:	80 ed       	ldi	r24, 0xD0	; 208
  da:	0e 94 30 04 	call	0x860	; 0x860 <i2c_start>
  de:	81 2f       	mov	r24, r17
  e0:	0e 94 86 04 	call	0x90c	; 0x90c <i2c_write>
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
  f0:	81 ed       	ldi	r24, 0xD1	; 209
  f2:	0e 94 30 04 	call	0x860	; 0x860 <i2c_start>
  f6:	0d 2f       	mov	r16, r29
  f8:	1c 2f       	mov	r17, r28
  fa:	ee 24       	eor	r14, r14
  fc:	ea 94       	dec	r14
  fe:	ed 0c       	add	r14, r13
 100:	f1 2c       	mov	r15, r1
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	e8 1a       	sub	r14, r24
 106:	f8 0a       	sbc	r15, r24
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	ad 2c       	mov	r10, r13
 10e:	b1 2c       	mov	r11, r1
 110:	e1 e0       	ldi	r30, 0x01	; 1
 112:	ae 1a       	sub	r10, r30
 114:	b1 08       	sbc	r11, r1
 116:	ca 15       	cp	r28, r10
 118:	db 05       	cpc	r29, r11
 11a:	29 f4       	brne	.+10     	; 0x126 <mpu6050_readBytes+0x6c>
 11c:	0e 94 c1 04 	call	0x982	; 0x982 <i2c_readNak>
 120:	f8 01       	movw	r30, r16
 122:	80 83       	st	Z, r24
 124:	04 c0       	rjmp	.+8      	; 0x12e <mpu6050_readBytes+0x74>
 126:	0e 94 a7 04 	call	0x94e	; 0x94e <i2c_readAck>
 12a:	f8 01       	movw	r30, r16
 12c:	80 83       	st	Z, r24
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	0f 5f       	subi	r16, 0xFF	; 255
 132:	1f 4f       	sbci	r17, 0xFF	; 255
 134:	ce 15       	cp	r28, r14
 136:	df 05       	cpc	r29, r15
 138:	71 f7       	brne	.-36     	; 0x116 <mpu6050_readBytes+0x5c>
 13a:	cd 2d       	mov	r28, r13
 13c:	0e 94 76 04 	call	0x8ec	; 0x8ec <i2c_stop>
 140:	01 c0       	rjmp	.+2      	; 0x144 <mpu6050_readBytes+0x8a>
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	8c 2f       	mov	r24, r28
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	df 90       	pop	r13
 154:	bf 90       	pop	r11
 156:	af 90       	pop	r10
 158:	08 95       	ret

0000015a <mpu6050_readByte>:
 15a:	ab 01       	movw	r20, r22
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	0e 94 5d 00 	call	0xba	; 0xba <mpu6050_readBytes>
 162:	08 95       	ret

00000164 <mpu6050_writeBytes>:
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	66 23       	and	r22, r22
 172:	d1 f0       	breq	.+52     	; 0x1a8 <mpu6050_writeBytes+0x44>
 174:	7a 01       	movw	r14, r20
 176:	16 2f       	mov	r17, r22
 178:	c8 2f       	mov	r28, r24
 17a:	80 ed       	ldi	r24, 0xD0	; 208
 17c:	0e 94 30 04 	call	0x860	; 0x860 <i2c_start>
 180:	8c 2f       	mov	r24, r28
 182:	0e 94 86 04 	call	0x90c	; 0x90c <i2c_write>
 186:	e7 01       	movw	r28, r14
 188:	6f ef       	ldi	r22, 0xFF	; 255
 18a:	61 0f       	add	r22, r17
 18c:	06 2f       	mov	r16, r22
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	0f 5f       	subi	r16, 0xFF	; 255
 192:	1f 4f       	sbci	r17, 0xFF	; 255
 194:	0e 0d       	add	r16, r14
 196:	1f 1d       	adc	r17, r15
 198:	89 91       	ld	r24, Y+
 19a:	0e 94 86 04 	call	0x90c	; 0x90c <i2c_write>
 19e:	c0 17       	cp	r28, r16
 1a0:	d1 07       	cpc	r29, r17
 1a2:	d1 f7       	brne	.-12     	; 0x198 <mpu6050_writeBytes+0x34>
 1a4:	0e 94 76 04 	call	0x8ec	; 0x8ec <i2c_stop>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	08 95       	ret

000001b6 <mpu6050_writeByte>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	69 83       	std	Y+1, r22	; 0x01
 1c2:	ae 01       	movw	r20, r28
 1c4:	4f 5f       	subi	r20, 0xFF	; 255
 1c6:	5f 4f       	sbci	r21, 0xFF	; 255
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	0e 94 b2 00 	call	0x164	; 0x164 <mpu6050_writeBytes>
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <mpu6050_writeBits>:
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	1f 92       	push	r1
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	44 23       	and	r20, r20
 1ea:	89 f1       	breq	.+98     	; 0x24e <mpu6050_writeBits+0x78>
 1ec:	f2 2e       	mov	r15, r18
 1ee:	14 2f       	mov	r17, r20
 1f0:	06 2f       	mov	r16, r22
 1f2:	e8 2e       	mov	r14, r24
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	be 01       	movw	r22, r28
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	0e 94 ad 00 	call	0x15a	; 0x15a <mpu6050_readByte>
 200:	88 23       	and	r24, r24
 202:	29 f1       	breq	.+74     	; 0x24e <mpu6050_writeBits+0x78>
 204:	40 2f       	mov	r20, r16
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	41 1b       	sub	r20, r17
 20a:	51 09       	sbc	r21, r1
 20c:	4f 5f       	subi	r20, 0xFF	; 255
 20e:	5f 4f       	sbci	r21, 0xFF	; 255
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <mpu6050_writeBits+0x44>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	1a 95       	dec	r17
 21c:	e2 f7       	brpl	.-8      	; 0x216 <mpu6050_writeBits+0x40>
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	04 2e       	mov	r0, r20
 222:	02 c0       	rjmp	.+4      	; 0x228 <mpu6050_writeBits+0x52>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <mpu6050_writeBits+0x4e>
 22c:	2f 2d       	mov	r18, r15
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <mpu6050_writeBits+0x60>
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	4a 95       	dec	r20
 238:	e2 f7       	brpl	.-8      	; 0x232 <mpu6050_writeBits+0x5c>
 23a:	68 2f       	mov	r22, r24
 23c:	60 95       	com	r22
 23e:	99 81       	ldd	r25, Y+1	; 0x01
 240:	69 23       	and	r22, r25
 242:	82 23       	and	r24, r18
 244:	68 2b       	or	r22, r24
 246:	69 83       	std	Y+1, r22	; 0x01
 248:	8e 2d       	mov	r24, r14
 24a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mpu6050_writeByte>
 24e:	0f 90       	pop	r0
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	08 95       	ret

0000025e <mpu6050_writeBit>:
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	1f 92       	push	r1
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	18 2f       	mov	r17, r24
 270:	06 2f       	mov	r16, r22
 272:	f4 2e       	mov	r15, r20
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	0e 94 ad 00 	call	0x15a	; 0x15a <mpu6050_readByte>
 27e:	ff 20       	and	r15, r15
 280:	59 f0       	breq	.+22     	; 0x298 <mpu6050_writeBit+0x3a>
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <mpu6050_writeBit+0x30>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	0a 95       	dec	r16
 290:	e2 f7       	brpl	.-8      	; 0x28a <mpu6050_writeBit+0x2c>
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	68 2b       	or	r22, r24
 296:	0b c0       	rjmp	.+22     	; 0x2ae <mpu6050_writeBit+0x50>
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <mpu6050_writeBit+0x46>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	0a 95       	dec	r16
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <mpu6050_writeBit+0x42>
 2a8:	60 95       	com	r22
 2aa:	99 81       	ldd	r25, Y+1	; 0x01
 2ac:	69 23       	and	r22, r25
 2ae:	69 83       	std	Y+1, r22	; 0x01
 2b0:	81 2f       	mov	r24, r17
 2b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mpu6050_writeByte>
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	08 95       	ret

000002c4 <mpu6050_setSleepDisabled>:
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	66 e0       	ldi	r22, 0x06	; 6
 2c8:	8b e6       	ldi	r24, 0x6B	; 107
 2ca:	0e 94 2f 01 	call	0x25e	; 0x25e <mpu6050_writeBit>
 2ce:	08 95       	ret

000002d0 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
 2d0:	0e 94 2a 04 	call	0x854	; 0x854 <i2c_init>
	custom_delay(1);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	#endif

	//allow mpu6050 chip clocks to start up
	custom_delay(100);
 2e0:	64 e6       	ldi	r22, 0x64	; 100
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>

	//set sleep disabled
	mpu6050_setSleepDisabled();
 2ec:	0e 94 62 01 	call	0x2c4	; 0x2c4 <mpu6050_setSleepDisabled>
	//wake up delay needed sleep disabled
	custom_delay(10);
 2f0:	6a e0       	ldi	r22, 0x0A	; 10
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	43 e0       	ldi	r20, 0x03	; 3
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	8b e6       	ldi	r24, 0x6B	; 107
 304:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
 308:	23 e0       	ldi	r18, 0x03	; 3
 30a:	43 e0       	ldi	r20, 0x03	; 3
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	8a e1       	ldi	r24, 0x1A	; 26
 310:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	89 e1       	ldi	r24, 0x19	; 25
 318:	0e 94 db 00 	call	0x1b6	; 0x1b6 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
 31c:	23 e0       	ldi	r18, 0x03	; 3
 31e:	42 e0       	ldi	r20, 0x02	; 2
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	8b e1       	ldi	r24, 0x1B	; 27
 324:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	42 e0       	ldi	r20, 0x02	; 2
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	8c e1       	ldi	r24, 0x1C	; 28
 330:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <mpu6050_writeBits>
 334:	08 95       	ret

00000336 <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
 336:	cf 93       	push	r28
 338:	c8 2f       	mov	r28, r24
 33a:	8a 30       	cpi	r24, 0x0A	; 10
 33c:	19 f4       	brne	.+6      	; 0x344 <uart_put_char+0xe>
 33e:	8d e0       	ldi	r24, 0x0D	; 13
 340:	0e 94 9b 01 	call	0x336	; 0x336 <uart_put_char>
 344:	2f b7       	in	r18, 0x3f	; 63
 346:	20 78       	andi	r18, 0x80	; 128
 348:	02 c0       	rjmp	.+4      	; 0x34e <uart_put_char+0x18>
 34a:	22 23       	and	r18, r18
 34c:	29 f1       	breq	.+74     	; 0x398 <uart_put_char+0x62>
 34e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <bytes_in_out_buffer>
 352:	9f 3f       	cpi	r25, 0xFF	; 255
 354:	d1 f3       	breq	.-12     	; 0x34a <uart_put_char+0x14>
 356:	f8 94       	cli
 358:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <out_insert_pos>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	8e 0f       	add	r24, r30
 360:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <out_insert_pos>
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	e0 5e       	subi	r30, 0xE0	; 224
 368:	fe 4f       	sbci	r31, 0xFE	; 254
 36a:	c0 83       	st	Z, r28
 36c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <bytes_in_out_buffer>
 376:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <out_insert_pos>
 37a:	8f 3f       	cpi	r24, 0xFF	; 255
 37c:	11 f4       	brne	.+4      	; 0x382 <uart_put_char+0x4c>
 37e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <out_insert_pos>
 382:	e1 ec       	ldi	r30, 0xC1	; 193
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 62       	ori	r24, 0x20	; 32
 38a:	80 83       	st	Z, r24
 38c:	22 23       	and	r18, r18
 38e:	39 f0       	breq	.+14     	; 0x39e <uart_put_char+0x68>
 390:	78 94       	sei
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <uart_put_char+0x6c>
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <uart_put_char+0x6c>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <uart_get_char>:
 3a6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 3aa:	88 23       	and	r24, r24
 3ac:	e1 f3       	breq	.-8      	; 0x3a6 <uart_get_char>
 3ae:	2f b7       	in	r18, 0x3f	; 63
 3b0:	20 78       	andi	r18, 0x80	; 128
 3b2:	f8 94       	cli
 3b4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <input_insert_pos>
 3b8:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <bytes_in_input_buffer>
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	83 1b       	sub	r24, r19
 3c0:	91 09       	sbc	r25, r1
 3c2:	5a f4       	brpl	.+22     	; 0x3da <uart_get_char+0x34>
 3c4:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <input_insert_pos>
 3c8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	e8 1b       	sub	r30, r24
 3d0:	f1 09       	sbc	r31, r1
 3d2:	e0 5d       	subi	r30, 0xD0	; 208
 3d4:	fd 4f       	sbci	r31, 0xFD	; 253
 3d6:	80 81       	ld	r24, Z
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <uart_get_char+0x48>
 3da:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <input_insert_pos>
 3de:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	e8 1b       	sub	r30, r24
 3e6:	f1 09       	sbc	r31, r1
 3e8:	e0 5e       	subi	r30, 0xE0	; 224
 3ea:	fd 4f       	sbci	r31, 0xFD	; 253
 3ec:	80 81       	ld	r24, Z
 3ee:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <bytes_in_input_buffer>
 3f2:	91 50       	subi	r25, 0x01	; 1
 3f4:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <bytes_in_input_buffer>
 3f8:	22 23       	and	r18, r18
 3fa:	09 f0       	breq	.+2      	; 0x3fe <uart_get_char+0x58>
 3fc:	78 94       	sei
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 95       	ret

00000402 <init_serial_stdio>:
 402:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <out_insert_pos>
 406:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <bytes_in_out_buffer>
 40a:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <input_insert_pos>
 40e:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <bytes_in_input_buffer>
 412:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <input_overrun>
 416:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__data_end>
 41a:	dc 01       	movw	r26, r24
 41c:	cb 01       	movw	r24, r22
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	aa 1f       	adc	r26, r26
 424:	bb 1f       	adc	r27, r27
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	aa 1f       	adc	r26, r26
 42c:	bb 1f       	adc	r27, r27
 42e:	9c 01       	movw	r18, r24
 430:	ad 01       	movw	r20, r26
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	44 1f       	adc	r20, r20
 438:	55 1f       	adc	r21, r21
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	72 e1       	ldi	r23, 0x12	; 18
 43e:	8a e7       	ldi	r24, 0x7A	; 122
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__divmodsi4>
 446:	ba 01       	movw	r22, r20
 448:	a9 01       	movw	r20, r18
 44a:	4f 5f       	subi	r20, 0xFF	; 255
 44c:	5f 4f       	sbci	r21, 0xFF	; 255
 44e:	6f 4f       	sbci	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	db 01       	movw	r26, r22
 454:	ca 01       	movw	r24, r20
 456:	1a f4       	brpl	.+6      	; 0x45e <init_serial_stdio+0x5c>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	a1 1d       	adc	r26, r1
 45c:	b1 1d       	adc	r27, r1
 45e:	b5 95       	asr	r27
 460:	a7 95       	ror	r26
 462:	97 95       	ror	r25
 464:	87 95       	ror	r24
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 46c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 470:	e1 ec       	ldi	r30, 0xC1	; 193
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	88 e1       	ldi	r24, 0x18	; 24
 476:	80 83       	st	Z, r24
 478:	80 81       	ld	r24, Z
 47a:	80 68       	ori	r24, 0x80	; 128
 47c:	80 83       	st	Z, r24
 47e:	e6 e3       	ldi	r30, 0x36	; 54
 480:	f2 e0       	ldi	r31, 0x02	; 2
 482:	8a e0       	ldi	r24, 0x0A	; 10
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	93 83       	std	Z+3, r25	; 0x03
 488:	82 83       	std	Z+2, r24	; 0x02
 48a:	91 83       	std	Z+1, r25	; 0x01
 48c:	80 83       	st	Z, r24
 48e:	08 95       	ret

00000490 <serial_input_available>:
 490:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <bytes_in_input_buffer>
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	91 11       	cpse	r25, r1
 498:	01 c0       	rjmp	.+2      	; 0x49c <serial_input_available+0xc>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	08 95       	ret

0000049e <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	2f 93       	push	r18
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	ef 93       	push	r30
 4b0:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
 4b2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 4b6:	88 23       	and	r24, r24
 4b8:	29 f1       	breq	.+74     	; 0x504 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
 4ba:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <out_insert_pos>
 4be:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <bytes_in_out_buffer>
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	82 1b       	sub	r24, r18
 4c6:	91 09       	sbc	r25, r1
 4c8:	5a f4       	brpl	.+22     	; 0x4e0 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
 4ca:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <out_insert_pos>
 4ce:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	e8 1b       	sub	r30, r24
 4d6:	f1 09       	sbc	r31, r1
 4d8:	e1 5e       	subi	r30, 0xE1	; 225
 4da:	fd 4f       	sbci	r31, 0xFD	; 253
 4dc:	90 81       	ld	r25, Z
 4de:	0a c0       	rjmp	.+20     	; 0x4f4 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 4e0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <out_insert_pos>
 4e4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	e8 1b       	sub	r30, r24
 4ec:	f1 09       	sbc	r31, r1
 4ee:	e0 5e       	subi	r30, 0xE0	; 224
 4f0:	fe 4f       	sbci	r31, 0xFE	; 254
 4f2:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
 4f4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 4f8:	81 50       	subi	r24, 0x01	; 1
 4fa:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
 4fe:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 502:	05 c0       	rjmp	.+10     	; 0x50e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
 504:	e1 ec       	ldi	r30, 0xC1	; 193
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	8f 7d       	andi	r24, 0xDF	; 223
 50c:	80 83       	st	Z, r24
	}
}
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	cf 93       	push	r28
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
 546:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 54a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 54e:	88 23       	and	r24, r24
 550:	49 f0       	breq	.+18     	; 0x564 <__vector_20+0x42>
 552:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <bytes_in_out_buffer>
 556:	8f 3f       	cpi	r24, 0xFF	; 255
 558:	29 f0       	breq	.+10     	; 0x564 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	8c 2f       	mov	r24, r28
 560:	0e 94 9b 01 	call	0x336	; 0x336 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 564:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 568:	80 31       	cpi	r24, 0x10	; 16
 56a:	20 f0       	brcs	.+8      	; 0x574 <__vector_20+0x52>
		input_overrun = 1;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <input_overrun>
 572:	18 c0       	rjmp	.+48     	; 0x5a4 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
 574:	cd 30       	cpi	r28, 0x0D	; 13
 576:	09 f4       	brne	.+2      	; 0x57a <__vector_20+0x58>
			c = '\n';
 578:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
 57a:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <input_insert_pos>
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	8e 0f       	add	r24, r30
 582:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <input_insert_pos>
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	e0 5e       	subi	r30, 0xE0	; 224
 58a:	fd 4f       	sbci	r31, 0xFD	; 253
 58c:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
 58e:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <bytes_in_input_buffer>
 592:	8f 5f       	subi	r24, 0xFF	; 255
 594:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
 598:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <input_insert_pos>
 59c:	80 31       	cpi	r24, 0x10	; 16
 59e:	11 f4       	brne	.+4      	; 0x5a4 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
 5a0:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <input_insert_pos>
		}
	}
}
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	cf 91       	pop	r28
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <pwm_initialiser>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT2 = 0;
 5c8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 124;
 5cc:	8c e7       	ldi	r24, 0x7C	; 124
 5ce:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 124;
 5d2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	DDRD |= (1<<PORTD7)|(1<<PORTD6);
 5d6:	8a b1       	in	r24, 0x0a	; 10
 5d8:	80 6c       	ori	r24, 0xC0	; 192
 5da:	8a b9       	out	0x0a, r24	; 10
	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR2A |= _BV(COM2A1) | _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
 5dc:	e0 eb       	ldi	r30, 0xB0	; 176
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	83 6a       	ori	r24, 0xA3	; 163
 5e4:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS20);
 5e6:	e1 eb       	ldi	r30, 0xB1	; 177
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	81 60       	ori	r24, 0x01	; 1
 5ee:	80 83       	st	Z, r24
 5f0:	08 95       	ret

000005f2 <makeInfo>:
	fputs("\r\n", stdout);

	custom_delay(200);


}
 5f2:	84 e3       	ldi	r24, 0x34	; 52
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 1c 05 	call	0xa38	; 0xa38 <malloc>
 5fa:	08 95       	ret

000005fc <custom_delay>:
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	6b 01       	movw	r12, r22
 606:	7c 01       	movw	r14, r24
 608:	0e 94 ef 03 	call	0x7de	; 0x7de <get_tcnt0_ticks>
 60c:	c6 0e       	add	r12, r22
 60e:	d7 1e       	adc	r13, r23
 610:	e8 1e       	adc	r14, r24
 612:	f9 1e       	adc	r15, r25
 614:	0e 94 ef 03 	call	0x7de	; 0x7de <get_tcnt0_ticks>
 618:	6c 15       	cp	r22, r12
 61a:	7d 05       	cpc	r23, r13
 61c:	8e 05       	cpc	r24, r14
 61e:	9f 05       	cpc	r25, r15
 620:	c8 f3       	brcs	.-14     	; 0x614 <custom_delay+0x18>
 622:	ff 90       	pop	r15
 624:	ef 90       	pop	r14
 626:	df 90       	pop	r13
 628:	cf 90       	pop	r12
 62a:	08 95       	ret

0000062c <initialise>:

void initialise(info* info_ptr){
 62c:	ec 01       	movw	r28, r24

	DDRA = 0xFF;
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	81 b9       	out	0x01, r24	; 1

	DDRD = (0<<PORTD7)|(1<<PORTD6);
 632:	80 e4       	ldi	r24, 0x40	; 64
 634:	8a b9       	out	0x0a, r24	; 10

	DDRD |= (0<<PIND0);
 636:	8a b1       	in	r24, 0x0a	; 10
 638:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<PORTD1)|(1<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
 63a:	8a b1       	in	r24, 0x0a	; 10
 63c:	8e 6f       	ori	r24, 0xFE	; 254
 63e:	8a b9       	out	0x0a, r24	; 10

	pwm_initialiser();
 640:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <pwm_initialiser>
	init_tcnt0();
 644:	0e 94 d5 03 	call	0x7aa	; 0x7aa <init_tcnt0>
	init_serial_stdio(9600,0);
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	60 e8       	ldi	r22, 0x80	; 128
 64c:	75 e2       	ldi	r23, 0x25	; 37
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 01 02 	call	0x402	; 0x402 <init_serial_stdio>
	//USART0_init(BAUDREG);
	//set Global Interrupt Enable flag
	
	srand(get_tcnt0_ticks());
 656:	0e 94 ef 03 	call	0x7de	; 0x7de <get_tcnt0_ticks>
 65a:	cb 01       	movw	r24, r22
 65c:	0e 94 9a 06 	call	0xd34	; 0xd34 <srand>
	sei();
 660:	78 94       	sei
	

	info_ptr->ax = 0;
 662:	19 8a       	std	Y+17, r1	; 0x11
 664:	18 8a       	std	Y+16, r1	; 0x10
	info_ptr->ay = 0;
 666:	1b 8a       	std	Y+19, r1	; 0x13
 668:	1a 8a       	std	Y+18, r1	; 0x12
	info_ptr->az = 0;
 66a:	1d 8a       	std	Y+21, r1	; 0x15
 66c:	1c 8a       	std	Y+20, r1	; 0x14
	info_ptr->gx = 0;
 66e:	1f 8a       	std	Y+23, r1	; 0x17
 670:	1e 8a       	std	Y+22, r1	; 0x16
	info_ptr->gy = 0;
 672:	19 8e       	std	Y+25, r1	; 0x19
 674:	18 8e       	std	Y+24, r1	; 0x18
	info_ptr->gz = 0;
 676:	1b 8e       	std	Y+27, r1	; 0x1b
 678:	1a 8e       	std	Y+26, r1	; 0x1a
	info_ptr->axg = 0;
 67a:	1c 8e       	std	Y+28, r1	; 0x1c
 67c:	1d 8e       	std	Y+29, r1	; 0x1d
 67e:	1e 8e       	std	Y+30, r1	; 0x1e
 680:	1f 8e       	std	Y+31, r1	; 0x1f
	info_ptr->ayg = 0;
 682:	18 a2       	std	Y+32, r1	; 0x20
 684:	19 a2       	std	Y+33, r1	; 0x21
 686:	1a a2       	std	Y+34, r1	; 0x22
 688:	1b a2       	std	Y+35, r1	; 0x23
	info_ptr->azg = 0;
 68a:	1c a2       	std	Y+36, r1	; 0x24
 68c:	1d a2       	std	Y+37, r1	; 0x25
 68e:	1e a2       	std	Y+38, r1	; 0x26
 690:	1f a2       	std	Y+39, r1	; 0x27
	info_ptr->gxds = 0;
 692:	18 a6       	std	Y+40, r1	; 0x28
 694:	19 a6       	std	Y+41, r1	; 0x29
 696:	1a a6       	std	Y+42, r1	; 0x2a
 698:	1b a6       	std	Y+43, r1	; 0x2b
	info_ptr->gyds = 0;
 69a:	1c a6       	std	Y+44, r1	; 0x2c
 69c:	1d a6       	std	Y+45, r1	; 0x2d
 69e:	1e a6       	std	Y+46, r1	; 0x2e
 6a0:	1f a6       	std	Y+47, r1	; 0x2f
	info_ptr->gzds = 0;
 6a2:	18 aa       	std	Y+48, r1	; 0x30
 6a4:	19 aa       	std	Y+49, r1	; 0x31
 6a6:	1a aa       	std	Y+50, r1	; 0x32
 6a8:	1b aa       	std	Y+51, r1	; 0x33
	info_ptr->sample = get_tcnt0_ticks();
 6aa:	0e 94 ef 03 	call	0x7de	; 0x7de <get_tcnt0_ticks>
 6ae:	7b 83       	std	Y+3, r23	; 0x03
 6b0:	6a 83       	std	Y+2, r22	; 0x02
	info_ptr->prevSample = 0;
 6b2:	19 82       	std	Y+1, r1	; 0x01
 6b4:	18 82       	st	Y, r1
	custom_delay(250);
 6b6:	6a ef       	ldi	r22, 0xFA	; 250
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00000001;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	82 b9       	out	0x02, r24	; 2
	//output_char('X');
	custom_delay(250);
 6c6:	6a ef       	ldi	r22, 0xFA	; 250
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00000010;
 6d2:	82 e0       	ldi	r24, 0x02	; 2
 6d4:	82 b9       	out	0x02, r24	; 2
	//output_char('Y');
	custom_delay(250);
 6d6:	6a ef       	ldi	r22, 0xFA	; 250
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00000011;
 6e2:	83 e0       	ldi	r24, 0x03	; 3
 6e4:	82 b9       	out	0x02, r24	; 2
	//output_char('Z');
	custom_delay(250);
 6e6:	6a ef       	ldi	r22, 0xFA	; 250
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00000110;
 6f2:	86 e0       	ldi	r24, 0x06	; 6
 6f4:	82 b9       	out	0x02, r24	; 2
	//output_char('E');
	custom_delay(250);
 6f6:	6a ef       	ldi	r22, 0xFA	; 250
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00000111;
 702:	87 e0       	ldi	r24, 0x07	; 7
 704:	82 b9       	out	0x02, r24	; 2
	//output_char('F');
	custom_delay(1000);
 706:	68 ee       	ldi	r22, 0xE8	; 232
 708:	73 e0       	ldi	r23, 0x03	; 3
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00001010;
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	82 b9       	out	0x02, r24	; 2
	//output_char('G');
	custom_delay(1000);
 716:	68 ee       	ldi	r22, 0xE8	; 232
 718:	73 e0       	ldi	r23, 0x03	; 3
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00001000;
 722:	88 e0       	ldi	r24, 0x08	; 8
 724:	82 b9       	out	0x02, r24	; 2
	//output_char('H');
	custom_delay(1000);
 726:	68 ee       	ldi	r22, 0xE8	; 232
 728:	73 e0       	ldi	r23, 0x03	; 3
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00001110;
 732:	8e e0       	ldi	r24, 0x0E	; 14
 734:	82 b9       	out	0x02, r24	; 2
	//output_char('I');
	custom_delay(1000);
 736:	68 ee       	ldi	r22, 0xE8	; 232
 738:	73 e0       	ldi	r23, 0x03	; 3
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	char t = 'j';
	fputc(t, stdout);
 742:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <__iob+0x2>
 746:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <__iob+0x3>
 74a:	8a e6       	ldi	r24, 0x6A	; 106
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <fputc>
	mpu6050_init();
 752:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mpu6050_init>
	custom_delay(10);
 756:	6a e0       	ldi	r22, 0x0A	; 10
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	PORTA = 0b00001011;
 762:	8b e0       	ldi	r24, 0x0B	; 11
 764:	82 b9       	out	0x02, r24	; 2


	PORTD = (0<<PORTD5)|(1<<PORTD4)|(0<<PORTD3)|(1<<PORTD2);
 766:	84 e1       	ldi	r24, 0x14	; 20
 768:	8b b9       	out	0x0b, r24	; 11

	while(1){
		
		PORTA ^= 0xAA;
 76a:	ca ea       	ldi	r28, 0xAA	; 170
		//mpu_get_data(info_ptr);
		if(serial_input_available()){
			char in = fgetc(stdin);
 76c:	06 e3       	ldi	r16, 0x36	; 54
 76e:	12 e0       	ldi	r17, 0x02	; 2

	PORTD = (0<<PORTD5)|(1<<PORTD4)|(0<<PORTD3)|(1<<PORTD2);

	while(1){
		
		PORTA ^= 0xAA;
 770:	82 b1       	in	r24, 0x02	; 2
 772:	8c 27       	eor	r24, r28
 774:	82 b9       	out	0x02, r24	; 2
		//mpu_get_data(info_ptr);
		if(serial_input_available()){
 776:	0e 94 48 02 	call	0x490	; 0x490 <serial_input_available>
 77a:	88 23       	and	r24, r24
 77c:	59 f0       	breq	.+22     	; 0x794 <initialise+0x168>
			char in = fgetc(stdin);
 77e:	f8 01       	movw	r30, r16
 780:	80 81       	ld	r24, Z
 782:	91 81       	ldd	r25, Z+1	; 0x01
 784:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fgetc>
			fputc(in, stdout);
 788:	f8 01       	movw	r30, r16
 78a:	62 81       	ldd	r22, Z+2	; 0x02
 78c:	73 81       	ldd	r23, Z+3	; 0x03
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <fputc>
		}
		custom_delay(50);
 794:	62 e3       	ldi	r22, 0x32	; 50
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <custom_delay>
	}
 7a0:	e7 cf       	rjmp	.-50     	; 0x770 <initialise+0x144>

000007a2 <main>:


/* functional code	*/
int main(void)
{
	info* info_ptr = makeInfo();
 7a2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <makeInfo>
	initialise(info_ptr);
 7a6:	0e 94 16 03 	call	0x62c	; 0x62c <initialise>

000007aa <init_tcnt0>:
	 uint8_t return_value = Button_on;
	 if(interrupts_on){
		 sei();
	 }
	 return return_value;
 }
 7aa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Button_on>
 7ae:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <tcnt0_ticks>
 7b2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <tcnt0_ticks+0x1>
 7b6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <tcnt0_ticks+0x2>
 7ba:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <tcnt0_ticks+0x3>
 7be:	16 bc       	out	0x26, r1	; 38
 7c0:	8c e7       	ldi	r24, 0x7C	; 124
 7c2:	87 bd       	out	0x27, r24	; 39
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	84 bd       	out	0x24, r24	; 36
 7c8:	83 e0       	ldi	r24, 0x03	; 3
 7ca:	85 bd       	out	0x25, r24	; 37
 7cc:	ee e6       	ldi	r30, 0x6E	; 110
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	82 60       	ori	r24, 0x02	; 2
 7d4:	80 83       	st	Z, r24
 7d6:	85 b3       	in	r24, 0x15	; 21
 7d8:	82 70       	andi	r24, 0x02	; 2
 7da:	85 bb       	out	0x15, r24	; 21
 7dc:	08 95       	ret

000007de <get_tcnt0_ticks>:
 7de:	2f b7       	in	r18, 0x3f	; 63
 7e0:	f8 94       	cli
 7e2:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <tcnt0_ticks>
 7e6:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <tcnt0_ticks+0x1>
 7ea:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <tcnt0_ticks+0x2>
 7ee:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <tcnt0_ticks+0x3>
 7f2:	22 23       	and	r18, r18
 7f4:	0c f4       	brge	.+2      	; 0x7f8 <get_tcnt0_ticks+0x1a>
 7f6:	78 94       	sei
 7f8:	08 95       	ret

000007fa <__vector_16>:



 ISR(TIMER0_COMPA_vect) {
 7fa:	1f 92       	push	r1
 7fc:	0f 92       	push	r0
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	0f 92       	push	r0
 802:	11 24       	eor	r1, r1
 804:	8f 93       	push	r24
 806:	9f 93       	push	r25
 808:	af 93       	push	r26
 80a:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 tcnt0_ticks++;
 80c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <tcnt0_ticks>
 810:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <tcnt0_ticks+0x1>
 814:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <tcnt0_ticks+0x2>
 818:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <tcnt0_ticks+0x3>
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	a1 1d       	adc	r26, r1
 820:	b1 1d       	adc	r27, r1
 822:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <tcnt0_ticks>
 826:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <tcnt0_ticks+0x1>
 82a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <tcnt0_ticks+0x2>
 82e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <tcnt0_ticks+0x3>
	 uint8_t temp = PIND & (1<<PORTD7);
	 if (temp != 0x00){
 832:	4f 9b       	sbis	0x09, 7	; 9
 834:	04 c0       	rjmp	.+8      	; 0x83e <__vector_16+0x44>
		 Button_on = 1;
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Button_on>
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__vector_16+0x48>
		 } else {
		 Button_on = 0;
 83e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Button_on>
	 }
 842:	bf 91       	pop	r27
 844:	af 91       	pop	r26
 846:	9f 91       	pop	r25
 848:	8f 91       	pop	r24
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 854:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 85e:	08 95       	ret

00000860 <i2c_start>:
 860:	94 ea       	ldi	r25, 0xA4	; 164
 862:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 866:	4f ef       	ldi	r20, 0xFF	; 255
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	ec eb       	ldi	r30, 0xBC	; 188
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	90 81       	ld	r25, Z
 874:	99 23       	and	r25, r25
 876:	34 f0       	brlt	.+12     	; 0x884 <i2c_start+0x24>
 878:	41 50       	subi	r20, 0x01	; 1
 87a:	51 09       	sbc	r21, r1
 87c:	61 09       	sbc	r22, r1
 87e:	71 09       	sbc	r23, r1
 880:	c0 f7       	brcc	.-16     	; 0x872 <i2c_start+0x12>
 882:	04 c0       	rjmp	.+8      	; 0x88c <i2c_start+0x2c>
 884:	45 2b       	or	r20, r21
 886:	46 2b       	or	r20, r22
 888:	47 2b       	or	r20, r23
 88a:	41 f1       	breq	.+80     	; 0x8dc <i2c_start+0x7c>
 88c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 890:	98 7f       	andi	r25, 0xF8	; 248
 892:	98 30       	cpi	r25, 0x08	; 8
 894:	11 f0       	breq	.+4      	; 0x89a <i2c_start+0x3a>
 896:	90 31       	cpi	r25, 0x10	; 16
 898:	19 f5       	brne	.+70     	; 0x8e0 <i2c_start+0x80>
 89a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 89e:	84 e8       	ldi	r24, 0x84	; 132
 8a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	a0 e0       	ldi	r26, 0x00	; 0
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	ec eb       	ldi	r30, 0xBC	; 188
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	20 81       	ld	r18, Z
 8b2:	22 23       	and	r18, r18
 8b4:	2c f0       	brlt	.+10     	; 0x8c0 <i2c_start+0x60>
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	a1 09       	sbc	r26, r1
 8ba:	b1 09       	sbc	r27, r1
 8bc:	c8 f7       	brcc	.-14     	; 0x8b0 <i2c_start+0x50>
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <i2c_start+0x68>
 8c0:	89 2b       	or	r24, r25
 8c2:	8a 2b       	or	r24, r26
 8c4:	8b 2b       	or	r24, r27
 8c6:	71 f0       	breq	.+28     	; 0x8e4 <i2c_start+0x84>
 8c8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 8cc:	98 7f       	andi	r25, 0xF8	; 248
 8ce:	98 31       	cpi	r25, 0x18	; 24
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <i2c_start+0x88>
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	90 34       	cpi	r25, 0x40	; 64
 8d6:	49 f4       	brne	.+18     	; 0x8ea <i2c_start+0x8a>
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	08 95       	ret
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	08 95       	ret
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	08 95       	ret
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	08 95       	ret
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	08 95       	ret

000008ec <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 8ec:	84 e9       	ldi	r24, 0x94	; 148
 8ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	ec eb       	ldi	r30, 0xBC	; 188
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	20 81       	ld	r18, Z
 8fc:	24 ff       	sbrs	r18, 4
 8fe:	05 c0       	rjmp	.+10     	; 0x90a <__stack+0xb>
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	81 15       	cp	r24, r1
 904:	21 e0       	ldi	r18, 0x01	; 1
 906:	92 07       	cpc	r25, r18
 908:	c1 f7       	brne	.-16     	; 0x8fa <i2c_stop+0xe>
 90a:	08 95       	ret

0000090c <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 90c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 910:	84 e8       	ldi	r24, 0x84	; 132
 912:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
 916:	8f ef       	ldi	r24, 0xFF	; 255
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	a0 e0       	ldi	r26, 0x00	; 0
 91c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 91e:	ec eb       	ldi	r30, 0xBC	; 188
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	20 81       	ld	r18, Z
 924:	22 23       	and	r18, r18
 926:	2c f0       	brlt	.+10     	; 0x932 <i2c_write+0x26>
 928:	01 97       	sbiw	r24, 0x01	; 1
 92a:	a1 09       	sbc	r26, r1
 92c:	b1 09       	sbc	r27, r1
 92e:	c8 f7       	brcc	.-14     	; 0x922 <i2c_write+0x16>
 930:	04 c0       	rjmp	.+8      	; 0x93a <i2c_write+0x2e>
	if(i2c_timer == 0)
 932:	89 2b       	or	r24, r25
 934:	8a 2b       	or	r24, r26
 936:	8b 2b       	or	r24, r27
 938:	41 f0       	breq	.+16     	; 0x94a <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 93a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 93e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	98 32       	cpi	r25, 0x28	; 40
 944:	19 f4       	brne	.+6      	; 0x94c <i2c_write+0x40>
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
 94a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 94c:	08 95       	ret

0000094e <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 94e:	84 ec       	ldi	r24, 0xC4	; 196
 950:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
 954:	8f ef       	ldi	r24, 0xFF	; 255
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	a0 e0       	ldi	r26, 0x00	; 0
 95a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 95c:	ec eb       	ldi	r30, 0xBC	; 188
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	20 81       	ld	r18, Z
 962:	22 23       	and	r18, r18
 964:	2c f0       	brlt	.+10     	; 0x970 <i2c_readAck+0x22>
 966:	01 97       	sbiw	r24, 0x01	; 1
 968:	a1 09       	sbc	r26, r1
 96a:	b1 09       	sbc	r27, r1
 96c:	c8 f7       	brcc	.-14     	; 0x960 <i2c_readAck+0x12>
 96e:	04 c0       	rjmp	.+8      	; 0x978 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
 970:	89 2b       	or	r24, r25
 972:	8a 2b       	or	r24, r26
 974:	8b 2b       	or	r24, r27
 976:	19 f0       	breq	.+6      	; 0x97e <i2c_readAck+0x30>
		return 0;

    return TWDR;
 978:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 97c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
 97e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
 980:	08 95       	ret

00000982 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
 982:	84 e8       	ldi	r24, 0x84	; 132
 984:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
 988:	8f ef       	ldi	r24, 0xFF	; 255
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	a0 e0       	ldi	r26, 0x00	; 0
 98e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
 990:	ec eb       	ldi	r30, 0xBC	; 188
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	20 81       	ld	r18, Z
 996:	22 23       	and	r18, r18
 998:	2c f0       	brlt	.+10     	; 0x9a4 <i2c_readNak+0x22>
 99a:	01 97       	sbiw	r24, 0x01	; 1
 99c:	a1 09       	sbc	r26, r1
 99e:	b1 09       	sbc	r27, r1
 9a0:	c8 f7       	brcc	.-14     	; 0x994 <i2c_readNak+0x12>
 9a2:	04 c0       	rjmp	.+8      	; 0x9ac <i2c_readNak+0x2a>
	if(i2c_timer == 0)
 9a4:	89 2b       	or	r24, r25
 9a6:	8a 2b       	or	r24, r26
 9a8:	8b 2b       	or	r24, r27
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
 9ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 9b0:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
 9b2:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
 9b4:	08 95       	ret

000009b6 <__divmodsi4>:
 9b6:	05 2e       	mov	r0, r21
 9b8:	97 fb       	bst	r25, 7
 9ba:	1e f4       	brtc	.+6      	; 0x9c2 <__divmodsi4+0xc>
 9bc:	00 94       	com	r0
 9be:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__negsi2>
 9c2:	57 fd       	sbrc	r21, 7
 9c4:	07 d0       	rcall	.+14     	; 0x9d4 <__divmodsi4_neg2>
 9c6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__udivmodsi4>
 9ca:	07 fc       	sbrc	r0, 7
 9cc:	03 d0       	rcall	.+6      	; 0x9d4 <__divmodsi4_neg2>
 9ce:	4e f4       	brtc	.+18     	; 0x9e2 <__divmodsi4_exit>
 9d0:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__negsi2>

000009d4 <__divmodsi4_neg2>:
 9d4:	50 95       	com	r21
 9d6:	40 95       	com	r20
 9d8:	30 95       	com	r19
 9da:	21 95       	neg	r18
 9dc:	3f 4f       	sbci	r19, 0xFF	; 255
 9de:	4f 4f       	sbci	r20, 0xFF	; 255
 9e0:	5f 4f       	sbci	r21, 0xFF	; 255

000009e2 <__divmodsi4_exit>:
 9e2:	08 95       	ret

000009e4 <__negsi2>:
 9e4:	90 95       	com	r25
 9e6:	80 95       	com	r24
 9e8:	70 95       	com	r23
 9ea:	61 95       	neg	r22
 9ec:	7f 4f       	sbci	r23, 0xFF	; 255
 9ee:	8f 4f       	sbci	r24, 0xFF	; 255
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	08 95       	ret

000009f4 <__udivmodsi4>:
 9f4:	a1 e2       	ldi	r26, 0x21	; 33
 9f6:	1a 2e       	mov	r1, r26
 9f8:	aa 1b       	sub	r26, r26
 9fa:	bb 1b       	sub	r27, r27
 9fc:	fd 01       	movw	r30, r26
 9fe:	0d c0       	rjmp	.+26     	; 0xa1a <__udivmodsi4_ep>

00000a00 <__udivmodsi4_loop>:
 a00:	aa 1f       	adc	r26, r26
 a02:	bb 1f       	adc	r27, r27
 a04:	ee 1f       	adc	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	a2 17       	cp	r26, r18
 a0a:	b3 07       	cpc	r27, r19
 a0c:	e4 07       	cpc	r30, r20
 a0e:	f5 07       	cpc	r31, r21
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__udivmodsi4_ep>
 a12:	a2 1b       	sub	r26, r18
 a14:	b3 0b       	sbc	r27, r19
 a16:	e4 0b       	sbc	r30, r20
 a18:	f5 0b       	sbc	r31, r21

00000a1a <__udivmodsi4_ep>:
 a1a:	66 1f       	adc	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	1a 94       	dec	r1
 a24:	69 f7       	brne	.-38     	; 0xa00 <__udivmodsi4_loop>
 a26:	60 95       	com	r22
 a28:	70 95       	com	r23
 a2a:	80 95       	com	r24
 a2c:	90 95       	com	r25
 a2e:	9b 01       	movw	r18, r22
 a30:	ac 01       	movw	r20, r24
 a32:	bd 01       	movw	r22, r26
 a34:	cf 01       	movw	r24, r30
 a36:	08 95       	ret

00000a38 <malloc>:
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	82 30       	cpi	r24, 0x02	; 2
 a3e:	91 05       	cpc	r25, r1
 a40:	10 f4       	brcc	.+4      	; 0xa46 <malloc+0xe>
 a42:	82 e0       	ldi	r24, 0x02	; 2
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <__flp>
 a4a:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <__flp+0x1>
 a4e:	20 e0       	ldi	r18, 0x00	; 0
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	c0 e0       	ldi	r28, 0x00	; 0
 a54:	d0 e0       	ldi	r29, 0x00	; 0
 a56:	30 97       	sbiw	r30, 0x00	; 0
 a58:	11 f1       	breq	.+68     	; 0xa9e <malloc+0x66>
 a5a:	40 81       	ld	r20, Z
 a5c:	51 81       	ldd	r21, Z+1	; 0x01
 a5e:	48 17       	cp	r20, r24
 a60:	59 07       	cpc	r21, r25
 a62:	c0 f0       	brcs	.+48     	; 0xa94 <malloc+0x5c>
 a64:	48 17       	cp	r20, r24
 a66:	59 07       	cpc	r21, r25
 a68:	61 f4       	brne	.+24     	; 0xa82 <malloc+0x4a>
 a6a:	82 81       	ldd	r24, Z+2	; 0x02
 a6c:	93 81       	ldd	r25, Z+3	; 0x03
 a6e:	20 97       	sbiw	r28, 0x00	; 0
 a70:	19 f0       	breq	.+6      	; 0xa78 <malloc+0x40>
 a72:	9b 83       	std	Y+3, r25	; 0x03
 a74:	8a 83       	std	Y+2, r24	; 0x02
 a76:	2b c0       	rjmp	.+86     	; 0xace <malloc+0x96>
 a78:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <__flp+0x1>
 a7c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <__flp>
 a80:	26 c0       	rjmp	.+76     	; 0xace <malloc+0x96>
 a82:	21 15       	cp	r18, r1
 a84:	31 05       	cpc	r19, r1
 a86:	19 f0       	breq	.+6      	; 0xa8e <malloc+0x56>
 a88:	42 17       	cp	r20, r18
 a8a:	53 07       	cpc	r21, r19
 a8c:	18 f4       	brcc	.+6      	; 0xa94 <malloc+0x5c>
 a8e:	9a 01       	movw	r18, r20
 a90:	be 01       	movw	r22, r28
 a92:	df 01       	movw	r26, r30
 a94:	ef 01       	movw	r28, r30
 a96:	02 80       	ldd	r0, Z+2	; 0x02
 a98:	f3 81       	ldd	r31, Z+3	; 0x03
 a9a:	e0 2d       	mov	r30, r0
 a9c:	dc cf       	rjmp	.-72     	; 0xa56 <malloc+0x1e>
 a9e:	21 15       	cp	r18, r1
 aa0:	31 05       	cpc	r19, r1
 aa2:	09 f1       	breq	.+66     	; 0xae6 <malloc+0xae>
 aa4:	28 1b       	sub	r18, r24
 aa6:	39 0b       	sbc	r19, r25
 aa8:	24 30       	cpi	r18, 0x04	; 4
 aaa:	31 05       	cpc	r19, r1
 aac:	90 f4       	brcc	.+36     	; 0xad2 <malloc+0x9a>
 aae:	12 96       	adiw	r26, 0x02	; 2
 ab0:	8d 91       	ld	r24, X+
 ab2:	9c 91       	ld	r25, X
 ab4:	13 97       	sbiw	r26, 0x03	; 3
 ab6:	61 15       	cp	r22, r1
 ab8:	71 05       	cpc	r23, r1
 aba:	21 f0       	breq	.+8      	; 0xac4 <malloc+0x8c>
 abc:	fb 01       	movw	r30, r22
 abe:	93 83       	std	Z+3, r25	; 0x03
 ac0:	82 83       	std	Z+2, r24	; 0x02
 ac2:	04 c0       	rjmp	.+8      	; 0xacc <malloc+0x94>
 ac4:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <__flp+0x1>
 ac8:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <__flp>
 acc:	fd 01       	movw	r30, r26
 ace:	32 96       	adiw	r30, 0x02	; 2
 ad0:	44 c0       	rjmp	.+136    	; 0xb5a <malloc+0x122>
 ad2:	fd 01       	movw	r30, r26
 ad4:	e2 0f       	add	r30, r18
 ad6:	f3 1f       	adc	r31, r19
 ad8:	81 93       	st	Z+, r24
 ada:	91 93       	st	Z+, r25
 adc:	22 50       	subi	r18, 0x02	; 2
 ade:	31 09       	sbc	r19, r1
 ae0:	2d 93       	st	X+, r18
 ae2:	3c 93       	st	X, r19
 ae4:	3a c0       	rjmp	.+116    	; 0xb5a <malloc+0x122>
 ae6:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <__brkval>
 aea:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <__brkval+0x1>
 aee:	23 2b       	or	r18, r19
 af0:	41 f4       	brne	.+16     	; 0xb02 <malloc+0xca>
 af2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 af6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 afa:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <__brkval+0x1>
 afe:	20 93 32 02 	sts	0x0232, r18	; 0x800232 <__brkval>
 b02:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b06:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 b0a:	21 15       	cp	r18, r1
 b0c:	31 05       	cpc	r19, r1
 b0e:	41 f4       	brne	.+16     	; 0xb20 <malloc+0xe8>
 b10:	2d b7       	in	r18, 0x3d	; 61
 b12:	3e b7       	in	r19, 0x3e	; 62
 b14:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b18:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b1c:	24 1b       	sub	r18, r20
 b1e:	35 0b       	sbc	r19, r21
 b20:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__brkval>
 b24:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <__brkval+0x1>
 b28:	e2 17       	cp	r30, r18
 b2a:	f3 07       	cpc	r31, r19
 b2c:	a0 f4       	brcc	.+40     	; 0xb56 <malloc+0x11e>
 b2e:	2e 1b       	sub	r18, r30
 b30:	3f 0b       	sbc	r19, r31
 b32:	28 17       	cp	r18, r24
 b34:	39 07       	cpc	r19, r25
 b36:	78 f0       	brcs	.+30     	; 0xb56 <malloc+0x11e>
 b38:	ac 01       	movw	r20, r24
 b3a:	4e 5f       	subi	r20, 0xFE	; 254
 b3c:	5f 4f       	sbci	r21, 0xFF	; 255
 b3e:	24 17       	cp	r18, r20
 b40:	35 07       	cpc	r19, r21
 b42:	48 f0       	brcs	.+18     	; 0xb56 <malloc+0x11e>
 b44:	4e 0f       	add	r20, r30
 b46:	5f 1f       	adc	r21, r31
 b48:	50 93 33 02 	sts	0x0233, r21	; 0x800233 <__brkval+0x1>
 b4c:	40 93 32 02 	sts	0x0232, r20	; 0x800232 <__brkval>
 b50:	81 93       	st	Z+, r24
 b52:	91 93       	st	Z+, r25
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <malloc+0x122>
 b56:	e0 e0       	ldi	r30, 0x00	; 0
 b58:	f0 e0       	ldi	r31, 0x00	; 0
 b5a:	cf 01       	movw	r24, r30
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	08 95       	ret

00000b62 <free>:
 b62:	0f 93       	push	r16
 b64:	1f 93       	push	r17
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	00 97       	sbiw	r24, 0x00	; 0
 b6c:	09 f4       	brne	.+2      	; 0xb70 <free+0xe>
 b6e:	8c c0       	rjmp	.+280    	; 0xc88 <free+0x126>
 b70:	fc 01       	movw	r30, r24
 b72:	32 97       	sbiw	r30, 0x02	; 2
 b74:	13 82       	std	Z+3, r1	; 0x03
 b76:	12 82       	std	Z+2, r1	; 0x02
 b78:	00 91 34 02 	lds	r16, 0x0234	; 0x800234 <__flp>
 b7c:	10 91 35 02 	lds	r17, 0x0235	; 0x800235 <__flp+0x1>
 b80:	01 15       	cp	r16, r1
 b82:	11 05       	cpc	r17, r1
 b84:	81 f4       	brne	.+32     	; 0xba6 <free+0x44>
 b86:	20 81       	ld	r18, Z
 b88:	31 81       	ldd	r19, Z+1	; 0x01
 b8a:	82 0f       	add	r24, r18
 b8c:	93 1f       	adc	r25, r19
 b8e:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <__brkval>
 b92:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <__brkval+0x1>
 b96:	28 17       	cp	r18, r24
 b98:	39 07       	cpc	r19, r25
 b9a:	79 f5       	brne	.+94     	; 0xbfa <free+0x98>
 b9c:	f0 93 33 02 	sts	0x0233, r31	; 0x800233 <__brkval+0x1>
 ba0:	e0 93 32 02 	sts	0x0232, r30	; 0x800232 <__brkval>
 ba4:	71 c0       	rjmp	.+226    	; 0xc88 <free+0x126>
 ba6:	d8 01       	movw	r26, r16
 ba8:	40 e0       	ldi	r20, 0x00	; 0
 baa:	50 e0       	ldi	r21, 0x00	; 0
 bac:	ae 17       	cp	r26, r30
 bae:	bf 07       	cpc	r27, r31
 bb0:	50 f4       	brcc	.+20     	; 0xbc6 <free+0x64>
 bb2:	12 96       	adiw	r26, 0x02	; 2
 bb4:	2d 91       	ld	r18, X+
 bb6:	3c 91       	ld	r19, X
 bb8:	13 97       	sbiw	r26, 0x03	; 3
 bba:	ad 01       	movw	r20, r26
 bbc:	21 15       	cp	r18, r1
 bbe:	31 05       	cpc	r19, r1
 bc0:	09 f1       	breq	.+66     	; 0xc04 <free+0xa2>
 bc2:	d9 01       	movw	r26, r18
 bc4:	f3 cf       	rjmp	.-26     	; 0xbac <free+0x4a>
 bc6:	9d 01       	movw	r18, r26
 bc8:	da 01       	movw	r26, r20
 bca:	33 83       	std	Z+3, r19	; 0x03
 bcc:	22 83       	std	Z+2, r18	; 0x02
 bce:	60 81       	ld	r22, Z
 bd0:	71 81       	ldd	r23, Z+1	; 0x01
 bd2:	86 0f       	add	r24, r22
 bd4:	97 1f       	adc	r25, r23
 bd6:	82 17       	cp	r24, r18
 bd8:	93 07       	cpc	r25, r19
 bda:	69 f4       	brne	.+26     	; 0xbf6 <free+0x94>
 bdc:	ec 01       	movw	r28, r24
 bde:	28 81       	ld	r18, Y
 be0:	39 81       	ldd	r19, Y+1	; 0x01
 be2:	26 0f       	add	r18, r22
 be4:	37 1f       	adc	r19, r23
 be6:	2e 5f       	subi	r18, 0xFE	; 254
 be8:	3f 4f       	sbci	r19, 0xFF	; 255
 bea:	31 83       	std	Z+1, r19	; 0x01
 bec:	20 83       	st	Z, r18
 bee:	8a 81       	ldd	r24, Y+2	; 0x02
 bf0:	9b 81       	ldd	r25, Y+3	; 0x03
 bf2:	93 83       	std	Z+3, r25	; 0x03
 bf4:	82 83       	std	Z+2, r24	; 0x02
 bf6:	45 2b       	or	r20, r21
 bf8:	29 f4       	brne	.+10     	; 0xc04 <free+0xa2>
 bfa:	f0 93 35 02 	sts	0x0235, r31	; 0x800235 <__flp+0x1>
 bfe:	e0 93 34 02 	sts	0x0234, r30	; 0x800234 <__flp>
 c02:	42 c0       	rjmp	.+132    	; 0xc88 <free+0x126>
 c04:	13 96       	adiw	r26, 0x03	; 3
 c06:	fc 93       	st	X, r31
 c08:	ee 93       	st	-X, r30
 c0a:	12 97       	sbiw	r26, 0x02	; 2
 c0c:	ed 01       	movw	r28, r26
 c0e:	49 91       	ld	r20, Y+
 c10:	59 91       	ld	r21, Y+
 c12:	9e 01       	movw	r18, r28
 c14:	24 0f       	add	r18, r20
 c16:	35 1f       	adc	r19, r21
 c18:	e2 17       	cp	r30, r18
 c1a:	f3 07       	cpc	r31, r19
 c1c:	71 f4       	brne	.+28     	; 0xc3a <free+0xd8>
 c1e:	80 81       	ld	r24, Z
 c20:	91 81       	ldd	r25, Z+1	; 0x01
 c22:	84 0f       	add	r24, r20
 c24:	95 1f       	adc	r25, r21
 c26:	02 96       	adiw	r24, 0x02	; 2
 c28:	11 96       	adiw	r26, 0x01	; 1
 c2a:	9c 93       	st	X, r25
 c2c:	8e 93       	st	-X, r24
 c2e:	82 81       	ldd	r24, Z+2	; 0x02
 c30:	93 81       	ldd	r25, Z+3	; 0x03
 c32:	13 96       	adiw	r26, 0x03	; 3
 c34:	9c 93       	st	X, r25
 c36:	8e 93       	st	-X, r24
 c38:	12 97       	sbiw	r26, 0x02	; 2
 c3a:	e0 e0       	ldi	r30, 0x00	; 0
 c3c:	f0 e0       	ldi	r31, 0x00	; 0
 c3e:	d8 01       	movw	r26, r16
 c40:	12 96       	adiw	r26, 0x02	; 2
 c42:	8d 91       	ld	r24, X+
 c44:	9c 91       	ld	r25, X
 c46:	13 97       	sbiw	r26, 0x03	; 3
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	19 f0       	breq	.+6      	; 0xc52 <free+0xf0>
 c4c:	f8 01       	movw	r30, r16
 c4e:	8c 01       	movw	r16, r24
 c50:	f6 cf       	rjmp	.-20     	; 0xc3e <free+0xdc>
 c52:	8d 91       	ld	r24, X+
 c54:	9c 91       	ld	r25, X
 c56:	98 01       	movw	r18, r16
 c58:	2e 5f       	subi	r18, 0xFE	; 254
 c5a:	3f 4f       	sbci	r19, 0xFF	; 255
 c5c:	82 0f       	add	r24, r18
 c5e:	93 1f       	adc	r25, r19
 c60:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <__brkval>
 c64:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <__brkval+0x1>
 c68:	28 17       	cp	r18, r24
 c6a:	39 07       	cpc	r19, r25
 c6c:	69 f4       	brne	.+26     	; 0xc88 <free+0x126>
 c6e:	30 97       	sbiw	r30, 0x00	; 0
 c70:	29 f4       	brne	.+10     	; 0xc7c <free+0x11a>
 c72:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <__flp+0x1>
 c76:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__flp>
 c7a:	02 c0       	rjmp	.+4      	; 0xc80 <free+0x11e>
 c7c:	13 82       	std	Z+3, r1	; 0x03
 c7e:	12 82       	std	Z+2, r1	; 0x02
 c80:	10 93 33 02 	sts	0x0233, r17	; 0x800233 <__brkval+0x1>
 c84:	00 93 32 02 	sts	0x0232, r16	; 0x800232 <__brkval>
 c88:	df 91       	pop	r29
 c8a:	cf 91       	pop	r28
 c8c:	1f 91       	pop	r17
 c8e:	0f 91       	pop	r16
 c90:	08 95       	ret

00000c92 <do_rand>:
 c92:	8f 92       	push	r8
 c94:	9f 92       	push	r9
 c96:	af 92       	push	r10
 c98:	bf 92       	push	r11
 c9a:	cf 92       	push	r12
 c9c:	df 92       	push	r13
 c9e:	ef 92       	push	r14
 ca0:	ff 92       	push	r15
 ca2:	cf 93       	push	r28
 ca4:	df 93       	push	r29
 ca6:	ec 01       	movw	r28, r24
 ca8:	68 81       	ld	r22, Y
 caa:	79 81       	ldd	r23, Y+1	; 0x01
 cac:	8a 81       	ldd	r24, Y+2	; 0x02
 cae:	9b 81       	ldd	r25, Y+3	; 0x03
 cb0:	61 15       	cp	r22, r1
 cb2:	71 05       	cpc	r23, r1
 cb4:	81 05       	cpc	r24, r1
 cb6:	91 05       	cpc	r25, r1
 cb8:	21 f4       	brne	.+8      	; 0xcc2 <do_rand+0x30>
 cba:	64 e2       	ldi	r22, 0x24	; 36
 cbc:	79 ed       	ldi	r23, 0xD9	; 217
 cbe:	8b e5       	ldi	r24, 0x5B	; 91
 cc0:	97 e0       	ldi	r25, 0x07	; 7
 cc2:	2d e1       	ldi	r18, 0x1D	; 29
 cc4:	33 ef       	ldi	r19, 0xF3	; 243
 cc6:	41 e0       	ldi	r20, 0x01	; 1
 cc8:	50 e0       	ldi	r21, 0x00	; 0
 cca:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__divmodsi4>
 cce:	49 01       	movw	r8, r18
 cd0:	5a 01       	movw	r10, r20
 cd2:	9b 01       	movw	r18, r22
 cd4:	ac 01       	movw	r20, r24
 cd6:	a7 ea       	ldi	r26, 0xA7	; 167
 cd8:	b1 e4       	ldi	r27, 0x41	; 65
 cda:	0e 94 1b 07 	call	0xe36	; 0xe36 <__muluhisi3>
 cde:	6b 01       	movw	r12, r22
 ce0:	7c 01       	movw	r14, r24
 ce2:	ac ee       	ldi	r26, 0xEC	; 236
 ce4:	b4 ef       	ldi	r27, 0xF4	; 244
 ce6:	a5 01       	movw	r20, r10
 ce8:	94 01       	movw	r18, r8
 cea:	0e 94 29 07 	call	0xe52	; 0xe52 <__mulohisi3>
 cee:	dc 01       	movw	r26, r24
 cf0:	cb 01       	movw	r24, r22
 cf2:	8c 0d       	add	r24, r12
 cf4:	9d 1d       	adc	r25, r13
 cf6:	ae 1d       	adc	r26, r14
 cf8:	bf 1d       	adc	r27, r15
 cfa:	b7 ff       	sbrs	r27, 7
 cfc:	03 c0       	rjmp	.+6      	; 0xd04 <do_rand+0x72>
 cfe:	01 97       	sbiw	r24, 0x01	; 1
 d00:	a1 09       	sbc	r26, r1
 d02:	b0 48       	sbci	r27, 0x80	; 128
 d04:	88 83       	st	Y, r24
 d06:	99 83       	std	Y+1, r25	; 0x01
 d08:	aa 83       	std	Y+2, r26	; 0x02
 d0a:	bb 83       	std	Y+3, r27	; 0x03
 d0c:	9f 77       	andi	r25, 0x7F	; 127
 d0e:	df 91       	pop	r29
 d10:	cf 91       	pop	r28
 d12:	ff 90       	pop	r15
 d14:	ef 90       	pop	r14
 d16:	df 90       	pop	r13
 d18:	cf 90       	pop	r12
 d1a:	bf 90       	pop	r11
 d1c:	af 90       	pop	r10
 d1e:	9f 90       	pop	r9
 d20:	8f 90       	pop	r8
 d22:	08 95       	ret

00000d24 <rand_r>:
 d24:	0e 94 49 06 	call	0xc92	; 0xc92 <do_rand>
 d28:	08 95       	ret

00000d2a <rand>:
 d2a:	86 e0       	ldi	r24, 0x06	; 6
 d2c:	91 e0       	ldi	r25, 0x01	; 1
 d2e:	0e 94 49 06 	call	0xc92	; 0xc92 <do_rand>
 d32:	08 95       	ret

00000d34 <srand>:
 d34:	a0 e0       	ldi	r26, 0x00	; 0
 d36:	b0 e0       	ldi	r27, 0x00	; 0
 d38:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
 d3c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
 d40:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
 d44:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
 d48:	08 95       	ret

00000d4a <fgetc>:
 d4a:	cf 93       	push	r28
 d4c:	df 93       	push	r29
 d4e:	ec 01       	movw	r28, r24
 d50:	2b 81       	ldd	r18, Y+3	; 0x03
 d52:	20 ff       	sbrs	r18, 0
 d54:	33 c0       	rjmp	.+102    	; 0xdbc <fgetc+0x72>
 d56:	26 ff       	sbrs	r18, 6
 d58:	0a c0       	rjmp	.+20     	; 0xd6e <fgetc+0x24>
 d5a:	2f 7b       	andi	r18, 0xBF	; 191
 d5c:	2b 83       	std	Y+3, r18	; 0x03
 d5e:	8e 81       	ldd	r24, Y+6	; 0x06
 d60:	9f 81       	ldd	r25, Y+7	; 0x07
 d62:	01 96       	adiw	r24, 0x01	; 1
 d64:	9f 83       	std	Y+7, r25	; 0x07
 d66:	8e 83       	std	Y+6, r24	; 0x06
 d68:	8a 81       	ldd	r24, Y+2	; 0x02
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	29 c0       	rjmp	.+82     	; 0xdc0 <fgetc+0x76>
 d6e:	22 ff       	sbrs	r18, 2
 d70:	0f c0       	rjmp	.+30     	; 0xd90 <fgetc+0x46>
 d72:	e8 81       	ld	r30, Y
 d74:	f9 81       	ldd	r31, Y+1	; 0x01
 d76:	80 81       	ld	r24, Z
 d78:	08 2e       	mov	r0, r24
 d7a:	00 0c       	add	r0, r0
 d7c:	99 0b       	sbc	r25, r25
 d7e:	00 97       	sbiw	r24, 0x00	; 0
 d80:	19 f4       	brne	.+6      	; 0xd88 <fgetc+0x3e>
 d82:	20 62       	ori	r18, 0x20	; 32
 d84:	2b 83       	std	Y+3, r18	; 0x03
 d86:	1a c0       	rjmp	.+52     	; 0xdbc <fgetc+0x72>
 d88:	31 96       	adiw	r30, 0x01	; 1
 d8a:	f9 83       	std	Y+1, r31	; 0x01
 d8c:	e8 83       	st	Y, r30
 d8e:	0e c0       	rjmp	.+28     	; 0xdac <fgetc+0x62>
 d90:	ea 85       	ldd	r30, Y+10	; 0x0a
 d92:	fb 85       	ldd	r31, Y+11	; 0x0b
 d94:	09 95       	icall
 d96:	97 ff       	sbrs	r25, 7
 d98:	09 c0       	rjmp	.+18     	; 0xdac <fgetc+0x62>
 d9a:	2b 81       	ldd	r18, Y+3	; 0x03
 d9c:	01 96       	adiw	r24, 0x01	; 1
 d9e:	11 f0       	breq	.+4      	; 0xda4 <fgetc+0x5a>
 da0:	80 e2       	ldi	r24, 0x20	; 32
 da2:	01 c0       	rjmp	.+2      	; 0xda6 <fgetc+0x5c>
 da4:	80 e1       	ldi	r24, 0x10	; 16
 da6:	82 2b       	or	r24, r18
 da8:	8b 83       	std	Y+3, r24	; 0x03
 daa:	08 c0       	rjmp	.+16     	; 0xdbc <fgetc+0x72>
 dac:	2e 81       	ldd	r18, Y+6	; 0x06
 dae:	3f 81       	ldd	r19, Y+7	; 0x07
 db0:	2f 5f       	subi	r18, 0xFF	; 255
 db2:	3f 4f       	sbci	r19, 0xFF	; 255
 db4:	3f 83       	std	Y+7, r19	; 0x07
 db6:	2e 83       	std	Y+6, r18	; 0x06
 db8:	99 27       	eor	r25, r25
 dba:	02 c0       	rjmp	.+4      	; 0xdc0 <fgetc+0x76>
 dbc:	8f ef       	ldi	r24, 0xFF	; 255
 dbe:	9f ef       	ldi	r25, 0xFF	; 255
 dc0:	df 91       	pop	r29
 dc2:	cf 91       	pop	r28
 dc4:	08 95       	ret

00000dc6 <fputc>:
 dc6:	0f 93       	push	r16
 dc8:	1f 93       	push	r17
 dca:	cf 93       	push	r28
 dcc:	df 93       	push	r29
 dce:	fb 01       	movw	r30, r22
 dd0:	23 81       	ldd	r18, Z+3	; 0x03
 dd2:	21 fd       	sbrc	r18, 1
 dd4:	03 c0       	rjmp	.+6      	; 0xddc <fputc+0x16>
 dd6:	8f ef       	ldi	r24, 0xFF	; 255
 dd8:	9f ef       	ldi	r25, 0xFF	; 255
 dda:	28 c0       	rjmp	.+80     	; 0xe2c <fputc+0x66>
 ddc:	22 ff       	sbrs	r18, 2
 dde:	16 c0       	rjmp	.+44     	; 0xe0c <fputc+0x46>
 de0:	46 81       	ldd	r20, Z+6	; 0x06
 de2:	57 81       	ldd	r21, Z+7	; 0x07
 de4:	24 81       	ldd	r18, Z+4	; 0x04
 de6:	35 81       	ldd	r19, Z+5	; 0x05
 de8:	42 17       	cp	r20, r18
 dea:	53 07       	cpc	r21, r19
 dec:	44 f4       	brge	.+16     	; 0xdfe <fputc+0x38>
 dee:	a0 81       	ld	r26, Z
 df0:	b1 81       	ldd	r27, Z+1	; 0x01
 df2:	9d 01       	movw	r18, r26
 df4:	2f 5f       	subi	r18, 0xFF	; 255
 df6:	3f 4f       	sbci	r19, 0xFF	; 255
 df8:	31 83       	std	Z+1, r19	; 0x01
 dfa:	20 83       	st	Z, r18
 dfc:	8c 93       	st	X, r24
 dfe:	26 81       	ldd	r18, Z+6	; 0x06
 e00:	37 81       	ldd	r19, Z+7	; 0x07
 e02:	2f 5f       	subi	r18, 0xFF	; 255
 e04:	3f 4f       	sbci	r19, 0xFF	; 255
 e06:	37 83       	std	Z+7, r19	; 0x07
 e08:	26 83       	std	Z+6, r18	; 0x06
 e0a:	10 c0       	rjmp	.+32     	; 0xe2c <fputc+0x66>
 e0c:	eb 01       	movw	r28, r22
 e0e:	09 2f       	mov	r16, r25
 e10:	18 2f       	mov	r17, r24
 e12:	00 84       	ldd	r0, Z+8	; 0x08
 e14:	f1 85       	ldd	r31, Z+9	; 0x09
 e16:	e0 2d       	mov	r30, r0
 e18:	09 95       	icall
 e1a:	89 2b       	or	r24, r25
 e1c:	e1 f6       	brne	.-72     	; 0xdd6 <fputc+0x10>
 e1e:	8e 81       	ldd	r24, Y+6	; 0x06
 e20:	9f 81       	ldd	r25, Y+7	; 0x07
 e22:	01 96       	adiw	r24, 0x01	; 1
 e24:	9f 83       	std	Y+7, r25	; 0x07
 e26:	8e 83       	std	Y+6, r24	; 0x06
 e28:	81 2f       	mov	r24, r17
 e2a:	90 2f       	mov	r25, r16
 e2c:	df 91       	pop	r29
 e2e:	cf 91       	pop	r28
 e30:	1f 91       	pop	r17
 e32:	0f 91       	pop	r16
 e34:	08 95       	ret

00000e36 <__muluhisi3>:
 e36:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__umulhisi3>
 e3a:	a5 9f       	mul	r26, r21
 e3c:	90 0d       	add	r25, r0
 e3e:	b4 9f       	mul	r27, r20
 e40:	90 0d       	add	r25, r0
 e42:	a4 9f       	mul	r26, r20
 e44:	80 0d       	add	r24, r0
 e46:	91 1d       	adc	r25, r1
 e48:	11 24       	eor	r1, r1
 e4a:	08 95       	ret

00000e4c <__mulshisi3>:
 e4c:	b7 ff       	sbrs	r27, 7
 e4e:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__muluhisi3>

00000e52 <__mulohisi3>:
 e52:	0e 94 1b 07 	call	0xe36	; 0xe36 <__muluhisi3>
 e56:	82 1b       	sub	r24, r18
 e58:	93 0b       	sbc	r25, r19
 e5a:	08 95       	ret

00000e5c <__umulhisi3>:
 e5c:	a2 9f       	mul	r26, r18
 e5e:	b0 01       	movw	r22, r0
 e60:	b3 9f       	mul	r27, r19
 e62:	c0 01       	movw	r24, r0
 e64:	a3 9f       	mul	r26, r19
 e66:	70 0d       	add	r23, r0
 e68:	81 1d       	adc	r24, r1
 e6a:	11 24       	eor	r1, r1
 e6c:	91 1d       	adc	r25, r1
 e6e:	b2 9f       	mul	r27, r18
 e70:	70 0d       	add	r23, r0
 e72:	81 1d       	adc	r24, r1
 e74:	11 24       	eor	r1, r1
 e76:	91 1d       	adc	r25, r1
 e78:	08 95       	ret

00000e7a <_exit>:
 e7a:	f8 94       	cli

00000e7c <__stop_program>:
 e7c:	ff cf       	rjmp	.-2      	; 0xe7c <__stop_program>
