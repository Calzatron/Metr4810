
Working code v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000232  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018d  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b9  00000000  00000000  000006ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e1  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000143  00000000  00000000  00000aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>
  2a:	10 c0       	rjmp	.+32     	; 0x4c <__bad_interrupt>
  2c:	0f c0       	rjmp	.+30     	; 0x4c <__bad_interrupt>
  2e:	0e c0       	rjmp	.+28     	; 0x4c <__bad_interrupt>
  30:	0d c0       	rjmp	.+26     	; 0x4c <__bad_interrupt>
  32:	0c c0       	rjmp	.+24     	; 0x4c <__bad_interrupt>
  34:	0b c0       	rjmp	.+22     	; 0x4c <__bad_interrupt>
  36:	0a c0       	rjmp	.+20     	; 0x4c <__bad_interrupt>
  38:	09 c0       	rjmp	.+18     	; 0x4c <__bad_interrupt>
  3a:	08 c0       	rjmp	.+16     	; 0x4c <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61
  48:	50 d0       	rcall	.+160    	; 0xea <main>
  4a:	ef c0       	rjmp	.+478    	; 0x22a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <my_delay_ms>:
//// function that creates a delay based on an input variable
// Is used to allow for finer control of the craft
// A lower power level setting results in larger delays between motor operation
void my_delay_ms(int ms)
{
	while(0 < ms)
  4e:	18 16       	cp	r1, r24
  50:	19 06       	cpc	r1, r25
  52:	44 f4       	brge	.+16     	; 0x64 <my_delay_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	ef ec       	ldi	r30, 0xCF	; 207
  56:	f7 e0       	ldi	r31, 0x07	; 7
  58:	31 97       	sbiw	r30, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <my_delay_ms+0xa>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <my_delay_ms+0x10>
  5e:	00 00       	nop
	{
		_delay_ms(1);
		--ms;
  60:	01 97       	sbiw	r24, 0x01	; 1
//// function that creates a delay based on an input variable
// Is used to allow for finer control of the craft
// A lower power level setting results in larger delays between motor operation
void my_delay_ms(int ms)
{
	while(0 < ms)
  62:	c1 f7       	brne	.-16     	; 0x54 <my_delay_ms+0x6>
  64:	08 95       	ret

00000066 <UART_Receive>:
//// function that returns serial data read from the buffer
unsigned char UART_Receive(void)
{
	/* Wait for data to be received */
	/* Get and return received data from buffer */
	while ( !(UCSR0A & (1<<RXC0)) );
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	88 23       	and	r24, r24
  6e:	ec f7       	brge	.-6      	; 0x6a <UART_Receive+0x4>
	return UDR0;
  70:	80 91 80 00 	lds	r24, 0x0080
}
  74:	08 95       	ret

00000076 <serial_init>:
	// shift the register right by 8 bits
	// set baud rate
	// enable receiver
	// 8bit data format
	// Remap reciever to PB2
	UBRR0H = (BAUDRATE>>8);
  76:	10 92 82 00 	sts	0x0082, r1
	UBRR0L = BAUDRATE;
  7a:	83 e3       	ldi	r24, 0x33	; 51
  7c:	80 93 81 00 	sts	0x0081, r24
	UCSR0B|= (1<<RXEN0);
  80:	e5 e8       	ldi	r30, 0x85	; 133
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 61       	ori	r24, 0x10	; 16
  88:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ01)|(1<<UCSZ00);
  8a:	e4 e8       	ldi	r30, 0x84	; 132
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	86 60       	ori	r24, 0x06	; 6
  92:	80 83       	st	Z, r24
	REMAP |=  (1<<U0MAP);
  94:	e5 e6       	ldi	r30, 0x65	; 101
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <servo_motor_init>:
	// Enable TOCC2
	// Enable PA3 OUTPUT for servo, other outputs for motors
	// Fast PWM, mode 14, non inverting, pre-scaler clk/8
	// Set Top for 20ms Period
	// Start servo at full open
	TOCPMSA0 |= (1<<TOCC2S1);
  a0:	e7 e6       	ldi	r30, 0x67	; 103
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	TOCPMCOE |= (1<<TOCC2OE);
  aa:	e6 e6       	ldi	r30, 0x66	; 102
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	80 83       	st	Z, r24
	DDRA = (1<<PORTA3)|(1<<PORTA2)|(1<<PORTA1)|(1<<PORTA0);
  b4:	8f e0       	ldi	r24, 0x0F	; 15
  b6:	8a bb       	out	0x1a, r24	; 26
	DDRB = (1<<PORTB1);	
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	87 bb       	out	0x17, r24	; 23
	TCCR2A |= (1<<COM2B1)|(1<<WGM21);
  bc:	ea ec       	ldi	r30, 0xCA	; 202
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 62       	ori	r24, 0x22	; 34
  c4:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21)|(1<<WGM23)|(1<<WGM22);
  c6:	e9 ec       	ldi	r30, 0xC9	; 201
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8a 61       	ori	r24, 0x1A	; 26
  ce:	80 83       	st	Z, r24
	ICR2 = 19999;
  d0:	8f e1       	ldi	r24, 0x1F	; 31
  d2:	9e e4       	ldi	r25, 0x4E	; 78
  d4:	90 93 c1 00 	sts	0x00C1, r25
  d8:	80 93 c0 00 	sts	0x00C0, r24
	OCR2B = 1600;
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	90 93 c3 00 	sts	0x00C3, r25
  e4:	80 93 c2 00 	sts	0x00C2, r24
  e8:	08 95       	ret

000000ea <main>:
}

int main(void)
{
	servo_motor_init();
  ea:	da df       	rcall	.-76     	; 0xa0 <servo_motor_init>
	serial_init();
  ec:	c4 df       	rcall	.-120    	; 0x76 <serial_init>
	// Define the integer used for setting the motor power level
	int power = 10;
		
	//// Initialize in stand-by mode
	// Motor 1 (Bottom Motor)
	PORTA &= ~(1<<PORTA1);
  ee:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= ~(1<<PORTA2);
  f0:	da 98       	cbi	0x1b, 2	; 27
	
	// Motor 2 (Top Motor)
	PORTA &= ~(1<<PORTA0);
  f2:	d8 98       	cbi	0x1b, 0	; 27
	PORTB &= ~(1<<PORTB1);
  f4:	c1 98       	cbi	0x18, 1	; 24
	servo_motor_init();
	serial_init();
	// Define the integer used for setting the PWM width
	int servo_input = 1600; //min 1050, max 1700
	// Define the integer used for setting the motor power level
	int power = 10;
  f6:	ca e0       	ldi	r28, 0x0A	; 10
  f8:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
	servo_motor_init();
	serial_init();
	// Define the integer used for setting the PWM width
	int servo_input = 1600; //min 1050, max 1700
  fa:	0f 2e       	mov	r0, r31
  fc:	f0 e4       	ldi	r31, 0x40	; 64
  fe:	cf 2e       	mov	r12, r31
 100:	f6 e0       	ldi	r31, 0x06	; 6
 102:	df 2e       	mov	r13, r31
 104:	f0 2d       	mov	r31, r0
	while (1)
	{
		//// Receives and assigns received serial data to RD
		_delay_ms(10);
		UART_Receive();
		char RD = UDR0;	
 106:	00 e8       	ldi	r16, 0x80	; 128
 108:	10 e0       	ldi	r17, 0x00	; 0
		// Power ranges from 1 to 5, 5 = full power,  1 = maximum fine motor control
		// This controls a delay function later on that stutters the motors based on the delay amount
		// This was implemented to allow for greater fine motor control
		if (RD == '1')
		{
			power = 1;
 10a:	ee 24       	eor	r14, r14
 10c:	e3 94       	inc	r14
 10e:	f1 2c       	mov	r15, r1
		}
		else if (RD == '2')
		{
			power = 3;
 110:	0f 2e       	mov	r0, r31
 112:	f3 e0       	ldi	r31, 0x03	; 3
 114:	8f 2e       	mov	r8, r31
 116:	f0 2d       	mov	r31, r0
 118:	91 2c       	mov	r9, r1
		}
		else if (RD == '3')
		{
			power = 5;
 11a:	0f 2e       	mov	r0, r31
 11c:	f5 e0       	ldi	r31, 0x05	; 5
 11e:	6f 2e       	mov	r6, r31
 120:	f0 2d       	mov	r31, r0
 122:	71 2c       	mov	r7, r1
		}
		else if (RD == '4')
		{
			power = 10;
 124:	0f 2e       	mov	r0, r31
 126:	fa e0       	ldi	r31, 0x0A	; 10
 128:	4f 2e       	mov	r4, r31
 12a:	f0 2d       	mov	r31, r0
 12c:	51 2c       	mov	r5, r1
		{
			if (servo_input < 1700)
			{
				servo_input += 50;
			}
			OCR2B = servo_input;
 12e:	0f 2e       	mov	r0, r31
 130:	f2 ec       	ldi	r31, 0xC2	; 194
 132:	af 2e       	mov	r10, r31
 134:	b1 2c       	mov	r11, r1
 136:	f0 2d       	mov	r31, r0
 138:	22 24       	eor	r2, r2
 13a:	2a 94       	dec	r2
 13c:	33 24       	eor	r3, r3
 13e:	3a 94       	dec	r3
 140:	02 c0       	rjmp	.+4      	; 0x146 <main+0x5c>
 142:	c2 2d       	mov	r28, r2
 144:	d3 2d       	mov	r29, r3
 146:	ef e1       	ldi	r30, 0x1F	; 31
 148:	fe e4       	ldi	r31, 0x4E	; 78
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x60>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x66>
 150:	00 00       	nop
	// Takes input from serial and controls motors and servo
	while (1)
	{
		//// Receives and assigns received serial data to RD
		_delay_ms(10);
		UART_Receive();
 152:	89 df       	rcall	.-238    	; 0x66 <UART_Receive>
		char RD = UDR0;	
 154:	f8 01       	movw	r30, r16
 156:	80 81       	ld	r24, Z
		
		//// Setting Power
		// Power ranges from 1 to 5, 5 = full power,  1 = maximum fine motor control
		// This controls a delay function later on that stutters the motors based on the delay amount
		// This was implemented to allow for greater fine motor control
		if (RD == '1')
 158:	81 33       	cpi	r24, 0x31	; 49
 15a:	09 f4       	brne	.+2      	; 0x15e <main+0x74>
 15c:	5a c0       	rjmp	.+180    	; 0x212 <main+0x128>
		{
			power = 1;
		}
		else if (RD == '2')
 15e:	82 33       	cpi	r24, 0x32	; 50
 160:	09 f4       	brne	.+2      	; 0x164 <main+0x7a>
 162:	5a c0       	rjmp	.+180    	; 0x218 <main+0x12e>
		{
			power = 3;
		}
		else if (RD == '3')
 164:	83 33       	cpi	r24, 0x33	; 51
 166:	09 f4       	brne	.+2      	; 0x16a <main+0x80>
 168:	5a c0       	rjmp	.+180    	; 0x21e <main+0x134>
		{
			power = 5;
		}
		else if (RD == '4')
 16a:	84 33       	cpi	r24, 0x34	; 52
 16c:	09 f4       	brne	.+2      	; 0x170 <main+0x86>
 16e:	5a c0       	rjmp	.+180    	; 0x224 <main+0x13a>
		{
			power = 10;
		}
		else if (RD == '5')
 170:	85 33       	cpi	r24, 0x35	; 53
 172:	39 f3       	breq	.-50     	; 0x142 <main+0x58>
			power = -1;
		}
		
		//////// Motor control
		//// General standby mode (left motor B, right motor B, Servos hold angle)
		else if (RD == 'x')
 174:	88 37       	cpi	r24, 0x78	; 120
 176:	29 f4       	brne	.+10     	; 0x182 <main+0x98>
		{
			// Motor 1 (Bottom Motor - SB)
			PORTA &= ~(1<<PORTA1);
 178:	d9 98       	cbi	0x1b, 1	; 27
			PORTA &= ~(1<<PORTA2);
 17a:	da 98       	cbi	0x1b, 2	; 27
			
			// Motor 2 (Top Motor - SB)
			PORTA &= ~(1<<PORTA0);
 17c:	d8 98       	cbi	0x1b, 0	; 27
			PORTB &= ~(1<<PORTB1);
 17e:	c1 98       	cbi	0x18, 1	; 24
 180:	3c c0       	rjmp	.+120    	; 0x1fa <main+0x110>
		}
		
		//// Forward drive (left motor F, right motor F)
		else if (RD == 'w')
 182:	87 37       	cpi	r24, 0x77	; 119
 184:	29 f4       	brne	.+10     	; 0x190 <main+0xa6>
		{	
			//// Motor 1 (Bottom Motor - F)
			PORTA |= (1<<PORTA1);
 186:	d9 9a       	sbi	0x1b, 1	; 27
			PORTA &= ~(1<<PORTA2);
 188:	da 98       	cbi	0x1b, 2	; 27
			
			//// Motor 2 (Top Motor - F)
			PORTA |= (1<<PORTA0);
 18a:	d8 9a       	sbi	0x1b, 0	; 27
			PORTB &= ~(1<<PORTB1);
 18c:	c1 98       	cbi	0x18, 1	; 24
 18e:	35 c0       	rjmp	.+106    	; 0x1fa <main+0x110>
		}
		
		//// Reverse drive (left motor R, right motor R)
		else if(RD == 's')
 190:	83 37       	cpi	r24, 0x73	; 115
 192:	29 f4       	brne	.+10     	; 0x19e <main+0xb4>
		{
			//// Motor 1 (Bottom Motor - R)
			PORTA &= ~(1<<PORTA1);
 194:	d9 98       	cbi	0x1b, 1	; 27
			PORTA |= (1<<PORTA2);
 196:	da 9a       	sbi	0x1b, 2	; 27
			
			//// Motor 2 (Top Motor - R)
			PORTA &= ~(1<<PORTA0);
 198:	d8 98       	cbi	0x1b, 0	; 27
			PORTB |= (1<<PORTB1);
 19a:	c1 9a       	sbi	0x18, 1	; 24
 19c:	2e c0       	rjmp	.+92     	; 0x1fa <main+0x110>
		}
		
		//// Left turn (left motor R, right motor F)
		else if(RD == 'a')
 19e:	81 36       	cpi	r24, 0x61	; 97
 1a0:	29 f4       	brne	.+10     	; 0x1ac <main+0xc2>
		{
		//// Motor 1 (Bottom Motor - F)
		PORTA |= (1<<PORTA1);
 1a2:	d9 9a       	sbi	0x1b, 1	; 27
		PORTA &= ~(1<<PORTA2);
 1a4:	da 98       	cbi	0x1b, 2	; 27
		
		//// Motor 2 (Top Motor - R)
		PORTA &= ~(1<<PORTA0);
 1a6:	d8 98       	cbi	0x1b, 0	; 27
		PORTB |= (1<<PORTB1);	
 1a8:	c1 9a       	sbi	0x18, 1	; 24
 1aa:	27 c0       	rjmp	.+78     	; 0x1fa <main+0x110>
		}
		
		//// Right turn (left motor F, right motor R)
		else if(RD == 'd')
 1ac:	84 36       	cpi	r24, 0x64	; 100
 1ae:	29 f4       	brne	.+10     	; 0x1ba <main+0xd0>
		{
			// Motor 1 (Bottom Motor - R)
			PORTA &= ~(1<<PORTA1);
 1b0:	d9 98       	cbi	0x1b, 1	; 27
			PORTA |= (1<<PORTA2);
 1b2:	da 9a       	sbi	0x1b, 2	; 27
			
			// Motor 2 (Top Motor - F)
			PORTA |= (1<<PORTA0);
 1b4:	d8 9a       	sbi	0x1b, 0	; 27
			PORTB &= ~(1<<PORTB1);
 1b6:	c1 98       	cbi	0x18, 1	; 24
 1b8:	20 c0       	rjmp	.+64     	; 0x1fa <main+0x110>
		}
		
		//////// Gripper control
		//// Tightens gripper
		// Limits tightening action to not over-work the servo
		else if (RD == 'q')
 1ba:	81 37       	cpi	r24, 0x71	; 113
 1bc:	61 f4       	brne	.+24     	; 0x1d6 <main+0xec>
		{
			if (servo_input > 1050)
 1be:	fb e1       	ldi	r31, 0x1B	; 27
 1c0:	cf 16       	cp	r12, r31
 1c2:	f4 e0       	ldi	r31, 0x04	; 4
 1c4:	df 06       	cpc	r13, r31
 1c6:	1c f0       	brlt	.+6      	; 0x1ce <main+0xe4>
			{
				servo_input -= 50;
 1c8:	82 e3       	ldi	r24, 0x32	; 50
 1ca:	c8 1a       	sub	r12, r24
 1cc:	d1 08       	sbc	r13, r1
			}
				OCR2B = servo_input;
 1ce:	f5 01       	movw	r30, r10
 1d0:	d1 82       	std	Z+1, r13	; 0x01
 1d2:	c0 82       	st	Z, r12
 1d4:	12 c0       	rjmp	.+36     	; 0x1fa <main+0x110>
		}
		
		//// Loosens gripper
		// Limits loosening action to not let the gripper over extend
		else if (RD == 'e')
 1d6:	85 36       	cpi	r24, 0x65	; 101
 1d8:	61 f4       	brne	.+24     	; 0x1f2 <main+0x108>
		{
			if (servo_input < 1700)
 1da:	f4 ea       	ldi	r31, 0xA4	; 164
 1dc:	cf 16       	cp	r12, r31
 1de:	f6 e0       	ldi	r31, 0x06	; 6
 1e0:	df 06       	cpc	r13, r31
 1e2:	1c f4       	brge	.+6      	; 0x1ea <main+0x100>
			{
				servo_input += 50;
 1e4:	82 e3       	ldi	r24, 0x32	; 50
 1e6:	c8 0e       	add	r12, r24
 1e8:	d1 1c       	adc	r13, r1
			}
			OCR2B = servo_input;
 1ea:	f5 01       	movw	r30, r10
 1ec:	d1 82       	std	Z+1, r13	; 0x01
 1ee:	c0 82       	st	Z, r12
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <main+0x110>
		
		//// If no input is received, left motor brake, right motor brake, servos hold angle
		else
		{
			// Motor 1 (Bottom Motor - SB)
			PORTA &= ~(1<<PORTA1);
 1f2:	d9 98       	cbi	0x1b, 1	; 27
			PORTA &= ~(1<<PORTA2);
 1f4:	da 98       	cbi	0x1b, 2	; 27
			
			// Motor 2 (Top Motor - SB)
			PORTA &= ~(1<<PORTA0);
 1f6:	d8 98       	cbi	0x1b, 0	; 27
			PORTB &= ~(1<<PORTB1);
 1f8:	c1 98       	cbi	0x18, 1	; 24
		}
		
		//// Based on the power level setting
		// Runs a delay that allows for greater fine motor control
		if(power != -1)
 1fa:	cf 3f       	cpi	r28, 0xFF	; 255
 1fc:	ff ef       	ldi	r31, 0xFF	; 255
 1fe:	df 07       	cpc	r29, r31
 200:	09 f4       	brne	.+2      	; 0x204 <main+0x11a>
 202:	a1 cf       	rjmp	.-190    	; 0x146 <main+0x5c>
		{
			my_delay_ms(power);
 204:	ce 01       	movw	r24, r28
 206:	23 df       	rcall	.-442    	; 0x4e <my_delay_ms>
			PORTA &= ~(1<<PORTA1);
 208:	d9 98       	cbi	0x1b, 1	; 27
			PORTA &= ~(1<<PORTA2);
 20a:	da 98       	cbi	0x1b, 2	; 27
			
			PORTA &= ~(1<<PORTA0);
 20c:	d8 98       	cbi	0x1b, 0	; 27
			PORTB &= ~(1<<PORTB1);	
 20e:	c1 98       	cbi	0x18, 1	; 24
 210:	9a cf       	rjmp	.-204    	; 0x146 <main+0x5c>
		// Power ranges from 1 to 5, 5 = full power,  1 = maximum fine motor control
		// This controls a delay function later on that stutters the motors based on the delay amount
		// This was implemented to allow for greater fine motor control
		if (RD == '1')
		{
			power = 1;
 212:	ce 2d       	mov	r28, r14
 214:	df 2d       	mov	r29, r15
 216:	f6 cf       	rjmp	.-20     	; 0x204 <main+0x11a>
		}
		else if (RD == '2')
		{
			power = 3;
 218:	c8 2d       	mov	r28, r8
 21a:	d9 2d       	mov	r29, r9
 21c:	f3 cf       	rjmp	.-26     	; 0x204 <main+0x11a>
		}
		else if (RD == '3')
		{
			power = 5;
 21e:	c6 2d       	mov	r28, r6
 220:	d7 2d       	mov	r29, r7
 222:	f0 cf       	rjmp	.-32     	; 0x204 <main+0x11a>
		}
		else if (RD == '4')
		{
			power = 10;
 224:	c4 2d       	mov	r28, r4
 226:	d5 2d       	mov	r29, r5
 228:	ed cf       	rjmp	.-38     	; 0x204 <main+0x11a>

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
