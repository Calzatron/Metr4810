
Project_0_2_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000019d2  00001a66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000123  00800154  00800154  00001aba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7e  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f6  00000000  00000000  00002b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000980  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00003b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00003ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000091b  00000000  00000000  00004233  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004b4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_10>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_16>
      44:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_17>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      68:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      6c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 40       	sbci	r16, 0x00	; 0
      72:	7a 10       	cpse	r7, r10
      74:	f3 5a       	subi	r31, 0xA3	; 163
      76:	00 a0       	ldd	r0, Z+32	; 0x20
      78:	72 4e       	sbci	r23, 0xE2	; 226
      7a:	18 09       	sbc	r17, r8
      7c:	00 10       	cpse	r0, r0
      7e:	a5 d4       	rcall	.+2378   	; 0x9ca <main+0x126>
      80:	e8 00       	.word	0x00e8	; ????
      82:	00 e8       	ldi	r16, 0x80	; 128
      84:	76 48       	sbci	r23, 0x86	; 134
      86:	17 00       	.word	0x0017	; ????
      88:	00 e4       	ldi	r16, 0x40	; 64
      8a:	0b 54       	subi	r16, 0x4B	; 75
      8c:	02 00       	.word	0x0002	; ????
      8e:	00 ca       	rjmp	.-3072   	; 0xfffff490 <__eeprom_end+0xff7ef490>
      90:	9a 3b       	cpi	r25, 0xBA	; 186
      92:	00 00       	nop
      94:	00 e1       	ldi	r16, 0x10	; 16
      96:	f5 05       	cpc	r31, r5
      98:	00 00       	nop
      9a:	80 96       	adiw	r24, 0x20	; 32
      9c:	98 00       	.word	0x0098	; ????
      9e:	00 00       	nop
      a0:	40 42       	sbci	r20, 0x20	; 32
      a2:	0f 00       	.word	0x000f	; ????
      a4:	00 00       	nop
      a6:	a0 86       	std	Z+8, r10	; 0x08
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	10 27       	eor	r17, r16
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	e8 03       	fmulsu	r22, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	64 00       	.word	0x0064	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	0a 00       	.word	0x000a	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	2c 76       	andi	r18, 0x6C	; 108
      cc:	d8 88       	ldd	r13, Y+16	; 0x10
      ce:	dc 67       	ori	r29, 0x7C	; 124
      d0:	4f 08       	sbc	r4, r15
      d2:	23 df       	rcall	.-442    	; 0xffffff1a <__eeprom_end+0xff7eff1a>
      d4:	c1 df       	rcall	.-126    	; 0x58 <__SREG__+0x19>
      d6:	ae 59       	subi	r26, 0x9E	; 158
      d8:	e1 b1       	in	r30, 0x01	; 1
      da:	b7 96       	adiw	r30, 0x27	; 39
      dc:	e5 e3       	ldi	r30, 0x35	; 53
      de:	e4 53       	subi	r30, 0x34	; 52
      e0:	c6 3a       	cpi	r28, 0xA6	; 166
      e2:	e6 51       	subi	r30, 0x16	; 22
      e4:	99 76       	andi	r25, 0x69	; 105
      e6:	96 e8       	ldi	r25, 0x86	; 134
      e8:	e6 c2       	rjmp	.+1484   	; 0x6b6 <sonic+0x16a>
      ea:	84 26       	eor	r8, r20
      ec:	eb 89       	ldd	r30, Y+19	; 0x13
      ee:	8c 9b       	sbis	0x11, 4	; 17
      f0:	62 ed       	ldi	r22, 0xD2	; 210
      f2:	40 7c       	andi	r20, 0xC0	; 192
      f4:	6f fc       	.word	0xfc6f	; ????
      f6:	ef bc       	out	0x2f, r14	; 47
      f8:	9c 9f       	mul	r25, r28
      fa:	40 f2       	brcs	.-112    	; 0x8c <__trampolines_end+0x1c>
      fc:	ba a5       	ldd	r27, Y+42	; 0x2a
      fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     100:	f4 90       	lpm	r15, Z
     102:	05 5a       	subi	r16, 0xA5	; 165
     104:	2a f7       	brpl	.-54     	; 0xd0 <__trampolines_end+0x60>
     106:	5c 93       	st	X, r21
     108:	6b 6c       	ori	r22, 0xCB	; 203
     10a:	f9 67       	ori	r31, 0x79	; 121
     10c:	6d c1       	rjmp	.+730    	; 0x3e8 <__vector_16+0x66>
     10e:	1b fc       	.word	0xfc1b	; ????
     110:	e0 e4       	ldi	r30, 0x40	; 64
     112:	0d 47       	sbci	r16, 0x7D	; 125
     114:	fe f5       	brtc	.+126    	; 0x194 <.do_clear_bss_loop>
     116:	20 e6       	ldi	r18, 0x60	; 96
     118:	b5 00       	.word	0x00b5	; ????
     11a:	d0 ed       	ldi	r29, 0xD0	; 208
     11c:	90 2e       	mov	r9, r16
     11e:	03 00       	.word	0x0003	; ????
     120:	94 35       	cpi	r25, 0x54	; 84
     122:	77 05       	cpc	r23, r7
     124:	00 80       	ld	r0, Z
     126:	84 1e       	adc	r8, r20
     128:	08 00       	.word	0x0008	; ????
     12a:	00 20       	and	r0, r0
     12c:	4e 0a       	sbc	r4, r30
     12e:	00 00       	nop
     130:	00 c8       	rjmp	.-4096   	; 0xfffff132 <__eeprom_end+0xff7ef132>
     132:	0c 33       	cpi	r16, 0x3C	; 60
     134:	33 33       	cpi	r19, 0x33	; 51
     136:	33 0f       	add	r19, r19
     138:	98 6e       	ori	r25, 0xE8	; 232
     13a:	12 83       	std	Z+2, r17	; 0x02
     13c:	11 41       	sbci	r17, 0x11	; 17
     13e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     140:	21 14       	cp	r2, r1
     142:	89 3b       	cpi	r24, 0xB9	; 185
     144:	e6 55       	subi	r30, 0x56	; 86
     146:	16 cf       	rjmp	.-468    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     148:	fe e6       	ldi	r31, 0x6E	; 110
     14a:	db 18       	sub	r13, r11
     14c:	d1 84       	ldd	r13, Z+9	; 0x09
     14e:	4b 38       	cpi	r20, 0x8B	; 139
     150:	1b f7       	brvc	.-58     	; 0x118 <__trampolines_end+0xa8>
     152:	7c 1d       	adc	r23, r12
     154:	90 1d       	adc	r25, r0
     156:	a4 bb       	out	0x14, r26	; 20
     158:	e4 24       	eor	r14, r4
     15a:	20 32       	cpi	r18, 0x20	; 32
     15c:	84 72       	andi	r24, 0x24	; 36
     15e:	5e 22       	and	r5, r30
     160:	81 00       	.word	0x0081	; ????
     162:	c9 f1       	breq	.+114    	; 0x1d6 <uart_put_char+0x2e>
     164:	24 ec       	ldi	r18, 0xC4	; 196
     166:	a1 e5       	ldi	r26, 0x51	; 81
     168:	3d 27       	eor	r19, r29

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d4 e0       	ldi	r29, 0x04	; 4
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 ed       	ldi	r30, 0xD2	; 210
     17e:	f9 e1       	ldi	r31, 0x19	; 25
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a4 35       	cpi	r26, 0x54	; 84
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a4 e5       	ldi	r26, 0x54	; 84
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a7 37       	cpi	r26, 0x77	; 119
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <main>
     1a0:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <uart_put_char>:
}

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
     1a8:	cf 93       	push	r28
     1aa:	c8 2f       	mov	r28, r24
     1ac:	8a 30       	cpi	r24, 0x0A	; 10
     1ae:	19 f4       	brne	.+6      	; 0x1b6 <uart_put_char+0xe>
     1b0:	8d e0       	ldi	r24, 0x0D	; 13
     1b2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_put_char>
     1b6:	9f b7       	in	r25, 0x3f	; 63
     1b8:	90 78       	andi	r25, 0x80	; 128
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <uart_put_char+0x18>
     1bc:	99 23       	and	r25, r25
     1be:	19 f1       	breq	.+70     	; 0x206 <uart_put_char+0x5e>
     1c0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bytes_in_out_buffer>
     1c4:	8f 3f       	cpi	r24, 0xFF	; 255
     1c6:	d1 f3       	breq	.-12     	; 0x1bc <uart_put_char+0x14>
     1c8:	f8 94       	cli
     1ca:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <out_insert_pos>
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	8e 0f       	add	r24, r30
     1d2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <out_insert_pos>
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	e5 5a       	subi	r30, 0xA5	; 165
     1da:	fe 4f       	sbci	r31, 0xFE	; 254
     1dc:	c0 83       	st	Z, r28
     1de:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bytes_in_out_buffer>
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <bytes_in_out_buffer>
     1e8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <out_insert_pos>
     1ec:	8f 3f       	cpi	r24, 0xFF	; 255
     1ee:	11 f4       	brne	.+4      	; 0x1f4 <uart_put_char+0x4c>
     1f0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <out_insert_pos>
     1f4:	85 b5       	in	r24, 0x25	; 37
     1f6:	80 62       	ori	r24, 0x20	; 32
     1f8:	85 bd       	out	0x25, r24	; 37
     1fa:	99 23       	and	r25, r25
     1fc:	39 f0       	breq	.+14     	; 0x20c <uart_put_char+0x64>
     1fe:	78 94       	sei
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	05 c0       	rjmp	.+10     	; 0x210 <uart_put_char+0x68>
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	02 c0       	rjmp	.+4      	; 0x210 <uart_put_char+0x68>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <uart_get_char>:
     214:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <bytes_in_input_buffer>
     218:	88 23       	and	r24, r24
     21a:	e1 f3       	breq	.-8      	; 0x214 <uart_get_char>
     21c:	2f b7       	in	r18, 0x3f	; 63
     21e:	20 78       	andi	r18, 0x80	; 128
     220:	f8 94       	cli
     222:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <input_insert_pos>
     226:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <bytes_in_input_buffer>
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	83 1b       	sub	r24, r19
     22e:	91 09       	sbc	r25, r1
     230:	5a f4       	brpl	.+22     	; 0x248 <uart_get_char+0x34>
     232:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <input_insert_pos>
     236:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <bytes_in_input_buffer>
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	e8 1b       	sub	r30, r24
     23e:	f1 09       	sbc	r31, r1
     240:	e5 59       	subi	r30, 0x95	; 149
     242:	fd 4f       	sbci	r31, 0xFD	; 253
     244:	80 81       	ld	r24, Z
     246:	0a c0       	rjmp	.+20     	; 0x25c <uart_get_char+0x48>
     248:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <input_insert_pos>
     24c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <bytes_in_input_buffer>
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	e8 1b       	sub	r30, r24
     254:	f1 09       	sbc	r31, r1
     256:	e5 5a       	subi	r30, 0xA5	; 165
     258:	fd 4f       	sbci	r31, 0xFD	; 253
     25a:	80 81       	ld	r24, Z
     25c:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <bytes_in_input_buffer>
     260:	91 50       	subi	r25, 0x01	; 1
     262:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <bytes_in_input_buffer>
     266:	22 23       	and	r18, r18
     268:	09 f0       	breq	.+2      	; 0x26c <uart_get_char+0x58>
     26a:	78 94       	sei
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	08 95       	ret

00000270 <init_serial_stdio>:
     270:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <out_insert_pos>
     274:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <bytes_in_out_buffer>
     278:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <input_insert_pos>
     27c:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <bytes_in_input_buffer>
     280:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <input_overrun>
     284:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <__data_end>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	aa 1f       	adc	r26, r26
     292:	bb 1f       	adc	r27, r27
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	aa 1f       	adc	r26, r26
     29a:	bb 1f       	adc	r27, r27
     29c:	9c 01       	movw	r18, r24
     29e:	ad 01       	movw	r20, r26
     2a0:	22 0f       	add	r18, r18
     2a2:	33 1f       	adc	r19, r19
     2a4:	44 1f       	adc	r20, r20
     2a6:	55 1f       	adc	r21, r21
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	72 e1       	ldi	r23, 0x12	; 18
     2ac:	8a e7       	ldi	r24, 0x7A	; 122
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 6c 07 	call	0xed8	; 0xed8 <__divmodsi4>
     2b4:	ba 01       	movw	r22, r20
     2b6:	a9 01       	movw	r20, r18
     2b8:	4f 5f       	subi	r20, 0xFF	; 255
     2ba:	5f 4f       	sbci	r21, 0xFF	; 255
     2bc:	6f 4f       	sbci	r22, 0xFF	; 255
     2be:	7f 4f       	sbci	r23, 0xFF	; 255
     2c0:	db 01       	movw	r26, r22
     2c2:	ca 01       	movw	r24, r20
     2c4:	1a f4       	brpl	.+6      	; 0x2cc <init_serial_stdio+0x5c>
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	a1 1d       	adc	r26, r1
     2ca:	b1 1d       	adc	r27, r1
     2cc:	b5 95       	asr	r27
     2ce:	a7 95       	ror	r26
     2d0:	97 95       	ror	r25
     2d2:	87 95       	ror	r24
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	92 bd       	out	0x22, r25	; 34
     2d8:	81 bd       	out	0x21, r24	; 33
     2da:	88 e1       	ldi	r24, 0x18	; 24
     2dc:	85 bd       	out	0x25, r24	; 37
     2de:	85 b5       	in	r24, 0x25	; 37
     2e0:	80 68       	ori	r24, 0x80	; 128
     2e2:	85 bd       	out	0x25, r24	; 37
     2e4:	e1 e7       	ldi	r30, 0x71	; 113
     2e6:	f2 e0       	ldi	r31, 0x02	; 2
     2e8:	8a e0       	ldi	r24, 0x0A	; 10
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	93 83       	std	Z+3, r25	; 0x03
     2ee:	82 83       	std	Z+2, r24	; 0x02
     2f0:	91 83       	std	Z+1, r25	; 0x01
     2f2:	80 83       	st	Z, r24
     2f4:	08 95       	ret

000002f6 <serial_input_available>:
     2f6:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <bytes_in_input_buffer>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	91 11       	cpse	r25, r1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <serial_input_available+0xc>
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	08 95       	ret

00000304 <__vector_17>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	2f 93       	push	r18
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     318:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bytes_in_out_buffer>
     31c:	88 23       	and	r24, r24
     31e:	21 f1       	breq	.+72     	; 0x368 <__vector_17+0x64>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     320:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <out_insert_pos>
     324:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <bytes_in_out_buffer>
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	82 1b       	sub	r24, r18
     32c:	91 09       	sbc	r25, r1
     32e:	5a f4       	brpl	.+22     	; 0x346 <__vector_17+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     330:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <out_insert_pos>
     334:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	e8 1b       	sub	r30, r24
     33c:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     33e:	e6 5a       	subi	r30, 0xA6	; 166
     340:	fd 4f       	sbci	r31, 0xFD	; 253
     342:	90 81       	ld	r25, Z
     344:	0a c0       	rjmp	.+20     	; 0x35a <__vector_17+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     346:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <out_insert_pos>
     34a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bytes_in_out_buffer>
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	e8 1b       	sub	r30, r24
     352:	f1 09       	sbc	r31, r1
     354:	e5 5a       	subi	r30, 0xA5	; 165
     356:	fe 4f       	sbci	r31, 0xFE	; 254
     358:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     35a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bytes_in_out_buffer>
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     364:	90 bd       	out	0x20, r25	; 32
     366:	03 c0       	rjmp	.+6      	; 0x36e <__vector_17+0x6a>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     368:	85 b5       	in	r24, 0x25	; 37
     36a:	8f 7d       	andi	r24, 0xDF	; 223
     36c:	85 bd       	out	0x25, r24	; 37
	}
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	9f 91       	pop	r25
     374:	8f 91       	pop	r24
     376:	2f 91       	pop	r18
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <__vector_16>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     382:	1f 92       	push	r1
     384:	0f 92       	push	r0
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	0f 92       	push	r0
     38a:	11 24       	eor	r1, r1
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	5f 93       	push	r21
     394:	6f 93       	push	r22
     396:	7f 93       	push	r23
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	cf 93       	push	r28
     3a2:	ef 93       	push	r30
     3a4:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     3a6:	c0 b5       	in	r28, 0x20	; 32
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     3a8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     3ac:	88 23       	and	r24, r24
     3ae:	49 f0       	breq	.+18     	; 0x3c2 <__vector_16+0x40>
     3b0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bytes_in_out_buffer>
     3b4:	8f 3f       	cpi	r24, 0xFF	; 255
     3b6:	29 f0       	breq	.+10     	; 0x3c2 <__vector_16+0x40>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	8c 2f       	mov	r24, r28
     3be:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     3c2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <bytes_in_input_buffer>
     3c6:	80 31       	cpi	r24, 0x10	; 16
     3c8:	20 f0       	brcs	.+8      	; 0x3d2 <__vector_16+0x50>
		input_overrun = 1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <input_overrun>
     3d0:	18 c0       	rjmp	.+48     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     3d2:	cd 30       	cpi	r28, 0x0D	; 13
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <__vector_16+0x56>
			c = '\n';
     3d6:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     3d8:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <input_insert_pos>
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	8e 0f       	add	r24, r30
     3e0:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <input_insert_pos>
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e5 5a       	subi	r30, 0xA5	; 165
     3e8:	fd 4f       	sbci	r31, 0xFD	; 253
     3ea:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     3ec:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <bytes_in_input_buffer>
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     3f6:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <input_insert_pos>
     3fa:	80 31       	cpi	r24, 0x10	; 16
     3fc:	11 f4       	brne	.+4      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     3fe:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <input_insert_pos>
		}
	}
}
     402:	ff 91       	pop	r31
     404:	ef 91       	pop	r30
     406:	cf 91       	pop	r28
     408:	bf 91       	pop	r27
     40a:	af 91       	pop	r26
     40c:	9f 91       	pop	r25
     40e:	8f 91       	pop	r24
     410:	7f 91       	pop	r23
     412:	6f 91       	pop	r22
     414:	5f 91       	pop	r21
     416:	4f 91       	pop	r20
     418:	3f 91       	pop	r19
     41a:	2f 91       	pop	r18
     41c:	0f 90       	pop	r0
     41e:	0f be       	out	0x3f, r0	; 63
     420:	0f 90       	pop	r0
     422:	1f 90       	pop	r1
     424:	18 95       	reti

00000426 <pwm_initialiser>:
   PWM Output  = Non Inverted

   */
	// set timer / counter
	
	TCNT1 = 0;
     426:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
     42a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
	OCR1A = 60000;
     42e:	80 e6       	ldi	r24, 0x60	; 96
     430:	9a ee       	ldi	r25, 0xEA	; 234
     432:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__EEPROM_REGION_LENGTH__+0x7f006d>
     436:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__EEPROM_REGION_LENGTH__+0x7f006c>
	OCR1B = 60000;
     43a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__EEPROM_REGION_LENGTH__+0x7f006b>
     43e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__EEPROM_REGION_LENGTH__+0x7f006a>
	
	DDRA |= (1<<PORTA6);
     442:	86 9a       	sbi	0x10, 6	; 16
	DDRB |= (1<<PORTB3);
     444:	63 9a       	sbi	0x0c, 3	; 12

	
	//TCCR2A |= (1<<COM2A1) | (1<<WGM20);
	//TCCR2B |= (1<<CS20) | (1<<WGM22);
	TCCR1A |= (1<<COM1A1) | (COM1B1) | (1<<WGM10);
     446:	e2 e7       	ldi	r30, 0x72	; 114
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	85 68       	ori	r24, 0x85	; 133
     44e:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10) | (1<<WGM12);
     450:	e1 e7       	ldi	r30, 0x71	; 113
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	89 60       	ori	r24, 0x09	; 9
     458:	80 83       	st	Z, r24
     45a:	08 95       	ret

0000045c <makeInfo>:
}


info* makeInfo(void){
	/* initialize the game's information struct */
	info* info_ptr = malloc(sizeof(info));
     45c:	88 e0       	ldi	r24, 0x08	; 8
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 cd 07 	call	0xf9a	; 0xf9a <malloc>
	return info_ptr;
}
     464:	08 95       	ret

00000466 <custom_delay>:


void custom_delay(uint32_t ticks){
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	6b 01       	movw	r12, r22
     470:	7c 01       	movw	r14, r24
	/*	Custom delay function, waits for timer to change by 'ticks'
	*	note that tcnt0 updates every 0.002 seconds */
	
	uint32_t current_time;
	current_time = get_tcnt0_ticks();
     472:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
	while((current_time + ticks) > get_tcnt0_ticks()){
     476:	c6 0e       	add	r12, r22
     478:	d7 1e       	adc	r13, r23
     47a:	e8 1e       	adc	r14, r24
     47c:	f9 1e       	adc	r15, r25
     47e:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
     482:	6c 15       	cp	r22, r12
     484:	7d 05       	cpc	r23, r13
     486:	8e 05       	cpc	r24, r14
     488:	9f 05       	cpc	r25, r15
     48a:	c8 f3       	brcs	.-14     	; 0x47e <custom_delay+0x18>
		;
	}
}
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	df 90       	pop	r13
     492:	cf 90       	pop	r12
     494:	08 95       	ret

00000496 <initialise>:
		}
	}
}


void initialise(info* info_ptr){
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
	
	
	/* sensor pins	*/
	DDRC |= (1<<TRIG0);
     49e:	44 9a       	sbi	0x08, 4	; 8
	DDRC &= ~(1<<ECHO0);
     4a0:	45 98       	cbi	0x08, 5	; 8
	
	DDRA |= (1<<TRIG1);
     4a2:	81 9a       	sbi	0x10, 1	; 16
	DDRA &= ~(1<<ECHO1);
     4a4:	82 98       	cbi	0x10, 2	; 16

	/* transmission pins */
	DDRB |= (1<<PORTB0);
     4a6:	60 9a       	sbi	0x0c, 0	; 12
	DDRA &= ~(1<<PINA7);
     4a8:	87 98       	cbi	0x10, 7	; 16

	/*	Motor pins */
	DDRA |= (1<<PORTA6)|(1<<PORTA3)|(1<<PORTA4);
     4aa:	80 b3       	in	r24, 0x10	; 16
     4ac:	88 65       	ori	r24, 0x58	; 88
     4ae:	80 bb       	out	0x10, r24	; 16
	DDRB |= (1<<PORTB3);
     4b0:	63 9a       	sbi	0x0c, 3	; 12
	DDRC |= (1<<PORTC1)|(1<<PORTC2);
     4b2:	88 b1       	in	r24, 0x08	; 8
     4b4:	86 60       	ori	r24, 0x06	; 6
     4b6:	88 b9       	out	0x08, r24	; 8
	
	/* initialise timers / pwm */
	pwm_initialiser();				/* initially OCR2A = 0 */
     4b8:	0e 94 13 02 	call	0x426	; 0x426 <pwm_initialiser>
	init_tcnt0(!FAST);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 37 05 	call	0xa6e	; 0xa6e <init_tcnt0>
	init_serial_stdio(9600,0);
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	60 e8       	ldi	r22, 0x80	; 128
     4c6:	75 e2       	ldi	r23, 0x25	; 37
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 38 01 	call	0x270	; 0x270 <init_serial_stdio>

	/* set Global Interrupt Enable flag */
	srand(get_tcnt0_ticks());
     4d0:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
     4d4:	cb 01       	movw	r24, r22
     4d6:	0e 94 41 09 	call	0x1282	; 0x1282 <srand>
	sei();
     4da:	78 94       	sei


	/* wait for communication to start from host */
	custom_delay(100);
     4dc:	64 e6       	ldi	r22, 0x64	; 100
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 33 02 	call	0x466	; 0x466 <custom_delay>
			////custom_delay(10);
	//}
	
	/****************************************************************************************************************************************************************/
	
	uint8_t check = 0;
     4e8:	c0 e0       	ldi	r28, 0x00	; 0
	while (check < 6){
		if (serial_input_available()){
			char in = fgetc(stdin);
     4ea:	01 e7       	ldi	r16, 0x71	; 113
     4ec:	12 e0       	ldi	r17, 0x02	; 2
	
	/****************************************************************************************************************************************************************/
	
	uint8_t check = 0;
	while (check < 6){
		if (serial_input_available()){
     4ee:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <serial_input_available>
     4f2:	88 23       	and	r24, r24
     4f4:	91 f0       	breq	.+36     	; 0x51a <__stack+0x1b>
			char in = fgetc(stdin);
     4f6:	f8 01       	movw	r30, r16
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fgetc>
     500:	d8 2f       	mov	r29, r24
			fputc(in, stdout);
     502:	f8 01       	movw	r30, r16
     504:	62 81       	ldd	r22, Z+2	; 0x02
     506:	73 81       	ldd	r23, Z+3	; 0x03
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 bb 09 	call	0x1376	; 0x1376 <fputc>
			if (in == '\n'){
     50e:	da 30       	cpi	r29, 0x0A	; 10
     510:	31 f0       	breq	.+12     	; 0x51e <__stack+0x1f>
				check = 10;
				break;
			}
			++check;
     512:	cf 5f       	subi	r28, 0xFF	; 255
	//}
	
	/****************************************************************************************************************************************************************/
	
	uint8_t check = 0;
	while (check < 6){
     514:	c6 30       	cpi	r28, 0x06	; 6
     516:	19 f0       	breq	.+6      	; 0x51e <__stack+0x1f>
     518:	ea cf       	rjmp	.-44     	; 0x4ee <initialise+0x58>
     51a:	c6 30       	cpi	r28, 0x06	; 6
     51c:	40 f3       	brcs	.-48     	; 0x4ee <initialise+0x58>
				break;
			}
			++check;
		}
	}
	custom_delay(1000);
     51e:	68 ee       	ldi	r22, 0xE8	; 232
     520:	73 e0       	ldi	r23, 0x03	; 3
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 33 02 	call	0x466	; 0x466 <custom_delay>
	fputs("Float ready\n", stdout);
     52a:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <__iob+0x2>
     52e:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <__iob+0x3>
     532:	4c e0       	ldi	r20, 0x0C	; 12
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	88 e1       	ldi	r24, 0x18	; 24
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 21 0a 	call	0x1442	; 0x1442 <fwrite>
	

}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <sonic>:
	if(interrupts_on) {
		sei();
	}
}

uint8_t sonic(info* info_ptr){
     54c:	7f 92       	push	r7
     54e:	8f 92       	push	r8
     550:	9f 92       	push	r9
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	8c 01       	movw	r16, r24
	uint32_t duration;
	double distance;
	uint8_t returnValue = 0;

	// sensor 0 first
	PORTC &= ~(1<<TRIG0);
     568:	4c 98       	cbi	0x09, 4	; 9
	custom_delay(400);
     56a:	60 e9       	ldi	r22, 0x90	; 144
     56c:	71 e0       	ldi	r23, 0x01	; 1
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 33 02 	call	0x466	; 0x466 <custom_delay>
	PORTC |= (1<<TRIG0);
     576:	4c 9a       	sbi	0x09, 4	; 9
	custom_delay(50);
     578:	62 e3       	ldi	r22, 0x32	; 50
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 33 02 	call	0x466	; 0x466 <custom_delay>
	PORTC &= ~(1<<TRIG0);
     584:	4c 98       	cbi	0x09, 4	; 9
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	uint32_t currentTime = get_tcnt0_ticks();
     586:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
uint8_t sonic(info* info_ptr){
	/* sends the sensor readings through serial, returns 0 on successfully 
	*  retrieving data from sensor */
	uint32_t duration;
	double distance;
	uint8_t returnValue = 0;
     58a:	c0 e0       	ldi	r28, 0x00	; 0
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	uint32_t currentTime = get_tcnt0_ticks();
	uint32_t delay = 800;
	while ((PINC & (1<<ECHO0)) == 0x00){
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
     58c:	6b 01       	movw	r12, r22
     58e:	7c 01       	movw	r14, r24
     590:	20 e2       	ldi	r18, 0x20	; 32
     592:	c2 0e       	add	r12, r18
     594:	23 e0       	ldi	r18, 0x03	; 3
     596:	d2 1e       	adc	r13, r18
     598:	e1 1c       	adc	r14, r1
     59a:	f1 1c       	adc	r15, r1
			returnValue = 1;
     59c:	d1 e0       	ldi	r29, 0x01	; 1
	PORTC &= ~(1<<TRIG0);
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	uint32_t currentTime = get_tcnt0_ticks();
	uint32_t delay = 800;
	while ((PINC & (1<<ECHO0)) == 0x00){
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <sonic+0x64>
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
     5a0:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
     5a4:	c6 16       	cp	r12, r22
     5a6:	d7 06       	cpc	r13, r23
     5a8:	e8 06       	cpc	r14, r24
     5aa:	f9 06       	cpc	r15, r25
     5ac:	08 f4       	brcc	.+2      	; 0x5b0 <sonic+0x64>
			returnValue = 1;
     5ae:	cd 2f       	mov	r28, r29
	PORTC &= ~(1<<TRIG0);
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	uint32_t currentTime = get_tcnt0_ticks();
	uint32_t delay = 800;
	while ((PINC & (1<<ECHO0)) == 0x00){
     5b0:	3d 9b       	sbis	0x07, 5	; 7
     5b2:	f6 cf       	rjmp	.-20     	; 0x5a0 <sonic+0x54>
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
			returnValue = 1;
		}
	}
	uint32_t start = get_tcnt0_ticks();
     5b4:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
     5b8:	4b 01       	movw	r8, r22
     5ba:	5c 01       	movw	r10, r24
	//uint16_t pulse = get_pulse() * 2 / 100;
	while ((PINC & (1<<ECHO0)) && !(returnValue)){
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
			returnValue = 1;
     5bc:	6b 01       	movw	r12, r22
     5be:	7c 01       	movw	r14, r24
     5c0:	80 e2       	ldi	r24, 0x20	; 32
     5c2:	c8 0e       	add	r12, r24
     5c4:	83 e0       	ldi	r24, 0x03	; 3
     5c6:	d8 1e       	adc	r13, r24
     5c8:	e1 1c       	adc	r14, r1
     5ca:	f1 1c       	adc	r15, r1
     5cc:	d1 e0       	ldi	r29, 0x01	; 1
     5ce:	71 2c       	mov	r7, r1
			returnValue = 1;
		}
	}
	uint32_t start = get_tcnt0_ticks();
	//uint16_t pulse = get_pulse() * 2 / 100;
	while ((PINC & (1<<ECHO0)) && !(returnValue)){
     5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <sonic+0x98>
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
     5d2:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
			returnValue = 1;
     5d6:	cd 2f       	mov	r28, r29
     5d8:	c6 16       	cp	r12, r22
     5da:	d7 06       	cpc	r13, r23
     5dc:	e8 06       	cpc	r14, r24
     5de:	f9 06       	cpc	r15, r25
     5e0:	08 f0       	brcs	.+2      	; 0x5e4 <sonic+0x98>
     5e2:	c7 2d       	mov	r28, r7
			returnValue = 1;
		}
	}
	uint32_t start = get_tcnt0_ticks();
	//uint16_t pulse = get_pulse() * 2 / 100;
	while ((PINC & (1<<ECHO0)) && !(returnValue)){
     5e4:	3d 9b       	sbis	0x07, 5	; 7
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <sonic+0xa2>
     5e8:	cc 23       	and	r28, r28
     5ea:	99 f3       	breq	.-26     	; 0x5d2 <sonic+0x86>
     5ec:	1b c0       	rjmp	.+54     	; 0x624 <sonic+0xd8>
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
			returnValue = 1;
		}
	}
	if (!returnValue){
     5ee:	c1 11       	cpse	r28, r1
     5f0:	19 c0       	rjmp	.+50     	; 0x624 <sonic+0xd8>
		duration = (get_tcnt0_ticks() - start);
     5f2:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
		/* multiply by the speed of sound and half for one way travel, then send to serial. */
		distance = duration*3.4/2;
		info_ptr->sonicD0 = distance;
     5f6:	68 19       	sub	r22, r8
     5f8:	79 09       	sbc	r23, r9
     5fa:	8a 09       	sbc	r24, r10
     5fc:	9b 09       	sbc	r25, r11
     5fe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__floatunsisf>
     602:	2a e9       	ldi	r18, 0x9A	; 154
     604:	39 e9       	ldi	r19, 0x99	; 153
     606:	49 e5       	ldi	r20, 0x59	; 89
     608:	50 e4       	ldi	r21, 0x40	; 64
     60a:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	5f e3       	ldi	r21, 0x3F	; 63
     616:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
     61a:	f8 01       	movw	r30, r16
     61c:	60 83       	st	Z, r22
     61e:	71 83       	std	Z+1, r23	; 0x01
     620:	82 83       	std	Z+2, r24	; 0x02
     622:	93 83       	std	Z+3, r25	; 0x03
		
	}
	
	// sensor 1 now
	PORTA &= ~(1<<TRIG1);
     624:	89 98       	cbi	0x11, 1	; 17
	custom_delay(400);
     626:	60 e9       	ldi	r22, 0x90	; 144
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 33 02 	call	0x466	; 0x466 <custom_delay>
	PORTA |= (1<<TRIG1);
     632:	89 9a       	sbi	0x11, 1	; 17
	custom_delay(50);
     634:	62 e3       	ldi	r22, 0x32	; 50
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 33 02 	call	0x466	; 0x466 <custom_delay>
	PORTA &= ~(1<<TRIG1);
     640:	89 98       	cbi	0x11, 1	; 17
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	currentTime = get_tcnt0_ticks();
     642:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
	while ((PINA & (1<<ECHO1)) == 0x00){
		
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
     646:	6b 01       	movw	r12, r22
     648:	7c 01       	movw	r14, r24
     64a:	f0 e2       	ldi	r31, 0x20	; 32
     64c:	cf 0e       	add	r12, r31
     64e:	f3 e0       	ldi	r31, 0x03	; 3
     650:	df 1e       	adc	r13, r31
     652:	e1 1c       	adc	r14, r1
     654:	f1 1c       	adc	r15, r1
			returnValue = 2;
     656:	d2 e0       	ldi	r29, 0x02	; 2
	custom_delay(50);
	PORTA &= ~(1<<TRIG1);
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	currentTime = get_tcnt0_ticks();
	while ((PINA & (1<<ECHO1)) == 0x00){
     658:	08 c0       	rjmp	.+16     	; 0x66a <sonic+0x11e>
		
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
     65a:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
     65e:	c6 16       	cp	r12, r22
     660:	d7 06       	cpc	r13, r23
     662:	e8 06       	cpc	r14, r24
     664:	f9 06       	cpc	r15, r25
     666:	08 f4       	brcc	.+2      	; 0x66a <sonic+0x11e>
			returnValue = 2;
     668:	cd 2f       	mov	r28, r29
	custom_delay(50);
	PORTA &= ~(1<<TRIG1);
	
	//wait for the echo pin to go high, time the duration, calculate and transmit result
	currentTime = get_tcnt0_ticks();
	while ((PINA & (1<<ECHO1)) == 0x00){
     66a:	7a 9b       	sbis	0x0f, 2	; 15
     66c:	f6 cf       	rjmp	.-20     	; 0x65a <sonic+0x10e>
		//wait for echo pin to go high, but don't hold for too long
		if (currentTime + delay < get_tcnt0_ticks()){
			returnValue = 2;
		}
	}
	start = get_tcnt0_ticks();
     66e:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
     672:	4b 01       	movw	r8, r22
     674:	5c 01       	movw	r10, r24
	while ((PINA & (1<<ECHO1)) && (returnValue != 2)){
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
     676:	6b 01       	movw	r12, r22
     678:	7c 01       	movw	r14, r24
     67a:	20 e2       	ldi	r18, 0x20	; 32
     67c:	c2 0e       	add	r12, r18
     67e:	23 e0       	ldi	r18, 0x03	; 3
     680:	d2 1e       	adc	r13, r18
     682:	e1 1c       	adc	r14, r1
     684:	f1 1c       	adc	r15, r1
			returnValue = 2;
     686:	d2 e0       	ldi	r29, 0x02	; 2
		if (currentTime + delay < get_tcnt0_ticks()){
			returnValue = 2;
		}
	}
	start = get_tcnt0_ticks();
	while ((PINA & (1<<ECHO1)) && (returnValue != 2)){
     688:	08 c0       	rjmp	.+16     	; 0x69a <sonic+0x14e>
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
     68a:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
     68e:	c6 16       	cp	r12, r22
     690:	d7 06       	cpc	r13, r23
     692:	e8 06       	cpc	r14, r24
     694:	f9 06       	cpc	r15, r25
     696:	08 f4       	brcc	.+2      	; 0x69a <sonic+0x14e>
			returnValue = 2;
     698:	cd 2f       	mov	r28, r29
		if (currentTime + delay < get_tcnt0_ticks()){
			returnValue = 2;
		}
	}
	start = get_tcnt0_ticks();
	while ((PINA & (1<<ECHO1)) && (returnValue != 2)){
     69a:	7a 9b       	sbis	0x0f, 2	; 15
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <sonic+0x158>
     69e:	c2 30       	cpi	r28, 0x02	; 2
     6a0:	a1 f7       	brne	.-24     	; 0x68a <sonic+0x13e>
     6a2:	1b c0       	rjmp	.+54     	; 0x6da <sonic+0x18e>
		//wait for echo pin to go low, but don't hold for too long
		if (start + delay < get_tcnt0_ticks()){
			returnValue = 2;
		}
	}
	if (returnValue != 2){
     6a4:	c2 30       	cpi	r28, 0x02	; 2
     6a6:	c9 f0       	breq	.+50     	; 0x6da <sonic+0x18e>
		duration = (get_tcnt0_ticks() - start);
     6a8:	0e 94 57 05 	call	0xaae	; 0xaae <get_tcnt0_ticks>
		// multiply by the speed of sound and half for one way travel, then send to serial.
		distance = duration*3.4/2;
		info_ptr->sonicD1 = distance;
     6ac:	68 19       	sub	r22, r8
     6ae:	79 09       	sbc	r23, r9
     6b0:	8a 09       	sbc	r24, r10
     6b2:	9b 09       	sbc	r25, r11
     6b4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__floatunsisf>
     6b8:	2a e9       	ldi	r18, 0x9A	; 154
     6ba:	39 e9       	ldi	r19, 0x99	; 153
     6bc:	49 e5       	ldi	r20, 0x59	; 89
     6be:	50 e4       	ldi	r21, 0x40	; 64
     6c0:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	5f e3       	ldi	r21, 0x3F	; 63
     6cc:	0e 94 f7 06 	call	0xdee	; 0xdee <__mulsf3>
     6d0:	f8 01       	movw	r30, r16
     6d2:	64 83       	std	Z+4, r22	; 0x04
     6d4:	75 83       	std	Z+5, r23	; 0x05
     6d6:	86 83       	std	Z+6, r24	; 0x06
     6d8:	97 83       	std	Z+7, r25	; 0x07
	}
	// all succeeded
	return 0;
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	bf 90       	pop	r11
     6ee:	af 90       	pop	r10
     6f0:	9f 90       	pop	r9
     6f2:	8f 90       	pop	r8
     6f4:	7f 90       	pop	r7
     6f6:	08 95       	ret

000006f8 <do_sonic>:
		;
	}
}


void do_sonic(info* info_ptr){
     6f8:	2f 92       	push	r2
     6fa:	3f 92       	push	r3
     6fc:	4f 92       	push	r4
     6fe:	5f 92       	push	r5
     700:	6f 92       	push	r6
     702:	7f 92       	push	r7
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	6b 97       	sbiw	r28, 0x1b	; 27
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	8c 01       	movw	r16, r24
	/* performs moving average filter on sensor data
	*  updates stored values in struct, 0 if unsuccessful */
	
	/*	speed up clock for sensor readings */
	uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
     72e:	ff b6       	in	r15, 0x3f	; 63
	cli();
     730:	f8 94       	cli
	init_tcnt0(FAST);
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 37 05 	call	0xa6e	; 0xa6e <init_tcnt0>
	if(interrupts_on) {
     738:	ff 20       	and	r15, r15
     73a:	0c f0       	brlt	.+2      	; 0x73e <do_sonic+0x46>
     73c:	8a c0       	rjmp	.+276    	; 0x852 <do_sonic+0x15a>
		sei();
     73e:	78 94       	sei
     740:	88 c0       	rjmp	.+272    	; 0x852 <do_sonic+0x15a>
	double sonicDist0[3];
	double sonicDist1[3];
	uint8_t check[3];
	for (int i = 0; i < 3; i++){

		check[i] = sonic(info_ptr);
     742:	c8 01       	movw	r24, r16
     744:	0e 94 a6 02 	call	0x54c	; 0x54c <sonic>
     748:	f1 01       	movw	r30, r2
     74a:	81 93       	st	Z+, r24
     74c:	1f 01       	movw	r2, r30
		sonicDist0[i] = info_ptr->sonicD0;
     74e:	f8 01       	movw	r30, r16
     750:	80 81       	ld	r24, Z
     752:	91 81       	ldd	r25, Z+1	; 0x01
     754:	a2 81       	ldd	r26, Z+2	; 0x02
     756:	b3 81       	ldd	r27, Z+3	; 0x03
     758:	f5 01       	movw	r30, r10
     75a:	81 93       	st	Z+, r24
     75c:	91 93       	st	Z+, r25
     75e:	a1 93       	st	Z+, r26
     760:	b1 93       	st	Z+, r27
     762:	5f 01       	movw	r10, r30
		sonicDist1[i] = info_ptr->sonicD1;
     764:	f8 01       	movw	r30, r16
     766:	84 81       	ldd	r24, Z+4	; 0x04
     768:	95 81       	ldd	r25, Z+5	; 0x05
     76a:	a6 81       	ldd	r26, Z+6	; 0x06
     76c:	b7 81       	ldd	r27, Z+7	; 0x07
     76e:	f2 01       	movw	r30, r4
     770:	81 93       	st	Z+, r24
     772:	91 93       	st	Z+, r25
     774:	a1 93       	st	Z+, r26
     776:	b1 93       	st	Z+, r27
     778:	2f 01       	movw	r4, r30
		sei();
	}
	double sonicDist0[3];
	double sonicDist1[3];
	uint8_t check[3];
	for (int i = 0; i < 3; i++){
     77a:	a8 14       	cp	r10, r8
     77c:	b9 04       	cpc	r11, r9
     77e:	09 f7       	brne	.-62     	; 0x742 <do_sonic+0x4a>
		check[i] = sonic(info_ptr);
		sonicDist0[i] = info_ptr->sonicD0;
		sonicDist1[i] = info_ptr->sonicD1;

	}
	info_ptr->sonicD0 = 0;
     780:	f8 01       	movw	r30, r16
     782:	10 82       	st	Z, r1
     784:	11 82       	std	Z+1, r1	; 0x01
     786:	12 82       	std	Z+2, r1	; 0x02
     788:	13 82       	std	Z+3, r1	; 0x03
	info_ptr->sonicD1 = 0;
     78a:	14 82       	std	Z+4, r1	; 0x04
     78c:	15 82       	std	Z+5, r1	; 0x05
     78e:	16 82       	std	Z+6, r1	; 0x06
     790:	17 82       	std	Z+7, r1	; 0x07
	uint8_t count = 0;
     792:	b1 2c       	mov	r11, r1
	for (int j = 0; j < 3; j++){
		if(!check[j]){
     794:	f3 01       	movw	r30, r6
     796:	81 91       	ld	r24, Z+
     798:	3f 01       	movw	r6, r30
     79a:	81 11       	cpse	r24, r1
     79c:	23 c0       	rjmp	.+70     	; 0x7e4 <do_sonic+0xec>
			info_ptr->sonicD0 += sonicDist0[j];
     79e:	f7 01       	movw	r30, r14
     7a0:	20 81       	ld	r18, Z
     7a2:	31 81       	ldd	r19, Z+1	; 0x01
     7a4:	42 81       	ldd	r20, Z+2	; 0x02
     7a6:	53 81       	ldd	r21, Z+3	; 0x03
     7a8:	f8 01       	movw	r30, r16
     7aa:	60 81       	ld	r22, Z
     7ac:	71 81       	ldd	r23, Z+1	; 0x01
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	93 81       	ldd	r25, Z+3	; 0x03
     7b2:	0e 94 8b 05 	call	0xb16	; 0xb16 <__addsf3>
     7b6:	f8 01       	movw	r30, r16
     7b8:	60 83       	st	Z, r22
     7ba:	71 83       	std	Z+1, r23	; 0x01
     7bc:	82 83       	std	Z+2, r24	; 0x02
     7be:	93 83       	std	Z+3, r25	; 0x03
			info_ptr->sonicD1 += sonicDist1[j];
     7c0:	f6 01       	movw	r30, r12
     7c2:	20 81       	ld	r18, Z
     7c4:	31 81       	ldd	r19, Z+1	; 0x01
     7c6:	42 81       	ldd	r20, Z+2	; 0x02
     7c8:	53 81       	ldd	r21, Z+3	; 0x03
     7ca:	f8 01       	movw	r30, r16
     7cc:	64 81       	ldd	r22, Z+4	; 0x04
     7ce:	75 81       	ldd	r23, Z+5	; 0x05
     7d0:	86 81       	ldd	r24, Z+6	; 0x06
     7d2:	97 81       	ldd	r25, Z+7	; 0x07
     7d4:	0e 94 8b 05 	call	0xb16	; 0xb16 <__addsf3>
     7d8:	f8 01       	movw	r30, r16
     7da:	64 83       	std	Z+4, r22	; 0x04
     7dc:	75 83       	std	Z+5, r23	; 0x05
     7de:	86 83       	std	Z+6, r24	; 0x06
     7e0:	97 83       	std	Z+7, r25	; 0x07
			++count;
     7e2:	b3 94       	inc	r11
     7e4:	f4 e0       	ldi	r31, 0x04	; 4
     7e6:	ef 0e       	add	r14, r31
     7e8:	f1 1c       	adc	r15, r1
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	c8 0e       	add	r12, r24
     7ee:	d1 1c       	adc	r13, r1

	}
	info_ptr->sonicD0 = 0;
	info_ptr->sonicD1 = 0;
	uint8_t count = 0;
	for (int j = 0; j < 3; j++){
     7f0:	e8 14       	cp	r14, r8
     7f2:	f9 04       	cpc	r15, r9
     7f4:	79 f6       	brne	.-98     	; 0x794 <do_sonic+0x9c>
			info_ptr->sonicD0 += sonicDist0[j];
			info_ptr->sonicD1 += sonicDist1[j];
			++count;
		}
	}
	if (count > 0){
     7f6:	bb 20       	and	r11, r11
     7f8:	19 f1       	breq	.+70     	; 0x840 <do_sonic+0x148>
		info_ptr->sonicD0 = info_ptr->sonicD0/count;
     7fa:	6b 2d       	mov	r22, r11
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__floatsisf>
     806:	6b 01       	movw	r12, r22
     808:	7c 01       	movw	r14, r24
     80a:	9b 01       	movw	r18, r22
     80c:	ac 01       	movw	r20, r24
     80e:	f8 01       	movw	r30, r16
     810:	60 81       	ld	r22, Z
     812:	71 81       	ldd	r23, Z+1	; 0x01
     814:	82 81       	ldd	r24, Z+2	; 0x02
     816:	93 81       	ldd	r25, Z+3	; 0x03
     818:	0e 94 f7 05 	call	0xbee	; 0xbee <__divsf3>
     81c:	f8 01       	movw	r30, r16
     81e:	60 83       	st	Z, r22
     820:	71 83       	std	Z+1, r23	; 0x01
     822:	82 83       	std	Z+2, r24	; 0x02
     824:	93 83       	std	Z+3, r25	; 0x03
		info_ptr->sonicD1 = info_ptr->sonicD1/count;
     826:	a7 01       	movw	r20, r14
     828:	96 01       	movw	r18, r12
     82a:	64 81       	ldd	r22, Z+4	; 0x04
     82c:	75 81       	ldd	r23, Z+5	; 0x05
     82e:	86 81       	ldd	r24, Z+6	; 0x06
     830:	97 81       	ldd	r25, Z+7	; 0x07
     832:	0e 94 f7 05 	call	0xbee	; 0xbee <__divsf3>
     836:	f8 01       	movw	r30, r16
     838:	64 83       	std	Z+4, r22	; 0x04
     83a:	75 83       	std	Z+5, r23	; 0x05
     83c:	86 83       	std	Z+6, r24	; 0x06
     83e:	97 83       	std	Z+7, r25	; 0x07
	}
		
	/*	continue normal operation */
	interrupts_on = bit_is_set(SREG, SREG_I);
     840:	1f b7       	in	r17, 0x3f	; 63
	cli();
     842:	f8 94       	cli
	init_tcnt0(!FAST);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 37 05 	call	0xa6e	; 0xa6e <init_tcnt0>
	if(interrupts_on) {
     84a:	11 23       	and	r17, r17
     84c:	94 f4       	brge	.+36     	; 0x872 <do_sonic+0x17a>
		sei();
     84e:	78 94       	sei
	}
}
     850:	10 c0       	rjmp	.+32     	; 0x872 <do_sonic+0x17a>
     852:	3e 01       	movw	r6, r28
     854:	f9 e1       	ldi	r31, 0x19	; 25
     856:	6f 0e       	add	r6, r31
     858:	71 1c       	adc	r7, r1
     85a:	ce 01       	movw	r24, r28
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	7c 01       	movw	r14, r24
     860:	6e 01       	movw	r12, r28
     862:	9d e0       	ldi	r25, 0x0D	; 13
     864:	c9 0e       	add	r12, r25
     866:	d1 1c       	adc	r13, r1
     868:	46 01       	movw	r8, r12
		;
	}
}


void do_sonic(info* info_ptr){
     86a:	26 01       	movw	r4, r12
     86c:	57 01       	movw	r10, r14
     86e:	13 01       	movw	r2, r6
     870:	68 cf       	rjmp	.-304    	; 0x742 <do_sonic+0x4a>
	cli();
	init_tcnt0(!FAST);
	if(interrupts_on) {
		sei();
	}
}
     872:	6b 96       	adiw	r28, 0x1b	; 27
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	9f 90       	pop	r9
     894:	8f 90       	pop	r8
     896:	7f 90       	pop	r7
     898:	6f 90       	pop	r6
     89a:	5f 90       	pop	r5
     89c:	4f 90       	pop	r4
     89e:	3f 90       	pop	r3
     8a0:	2f 90       	pop	r2
     8a2:	08 95       	ret

000008a4 <main>:
	PORTB3 && PORTA6 == OC1A && OC1B

*/


int main(void) {
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	c6 54       	subi	r28, 0x46	; 70
     8ae:	d1 09       	sbc	r29, r1
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61

	info* info_ptr = makeInfo();
     8ba:	0e 94 2e 02 	call	0x45c	; 0x45c <makeInfo>
     8be:	4c 01       	movw	r8, r24
	initialise(info_ptr);
     8c0:	0e 94 4b 02 	call	0x496	; 0x496 <initialise>
	//uint16_t count = 0;
	while(1){
		if (serial_input_available()){
			char buffer[20];
			char in = fgetc(stdin);
     8c4:	0f 2e       	mov	r0, r31
     8c6:	f1 e7       	ldi	r31, 0x71	; 113
     8c8:	ef 2e       	mov	r14, r31
     8ca:	f2 e0       	ldi	r31, 0x02	; 2
     8cc:	ff 2e       	mov	r15, r31
     8ce:	f0 2d       	mov	r31, r0
				sprintf(buffer, "lowering\n");
			} else if (in == ' '){
				/*	stop operation	*/
				PORTA &= ~(1<<PORTA3);
				PORTA &= ~(1<<PORTA4);
				OCR1A = 0;
     8d0:	0f 2e       	mov	r0, r31
     8d2:	fc e6       	ldi	r31, 0x6C	; 108
     8d4:	cf 2e       	mov	r12, r31
     8d6:	d1 2c       	mov	r13, r1
     8d8:	f0 2d       	mov	r31, r0
				OCR1A = 60000;

				sprintf(buffer, "lifting\n");
			} else if (in == '_'){
				/*	winch down	*/
				OCR1A = 60000;
     8da:	0f 2e       	mov	r0, r31
     8dc:	f0 e6       	ldi	r31, 0x60	; 96
     8de:	af 2e       	mov	r10, r31
     8e0:	fa ee       	ldi	r31, 0xEA	; 234
     8e2:	bf 2e       	mov	r11, r31
     8e4:	f0 2d       	mov	r31, r0
				OCR1B = 60000;
     8e6:	0f 2e       	mov	r0, r31
     8e8:	fa e6       	ldi	r31, 0x6A	; 106
     8ea:	6f 2e       	mov	r6, r31
     8ec:	71 2c       	mov	r7, r1
     8ee:	f0 2d       	mov	r31, r0

	info* info_ptr = makeInfo();
	initialise(info_ptr);
	//uint16_t count = 0;
	while(1){
		if (serial_input_available()){
     8f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <serial_input_available>
     8f4:	88 23       	and	r24, r24
     8f6:	e1 f3       	breq	.-8      	; 0x8f0 <main+0x4c>
			char buffer[20];
			char in = fgetc(stdin);
     8f8:	f7 01       	movw	r30, r14
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fgetc>
     902:	58 2e       	mov	r5, r24
			if (in == '+'){
     904:	8b 32       	cpi	r24, 0x2B	; 43
     906:	79 f4       	brne	.+30     	; 0x926 <main+0x82>
				/*	winch up	*/
				PORTA |= (1<<PORTA4);
     908:	8c 9a       	sbi	0x11, 4	; 17
				PORTA &= ~(1<<PORTA3);
     90a:	8b 98       	cbi	0x11, 3	; 17
				OCR1A = 60000;
     90c:	f6 01       	movw	r30, r12
     90e:	b1 82       	std	Z+1, r11	; 0x01
     910:	a0 82       	st	Z, r10

				sprintf(buffer, "lifting\n");
     912:	89 e0       	ldi	r24, 0x09	; 9
     914:	e5 e2       	ldi	r30, 0x25	; 37
     916:	f1 e0       	ldi	r31, 0x01	; 1
     918:	de 01       	movw	r26, r28
     91a:	99 96       	adiw	r26, 0x29	; 41
     91c:	01 90       	ld	r0, Z+
     91e:	0d 92       	st	X+, r0
     920:	8a 95       	dec	r24
     922:	e1 f7       	brne	.-8      	; 0x91c <main+0x78>
     924:	98 c0       	rjmp	.+304    	; 0xa56 <main+0x1b2>
			} else if (in == '_'){
     926:	8f 35       	cpi	r24, 0x5F	; 95
     928:	49 f4       	brne	.+18     	; 0x93c <main+0x98>
				/*	winch down	*/
				OCR1A = 60000;
     92a:	f6 01       	movw	r30, r12
     92c:	b1 82       	std	Z+1, r11	; 0x01
     92e:	a0 82       	st	Z, r10
				OCR1B = 60000;
     930:	f3 01       	movw	r30, r6
     932:	b1 82       	std	Z+1, r11	; 0x01
     934:	a0 82       	st	Z, r10
				PORTA |= (1<<PORTA3);
     936:	8b 9a       	sbi	0x11, 3	; 17
				PORTA &= ~(1<<PORTA4);
     938:	8c 98       	cbi	0x11, 4	; 17
     93a:	da cf       	rjmp	.-76     	; 0x8f0 <main+0x4c>
				sprintf(buffer, "lowering\n");
			} else if (in == ' '){
     93c:	80 32       	cpi	r24, 0x20	; 32
     93e:	31 f4       	brne	.+12     	; 0x94c <main+0xa8>
				/*	stop operation	*/
				PORTA &= ~(1<<PORTA3);
     940:	8b 98       	cbi	0x11, 3	; 17
				PORTA &= ~(1<<PORTA4);
     942:	8c 98       	cbi	0x11, 4	; 17
				OCR1A = 0;
     944:	f6 01       	movw	r30, r12
     946:	11 82       	std	Z+1, r1	; 0x01
     948:	10 82       	st	Z, r1
     94a:	85 c0       	rjmp	.+266    	; 0xa56 <main+0x1b2>
				//fputc('?', stdout);
			} else if (in == '?'){
     94c:	8f 33       	cpi	r24, 0x3F	; 63
     94e:	09 f0       	breq	.+2      	; 0x952 <main+0xae>
     950:	78 c0       	rjmp	.+240    	; 0xa42 <main+0x19e>
				sprintf(buffer, "sensing\n");
     952:	89 e0       	ldi	r24, 0x09	; 9
     954:	ee e2       	ldi	r30, 0x2E	; 46
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	de 01       	movw	r26, r28
     95a:	99 96       	adiw	r26, 0x29	; 41
     95c:	01 90       	ld	r0, Z+
     95e:	0d 92       	st	X+, r0
     960:	8a 95       	dec	r24
     962:	e1 f7       	brne	.-8      	; 0x95c <main+0xb8>
				do_sonic(info_ptr);
     964:	c4 01       	movw	r24, r8
     966:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <do_sonic>
				char buffer0[20];
				dtostrf(info_ptr->sonicD0, 3, 5, buffer0); fputs("Sensor0: ", stdout); fputs(buffer0, stdout); fputc('	', stdout);
     96a:	f4 01       	movw	r30, r8
     96c:	60 81       	ld	r22, Z
     96e:	71 81       	ldd	r23, Z+1	; 0x01
     970:	82 81       	ldd	r24, Z+2	; 0x02
     972:	93 81       	ldd	r25, Z+3	; 0x03
     974:	8e 01       	movw	r16, r28
     976:	0b 5e       	subi	r16, 0xEB	; 235
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	25 e0       	ldi	r18, 0x05	; 5
     97c:	43 e0       	ldi	r20, 0x03	; 3
     97e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <dtostrf>
     982:	f7 01       	movw	r30, r14
     984:	22 81       	ldd	r18, Z+2	; 0x02
     986:	33 81       	ldd	r19, Z+3	; 0x03
     988:	49 e0       	ldi	r20, 0x09	; 9
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	87 e3       	ldi	r24, 0x37	; 55
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 21 0a 	call	0x1442	; 0x1442 <fwrite>
     998:	f7 01       	movw	r30, r14
     99a:	62 81       	ldd	r22, Z+2	; 0x02
     99c:	73 81       	ldd	r23, Z+3	; 0x03
     99e:	c8 01       	movw	r24, r16
     9a0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <fputs>
     9a4:	f7 01       	movw	r30, r14
     9a6:	62 81       	ldd	r22, Z+2	; 0x02
     9a8:	73 81       	ldd	r23, Z+3	; 0x03
     9aa:	89 e0       	ldi	r24, 0x09	; 9
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 bb 09 	call	0x1376	; 0x1376 <fputc>
				char buffer1[20];
				dtostrf(info_ptr->sonicD1, 3, 5, buffer1); fputs("Sensor1: ", stdout); fputs(buffer1, stdout); fputc('	', stdout);
     9b2:	f4 01       	movw	r30, r8
     9b4:	64 81       	ldd	r22, Z+4	; 0x04
     9b6:	75 81       	ldd	r23, Z+5	; 0x05
     9b8:	86 81       	ldd	r24, Z+6	; 0x06
     9ba:	97 81       	ldd	r25, Z+7	; 0x07
     9bc:	04 51       	subi	r16, 0x14	; 20
     9be:	11 09       	sbc	r17, r1
     9c0:	25 e0       	ldi	r18, 0x05	; 5
     9c2:	43 e0       	ldi	r20, 0x03	; 3
     9c4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <dtostrf>
     9c8:	f7 01       	movw	r30, r14
     9ca:	22 81       	ldd	r18, Z+2	; 0x02
     9cc:	33 81       	ldd	r19, Z+3	; 0x03
     9ce:	49 e0       	ldi	r20, 0x09	; 9
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	81 e4       	ldi	r24, 0x41	; 65
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 21 0a 	call	0x1442	; 0x1442 <fwrite>
     9de:	f7 01       	movw	r30, r14
     9e0:	62 81       	ldd	r22, Z+2	; 0x02
     9e2:	73 81       	ldd	r23, Z+3	; 0x03
     9e4:	c8 01       	movw	r24, r16
     9e6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <fputs>
     9ea:	f7 01       	movw	r30, r14
     9ec:	62 81       	ldd	r22, Z+2	; 0x02
     9ee:	73 81       	ldd	r23, Z+3	; 0x03
     9f0:	89 e0       	ldi	r24, 0x09	; 9
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 bb 09 	call	0x1376	; 0x1376 <fputc>
				char buffer3[10];
				uint8_t timer = OCR0A;
     9f8:	18 b3       	in	r17, 0x18	; 24
				fputs("timer: ", stdout);
     9fa:	f7 01       	movw	r30, r14
     9fc:	22 81       	ldd	r18, Z+2	; 0x02
     9fe:	33 81       	ldd	r19, Z+3	; 0x03
     a00:	47 e0       	ldi	r20, 0x07	; 7
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	8b e4       	ldi	r24, 0x4B	; 75
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 21 0a 	call	0x1442	; 0x1442 <fwrite>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     a10:	61 2f       	mov	r22, r17
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	2a e0       	ldi	r18, 0x0A	; 10
     a1a:	ae 01       	movw	r20, r28
     a1c:	43 5c       	subi	r20, 0xC3	; 195
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	0e 94 4c 09 	call	0x1298	; 0x1298 <__ltoa_ncheck>
				ltoa(timer, buffer3, 10); fputs(buffer3, stdout); fputc('\n',stdout);
     a24:	f7 01       	movw	r30, r14
     a26:	62 81       	ldd	r22, Z+2	; 0x02
     a28:	73 81       	ldd	r23, Z+3	; 0x03
     a2a:	ce 01       	movw	r24, r28
     a2c:	cd 96       	adiw	r24, 0x3d	; 61
     a2e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <fputs>
     a32:	f7 01       	movw	r30, r14
     a34:	62 81       	ldd	r22, Z+2	; 0x02
     a36:	73 81       	ldd	r23, Z+3	; 0x03
     a38:	8a e0       	ldi	r24, 0x0A	; 10
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 bb 09 	call	0x1376	; 0x1376 <fputc>
     a40:	0a c0       	rjmp	.+20     	; 0xa56 <main+0x1b2>
			} else if (in == 'H'){
     a42:	88 34       	cpi	r24, 0x48	; 72
     a44:	81 f4       	brne	.+32     	; 0xa66 <main+0x1c2>
				PORTA &= ~(1<<PORTA5);
     a46:	8d 98       	cbi	0x11, 5	; 17
				custom_delay(1000);
     a48:	68 ee       	ldi	r22, 0xE8	; 232
     a4a:	73 e0       	ldi	r23, 0x03	; 3
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 33 02 	call	0x466	; 0x466 <custom_delay>
				PORTA |= (1<<PORTA5);
     a54:	8d 9a       	sbi	0x11, 5	; 17
			}
			/*	echo characters back to terminal	*/
			if ((in != '_') && (in != '=')){
				fputc(in, stdout);
     a56:	f7 01       	movw	r30, r14
     a58:	62 81       	ldd	r22, Z+2	; 0x02
     a5a:	73 81       	ldd	r23, Z+3	; 0x03
     a5c:	85 2d       	mov	r24, r5
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 bb 09 	call	0x1376	; 0x1376 <fputc>
     a64:	45 cf       	rjmp	.-374    	; 0x8f0 <main+0x4c>
				PORTA &= ~(1<<PORTA5);
				custom_delay(1000);
				PORTA |= (1<<PORTA5);
			}
			/*	echo characters back to terminal	*/
			if ((in != '_') && (in != '=')){
     a66:	8d 33       	cpi	r24, 0x3D	; 61
     a68:	09 f4       	brne	.+2      	; 0xa6c <main+0x1c8>
     a6a:	42 cf       	rjmp	.-380    	; 0x8f0 <main+0x4c>
     a6c:	f4 cf       	rjmp	.-24     	; 0xa56 <main+0x1b2>

00000a6e <init_tcnt0>:
void init_tcnt0(uint8_t fast_mode){
	/* initialises 8-bit timer to output compare at f(clk)/64 and OCRA @ 124 */
	/*	Ftimer = fclk / (2*N*(1+OCRn)) */

	// set global counter
	tcnt0_ticks = 0L;
     a6e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <tcnt0_ticks>
     a72:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <tcnt0_ticks+0x1>
     a76:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <tcnt0_ticks+0x2>
     a7a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <tcnt0_ticks+0x3>
	
	 // set timer / counter
	 TCNT0 = 0;
     a7e:	19 ba       	out	0x19, r1	; 25
	 
	 // set output compare resgister; value to execute ISR
	 //OCR0A = 79; // between 1 and 255
	 if (fast_mode){
     a80:	88 23       	and	r24, r24
     a82:	41 f0       	breq	.+16     	; 0xa94 <init_tcnt0+0x26>
		 OCR0A = 79;
     a84:	8f e4       	ldi	r24, 0x4F	; 79
     a86:	88 bb       	out	0x18, r24	; 24
	 } else {
		OCR0A = 124;
	 }

	TCCR0A = (1<<WGM01);											// Compare match to OCRA as Max
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	8b bb       	out	0x1b, r24	; 27
	
	 // set the timer to update at a fraction of a clock cycle
	 if (fast_mode){
		 TCCR0B = (1<<CS00);	// set to f(clk) / 1
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	8a bb       	out	0x1a, r24	; 26
		 TCCR0B &= ~(1<<CS01);
     a90:	d1 98       	cbi	0x1a, 1	; 26
     a92:	06 c0       	rjmp	.+12     	; 0xaa0 <init_tcnt0+0x32>
	 // set output compare resgister; value to execute ISR
	 //OCR0A = 79; // between 1 and 255
	 if (fast_mode){
		 OCR0A = 79;
	 } else {
		OCR0A = 124;
     a94:	8c e7       	ldi	r24, 0x7C	; 124
     a96:	88 bb       	out	0x18, r24	; 24
	 }

	TCCR0A = (1<<WGM01);											// Compare match to OCRA as Max
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	8b bb       	out	0x1b, r24	; 27
	 // set the timer to update at a fraction of a clock cycle
	 if (fast_mode){
		 TCCR0B = (1<<CS00);	// set to f(clk) / 1
		 TCCR0B &= ~(1<<CS01);
	} else {
		 TCCR0B = (1<<CS01)|(1<<CS00);	// set to f(clk) / 64
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	8a bb       	out	0x1a, r24	; 26
	 }
	
	 // timer/counter 0 interrupt mask register - enable OCR0A as output compare register, only works if OCF0A is set in TIFR0
	 TIMSK |= (1<<OCIE0A);
     aa0:	8a b7       	in	r24, 0x3a	; 58
     aa2:	81 60       	ori	r24, 0x01	; 1
     aa4:	8a bf       	out	0x3a, r24	; 58
	 
	 // if it isn't already, clear the interrupt output compare flag by writing a 1 to OCF0A; switches when TCNT0 matches OCR0A
	 TIFR &= (1<<OCF0A);
     aa6:	89 b7       	in	r24, 0x39	; 57
     aa8:	81 70       	andi	r24, 0x01	; 1
     aaa:	89 bf       	out	0x39, r24	; 57
     aac:	08 95       	ret

00000aae <get_tcnt0_ticks>:
}


uint32_t get_tcnt0_ticks(void) {
	/* internal reference clock, times how long the system has been on for	*/
	uint8_t interrupts_on = bit_is_set(SREG, SREG_I);
     aae:	2f b7       	in	r18, 0x3f	; 63
	cli();
     ab0:	f8 94       	cli
	uint32_t return_value = tcnt0_ticks;
     ab2:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <tcnt0_ticks>
     ab6:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <tcnt0_ticks+0x1>
     aba:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <tcnt0_ticks+0x2>
     abe:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <tcnt0_ticks+0x3>
	if(interrupts_on) {
     ac2:	22 23       	and	r18, r18
     ac4:	0c f4       	brge	.+2      	; 0xac8 <get_tcnt0_ticks+0x1a>
		sei();
     ac6:	78 94       	sei
	}
	return return_value;
}
     ac8:	08 95       	ret

00000aca <__vector_10>:


 ISR(TIMER0_COMPA_vect) {
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
	 /* Increment our clock tick count, check if pin value has changed */
	 tcnt0_ticks++;
     adc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tcnt0_ticks>
     ae0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <tcnt0_ticks+0x1>
     ae4:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <tcnt0_ticks+0x2>
     ae8:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <tcnt0_ticks+0x3>
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	a1 1d       	adc	r26, r1
     af0:	b1 1d       	adc	r27, r1
     af2:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tcnt0_ticks>
     af6:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <tcnt0_ticks+0x1>
     afa:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <tcnt0_ticks+0x2>
     afe:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <tcnt0_ticks+0x3>
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0
     b10:	1f 90       	pop	r1
     b12:	18 95       	reti

00000b14 <__subsf3>:
     b14:	50 58       	subi	r21, 0x80	; 128

00000b16 <__addsf3>:
     b16:	bb 27       	eor	r27, r27
     b18:	aa 27       	eor	r26, r26
     b1a:	0e 94 a2 05 	call	0xb44	; 0xb44 <__addsf3x>
     b1e:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__fp_round>
     b22:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_pscA>
     b26:	38 f0       	brcs	.+14     	; 0xb36 <__addsf3+0x20>
     b28:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_pscB>
     b2c:	20 f0       	brcs	.+8      	; 0xb36 <__addsf3+0x20>
     b2e:	39 f4       	brne	.+14     	; 0xb3e <__addsf3+0x28>
     b30:	9f 3f       	cpi	r25, 0xFF	; 255
     b32:	19 f4       	brne	.+6      	; 0xb3a <__addsf3+0x24>
     b34:	26 f4       	brtc	.+8      	; 0xb3e <__addsf3+0x28>
     b36:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_nan>
     b3a:	0e f4       	brtc	.+2      	; 0xb3e <__addsf3+0x28>
     b3c:	e0 95       	com	r30
     b3e:	e7 fb       	bst	r30, 7
     b40:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_inf>

00000b44 <__addsf3x>:
     b44:	e9 2f       	mov	r30, r25
     b46:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_split3>
     b4a:	58 f3       	brcs	.-42     	; 0xb22 <__addsf3+0xc>
     b4c:	ba 17       	cp	r27, r26
     b4e:	62 07       	cpc	r22, r18
     b50:	73 07       	cpc	r23, r19
     b52:	84 07       	cpc	r24, r20
     b54:	95 07       	cpc	r25, r21
     b56:	20 f0       	brcs	.+8      	; 0xb60 <__addsf3x+0x1c>
     b58:	79 f4       	brne	.+30     	; 0xb78 <__addsf3x+0x34>
     b5a:	a6 f5       	brtc	.+104    	; 0xbc4 <__addsf3x+0x80>
     b5c:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_zero>
     b60:	0e f4       	brtc	.+2      	; 0xb64 <__addsf3x+0x20>
     b62:	e0 95       	com	r30
     b64:	0b 2e       	mov	r0, r27
     b66:	ba 2f       	mov	r27, r26
     b68:	a0 2d       	mov	r26, r0
     b6a:	0b 01       	movw	r0, r22
     b6c:	b9 01       	movw	r22, r18
     b6e:	90 01       	movw	r18, r0
     b70:	0c 01       	movw	r0, r24
     b72:	ca 01       	movw	r24, r20
     b74:	a0 01       	movw	r20, r0
     b76:	11 24       	eor	r1, r1
     b78:	ff 27       	eor	r31, r31
     b7a:	59 1b       	sub	r21, r25
     b7c:	99 f0       	breq	.+38     	; 0xba4 <__addsf3x+0x60>
     b7e:	59 3f       	cpi	r21, 0xF9	; 249
     b80:	50 f4       	brcc	.+20     	; 0xb96 <__addsf3x+0x52>
     b82:	50 3e       	cpi	r21, 0xE0	; 224
     b84:	68 f1       	brcs	.+90     	; 0xbe0 <__addsf3x+0x9c>
     b86:	1a 16       	cp	r1, r26
     b88:	f0 40       	sbci	r31, 0x00	; 0
     b8a:	a2 2f       	mov	r26, r18
     b8c:	23 2f       	mov	r18, r19
     b8e:	34 2f       	mov	r19, r20
     b90:	44 27       	eor	r20, r20
     b92:	58 5f       	subi	r21, 0xF8	; 248
     b94:	f3 cf       	rjmp	.-26     	; 0xb7c <__addsf3x+0x38>
     b96:	46 95       	lsr	r20
     b98:	37 95       	ror	r19
     b9a:	27 95       	ror	r18
     b9c:	a7 95       	ror	r26
     b9e:	f0 40       	sbci	r31, 0x00	; 0
     ba0:	53 95       	inc	r21
     ba2:	c9 f7       	brne	.-14     	; 0xb96 <__addsf3x+0x52>
     ba4:	7e f4       	brtc	.+30     	; 0xbc4 <__addsf3x+0x80>
     ba6:	1f 16       	cp	r1, r31
     ba8:	ba 0b       	sbc	r27, r26
     baa:	62 0b       	sbc	r22, r18
     bac:	73 0b       	sbc	r23, r19
     bae:	84 0b       	sbc	r24, r20
     bb0:	ba f0       	brmi	.+46     	; 0xbe0 <__addsf3x+0x9c>
     bb2:	91 50       	subi	r25, 0x01	; 1
     bb4:	a1 f0       	breq	.+40     	; 0xbde <__addsf3x+0x9a>
     bb6:	ff 0f       	add	r31, r31
     bb8:	bb 1f       	adc	r27, r27
     bba:	66 1f       	adc	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	88 1f       	adc	r24, r24
     bc0:	c2 f7       	brpl	.-16     	; 0xbb2 <__addsf3x+0x6e>
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <__addsf3x+0x9c>
     bc4:	ba 0f       	add	r27, r26
     bc6:	62 1f       	adc	r22, r18
     bc8:	73 1f       	adc	r23, r19
     bca:	84 1f       	adc	r24, r20
     bcc:	48 f4       	brcc	.+18     	; 0xbe0 <__addsf3x+0x9c>
     bce:	87 95       	ror	r24
     bd0:	77 95       	ror	r23
     bd2:	67 95       	ror	r22
     bd4:	b7 95       	ror	r27
     bd6:	f7 95       	ror	r31
     bd8:	9e 3f       	cpi	r25, 0xFE	; 254
     bda:	08 f0       	brcs	.+2      	; 0xbde <__addsf3x+0x9a>
     bdc:	b0 cf       	rjmp	.-160    	; 0xb3e <__addsf3+0x28>
     bde:	93 95       	inc	r25
     be0:	88 0f       	add	r24, r24
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <__addsf3x+0xa2>
     be4:	99 27       	eor	r25, r25
     be6:	ee 0f       	add	r30, r30
     be8:	97 95       	ror	r25
     bea:	87 95       	ror	r24
     bec:	08 95       	ret

00000bee <__divsf3>:
     bee:	0e 94 0b 06 	call	0xc16	; 0xc16 <__divsf3x>
     bf2:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__fp_round>
     bf6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_pscB>
     bfa:	58 f0       	brcs	.+22     	; 0xc12 <__divsf3+0x24>
     bfc:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_pscA>
     c00:	40 f0       	brcs	.+16     	; 0xc12 <__divsf3+0x24>
     c02:	29 f4       	brne	.+10     	; 0xc0e <__divsf3+0x20>
     c04:	5f 3f       	cpi	r21, 0xFF	; 255
     c06:	29 f0       	breq	.+10     	; 0xc12 <__divsf3+0x24>
     c08:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_inf>
     c0c:	51 11       	cpse	r21, r1
     c0e:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>
     c12:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_nan>

00000c16 <__divsf3x>:
     c16:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_split3>
     c1a:	68 f3       	brcs	.-38     	; 0xbf6 <__divsf3+0x8>

00000c1c <__divsf3_pse>:
     c1c:	99 23       	and	r25, r25
     c1e:	b1 f3       	breq	.-20     	; 0xc0c <__divsf3+0x1e>
     c20:	55 23       	and	r21, r21
     c22:	91 f3       	breq	.-28     	; 0xc08 <__divsf3+0x1a>
     c24:	95 1b       	sub	r25, r21
     c26:	55 0b       	sbc	r21, r21
     c28:	bb 27       	eor	r27, r27
     c2a:	aa 27       	eor	r26, r26
     c2c:	62 17       	cp	r22, r18
     c2e:	73 07       	cpc	r23, r19
     c30:	84 07       	cpc	r24, r20
     c32:	38 f0       	brcs	.+14     	; 0xc42 <__divsf3_pse+0x26>
     c34:	9f 5f       	subi	r25, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	44 1f       	adc	r20, r20
     c3e:	aa 1f       	adc	r26, r26
     c40:	a9 f3       	breq	.-22     	; 0xc2c <__divsf3_pse+0x10>
     c42:	35 d0       	rcall	.+106    	; 0xcae <__divsf3_pse+0x92>
     c44:	0e 2e       	mov	r0, r30
     c46:	3a f0       	brmi	.+14     	; 0xc56 <__divsf3_pse+0x3a>
     c48:	e0 e8       	ldi	r30, 0x80	; 128
     c4a:	32 d0       	rcall	.+100    	; 0xcb0 <__divsf3_pse+0x94>
     c4c:	91 50       	subi	r25, 0x01	; 1
     c4e:	50 40       	sbci	r21, 0x00	; 0
     c50:	e6 95       	lsr	r30
     c52:	00 1c       	adc	r0, r0
     c54:	ca f7       	brpl	.-14     	; 0xc48 <__divsf3_pse+0x2c>
     c56:	2b d0       	rcall	.+86     	; 0xcae <__divsf3_pse+0x92>
     c58:	fe 2f       	mov	r31, r30
     c5a:	29 d0       	rcall	.+82     	; 0xcae <__divsf3_pse+0x92>
     c5c:	66 0f       	add	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	bb 1f       	adc	r27, r27
     c64:	26 17       	cp	r18, r22
     c66:	37 07       	cpc	r19, r23
     c68:	48 07       	cpc	r20, r24
     c6a:	ab 07       	cpc	r26, r27
     c6c:	b0 e8       	ldi	r27, 0x80	; 128
     c6e:	09 f0       	breq	.+2      	; 0xc72 <__divsf3_pse+0x56>
     c70:	bb 0b       	sbc	r27, r27
     c72:	80 2d       	mov	r24, r0
     c74:	bf 01       	movw	r22, r30
     c76:	ff 27       	eor	r31, r31
     c78:	93 58       	subi	r25, 0x83	; 131
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
     c7c:	3a f0       	brmi	.+14     	; 0xc8c <__divsf3_pse+0x70>
     c7e:	9e 3f       	cpi	r25, 0xFE	; 254
     c80:	51 05       	cpc	r21, r1
     c82:	78 f0       	brcs	.+30     	; 0xca2 <__divsf3_pse+0x86>
     c84:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_inf>
     c88:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>
     c8c:	5f 3f       	cpi	r21, 0xFF	; 255
     c8e:	e4 f3       	brlt	.-8      	; 0xc88 <__divsf3_pse+0x6c>
     c90:	98 3e       	cpi	r25, 0xE8	; 232
     c92:	d4 f3       	brlt	.-12     	; 0xc88 <__divsf3_pse+0x6c>
     c94:	86 95       	lsr	r24
     c96:	77 95       	ror	r23
     c98:	67 95       	ror	r22
     c9a:	b7 95       	ror	r27
     c9c:	f7 95       	ror	r31
     c9e:	9f 5f       	subi	r25, 0xFF	; 255
     ca0:	c9 f7       	brne	.-14     	; 0xc94 <__divsf3_pse+0x78>
     ca2:	88 0f       	add	r24, r24
     ca4:	91 1d       	adc	r25, r1
     ca6:	96 95       	lsr	r25
     ca8:	87 95       	ror	r24
     caa:	97 f9       	bld	r25, 7
     cac:	08 95       	ret
     cae:	e1 e0       	ldi	r30, 0x01	; 1
     cb0:	66 0f       	add	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	88 1f       	adc	r24, r24
     cb6:	bb 1f       	adc	r27, r27
     cb8:	62 17       	cp	r22, r18
     cba:	73 07       	cpc	r23, r19
     cbc:	84 07       	cpc	r24, r20
     cbe:	ba 07       	cpc	r27, r26
     cc0:	20 f0       	brcs	.+8      	; 0xcca <__divsf3_pse+0xae>
     cc2:	62 1b       	sub	r22, r18
     cc4:	73 0b       	sbc	r23, r19
     cc6:	84 0b       	sbc	r24, r20
     cc8:	ba 0b       	sbc	r27, r26
     cca:	ee 1f       	adc	r30, r30
     ccc:	88 f7       	brcc	.-30     	; 0xcb0 <__divsf3_pse+0x94>
     cce:	e0 95       	com	r30
     cd0:	08 95       	ret

00000cd2 <__floatunsisf>:
     cd2:	e8 94       	clt
     cd4:	09 c0       	rjmp	.+18     	; 0xce8 <__floatsisf+0x12>

00000cd6 <__floatsisf>:
     cd6:	97 fb       	bst	r25, 7
     cd8:	3e f4       	brtc	.+14     	; 0xce8 <__floatsisf+0x12>
     cda:	90 95       	com	r25
     cdc:	80 95       	com	r24
     cde:	70 95       	com	r23
     ce0:	61 95       	neg	r22
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	8f 4f       	sbci	r24, 0xFF	; 255
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	99 23       	and	r25, r25
     cea:	a9 f0       	breq	.+42     	; 0xd16 <__floatsisf+0x40>
     cec:	f9 2f       	mov	r31, r25
     cee:	96 e9       	ldi	r25, 0x96	; 150
     cf0:	bb 27       	eor	r27, r27
     cf2:	93 95       	inc	r25
     cf4:	f6 95       	lsr	r31
     cf6:	87 95       	ror	r24
     cf8:	77 95       	ror	r23
     cfa:	67 95       	ror	r22
     cfc:	b7 95       	ror	r27
     cfe:	f1 11       	cpse	r31, r1
     d00:	f8 cf       	rjmp	.-16     	; 0xcf2 <__floatsisf+0x1c>
     d02:	fa f4       	brpl	.+62     	; 0xd42 <__floatsisf+0x6c>
     d04:	bb 0f       	add	r27, r27
     d06:	11 f4       	brne	.+4      	; 0xd0c <__floatsisf+0x36>
     d08:	60 ff       	sbrs	r22, 0
     d0a:	1b c0       	rjmp	.+54     	; 0xd42 <__floatsisf+0x6c>
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	8f 4f       	sbci	r24, 0xFF	; 255
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	16 c0       	rjmp	.+44     	; 0xd42 <__floatsisf+0x6c>
     d16:	88 23       	and	r24, r24
     d18:	11 f0       	breq	.+4      	; 0xd1e <__floatsisf+0x48>
     d1a:	96 e9       	ldi	r25, 0x96	; 150
     d1c:	11 c0       	rjmp	.+34     	; 0xd40 <__floatsisf+0x6a>
     d1e:	77 23       	and	r23, r23
     d20:	21 f0       	breq	.+8      	; 0xd2a <__floatsisf+0x54>
     d22:	9e e8       	ldi	r25, 0x8E	; 142
     d24:	87 2f       	mov	r24, r23
     d26:	76 2f       	mov	r23, r22
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <__floatsisf+0x5e>
     d2a:	66 23       	and	r22, r22
     d2c:	71 f0       	breq	.+28     	; 0xd4a <__floatsisf+0x74>
     d2e:	96 e8       	ldi	r25, 0x86	; 134
     d30:	86 2f       	mov	r24, r22
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	2a f0       	brmi	.+10     	; 0xd42 <__floatsisf+0x6c>
     d38:	9a 95       	dec	r25
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	da f7       	brpl	.-10     	; 0xd38 <__floatsisf+0x62>
     d42:	88 0f       	add	r24, r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	97 f9       	bld	r25, 7
     d4a:	08 95       	ret

00000d4c <__fp_inf>:
     d4c:	97 f9       	bld	r25, 7
     d4e:	9f 67       	ori	r25, 0x7F	; 127
     d50:	80 e8       	ldi	r24, 0x80	; 128
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	08 95       	ret

00000d58 <__fp_nan>:
     d58:	9f ef       	ldi	r25, 0xFF	; 255
     d5a:	80 ec       	ldi	r24, 0xC0	; 192
     d5c:	08 95       	ret

00000d5e <__fp_pscA>:
     d5e:	00 24       	eor	r0, r0
     d60:	0a 94       	dec	r0
     d62:	16 16       	cp	r1, r22
     d64:	17 06       	cpc	r1, r23
     d66:	18 06       	cpc	r1, r24
     d68:	09 06       	cpc	r0, r25
     d6a:	08 95       	ret

00000d6c <__fp_pscB>:
     d6c:	00 24       	eor	r0, r0
     d6e:	0a 94       	dec	r0
     d70:	12 16       	cp	r1, r18
     d72:	13 06       	cpc	r1, r19
     d74:	14 06       	cpc	r1, r20
     d76:	05 06       	cpc	r0, r21
     d78:	08 95       	ret

00000d7a <__fp_round>:
     d7a:	09 2e       	mov	r0, r25
     d7c:	03 94       	inc	r0
     d7e:	00 0c       	add	r0, r0
     d80:	11 f4       	brne	.+4      	; 0xd86 <__fp_round+0xc>
     d82:	88 23       	and	r24, r24
     d84:	52 f0       	brmi	.+20     	; 0xd9a <__fp_round+0x20>
     d86:	bb 0f       	add	r27, r27
     d88:	40 f4       	brcc	.+16     	; 0xd9a <__fp_round+0x20>
     d8a:	bf 2b       	or	r27, r31
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__fp_round+0x18>
     d8e:	60 ff       	sbrs	r22, 0
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <__fp_round+0x20>
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	08 95       	ret

00000d9c <__fp_split3>:
     d9c:	57 fd       	sbrc	r21, 7
     d9e:	90 58       	subi	r25, 0x80	; 128
     da0:	44 0f       	add	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	59 f0       	breq	.+22     	; 0xdbc <__fp_splitA+0x10>
     da6:	5f 3f       	cpi	r21, 0xFF	; 255
     da8:	71 f0       	breq	.+28     	; 0xdc6 <__fp_splitA+0x1a>
     daa:	47 95       	ror	r20

00000dac <__fp_splitA>:
     dac:	88 0f       	add	r24, r24
     dae:	97 fb       	bst	r25, 7
     db0:	99 1f       	adc	r25, r25
     db2:	61 f0       	breq	.+24     	; 0xdcc <__fp_splitA+0x20>
     db4:	9f 3f       	cpi	r25, 0xFF	; 255
     db6:	79 f0       	breq	.+30     	; 0xdd6 <__fp_splitA+0x2a>
     db8:	87 95       	ror	r24
     dba:	08 95       	ret
     dbc:	12 16       	cp	r1, r18
     dbe:	13 06       	cpc	r1, r19
     dc0:	14 06       	cpc	r1, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	f2 cf       	rjmp	.-28     	; 0xdaa <__fp_split3+0xe>
     dc6:	46 95       	lsr	r20
     dc8:	f1 df       	rcall	.-30     	; 0xdac <__fp_splitA>
     dca:	08 c0       	rjmp	.+16     	; 0xddc <__fp_splitA+0x30>
     dcc:	16 16       	cp	r1, r22
     dce:	17 06       	cpc	r1, r23
     dd0:	18 06       	cpc	r1, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	f1 cf       	rjmp	.-30     	; 0xdb8 <__fp_splitA+0xc>
     dd6:	86 95       	lsr	r24
     dd8:	71 05       	cpc	r23, r1
     dda:	61 05       	cpc	r22, r1
     ddc:	08 94       	sec
     dde:	08 95       	ret

00000de0 <__fp_zero>:
     de0:	e8 94       	clt

00000de2 <__fp_szero>:
     de2:	bb 27       	eor	r27, r27
     de4:	66 27       	eor	r22, r22
     de6:	77 27       	eor	r23, r23
     de8:	cb 01       	movw	r24, r22
     dea:	97 f9       	bld	r25, 7
     dec:	08 95       	ret

00000dee <__mulsf3>:
     dee:	0e 94 09 07 	call	0xe12	; 0xe12 <__mulsf3x>
     df2:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__fp_round>
     df6:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_pscA>
     dfa:	38 f0       	brcs	.+14     	; 0xe0a <__mulsf3+0x1c>
     dfc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_pscB>
     e00:	20 f0       	brcs	.+8      	; 0xe0a <__mulsf3+0x1c>
     e02:	95 23       	and	r25, r21
     e04:	11 f0       	breq	.+4      	; 0xe0a <__mulsf3+0x1c>
     e06:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_inf>
     e0a:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_nan>
     e0e:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>

00000e12 <__mulsf3x>:
     e12:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__fp_split3>
     e16:	78 f3       	brcs	.-34     	; 0xdf6 <__mulsf3+0x8>

00000e18 <__mulsf3_pse>:
     e18:	99 23       	and	r25, r25
     e1a:	c9 f3       	breq	.-14     	; 0xe0e <__mulsf3+0x20>
     e1c:	55 23       	and	r21, r21
     e1e:	b9 f3       	breq	.-18     	; 0xe0e <__mulsf3+0x20>
     e20:	95 0f       	add	r25, r21
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	55 1f       	adc	r21, r21
     e26:	aa 27       	eor	r26, r26
     e28:	ee 27       	eor	r30, r30
     e2a:	ff 27       	eor	r31, r31
     e2c:	bb 27       	eor	r27, r27
     e2e:	00 24       	eor	r0, r0
     e30:	08 94       	sec
     e32:	67 95       	ror	r22
     e34:	20 f4       	brcc	.+8      	; 0xe3e <__mulsf3_pse+0x26>
     e36:	e2 0f       	add	r30, r18
     e38:	f3 1f       	adc	r31, r19
     e3a:	b4 1f       	adc	r27, r20
     e3c:	0a 1e       	adc	r0, r26
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	44 1f       	adc	r20, r20
     e44:	aa 1f       	adc	r26, r26
     e46:	66 95       	lsr	r22
     e48:	a9 f7       	brne	.-22     	; 0xe34 <__mulsf3_pse+0x1c>
     e4a:	77 95       	ror	r23
     e4c:	30 f4       	brcc	.+12     	; 0xe5a <__mulsf3_pse+0x42>
     e4e:	f3 0f       	add	r31, r19
     e50:	b4 1f       	adc	r27, r20
     e52:	0a 1e       	adc	r0, r26
     e54:	12 1e       	adc	r1, r18
     e56:	08 f4       	brcc	.+2      	; 0xe5a <__mulsf3_pse+0x42>
     e58:	63 95       	inc	r22
     e5a:	33 0f       	add	r19, r19
     e5c:	44 1f       	adc	r20, r20
     e5e:	aa 1f       	adc	r26, r26
     e60:	22 1f       	adc	r18, r18
     e62:	76 95       	lsr	r23
     e64:	99 f7       	brne	.-26     	; 0xe4c <__mulsf3_pse+0x34>
     e66:	87 95       	ror	r24
     e68:	20 f4       	brcc	.+8      	; 0xe72 <__mulsf3_pse+0x5a>
     e6a:	b4 0f       	add	r27, r20
     e6c:	0a 1e       	adc	r0, r26
     e6e:	12 1e       	adc	r1, r18
     e70:	63 1f       	adc	r22, r19
     e72:	44 0f       	add	r20, r20
     e74:	aa 1f       	adc	r26, r26
     e76:	22 1f       	adc	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	86 95       	lsr	r24
     e7c:	a9 f7       	brne	.-22     	; 0xe68 <__mulsf3_pse+0x50>
     e7e:	86 2f       	mov	r24, r22
     e80:	71 2d       	mov	r23, r1
     e82:	60 2d       	mov	r22, r0
     e84:	11 24       	eor	r1, r1
     e86:	9f 57       	subi	r25, 0x7F	; 127
     e88:	50 40       	sbci	r21, 0x00	; 0
     e8a:	9a f0       	brmi	.+38     	; 0xeb2 <__mulsf3_pse+0x9a>
     e8c:	f1 f0       	breq	.+60     	; 0xeca <__mulsf3_pse+0xb2>
     e8e:	88 23       	and	r24, r24
     e90:	4a f0       	brmi	.+18     	; 0xea4 <__mulsf3_pse+0x8c>
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	bb 1f       	adc	r27, r27
     e98:	66 1f       	adc	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	88 1f       	adc	r24, r24
     e9e:	91 50       	subi	r25, 0x01	; 1
     ea0:	50 40       	sbci	r21, 0x00	; 0
     ea2:	a9 f7       	brne	.-22     	; 0xe8e <__mulsf3_pse+0x76>
     ea4:	9e 3f       	cpi	r25, 0xFE	; 254
     ea6:	51 05       	cpc	r21, r1
     ea8:	80 f0       	brcs	.+32     	; 0xeca <__mulsf3_pse+0xb2>
     eaa:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_inf>
     eae:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_szero>
     eb2:	5f 3f       	cpi	r21, 0xFF	; 255
     eb4:	e4 f3       	brlt	.-8      	; 0xeae <__mulsf3_pse+0x96>
     eb6:	98 3e       	cpi	r25, 0xE8	; 232
     eb8:	d4 f3       	brlt	.-12     	; 0xeae <__mulsf3_pse+0x96>
     eba:	86 95       	lsr	r24
     ebc:	77 95       	ror	r23
     ebe:	67 95       	ror	r22
     ec0:	b7 95       	ror	r27
     ec2:	f7 95       	ror	r31
     ec4:	e7 95       	ror	r30
     ec6:	9f 5f       	subi	r25, 0xFF	; 255
     ec8:	c1 f7       	brne	.-16     	; 0xeba <__mulsf3_pse+0xa2>
     eca:	fe 2b       	or	r31, r30
     ecc:	88 0f       	add	r24, r24
     ece:	91 1d       	adc	r25, r1
     ed0:	96 95       	lsr	r25
     ed2:	87 95       	ror	r24
     ed4:	97 f9       	bld	r25, 7
     ed6:	08 95       	ret

00000ed8 <__divmodsi4>:
     ed8:	05 2e       	mov	r0, r21
     eda:	97 fb       	bst	r25, 7
     edc:	1e f4       	brtc	.+6      	; 0xee4 <__divmodsi4+0xc>
     ede:	00 94       	com	r0
     ee0:	0e 94 83 07 	call	0xf06	; 0xf06 <__negsi2>
     ee4:	57 fd       	sbrc	r21, 7
     ee6:	07 d0       	rcall	.+14     	; 0xef6 <__divmodsi4_neg2>
     ee8:	0e 94 8b 07 	call	0xf16	; 0xf16 <__udivmodsi4>
     eec:	07 fc       	sbrc	r0, 7
     eee:	03 d0       	rcall	.+6      	; 0xef6 <__divmodsi4_neg2>
     ef0:	4e f4       	brtc	.+18     	; 0xf04 <__divmodsi4_exit>
     ef2:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__negsi2>

00000ef6 <__divmodsi4_neg2>:
     ef6:	50 95       	com	r21
     ef8:	40 95       	com	r20
     efa:	30 95       	com	r19
     efc:	21 95       	neg	r18
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	4f 4f       	sbci	r20, 0xFF	; 255
     f02:	5f 4f       	sbci	r21, 0xFF	; 255

00000f04 <__divmodsi4_exit>:
     f04:	08 95       	ret

00000f06 <__negsi2>:
     f06:	90 95       	com	r25
     f08:	80 95       	com	r24
     f0a:	70 95       	com	r23
     f0c:	61 95       	neg	r22
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	08 95       	ret

00000f16 <__udivmodsi4>:
     f16:	a1 e2       	ldi	r26, 0x21	; 33
     f18:	1a 2e       	mov	r1, r26
     f1a:	aa 1b       	sub	r26, r26
     f1c:	bb 1b       	sub	r27, r27
     f1e:	fd 01       	movw	r30, r26
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <__udivmodsi4_ep>

00000f22 <__udivmodsi4_loop>:
     f22:	aa 1f       	adc	r26, r26
     f24:	bb 1f       	adc	r27, r27
     f26:	ee 1f       	adc	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	a2 17       	cp	r26, r18
     f2c:	b3 07       	cpc	r27, r19
     f2e:	e4 07       	cpc	r30, r20
     f30:	f5 07       	cpc	r31, r21
     f32:	20 f0       	brcs	.+8      	; 0xf3c <__udivmodsi4_ep>
     f34:	a2 1b       	sub	r26, r18
     f36:	b3 0b       	sbc	r27, r19
     f38:	e4 0b       	sbc	r30, r20
     f3a:	f5 0b       	sbc	r31, r21

00000f3c <__udivmodsi4_ep>:
     f3c:	66 1f       	adc	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	1a 94       	dec	r1
     f46:	69 f7       	brne	.-38     	; 0xf22 <__udivmodsi4_loop>
     f48:	60 95       	com	r22
     f4a:	70 95       	com	r23
     f4c:	80 95       	com	r24
     f4e:	90 95       	com	r25
     f50:	9b 01       	movw	r18, r22
     f52:	ac 01       	movw	r20, r24
     f54:	bd 01       	movw	r22, r26
     f56:	cf 01       	movw	r24, r30
     f58:	08 95       	ret

00000f5a <dtostrf>:
     f5a:	ef 92       	push	r14
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	e8 01       	movw	r28, r16
     f66:	47 fd       	sbrc	r20, 7
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <dtostrf+0x14>
     f6a:	34 e0       	ldi	r19, 0x04	; 4
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <dtostrf+0x16>
     f6e:	34 e1       	ldi	r19, 0x14	; 20
     f70:	04 2e       	mov	r0, r20
     f72:	00 0c       	add	r0, r0
     f74:	55 0b       	sbc	r21, r21
     f76:	57 ff       	sbrs	r21, 7
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <dtostrf+0x26>
     f7a:	51 95       	neg	r21
     f7c:	41 95       	neg	r20
     f7e:	51 09       	sbc	r21, r1
     f80:	e3 2e       	mov	r14, r19
     f82:	02 2f       	mov	r16, r18
     f84:	24 2f       	mov	r18, r20
     f86:	ae 01       	movw	r20, r28
     f88:	0e 94 55 0a 	call	0x14aa	; 0x14aa <dtoa_prf>
     f8c:	ce 01       	movw	r24, r28
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ef 90       	pop	r14
     f98:	08 95       	ret

00000f9a <malloc>:
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	91 05       	cpc	r25, r1
     fa6:	10 f4       	brcc	.+4      	; 0xfac <malloc+0x12>
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <__flp>
     fb0:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <__flp+0x1>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	30 97       	sbiw	r30, 0x00	; 0
     fbe:	19 f1       	breq	.+70     	; 0x1006 <malloc+0x6c>
     fc0:	40 81       	ld	r20, Z
     fc2:	51 81       	ldd	r21, Z+1	; 0x01
     fc4:	02 81       	ldd	r16, Z+2	; 0x02
     fc6:	13 81       	ldd	r17, Z+3	; 0x03
     fc8:	48 17       	cp	r20, r24
     fca:	59 07       	cpc	r21, r25
     fcc:	c8 f0       	brcs	.+50     	; 0x1000 <malloc+0x66>
     fce:	84 17       	cp	r24, r20
     fd0:	95 07       	cpc	r25, r21
     fd2:	69 f4       	brne	.+26     	; 0xfee <malloc+0x54>
     fd4:	10 97       	sbiw	r26, 0x00	; 0
     fd6:	31 f0       	breq	.+12     	; 0xfe4 <malloc+0x4a>
     fd8:	12 96       	adiw	r26, 0x02	; 2
     fda:	0c 93       	st	X, r16
     fdc:	12 97       	sbiw	r26, 0x02	; 2
     fde:	13 96       	adiw	r26, 0x03	; 3
     fe0:	1c 93       	st	X, r17
     fe2:	27 c0       	rjmp	.+78     	; 0x1032 <malloc+0x98>
     fe4:	00 93 6f 02 	sts	0x026F, r16	; 0x80026f <__flp>
     fe8:	10 93 70 02 	sts	0x0270, r17	; 0x800270 <__flp+0x1>
     fec:	22 c0       	rjmp	.+68     	; 0x1032 <malloc+0x98>
     fee:	21 15       	cp	r18, r1
     ff0:	31 05       	cpc	r19, r1
     ff2:	19 f0       	breq	.+6      	; 0xffa <malloc+0x60>
     ff4:	42 17       	cp	r20, r18
     ff6:	53 07       	cpc	r21, r19
     ff8:	18 f4       	brcc	.+6      	; 0x1000 <malloc+0x66>
     ffa:	9a 01       	movw	r18, r20
     ffc:	bd 01       	movw	r22, r26
     ffe:	ef 01       	movw	r28, r30
    1000:	df 01       	movw	r26, r30
    1002:	f8 01       	movw	r30, r16
    1004:	db cf       	rjmp	.-74     	; 0xfbc <malloc+0x22>
    1006:	21 15       	cp	r18, r1
    1008:	31 05       	cpc	r19, r1
    100a:	f9 f0       	breq	.+62     	; 0x104a <malloc+0xb0>
    100c:	28 1b       	sub	r18, r24
    100e:	39 0b       	sbc	r19, r25
    1010:	24 30       	cpi	r18, 0x04	; 4
    1012:	31 05       	cpc	r19, r1
    1014:	80 f4       	brcc	.+32     	; 0x1036 <malloc+0x9c>
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	9b 81       	ldd	r25, Y+3	; 0x03
    101a:	61 15       	cp	r22, r1
    101c:	71 05       	cpc	r23, r1
    101e:	21 f0       	breq	.+8      	; 0x1028 <malloc+0x8e>
    1020:	fb 01       	movw	r30, r22
    1022:	93 83       	std	Z+3, r25	; 0x03
    1024:	82 83       	std	Z+2, r24	; 0x02
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <malloc+0x96>
    1028:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <__flp+0x1>
    102c:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <__flp>
    1030:	fe 01       	movw	r30, r28
    1032:	32 96       	adiw	r30, 0x02	; 2
    1034:	44 c0       	rjmp	.+136    	; 0x10be <malloc+0x124>
    1036:	fe 01       	movw	r30, r28
    1038:	e2 0f       	add	r30, r18
    103a:	f3 1f       	adc	r31, r19
    103c:	81 93       	st	Z+, r24
    103e:	91 93       	st	Z+, r25
    1040:	22 50       	subi	r18, 0x02	; 2
    1042:	31 09       	sbc	r19, r1
    1044:	39 83       	std	Y+1, r19	; 0x01
    1046:	28 83       	st	Y, r18
    1048:	3a c0       	rjmp	.+116    	; 0x10be <malloc+0x124>
    104a:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <__brkval>
    104e:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <__brkval+0x1>
    1052:	23 2b       	or	r18, r19
    1054:	41 f4       	brne	.+16     	; 0x1066 <malloc+0xcc>
    1056:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    105a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    105e:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <__brkval+0x1>
    1062:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <__brkval>
    1066:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    106a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    106e:	21 15       	cp	r18, r1
    1070:	31 05       	cpc	r19, r1
    1072:	41 f4       	brne	.+16     	; 0x1084 <malloc+0xea>
    1074:	2d b7       	in	r18, 0x3d	; 61
    1076:	3e b7       	in	r19, 0x3e	; 62
    1078:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    107c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1080:	24 1b       	sub	r18, r20
    1082:	35 0b       	sbc	r19, r21
    1084:	e0 91 6d 02 	lds	r30, 0x026D	; 0x80026d <__brkval>
    1088:	f0 91 6e 02 	lds	r31, 0x026E	; 0x80026e <__brkval+0x1>
    108c:	e2 17       	cp	r30, r18
    108e:	f3 07       	cpc	r31, r19
    1090:	a0 f4       	brcc	.+40     	; 0x10ba <malloc+0x120>
    1092:	2e 1b       	sub	r18, r30
    1094:	3f 0b       	sbc	r19, r31
    1096:	28 17       	cp	r18, r24
    1098:	39 07       	cpc	r19, r25
    109a:	78 f0       	brcs	.+30     	; 0x10ba <malloc+0x120>
    109c:	ac 01       	movw	r20, r24
    109e:	4e 5f       	subi	r20, 0xFE	; 254
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	24 17       	cp	r18, r20
    10a4:	35 07       	cpc	r19, r21
    10a6:	48 f0       	brcs	.+18     	; 0x10ba <malloc+0x120>
    10a8:	4e 0f       	add	r20, r30
    10aa:	5f 1f       	adc	r21, r31
    10ac:	50 93 6e 02 	sts	0x026E, r21	; 0x80026e <__brkval+0x1>
    10b0:	40 93 6d 02 	sts	0x026D, r20	; 0x80026d <__brkval>
    10b4:	81 93       	st	Z+, r24
    10b6:	91 93       	st	Z+, r25
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <malloc+0x124>
    10ba:	e0 e0       	ldi	r30, 0x00	; 0
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	cf 01       	movw	r24, r30
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <free>:
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <free+0xa>
    10d2:	81 c0       	rjmp	.+258    	; 0x11d6 <free+0x10c>
    10d4:	fc 01       	movw	r30, r24
    10d6:	32 97       	sbiw	r30, 0x02	; 2
    10d8:	13 82       	std	Z+3, r1	; 0x03
    10da:	12 82       	std	Z+2, r1	; 0x02
    10dc:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <__flp>
    10e0:	b0 91 70 02 	lds	r27, 0x0270	; 0x800270 <__flp+0x1>
    10e4:	10 97       	sbiw	r26, 0x00	; 0
    10e6:	81 f4       	brne	.+32     	; 0x1108 <free+0x3e>
    10e8:	20 81       	ld	r18, Z
    10ea:	31 81       	ldd	r19, Z+1	; 0x01
    10ec:	82 0f       	add	r24, r18
    10ee:	93 1f       	adc	r25, r19
    10f0:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <__brkval>
    10f4:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <__brkval+0x1>
    10f8:	28 17       	cp	r18, r24
    10fa:	39 07       	cpc	r19, r25
    10fc:	51 f5       	brne	.+84     	; 0x1152 <free+0x88>
    10fe:	f0 93 6e 02 	sts	0x026E, r31	; 0x80026e <__brkval+0x1>
    1102:	e0 93 6d 02 	sts	0x026D, r30	; 0x80026d <__brkval>
    1106:	67 c0       	rjmp	.+206    	; 0x11d6 <free+0x10c>
    1108:	ed 01       	movw	r28, r26
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	ce 17       	cp	r28, r30
    1110:	df 07       	cpc	r29, r31
    1112:	40 f4       	brcc	.+16     	; 0x1124 <free+0x5a>
    1114:	4a 81       	ldd	r20, Y+2	; 0x02
    1116:	5b 81       	ldd	r21, Y+3	; 0x03
    1118:	9e 01       	movw	r18, r28
    111a:	41 15       	cp	r20, r1
    111c:	51 05       	cpc	r21, r1
    111e:	f1 f0       	breq	.+60     	; 0x115c <free+0x92>
    1120:	ea 01       	movw	r28, r20
    1122:	f5 cf       	rjmp	.-22     	; 0x110e <free+0x44>
    1124:	d3 83       	std	Z+3, r29	; 0x03
    1126:	c2 83       	std	Z+2, r28	; 0x02
    1128:	40 81       	ld	r20, Z
    112a:	51 81       	ldd	r21, Z+1	; 0x01
    112c:	84 0f       	add	r24, r20
    112e:	95 1f       	adc	r25, r21
    1130:	c8 17       	cp	r28, r24
    1132:	d9 07       	cpc	r29, r25
    1134:	59 f4       	brne	.+22     	; 0x114c <free+0x82>
    1136:	88 81       	ld	r24, Y
    1138:	99 81       	ldd	r25, Y+1	; 0x01
    113a:	84 0f       	add	r24, r20
    113c:	95 1f       	adc	r25, r21
    113e:	02 96       	adiw	r24, 0x02	; 2
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	9b 81       	ldd	r25, Y+3	; 0x03
    1148:	93 83       	std	Z+3, r25	; 0x03
    114a:	82 83       	std	Z+2, r24	; 0x02
    114c:	21 15       	cp	r18, r1
    114e:	31 05       	cpc	r19, r1
    1150:	29 f4       	brne	.+10     	; 0x115c <free+0x92>
    1152:	f0 93 70 02 	sts	0x0270, r31	; 0x800270 <__flp+0x1>
    1156:	e0 93 6f 02 	sts	0x026F, r30	; 0x80026f <__flp>
    115a:	3d c0       	rjmp	.+122    	; 0x11d6 <free+0x10c>
    115c:	e9 01       	movw	r28, r18
    115e:	fb 83       	std	Y+3, r31	; 0x03
    1160:	ea 83       	std	Y+2, r30	; 0x02
    1162:	49 91       	ld	r20, Y+
    1164:	59 91       	ld	r21, Y+
    1166:	c4 0f       	add	r28, r20
    1168:	d5 1f       	adc	r29, r21
    116a:	ec 17       	cp	r30, r28
    116c:	fd 07       	cpc	r31, r29
    116e:	61 f4       	brne	.+24     	; 0x1188 <free+0xbe>
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	84 0f       	add	r24, r20
    1176:	95 1f       	adc	r25, r21
    1178:	02 96       	adiw	r24, 0x02	; 2
    117a:	e9 01       	movw	r28, r18
    117c:	99 83       	std	Y+1, r25	; 0x01
    117e:	88 83       	st	Y, r24
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	9b 83       	std	Y+3, r25	; 0x03
    1186:	8a 83       	std	Y+2, r24	; 0x02
    1188:	e0 e0       	ldi	r30, 0x00	; 0
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	12 96       	adiw	r26, 0x02	; 2
    118e:	8d 91       	ld	r24, X+
    1190:	9c 91       	ld	r25, X
    1192:	13 97       	sbiw	r26, 0x03	; 3
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	19 f0       	breq	.+6      	; 0x119e <free+0xd4>
    1198:	fd 01       	movw	r30, r26
    119a:	dc 01       	movw	r26, r24
    119c:	f7 cf       	rjmp	.-18     	; 0x118c <free+0xc2>
    119e:	8d 91       	ld	r24, X+
    11a0:	9c 91       	ld	r25, X
    11a2:	11 97       	sbiw	r26, 0x01	; 1
    11a4:	9d 01       	movw	r18, r26
    11a6:	2e 5f       	subi	r18, 0xFE	; 254
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
    11ae:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <__brkval>
    11b2:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <__brkval+0x1>
    11b6:	28 17       	cp	r18, r24
    11b8:	39 07       	cpc	r19, r25
    11ba:	69 f4       	brne	.+26     	; 0x11d6 <free+0x10c>
    11bc:	30 97       	sbiw	r30, 0x00	; 0
    11be:	29 f4       	brne	.+10     	; 0x11ca <free+0x100>
    11c0:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__flp+0x1>
    11c4:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <__flp>
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <free+0x104>
    11ca:	13 82       	std	Z+3, r1	; 0x03
    11cc:	12 82       	std	Z+2, r1	; 0x02
    11ce:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <__brkval+0x1>
    11d2:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <__brkval>
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <do_rand>:
    11dc:	8f 92       	push	r8
    11de:	9f 92       	push	r9
    11e0:	af 92       	push	r10
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
    11f2:	68 81       	ld	r22, Y
    11f4:	79 81       	ldd	r23, Y+1	; 0x01
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	61 15       	cp	r22, r1
    11fc:	71 05       	cpc	r23, r1
    11fe:	81 05       	cpc	r24, r1
    1200:	91 05       	cpc	r25, r1
    1202:	21 f4       	brne	.+8      	; 0x120c <do_rand+0x30>
    1204:	64 e2       	ldi	r22, 0x24	; 36
    1206:	79 ed       	ldi	r23, 0xD9	; 217
    1208:	8b e5       	ldi	r24, 0x5B	; 91
    120a:	97 e0       	ldi	r25, 0x07	; 7
    120c:	2d e1       	ldi	r18, 0x1D	; 29
    120e:	33 ef       	ldi	r19, 0xF3	; 243
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	0e 94 6c 07 	call	0xed8	; 0xed8 <__divmodsi4>
    1218:	49 01       	movw	r8, r18
    121a:	5a 01       	movw	r10, r20
    121c:	27 ea       	ldi	r18, 0xA7	; 167
    121e:	31 e4       	ldi	r19, 0x41	; 65
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	0e 94 97 0c 	call	0x192e	; 0x192e <__mulsi3>
    1228:	6b 01       	movw	r12, r22
    122a:	7c 01       	movw	r14, r24
    122c:	2c ee       	ldi	r18, 0xEC	; 236
    122e:	34 ef       	ldi	r19, 0xF4	; 244
    1230:	4f ef       	ldi	r20, 0xFF	; 255
    1232:	5f ef       	ldi	r21, 0xFF	; 255
    1234:	c5 01       	movw	r24, r10
    1236:	b4 01       	movw	r22, r8
    1238:	0e 94 97 0c 	call	0x192e	; 0x192e <__mulsi3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8c 0d       	add	r24, r12
    1242:	9d 1d       	adc	r25, r13
    1244:	ae 1d       	adc	r26, r14
    1246:	bf 1d       	adc	r27, r15
    1248:	b7 ff       	sbrs	r27, 7
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <do_rand+0x76>
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	a1 09       	sbc	r26, r1
    1250:	b0 48       	sbci	r27, 0x80	; 128
    1252:	88 83       	st	Y, r24
    1254:	99 83       	std	Y+1, r25	; 0x01
    1256:	aa 83       	std	Y+2, r26	; 0x02
    1258:	bb 83       	std	Y+3, r27	; 0x03
    125a:	9f 77       	andi	r25, 0x7F	; 127
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	08 95       	ret

00001272 <rand_r>:
    1272:	0e 94 ee 08 	call	0x11dc	; 0x11dc <do_rand>
    1276:	08 95       	ret

00001278 <rand>:
    1278:	86 e0       	ldi	r24, 0x06	; 6
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <do_rand>
    1280:	08 95       	ret

00001282 <srand>:
    1282:	a0 e0       	ldi	r26, 0x00	; 0
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    128a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    128e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1292:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1296:	08 95       	ret

00001298 <__ltoa_ncheck>:
    1298:	bb 27       	eor	r27, r27
    129a:	2a 30       	cpi	r18, 0x0A	; 10
    129c:	51 f4       	brne	.+20     	; 0x12b2 <__ltoa_ncheck+0x1a>
    129e:	99 23       	and	r25, r25
    12a0:	42 f4       	brpl	.+16     	; 0x12b2 <__ltoa_ncheck+0x1a>
    12a2:	bd e2       	ldi	r27, 0x2D	; 45
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__ultoa_common>

000012b6 <__ultoa_ncheck>:
    12b6:	bb 27       	eor	r27, r27

000012b8 <__ultoa_common>:
    12b8:	fa 01       	movw	r30, r20
    12ba:	a6 2f       	mov	r26, r22
    12bc:	62 17       	cp	r22, r18
    12be:	71 05       	cpc	r23, r1
    12c0:	81 05       	cpc	r24, r1
    12c2:	91 05       	cpc	r25, r1
    12c4:	33 0b       	sbc	r19, r19
    12c6:	30 fb       	bst	r19, 0
    12c8:	66 f0       	brts	.+24     	; 0x12e2 <__ultoa_common+0x2a>
    12ca:	aa 27       	eor	r26, r26
    12cc:	66 0f       	add	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	aa 1f       	adc	r26, r26
    12d6:	a2 17       	cp	r26, r18
    12d8:	10 f0       	brcs	.+4      	; 0x12de <__ultoa_common+0x26>
    12da:	a2 1b       	sub	r26, r18
    12dc:	63 95       	inc	r22
    12de:	38 50       	subi	r19, 0x08	; 8
    12e0:	a9 f7       	brne	.-22     	; 0x12cc <__ultoa_common+0x14>
    12e2:	a0 5d       	subi	r26, 0xD0	; 208
    12e4:	aa 33       	cpi	r26, 0x3A	; 58
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__ultoa_common+0x32>
    12e8:	a9 5d       	subi	r26, 0xD9	; 217
    12ea:	a1 93       	st	Z+, r26
    12ec:	36 f7       	brtc	.-52     	; 0x12ba <__ultoa_common+0x2>
    12ee:	b1 11       	cpse	r27, r1
    12f0:	b1 93       	st	Z+, r27
    12f2:	10 82       	st	Z, r1
    12f4:	ca 01       	movw	r24, r20
    12f6:	0c 94 87 0c 	jmp	0x190e	; 0x190e <strrev>

000012fa <fgetc>:
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	ec 01       	movw	r28, r24
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	20 ff       	sbrs	r18, 0
    1304:	33 c0       	rjmp	.+102    	; 0x136c <fgetc+0x72>
    1306:	26 ff       	sbrs	r18, 6
    1308:	0a c0       	rjmp	.+20     	; 0x131e <fgetc+0x24>
    130a:	2f 7b       	andi	r18, 0xBF	; 191
    130c:	2b 83       	std	Y+3, r18	; 0x03
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	9f 81       	ldd	r25, Y+7	; 0x07
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	9f 83       	std	Y+7, r25	; 0x07
    1316:	8e 83       	std	Y+6, r24	; 0x06
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	29 c0       	rjmp	.+82     	; 0x1370 <fgetc+0x76>
    131e:	22 ff       	sbrs	r18, 2
    1320:	0f c0       	rjmp	.+30     	; 0x1340 <fgetc+0x46>
    1322:	e8 81       	ld	r30, Y
    1324:	f9 81       	ldd	r31, Y+1	; 0x01
    1326:	80 81       	ld	r24, Z
    1328:	08 2e       	mov	r0, r24
    132a:	00 0c       	add	r0, r0
    132c:	99 0b       	sbc	r25, r25
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	19 f4       	brne	.+6      	; 0x1338 <fgetc+0x3e>
    1332:	20 62       	ori	r18, 0x20	; 32
    1334:	2b 83       	std	Y+3, r18	; 0x03
    1336:	1a c0       	rjmp	.+52     	; 0x136c <fgetc+0x72>
    1338:	31 96       	adiw	r30, 0x01	; 1
    133a:	f9 83       	std	Y+1, r31	; 0x01
    133c:	e8 83       	st	Y, r30
    133e:	0e c0       	rjmp	.+28     	; 0x135c <fgetc+0x62>
    1340:	ea 85       	ldd	r30, Y+10	; 0x0a
    1342:	fb 85       	ldd	r31, Y+11	; 0x0b
    1344:	09 95       	icall
    1346:	97 ff       	sbrs	r25, 7
    1348:	09 c0       	rjmp	.+18     	; 0x135c <fgetc+0x62>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	11 f0       	breq	.+4      	; 0x1354 <fgetc+0x5a>
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <fgetc+0x5c>
    1354:	80 e1       	ldi	r24, 0x10	; 16
    1356:	82 2b       	or	r24, r18
    1358:	8b 83       	std	Y+3, r24	; 0x03
    135a:	08 c0       	rjmp	.+16     	; 0x136c <fgetc+0x72>
    135c:	2e 81       	ldd	r18, Y+6	; 0x06
    135e:	3f 81       	ldd	r19, Y+7	; 0x07
    1360:	2f 5f       	subi	r18, 0xFF	; 255
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	3f 83       	std	Y+7, r19	; 0x07
    1366:	2e 83       	std	Y+6, r18	; 0x06
    1368:	99 27       	eor	r25, r25
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <fgetc+0x76>
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	9f ef       	ldi	r25, 0xFF	; 255
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <fputc>:
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	fb 01       	movw	r30, r22
    1380:	23 81       	ldd	r18, Z+3	; 0x03
    1382:	21 fd       	sbrc	r18, 1
    1384:	03 c0       	rjmp	.+6      	; 0x138c <fputc+0x16>
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    138a:	2c c0       	rjmp	.+88     	; 0x13e4 <fputc+0x6e>
    138c:	22 ff       	sbrs	r18, 2
    138e:	16 c0       	rjmp	.+44     	; 0x13bc <fputc+0x46>
    1390:	46 81       	ldd	r20, Z+6	; 0x06
    1392:	57 81       	ldd	r21, Z+7	; 0x07
    1394:	24 81       	ldd	r18, Z+4	; 0x04
    1396:	35 81       	ldd	r19, Z+5	; 0x05
    1398:	42 17       	cp	r20, r18
    139a:	53 07       	cpc	r21, r19
    139c:	44 f4       	brge	.+16     	; 0x13ae <fputc+0x38>
    139e:	a0 81       	ld	r26, Z
    13a0:	b1 81       	ldd	r27, Z+1	; 0x01
    13a2:	9d 01       	movw	r18, r26
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	31 83       	std	Z+1, r19	; 0x01
    13aa:	20 83       	st	Z, r18
    13ac:	8c 93       	st	X, r24
    13ae:	26 81       	ldd	r18, Z+6	; 0x06
    13b0:	37 81       	ldd	r19, Z+7	; 0x07
    13b2:	2f 5f       	subi	r18, 0xFF	; 255
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	37 83       	std	Z+7, r19	; 0x07
    13b8:	26 83       	std	Z+6, r18	; 0x06
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <fputc+0x6e>
    13bc:	8b 01       	movw	r16, r22
    13be:	ec 01       	movw	r28, r24
    13c0:	fb 01       	movw	r30, r22
    13c2:	00 84       	ldd	r0, Z+8	; 0x08
    13c4:	f1 85       	ldd	r31, Z+9	; 0x09
    13c6:	e0 2d       	mov	r30, r0
    13c8:	09 95       	icall
    13ca:	89 2b       	or	r24, r25
    13cc:	e1 f6       	brne	.-72     	; 0x1386 <fputc+0x10>
    13ce:	d8 01       	movw	r26, r16
    13d0:	16 96       	adiw	r26, 0x06	; 6
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	17 97       	sbiw	r26, 0x07	; 7
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	17 96       	adiw	r26, 0x07	; 7
    13dc:	9c 93       	st	X, r25
    13de:	8e 93       	st	-X, r24
    13e0:	16 97       	sbiw	r26, 0x06	; 6
    13e2:	ce 01       	movw	r24, r28
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <fputs>:
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	db 01       	movw	r26, r22
    13fc:	13 96       	adiw	r26, 0x03	; 3
    13fe:	2c 91       	ld	r18, X
    1400:	21 ff       	sbrs	r18, 1
    1402:	18 c0       	rjmp	.+48     	; 0x1434 <fputs+0x46>
    1404:	8b 01       	movw	r16, r22
    1406:	7c 01       	movw	r14, r24
    1408:	d0 e0       	ldi	r29, 0x00	; 0
    140a:	c0 e0       	ldi	r28, 0x00	; 0
    140c:	f7 01       	movw	r30, r14
    140e:	81 91       	ld	r24, Z+
    1410:	7f 01       	movw	r14, r30
    1412:	88 23       	and	r24, r24
    1414:	61 f0       	breq	.+24     	; 0x142e <fputs+0x40>
    1416:	d8 01       	movw	r26, r16
    1418:	18 96       	adiw	r26, 0x08	; 8
    141a:	ed 91       	ld	r30, X+
    141c:	fc 91       	ld	r31, X
    141e:	19 97       	sbiw	r26, 0x09	; 9
    1420:	b8 01       	movw	r22, r16
    1422:	09 95       	icall
    1424:	89 2b       	or	r24, r25
    1426:	91 f3       	breq	.-28     	; 0x140c <fputs+0x1e>
    1428:	df ef       	ldi	r29, 0xFF	; 255
    142a:	cf ef       	ldi	r28, 0xFF	; 255
    142c:	ef cf       	rjmp	.-34     	; 0x140c <fputs+0x1e>
    142e:	8d 2f       	mov	r24, r29
    1430:	9c 2f       	mov	r25, r28
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <fputs+0x4a>
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	9f ef       	ldi	r25, 0xFF	; 255
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	e6 e0       	ldi	r30, 0x06	; 6
    143e:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__epilogue_restores__+0x18>

00001442 <fwrite>:
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e2       	ldi	r30, 0x27	; 39
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__prologue_saves__+0xc>
    144e:	5b 01       	movw	r10, r22
    1450:	4a 01       	movw	r8, r20
    1452:	79 01       	movw	r14, r18
    1454:	d9 01       	movw	r26, r18
    1456:	13 96       	adiw	r26, 0x03	; 3
    1458:	2c 91       	ld	r18, X
    145a:	21 ff       	sbrs	r18, 1
    145c:	1d c0       	rjmp	.+58     	; 0x1498 <fwrite+0x56>
    145e:	c0 e0       	ldi	r28, 0x00	; 0
    1460:	d0 e0       	ldi	r29, 0x00	; 0
    1462:	c8 15       	cp	r28, r8
    1464:	d9 05       	cpc	r29, r9
    1466:	d9 f0       	breq	.+54     	; 0x149e <fwrite+0x5c>
    1468:	8c 01       	movw	r16, r24
    146a:	6c 01       	movw	r12, r24
    146c:	ca 0c       	add	r12, r10
    146e:	db 1c       	adc	r13, r11
    1470:	c8 01       	movw	r24, r16
    1472:	0c 15       	cp	r16, r12
    1474:	1d 05       	cpc	r17, r13
    1476:	71 f0       	breq	.+28     	; 0x1494 <fwrite+0x52>
    1478:	0f 5f       	subi	r16, 0xFF	; 255
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	d7 01       	movw	r26, r14
    147e:	18 96       	adiw	r26, 0x08	; 8
    1480:	ed 91       	ld	r30, X+
    1482:	fc 91       	ld	r31, X
    1484:	19 97       	sbiw	r26, 0x09	; 9
    1486:	b7 01       	movw	r22, r14
    1488:	dc 01       	movw	r26, r24
    148a:	8c 91       	ld	r24, X
    148c:	09 95       	icall
    148e:	89 2b       	or	r24, r25
    1490:	79 f3       	breq	.-34     	; 0x1470 <fwrite+0x2e>
    1492:	05 c0       	rjmp	.+10     	; 0x149e <fwrite+0x5c>
    1494:	21 96       	adiw	r28, 0x01	; 1
    1496:	e5 cf       	rjmp	.-54     	; 0x1462 <fwrite+0x20>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <fwrite+0x5e>
    149e:	ce 01       	movw	r24, r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	ec e0       	ldi	r30, 0x0C	; 12
    14a6:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__epilogue_restores__+0xc>

000014aa <dtoa_prf>:
    14aa:	a9 e0       	ldi	r26, 0x09	; 9
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	eb e5       	ldi	r30, 0x5B	; 91
    14b0:	fa e0       	ldi	r31, 0x0A	; 10
    14b2:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__prologue_saves__+0xc>
    14b6:	6a 01       	movw	r12, r20
    14b8:	12 2f       	mov	r17, r18
    14ba:	b0 2e       	mov	r11, r16
    14bc:	2b e3       	ldi	r18, 0x3B	; 59
    14be:	20 17       	cp	r18, r16
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <dtoa_prf+0x20>
    14c2:	ff 24       	eor	r15, r15
    14c4:	f3 94       	inc	r15
    14c6:	f0 0e       	add	r15, r16
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <dtoa_prf+0x24>
    14ca:	2c e3       	ldi	r18, 0x3C	; 60
    14cc:	f2 2e       	mov	r15, r18
    14ce:	0f 2d       	mov	r16, r15
    14d0:	27 e0       	ldi	r18, 0x07	; 7
    14d2:	ae 01       	movw	r20, r28
    14d4:	4f 5f       	subi	r20, 0xFF	; 255
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	0e 94 af 0b 	call	0x175e	; 0x175e <__ftoa_engine>
    14dc:	bc 01       	movw	r22, r24
    14de:	49 81       	ldd	r20, Y+1	; 0x01
    14e0:	84 2f       	mov	r24, r20
    14e2:	89 70       	andi	r24, 0x09	; 9
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	31 f0       	breq	.+12     	; 0x14f4 <dtoa_prf+0x4a>
    14e8:	e1 fc       	sbrc	r14, 1
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <dtoa_prf+0x4e>
    14ec:	e0 fe       	sbrs	r14, 0
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <dtoa_prf+0x52>
    14f0:	90 e2       	ldi	r25, 0x20	; 32
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <dtoa_prf+0x54>
    14f4:	9d e2       	ldi	r25, 0x2D	; 45
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <dtoa_prf+0x54>
    14f8:	9b e2       	ldi	r25, 0x2B	; 43
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <dtoa_prf+0x54>
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	5e 2d       	mov	r21, r14
    1500:	50 71       	andi	r21, 0x10	; 16
    1502:	43 ff       	sbrs	r20, 3
    1504:	3c c0       	rjmp	.+120    	; 0x157e <dtoa_prf+0xd4>
    1506:	91 11       	cpse	r25, r1
    1508:	02 c0       	rjmp	.+4      	; 0x150e <dtoa_prf+0x64>
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <dtoa_prf+0x66>
    150e:	84 e0       	ldi	r24, 0x04	; 4
    1510:	81 17       	cp	r24, r17
    1512:	18 f4       	brcc	.+6      	; 0x151a <dtoa_prf+0x70>
    1514:	21 2f       	mov	r18, r17
    1516:	28 1b       	sub	r18, r24
    1518:	01 c0       	rjmp	.+2      	; 0x151c <dtoa_prf+0x72>
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	51 11       	cpse	r21, r1
    151e:	0b c0       	rjmp	.+22     	; 0x1536 <dtoa_prf+0x8c>
    1520:	f6 01       	movw	r30, r12
    1522:	82 2f       	mov	r24, r18
    1524:	30 e2       	ldi	r19, 0x20	; 32
    1526:	88 23       	and	r24, r24
    1528:	19 f0       	breq	.+6      	; 0x1530 <dtoa_prf+0x86>
    152a:	31 93       	st	Z+, r19
    152c:	81 50       	subi	r24, 0x01	; 1
    152e:	fb cf       	rjmp	.-10     	; 0x1526 <dtoa_prf+0x7c>
    1530:	c2 0e       	add	r12, r18
    1532:	d1 1c       	adc	r13, r1
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	99 23       	and	r25, r25
    1538:	29 f0       	breq	.+10     	; 0x1544 <dtoa_prf+0x9a>
    153a:	d6 01       	movw	r26, r12
    153c:	9c 93       	st	X, r25
    153e:	f6 01       	movw	r30, r12
    1540:	31 96       	adiw	r30, 0x01	; 1
    1542:	6f 01       	movw	r12, r30
    1544:	c6 01       	movw	r24, r12
    1546:	03 96       	adiw	r24, 0x03	; 3
    1548:	e2 fe       	sbrs	r14, 2
    154a:	0a c0       	rjmp	.+20     	; 0x1560 <dtoa_prf+0xb6>
    154c:	3e e4       	ldi	r19, 0x4E	; 78
    154e:	d6 01       	movw	r26, r12
    1550:	3c 93       	st	X, r19
    1552:	41 e4       	ldi	r20, 0x41	; 65
    1554:	11 96       	adiw	r26, 0x01	; 1
    1556:	4c 93       	st	X, r20
    1558:	11 97       	sbiw	r26, 0x01	; 1
    155a:	12 96       	adiw	r26, 0x02	; 2
    155c:	3c 93       	st	X, r19
    155e:	06 c0       	rjmp	.+12     	; 0x156c <dtoa_prf+0xc2>
    1560:	3e e6       	ldi	r19, 0x6E	; 110
    1562:	f6 01       	movw	r30, r12
    1564:	30 83       	st	Z, r19
    1566:	41 e6       	ldi	r20, 0x61	; 97
    1568:	41 83       	std	Z+1, r20	; 0x01
    156a:	32 83       	std	Z+2, r19	; 0x02
    156c:	fc 01       	movw	r30, r24
    156e:	32 2f       	mov	r19, r18
    1570:	40 e2       	ldi	r20, 0x20	; 32
    1572:	33 23       	and	r19, r19
    1574:	09 f4       	brne	.+2      	; 0x1578 <dtoa_prf+0xce>
    1576:	42 c0       	rjmp	.+132    	; 0x15fc <dtoa_prf+0x152>
    1578:	41 93       	st	Z+, r20
    157a:	31 50       	subi	r19, 0x01	; 1
    157c:	fa cf       	rjmp	.-12     	; 0x1572 <dtoa_prf+0xc8>
    157e:	42 ff       	sbrs	r20, 2
    1580:	44 c0       	rjmp	.+136    	; 0x160a <dtoa_prf+0x160>
    1582:	91 11       	cpse	r25, r1
    1584:	02 c0       	rjmp	.+4      	; 0x158a <dtoa_prf+0xe0>
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	01 c0       	rjmp	.+2      	; 0x158c <dtoa_prf+0xe2>
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	81 17       	cp	r24, r17
    158e:	18 f4       	brcc	.+6      	; 0x1596 <dtoa_prf+0xec>
    1590:	21 2f       	mov	r18, r17
    1592:	28 1b       	sub	r18, r24
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <dtoa_prf+0xee>
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	51 11       	cpse	r21, r1
    159a:	0b c0       	rjmp	.+22     	; 0x15b2 <dtoa_prf+0x108>
    159c:	f6 01       	movw	r30, r12
    159e:	82 2f       	mov	r24, r18
    15a0:	30 e2       	ldi	r19, 0x20	; 32
    15a2:	88 23       	and	r24, r24
    15a4:	19 f0       	breq	.+6      	; 0x15ac <dtoa_prf+0x102>
    15a6:	31 93       	st	Z+, r19
    15a8:	81 50       	subi	r24, 0x01	; 1
    15aa:	fb cf       	rjmp	.-10     	; 0x15a2 <dtoa_prf+0xf8>
    15ac:	c2 0e       	add	r12, r18
    15ae:	d1 1c       	adc	r13, r1
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	99 23       	and	r25, r25
    15b4:	29 f0       	breq	.+10     	; 0x15c0 <dtoa_prf+0x116>
    15b6:	d6 01       	movw	r26, r12
    15b8:	9c 93       	st	X, r25
    15ba:	f6 01       	movw	r30, r12
    15bc:	31 96       	adiw	r30, 0x01	; 1
    15be:	6f 01       	movw	r12, r30
    15c0:	c6 01       	movw	r24, r12
    15c2:	03 96       	adiw	r24, 0x03	; 3
    15c4:	e2 fe       	sbrs	r14, 2
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <dtoa_prf+0x134>
    15c8:	39 e4       	ldi	r19, 0x49	; 73
    15ca:	d6 01       	movw	r26, r12
    15cc:	3c 93       	st	X, r19
    15ce:	3e e4       	ldi	r19, 0x4E	; 78
    15d0:	11 96       	adiw	r26, 0x01	; 1
    15d2:	3c 93       	st	X, r19
    15d4:	11 97       	sbiw	r26, 0x01	; 1
    15d6:	36 e4       	ldi	r19, 0x46	; 70
    15d8:	12 96       	adiw	r26, 0x02	; 2
    15da:	3c 93       	st	X, r19
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <dtoa_prf+0x142>
    15de:	39 e6       	ldi	r19, 0x69	; 105
    15e0:	f6 01       	movw	r30, r12
    15e2:	30 83       	st	Z, r19
    15e4:	3e e6       	ldi	r19, 0x6E	; 110
    15e6:	31 83       	std	Z+1, r19	; 0x01
    15e8:	36 e6       	ldi	r19, 0x66	; 102
    15ea:	32 83       	std	Z+2, r19	; 0x02
    15ec:	fc 01       	movw	r30, r24
    15ee:	32 2f       	mov	r19, r18
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	33 23       	and	r19, r19
    15f4:	19 f0       	breq	.+6      	; 0x15fc <dtoa_prf+0x152>
    15f6:	41 93       	st	Z+, r20
    15f8:	31 50       	subi	r19, 0x01	; 1
    15fa:	fb cf       	rjmp	.-10     	; 0x15f2 <dtoa_prf+0x148>
    15fc:	fc 01       	movw	r30, r24
    15fe:	e2 0f       	add	r30, r18
    1600:	f1 1d       	adc	r31, r1
    1602:	10 82       	st	Z, r1
    1604:	8e ef       	ldi	r24, 0xFE	; 254
    1606:	9f ef       	ldi	r25, 0xFF	; 255
    1608:	a6 c0       	rjmp	.+332    	; 0x1756 <dtoa_prf+0x2ac>
    160a:	21 e0       	ldi	r18, 0x01	; 1
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	91 11       	cpse	r25, r1
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <dtoa_prf+0x16c>
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	16 16       	cp	r1, r22
    1618:	17 06       	cpc	r1, r23
    161a:	1c f4       	brge	.+6      	; 0x1622 <dtoa_prf+0x178>
    161c:	fb 01       	movw	r30, r22
    161e:	31 96       	adiw	r30, 0x01	; 1
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <dtoa_prf+0x17c>
    1622:	e1 e0       	ldi	r30, 0x01	; 1
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	2e 0f       	add	r18, r30
    1628:	3f 1f       	adc	r19, r31
    162a:	bb 20       	and	r11, r11
    162c:	21 f0       	breq	.+8      	; 0x1636 <dtoa_prf+0x18c>
    162e:	eb 2d       	mov	r30, r11
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	31 96       	adiw	r30, 0x01	; 1
    1634:	02 c0       	rjmp	.+4      	; 0x163a <dtoa_prf+0x190>
    1636:	e0 e0       	ldi	r30, 0x00	; 0
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	2e 0f       	add	r18, r30
    163c:	3f 1f       	adc	r19, r31
    163e:	e1 2f       	mov	r30, r17
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	2e 17       	cp	r18, r30
    1644:	3f 07       	cpc	r19, r31
    1646:	1c f4       	brge	.+6      	; 0x164e <dtoa_prf+0x1a4>
    1648:	12 1b       	sub	r17, r18
    164a:	21 2f       	mov	r18, r17
    164c:	01 c0       	rjmp	.+2      	; 0x1650 <dtoa_prf+0x1a6>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	8e 2d       	mov	r24, r14
    1652:	88 71       	andi	r24, 0x18	; 24
    1654:	59 f4       	brne	.+22     	; 0x166c <dtoa_prf+0x1c2>
    1656:	f6 01       	movw	r30, r12
    1658:	82 2f       	mov	r24, r18
    165a:	30 e2       	ldi	r19, 0x20	; 32
    165c:	88 23       	and	r24, r24
    165e:	19 f0       	breq	.+6      	; 0x1666 <dtoa_prf+0x1bc>
    1660:	31 93       	st	Z+, r19
    1662:	81 50       	subi	r24, 0x01	; 1
    1664:	fb cf       	rjmp	.-10     	; 0x165c <dtoa_prf+0x1b2>
    1666:	c2 0e       	add	r12, r18
    1668:	d1 1c       	adc	r13, r1
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	99 23       	and	r25, r25
    166e:	29 f0       	breq	.+10     	; 0x167a <dtoa_prf+0x1d0>
    1670:	d6 01       	movw	r26, r12
    1672:	9c 93       	st	X, r25
    1674:	f6 01       	movw	r30, r12
    1676:	31 96       	adiw	r30, 0x01	; 1
    1678:	6f 01       	movw	r12, r30
    167a:	51 11       	cpse	r21, r1
    167c:	0b c0       	rjmp	.+22     	; 0x1694 <dtoa_prf+0x1ea>
    167e:	f6 01       	movw	r30, r12
    1680:	82 2f       	mov	r24, r18
    1682:	90 e3       	ldi	r25, 0x30	; 48
    1684:	88 23       	and	r24, r24
    1686:	19 f0       	breq	.+6      	; 0x168e <dtoa_prf+0x1e4>
    1688:	91 93       	st	Z+, r25
    168a:	81 50       	subi	r24, 0x01	; 1
    168c:	fb cf       	rjmp	.-10     	; 0x1684 <dtoa_prf+0x1da>
    168e:	c2 0e       	add	r12, r18
    1690:	d1 1c       	adc	r13, r1
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	0f 2d       	mov	r16, r15
    1696:	06 0f       	add	r16, r22
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	34 2f       	mov	r19, r20
    169c:	30 71       	andi	r19, 0x10	; 16
    169e:	44 ff       	sbrs	r20, 4
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <dtoa_prf+0x1fe>
    16a2:	91 33       	cpi	r25, 0x31	; 49
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <dtoa_prf+0x1fe>
    16a6:	01 50       	subi	r16, 0x01	; 1
    16a8:	10 16       	cp	r1, r16
    16aa:	24 f4       	brge	.+8      	; 0x16b4 <dtoa_prf+0x20a>
    16ac:	09 30       	cpi	r16, 0x09	; 9
    16ae:	18 f0       	brcs	.+6      	; 0x16b6 <dtoa_prf+0x20c>
    16b0:	08 e0       	ldi	r16, 0x08	; 8
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <dtoa_prf+0x20c>
    16b4:	01 e0       	ldi	r16, 0x01	; 1
    16b6:	ab 01       	movw	r20, r22
    16b8:	77 ff       	sbrs	r23, 7
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <dtoa_prf+0x216>
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	fb 01       	movw	r30, r22
    16c2:	e4 1b       	sub	r30, r20
    16c4:	f5 0b       	sbc	r31, r21
    16c6:	a1 e0       	ldi	r26, 0x01	; 1
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ac 0f       	add	r26, r28
    16cc:	bd 1f       	adc	r27, r29
    16ce:	ea 0f       	add	r30, r26
    16d0:	fb 1f       	adc	r31, r27
    16d2:	8e e2       	ldi	r24, 0x2E	; 46
    16d4:	a8 2e       	mov	r10, r24
    16d6:	4b 01       	movw	r8, r22
    16d8:	80 1a       	sub	r8, r16
    16da:	91 08       	sbc	r9, r1
    16dc:	0b 2d       	mov	r16, r11
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	11 95       	neg	r17
    16e2:	01 95       	neg	r16
    16e4:	11 09       	sbc	r17, r1
    16e6:	4f 3f       	cpi	r20, 0xFF	; 255
    16e8:	bf ef       	ldi	r27, 0xFF	; 255
    16ea:	5b 07       	cpc	r21, r27
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <dtoa_prf+0x24c>
    16ee:	d6 01       	movw	r26, r12
    16f0:	ac 92       	st	X, r10
    16f2:	11 96       	adiw	r26, 0x01	; 1
    16f4:	6d 01       	movw	r12, r26
    16f6:	64 17       	cp	r22, r20
    16f8:	75 07       	cpc	r23, r21
    16fa:	2c f0       	brlt	.+10     	; 0x1706 <dtoa_prf+0x25c>
    16fc:	84 16       	cp	r8, r20
    16fe:	95 06       	cpc	r9, r21
    1700:	14 f4       	brge	.+4      	; 0x1706 <dtoa_prf+0x25c>
    1702:	81 81       	ldd	r24, Z+1	; 0x01
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <dtoa_prf+0x25e>
    1706:	80 e3       	ldi	r24, 0x30	; 48
    1708:	41 50       	subi	r20, 0x01	; 1
    170a:	51 09       	sbc	r21, r1
    170c:	31 96       	adiw	r30, 0x01	; 1
    170e:	d6 01       	movw	r26, r12
    1710:	11 96       	adiw	r26, 0x01	; 1
    1712:	7d 01       	movw	r14, r26
    1714:	40 17       	cp	r20, r16
    1716:	51 07       	cpc	r21, r17
    1718:	24 f0       	brlt	.+8      	; 0x1722 <dtoa_prf+0x278>
    171a:	d6 01       	movw	r26, r12
    171c:	8c 93       	st	X, r24
    171e:	67 01       	movw	r12, r14
    1720:	e2 cf       	rjmp	.-60     	; 0x16e6 <dtoa_prf+0x23c>
    1722:	64 17       	cp	r22, r20
    1724:	75 07       	cpc	r23, r21
    1726:	39 f4       	brne	.+14     	; 0x1736 <dtoa_prf+0x28c>
    1728:	96 33       	cpi	r25, 0x36	; 54
    172a:	20 f4       	brcc	.+8      	; 0x1734 <dtoa_prf+0x28a>
    172c:	95 33       	cpi	r25, 0x35	; 53
    172e:	19 f4       	brne	.+6      	; 0x1736 <dtoa_prf+0x28c>
    1730:	31 11       	cpse	r19, r1
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <dtoa_prf+0x28c>
    1734:	81 e3       	ldi	r24, 0x31	; 49
    1736:	f6 01       	movw	r30, r12
    1738:	80 83       	st	Z, r24
    173a:	f7 01       	movw	r30, r14
    173c:	82 2f       	mov	r24, r18
    173e:	90 e2       	ldi	r25, 0x20	; 32
    1740:	88 23       	and	r24, r24
    1742:	19 f0       	breq	.+6      	; 0x174a <dtoa_prf+0x2a0>
    1744:	91 93       	st	Z+, r25
    1746:	81 50       	subi	r24, 0x01	; 1
    1748:	fb cf       	rjmp	.-10     	; 0x1740 <dtoa_prf+0x296>
    174a:	f7 01       	movw	r30, r14
    174c:	e2 0f       	add	r30, r18
    174e:	f1 1d       	adc	r31, r1
    1750:	10 82       	st	Z, r1
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	29 96       	adiw	r28, 0x09	; 9
    1758:	ec e0       	ldi	r30, 0x0C	; 12
    175a:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__epilogue_restores__+0xc>

0000175e <__ftoa_engine>:
    175e:	28 30       	cpi	r18, 0x08	; 8
    1760:	08 f0       	brcs	.+2      	; 0x1764 <__ftoa_engine+0x6>
    1762:	27 e0       	ldi	r18, 0x07	; 7
    1764:	33 27       	eor	r19, r19
    1766:	da 01       	movw	r26, r20
    1768:	99 0f       	add	r25, r25
    176a:	31 1d       	adc	r19, r1
    176c:	87 fd       	sbrc	r24, 7
    176e:	91 60       	ori	r25, 0x01	; 1
    1770:	00 96       	adiw	r24, 0x00	; 0
    1772:	61 05       	cpc	r22, r1
    1774:	71 05       	cpc	r23, r1
    1776:	39 f4       	brne	.+14     	; 0x1786 <__ftoa_engine+0x28>
    1778:	32 60       	ori	r19, 0x02	; 2
    177a:	2e 5f       	subi	r18, 0xFE	; 254
    177c:	3d 93       	st	X+, r19
    177e:	30 e3       	ldi	r19, 0x30	; 48
    1780:	2a 95       	dec	r18
    1782:	e1 f7       	brne	.-8      	; 0x177c <__ftoa_engine+0x1e>
    1784:	08 95       	ret
    1786:	9f 3f       	cpi	r25, 0xFF	; 255
    1788:	30 f0       	brcs	.+12     	; 0x1796 <__ftoa_engine+0x38>
    178a:	80 38       	cpi	r24, 0x80	; 128
    178c:	71 05       	cpc	r23, r1
    178e:	61 05       	cpc	r22, r1
    1790:	09 f0       	breq	.+2      	; 0x1794 <__ftoa_engine+0x36>
    1792:	3c 5f       	subi	r19, 0xFC	; 252
    1794:	3c 5f       	subi	r19, 0xFC	; 252
    1796:	3d 93       	st	X+, r19
    1798:	91 30       	cpi	r25, 0x01	; 1
    179a:	08 f0       	brcs	.+2      	; 0x179e <__ftoa_engine+0x40>
    179c:	80 68       	ori	r24, 0x80	; 128
    179e:	91 1d       	adc	r25, r1
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	1f 93       	push	r17
    17a6:	0f 93       	push	r16
    17a8:	ff 92       	push	r15
    17aa:	ef 92       	push	r14
    17ac:	19 2f       	mov	r17, r25
    17ae:	98 7f       	andi	r25, 0xF8	; 248
    17b0:	96 95       	lsr	r25
    17b2:	e9 2f       	mov	r30, r25
    17b4:	96 95       	lsr	r25
    17b6:	96 95       	lsr	r25
    17b8:	e9 0f       	add	r30, r25
    17ba:	ff 27       	eor	r31, r31
    17bc:	e6 53       	subi	r30, 0x36	; 54
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	99 27       	eor	r25, r25
    17c2:	33 27       	eor	r19, r19
    17c4:	ee 24       	eor	r14, r14
    17c6:	ff 24       	eor	r15, r15
    17c8:	a7 01       	movw	r20, r14
    17ca:	e7 01       	movw	r28, r14
    17cc:	05 90       	lpm	r0, Z+
    17ce:	08 94       	sec
    17d0:	07 94       	ror	r0
    17d2:	28 f4       	brcc	.+10     	; 0x17de <__ftoa_engine+0x80>
    17d4:	36 0f       	add	r19, r22
    17d6:	e7 1e       	adc	r14, r23
    17d8:	f8 1e       	adc	r15, r24
    17da:	49 1f       	adc	r20, r25
    17dc:	51 1d       	adc	r21, r1
    17de:	66 0f       	add	r22, r22
    17e0:	77 1f       	adc	r23, r23
    17e2:	88 1f       	adc	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	06 94       	lsr	r0
    17e8:	a1 f7       	brne	.-24     	; 0x17d2 <__ftoa_engine+0x74>
    17ea:	05 90       	lpm	r0, Z+
    17ec:	07 94       	ror	r0
    17ee:	28 f4       	brcc	.+10     	; 0x17fa <__ftoa_engine+0x9c>
    17f0:	e7 0e       	add	r14, r23
    17f2:	f8 1e       	adc	r15, r24
    17f4:	49 1f       	adc	r20, r25
    17f6:	56 1f       	adc	r21, r22
    17f8:	c1 1d       	adc	r28, r1
    17fa:	77 0f       	add	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	66 1f       	adc	r22, r22
    1802:	06 94       	lsr	r0
    1804:	a1 f7       	brne	.-24     	; 0x17ee <__ftoa_engine+0x90>
    1806:	05 90       	lpm	r0, Z+
    1808:	07 94       	ror	r0
    180a:	28 f4       	brcc	.+10     	; 0x1816 <__ftoa_engine+0xb8>
    180c:	f8 0e       	add	r15, r24
    180e:	49 1f       	adc	r20, r25
    1810:	56 1f       	adc	r21, r22
    1812:	c7 1f       	adc	r28, r23
    1814:	d1 1d       	adc	r29, r1
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	66 1f       	adc	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	06 94       	lsr	r0
    1820:	a1 f7       	brne	.-24     	; 0x180a <__ftoa_engine+0xac>
    1822:	05 90       	lpm	r0, Z+
    1824:	07 94       	ror	r0
    1826:	20 f4       	brcc	.+8      	; 0x1830 <__ftoa_engine+0xd2>
    1828:	49 0f       	add	r20, r25
    182a:	56 1f       	adc	r21, r22
    182c:	c7 1f       	adc	r28, r23
    182e:	d8 1f       	adc	r29, r24
    1830:	99 0f       	add	r25, r25
    1832:	66 1f       	adc	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	06 94       	lsr	r0
    183a:	a9 f7       	brne	.-22     	; 0x1826 <__ftoa_engine+0xc8>
    183c:	84 91       	lpm	r24, Z
    183e:	10 95       	com	r17
    1840:	17 70       	andi	r17, 0x07	; 7
    1842:	41 f0       	breq	.+16     	; 0x1854 <__ftoa_engine+0xf6>
    1844:	d6 95       	lsr	r29
    1846:	c7 95       	ror	r28
    1848:	57 95       	ror	r21
    184a:	47 95       	ror	r20
    184c:	f7 94       	ror	r15
    184e:	e7 94       	ror	r14
    1850:	1a 95       	dec	r17
    1852:	c1 f7       	brne	.-16     	; 0x1844 <__ftoa_engine+0xe6>
    1854:	e0 e7       	ldi	r30, 0x70	; 112
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	68 94       	set
    185a:	15 90       	lpm	r1, Z+
    185c:	15 91       	lpm	r17, Z+
    185e:	35 91       	lpm	r19, Z+
    1860:	65 91       	lpm	r22, Z+
    1862:	95 91       	lpm	r25, Z+
    1864:	05 90       	lpm	r0, Z+
    1866:	7f e2       	ldi	r23, 0x2F	; 47
    1868:	73 95       	inc	r23
    186a:	e1 18       	sub	r14, r1
    186c:	f1 0a       	sbc	r15, r17
    186e:	43 0b       	sbc	r20, r19
    1870:	56 0b       	sbc	r21, r22
    1872:	c9 0b       	sbc	r28, r25
    1874:	d0 09       	sbc	r29, r0
    1876:	c0 f7       	brcc	.-16     	; 0x1868 <__ftoa_engine+0x10a>
    1878:	e1 0c       	add	r14, r1
    187a:	f1 1e       	adc	r15, r17
    187c:	43 1f       	adc	r20, r19
    187e:	56 1f       	adc	r21, r22
    1880:	c9 1f       	adc	r28, r25
    1882:	d0 1d       	adc	r29, r0
    1884:	7e f4       	brtc	.+30     	; 0x18a4 <__ftoa_engine+0x146>
    1886:	70 33       	cpi	r23, 0x30	; 48
    1888:	11 f4       	brne	.+4      	; 0x188e <__ftoa_engine+0x130>
    188a:	8a 95       	dec	r24
    188c:	e6 cf       	rjmp	.-52     	; 0x185a <__ftoa_engine+0xfc>
    188e:	e8 94       	clt
    1890:	01 50       	subi	r16, 0x01	; 1
    1892:	30 f0       	brcs	.+12     	; 0x18a0 <__ftoa_engine+0x142>
    1894:	08 0f       	add	r16, r24
    1896:	0a f4       	brpl	.+2      	; 0x189a <__ftoa_engine+0x13c>
    1898:	00 27       	eor	r16, r16
    189a:	02 17       	cp	r16, r18
    189c:	08 f4       	brcc	.+2      	; 0x18a0 <__ftoa_engine+0x142>
    189e:	20 2f       	mov	r18, r16
    18a0:	23 95       	inc	r18
    18a2:	02 2f       	mov	r16, r18
    18a4:	7a 33       	cpi	r23, 0x3A	; 58
    18a6:	28 f0       	brcs	.+10     	; 0x18b2 <__ftoa_engine+0x154>
    18a8:	79 e3       	ldi	r23, 0x39	; 57
    18aa:	7d 93       	st	X+, r23
    18ac:	2a 95       	dec	r18
    18ae:	e9 f7       	brne	.-6      	; 0x18aa <__ftoa_engine+0x14c>
    18b0:	10 c0       	rjmp	.+32     	; 0x18d2 <__ftoa_engine+0x174>
    18b2:	7d 93       	st	X+, r23
    18b4:	2a 95       	dec	r18
    18b6:	89 f6       	brne	.-94     	; 0x185a <__ftoa_engine+0xfc>
    18b8:	06 94       	lsr	r0
    18ba:	97 95       	ror	r25
    18bc:	67 95       	ror	r22
    18be:	37 95       	ror	r19
    18c0:	17 95       	ror	r17
    18c2:	17 94       	ror	r1
    18c4:	e1 18       	sub	r14, r1
    18c6:	f1 0a       	sbc	r15, r17
    18c8:	43 0b       	sbc	r20, r19
    18ca:	56 0b       	sbc	r21, r22
    18cc:	c9 0b       	sbc	r28, r25
    18ce:	d0 09       	sbc	r29, r0
    18d0:	98 f0       	brcs	.+38     	; 0x18f8 <__ftoa_engine+0x19a>
    18d2:	23 95       	inc	r18
    18d4:	7e 91       	ld	r23, -X
    18d6:	73 95       	inc	r23
    18d8:	7a 33       	cpi	r23, 0x3A	; 58
    18da:	08 f0       	brcs	.+2      	; 0x18de <__ftoa_engine+0x180>
    18dc:	70 e3       	ldi	r23, 0x30	; 48
    18de:	7c 93       	st	X, r23
    18e0:	20 13       	cpse	r18, r16
    18e2:	b8 f7       	brcc	.-18     	; 0x18d2 <__ftoa_engine+0x174>
    18e4:	7e 91       	ld	r23, -X
    18e6:	70 61       	ori	r23, 0x10	; 16
    18e8:	7d 93       	st	X+, r23
    18ea:	30 f0       	brcs	.+12     	; 0x18f8 <__ftoa_engine+0x19a>
    18ec:	83 95       	inc	r24
    18ee:	71 e3       	ldi	r23, 0x31	; 49
    18f0:	7d 93       	st	X+, r23
    18f2:	70 e3       	ldi	r23, 0x30	; 48
    18f4:	2a 95       	dec	r18
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <__ftoa_engine+0x192>
    18f8:	11 24       	eor	r1, r1
    18fa:	ef 90       	pop	r14
    18fc:	ff 90       	pop	r15
    18fe:	0f 91       	pop	r16
    1900:	1f 91       	pop	r17
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	99 27       	eor	r25, r25
    1908:	87 fd       	sbrc	r24, 7
    190a:	90 95       	com	r25
    190c:	08 95       	ret

0000190e <strrev>:
    190e:	dc 01       	movw	r26, r24
    1910:	fc 01       	movw	r30, r24
    1912:	67 2f       	mov	r22, r23
    1914:	71 91       	ld	r23, Z+
    1916:	77 23       	and	r23, r23
    1918:	e1 f7       	brne	.-8      	; 0x1912 <strrev+0x4>
    191a:	32 97       	sbiw	r30, 0x02	; 2
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <strrev+0x18>
    191e:	7c 91       	ld	r23, X
    1920:	6d 93       	st	X+, r22
    1922:	70 83       	st	Z, r23
    1924:	62 91       	ld	r22, -Z
    1926:	ae 17       	cp	r26, r30
    1928:	bf 07       	cpc	r27, r31
    192a:	c8 f3       	brcs	.-14     	; 0x191e <strrev+0x10>
    192c:	08 95       	ret

0000192e <__mulsi3>:
    192e:	ee 27       	eor	r30, r30
    1930:	ff 27       	eor	r31, r31

00001932 <__mulsi3_helper>:
    1932:	aa 27       	eor	r26, r26
    1934:	bb 27       	eor	r27, r27
    1936:	08 c0       	rjmp	.+16     	; 0x1948 <__mulsi3_helper+0x16>
    1938:	a2 0f       	add	r26, r18
    193a:	b3 1f       	adc	r27, r19
    193c:	e4 1f       	adc	r30, r20
    193e:	f5 1f       	adc	r31, r21
    1940:	22 0f       	add	r18, r18
    1942:	33 1f       	adc	r19, r19
    1944:	44 1f       	adc	r20, r20
    1946:	55 1f       	adc	r21, r21
    1948:	96 95       	lsr	r25
    194a:	87 95       	ror	r24
    194c:	77 95       	ror	r23
    194e:	67 95       	ror	r22
    1950:	98 f3       	brcs	.-26     	; 0x1938 <__mulsi3_helper+0x6>
    1952:	70 40       	sbci	r23, 0x00	; 0
    1954:	a9 f7       	brne	.-22     	; 0x1940 <__mulsi3_helper+0xe>
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	99 f7       	brne	.-26     	; 0x1940 <__mulsi3_helper+0xe>
    195a:	bd 01       	movw	r22, r26
    195c:	cf 01       	movw	r24, r30
    195e:	08 95       	ret

00001960 <__prologue_saves__>:
    1960:	2f 92       	push	r2
    1962:	3f 92       	push	r3
    1964:	4f 92       	push	r4
    1966:	5f 92       	push	r5
    1968:	6f 92       	push	r6
    196a:	7f 92       	push	r7
    196c:	8f 92       	push	r8
    196e:	9f 92       	push	r9
    1970:	af 92       	push	r10
    1972:	bf 92       	push	r11
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	ca 1b       	sub	r28, r26
    198a:	db 0b       	sbc	r29, r27
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	09 94       	ijmp

00001998 <__epilogue_restores__>:
    1998:	2a 88       	ldd	r2, Y+18	; 0x12
    199a:	39 88       	ldd	r3, Y+17	; 0x11
    199c:	48 88       	ldd	r4, Y+16	; 0x10
    199e:	5f 84       	ldd	r5, Y+15	; 0x0f
    19a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    19a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    19a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    19a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    19a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    19aa:	b9 84       	ldd	r11, Y+9	; 0x09
    19ac:	c8 84       	ldd	r12, Y+8	; 0x08
    19ae:	df 80       	ldd	r13, Y+7	; 0x07
    19b0:	ee 80       	ldd	r14, Y+6	; 0x06
    19b2:	fd 80       	ldd	r15, Y+5	; 0x05
    19b4:	0c 81       	ldd	r16, Y+4	; 0x04
    19b6:	1b 81       	ldd	r17, Y+3	; 0x03
    19b8:	aa 81       	ldd	r26, Y+2	; 0x02
    19ba:	b9 81       	ldd	r27, Y+1	; 0x01
    19bc:	ce 0f       	add	r28, r30
    19be:	d1 1d       	adc	r29, r1
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	ed 01       	movw	r28, r26
    19cc:	08 95       	ret

000019ce <_exit>:
    19ce:	f8 94       	cli

000019d0 <__stop_program>:
    19d0:	ff cf       	rjmp	.-2      	; 0x19d0 <__stop_program>
